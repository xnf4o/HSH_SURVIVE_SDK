#include "pch.h"
#include "CppUnitTest.h"
#include "SDK.h"

using namespace Microsoft::VisualStudio::CppUnitTestFramework;

#define CHEAT_GEAR_CHECK_OFFSET(targetClass, varName, expectedOffset) \
	Assert::AreEqual(uint32_t(expectedOffset), uint32_t(offsetof(targetClass, varName)), L#targetClass" -> "#varName".")

#define CHEAT_GEAR_CHECK_SIZE(targetClass, expectedSize) \
	Assert::AreEqual(uint32_t(expectedSize), uint32_t(sizeof(targetClass)), L#targetClass" Has a wrong size.")

namespace CheatGearCppUnitTests
{
	TEST_CLASS(CheatGear)
	{
	public:

		// class UGE_WeaponSurvivorChaplet_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_WeaponSurvivorChaplet__GE_WeaponSurvivorChaplet_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_WeaponSurvivorChaplet_C, 0x05F8);
		}

		// class UIngame_Survivor_PC1_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Ingame_Survivor_PC1__Ingame_Survivor_PC1_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Survivor_PC1_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Survivor_PC1_C, HPAlert, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Survivor_PC1_C, Zoom, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Survivor_PC1_C, ShowTutorial, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Survivor_PC1_C, ShowGuide, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Survivor_PC1_C, ScreenFXAnimation, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Survivor_PC1_C, Fade, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Survivor_PC1_C, CanvasPanel_1, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Survivor_PC1_C, CrosshairBase, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Survivor_PC1_C, CrosshairItem, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Survivor_PC1_C, GuideBackground, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Survivor_PC1_C, HPBorder, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Survivor_PC1_C, HPIcon, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Survivor_PC1_C, HPProgress, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Survivor_PC1_C, Image_224, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Survivor_PC1_C, Image_interact, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Survivor_PC1_C, Ingame_PingPanel, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Survivor_PC1_C, Ingame_Quest, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Survivor_PC1_C, Ingame_Tutorial, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Survivor_PC1_C, InteractPanel, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Survivor_PC1_C, KeyIMG, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Survivor_PC1_C, Overlay_1, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Survivor_PC1_C, ScreenFX, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Survivor_PC1_C, StaminaBorder, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Survivor_PC1_C, StaminaIcon, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Survivor_PC1_C, STAProgress, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Survivor_PC1_C, Template, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Survivor_PC1_C, TextBlock_Interact, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Survivor_PC1_C, TextBlock_SuddenDeath, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Survivor_PC1_C, TutorialPanel, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Survivor_PC1_C, Widget_ImageItem, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Survivor_PC1_C, Widget_ImagePerk_2, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Survivor_PC1_C, Widget_ImagePerk_3, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Survivor_PC1_C, Widget_ImagePerk_Unique, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Survivor_PC1_C, HaveItem_, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Survivor_PC1_C, FoundInteract_, 0x0359);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Survivor_PC1_C, UnknownData_RY5G, 0x035A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Survivor_PC1_C, TutorialIngame, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Survivor_PC1_C, IsAim_, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Survivor_PC1_C, UnknownData_KMNL, 0x0369);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Survivor_PC1_C, CurrentSTA, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Survivor_PC1_C, CurrentHP, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Survivor_PC1_C, UnknownData_MT1M, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Survivor_PC1_C, HPDynamicInstance, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Survivor_PC1_C, STADynamicInstance, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Survivor_PC1_C, playerData, 0x0388);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIngame_Survivor_PC1_C, 0x0390);
		}

		// class UPickableConditionBase_C : public UObject
		TEST_METHOD(BlueprintGeneratedClass__PickableConditionBase__PickableConditionBase_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPickableConditionBase_C, 0x0030);
		}

		// class UIDestructible_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__IDestructible__IDestructible_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIDestructible_C, 0x0030);
		}

		// class UAbilitySystemBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__GameplayAbilities__AbilitySystemBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilitySystemBlueprintLibrary, 0x0030);
		}

		// class UAbilitySystemComponent : public UGameplayTasksComponent
		TEST_METHOD(Class__GameplayAbilities__AbilitySystemComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, UnknownData_QA6D, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, DefaultStartingData, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, SpawnedAttributes, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, UnknownData_CXZF, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, OutgoingDuration, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, IncomingDuration, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, UnknownData_3GAV, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, ClientDebugStrings, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, ServerDebugStrings, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, UnknownData_LZO6, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, UserAbilityActivationInhibited, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, ReplicationProxyEnabled, 0x0401);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, bSuppressGrantAbility, 0x0402);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, bSuppressGameplayCues, 0x0403);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, UnknownData_R4M2, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, SpawnedTargetActors, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, UnknownData_3UZB, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, OwnerActor, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, AvatarActor, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, UnknownData_0U3U, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, ActivatableAbilities, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, UnknownData_8HWT, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, AllReplicatedInstancedAbilities, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, UnknownData_116M, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, RepAnimMontageInfo, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, bCachedIsNetSimulated, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, bPendingMontageRep, 0x0769);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, UnknownData_DZXJ, 0x076A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, LocalAnimMontageInfo, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, UnknownData_QETB, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, ActiveGameplayEffects, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, ActiveGameplayCues, 0x0C78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, MinimalReplicationGameplayCues, 0x0D48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, UnknownData_FIT3, 0x0E18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, BlockedAbilityBindings, 0x0F40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, UnknownData_NCLN, 0x0F50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, MinimalReplicationTags, 0x1078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, UnknownData_MOO5, 0x10D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, ReplicatedPredictionKeyMap, 0x10E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilitySystemComponent, 0x11A8);
		}

		// class AAbilitySystemDebugHUD : public AHUD
		TEST_METHOD(Class__GameplayAbilities__AbilitySystemDebugHUD)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAbilitySystemDebugHUD, 0x0428);
		}

		// class UAbilitySystemGlobals : public UObject
		TEST_METHOD(Class__GameplayAbilities__AbilitySystemGlobals)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemGlobals, AbilitySystemGlobalsClassName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemGlobals, UnknownData_BY6R, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemGlobals, ActivateFailIsDeadTag, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemGlobals, ActivateFailIsDeadName, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemGlobals, ActivateFailCooldownTag, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemGlobals, ActivateFailCooldownName, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemGlobals, ActivateFailCostTag, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemGlobals, ActivateFailCostName, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemGlobals, ActivateFailTagsBlockedTag, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemGlobals, ActivateFailTagsBlockedName, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemGlobals, ActivateFailTagsMissingTag, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemGlobals, ActivateFailTagsMissingName, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemGlobals, ActivateFailNetworkingTag, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemGlobals, ActivateFailNetworkingName, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemGlobals, MinimalReplicationTagCountBits, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemGlobals, UnknownData_BAH5, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemGlobals, bAllowGameplayModEvaluationChannels, 0x00D6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemGlobals, DefaultGameplayModEvaluationChannel, 0x00D7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemGlobals, GameplayModEvaluationChannelAliases, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemGlobals, GlobalCurveTableName, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemGlobals, GlobalCurveTable, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemGlobals, GlobalAttributeMetaDataTableName, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemGlobals, GlobalAttributeMetaDataTable, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemGlobals, GlobalAttributeSetDefaultsTableName, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemGlobals, GlobalAttributeSetDefaultsTableNames, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemGlobals, GlobalAttributeDefaultsTables, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemGlobals, GlobalGameplayCueManagerClass, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemGlobals, GlobalGameplayCueManagerName, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemGlobals, GameplayCueNotifyPaths, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemGlobals, GameplayTagResponseTableName, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemGlobals, GameplayTagResponseTable, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemGlobals, PredictTargetGameplayEffects, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemGlobals, UnknownData_6JHM, 0x0201);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemGlobals, GlobalGameplayCueManager, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemGlobals, UnknownData_MABI, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilitySystemGlobals, 0x0250);
		}

		// class UAbilitySystemInterface : public UInterface
		TEST_METHOD(Class__GameplayAbilities__AbilitySystemInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilitySystemInterface, 0x0030);
		}

		// class UAbilitySystemReplicationProxyInterface : public UInterface
		TEST_METHOD(Class__GameplayAbilities__AbilitySystemReplicationProxyInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilitySystemReplicationProxyInterface, 0x0030);
		}

		// class UAttributeSet : public UObject
		TEST_METHOD(Class__GameplayAbilities__AttributeSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttributeSet, UnknownData_MFPK, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAttributeSet, 0x0038);
		}

		// class UAbilitySystemTestAttributeSet : public UAttributeSet
		TEST_METHOD(Class__GameplayAbilities__AbilitySystemTestAttributeSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemTestAttributeSet, MaxHealth, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemTestAttributeSet, Health, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemTestAttributeSet, Mana, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemTestAttributeSet, MaxMana, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemTestAttributeSet, Damage, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemTestAttributeSet, SpellDamage, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemTestAttributeSet, PhysicalDamage, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemTestAttributeSet, CritChance, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemTestAttributeSet, CritMultiplier, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemTestAttributeSet, ArmorDamageReduction, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemTestAttributeSet, DodgeChance, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemTestAttributeSet, LifeSteal, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemTestAttributeSet, Strength, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemTestAttributeSet, StackingAttribute1, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemTestAttributeSet, StackingAttribute2, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemTestAttributeSet, NoStackAttribute, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilitySystemTestAttributeSet, 0x0078);
		}

		// class AAbilitySystemTestPawn : public ADefaultPawn
		TEST_METHOD(Class__GameplayAbilities__AbilitySystemTestPawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbilitySystemTestPawn, UnknownData_76RY, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbilitySystemTestPawn, AbilitySystemComponent, 0x03D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAbilitySystemTestPawn, 0x03E0);
		}

		// class UAbilityTask : public UGameplayTask
		TEST_METHOD(Class__GameplayAbilities__AbilityTask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask, Ability, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask, AbilitySystemComponent, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask, UnknownData_O9AL, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask, 0x0098);
		}

		// class UAbilityTask_ApplyRootMotion_Base : public UAbilityTask
		TEST_METHOD(Class__GameplayAbilities__AbilityTask_ApplyRootMotion_Base)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotion_Base, ForceName, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotion_Base, FinishVelocityMode, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotion_Base, UnknownData_D7KX, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotion_Base, FinishSetVelocity, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotion_Base, FinishClampVelocity, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotion_Base, UnknownData_GOKP, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotion_Base, MovementComponent, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotion_Base, UnknownData_ZVMV, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask_ApplyRootMotion_Base, 0x00D0);
		}

		// class UAbilityTask_ApplyRootMotionConstantForce : public UAbilityTask_ApplyRootMotion_Base
		TEST_METHOD(Class__GameplayAbilities__AbilityTask_ApplyRootMotionConstantForce)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionConstantForce, OnFinish, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionConstantForce, WorldDirection, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionConstantForce, Strength, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionConstantForce, Duration, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionConstantForce, bIsAdditive, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionConstantForce, UnknownData_GHP5, 0x00F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionConstantForce, StrengthOverTime, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask_ApplyRootMotionConstantForce, 0x0100);
		}

		// class UAbilityTask_ApplyRootMotionJumpForce : public UAbilityTask_ApplyRootMotion_Base
		TEST_METHOD(Class__GameplayAbilities__AbilityTask_ApplyRootMotionJumpForce)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionJumpForce, OnFinish, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionJumpForce, OnLanded, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionJumpForce, Rotation, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionJumpForce, Distance, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionJumpForce, Height, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionJumpForce, Duration, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionJumpForce, MinimumLandedTriggerTime, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionJumpForce, bFinishOnLanded, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionJumpForce, UnknownData_1ILX, 0x010D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionJumpForce, PathOffsetCurve, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionJumpForce, TimeMappingCurve, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionJumpForce, UnknownData_DGV9, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask_ApplyRootMotionJumpForce, 0x0128);
		}

		// class UAbilityTask_ApplyRootMotionMoveToActorForce : public UAbilityTask_ApplyRootMotion_Base
		TEST_METHOD(Class__GameplayAbilities__AbilityTask_ApplyRootMotionMoveToActorForce)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionMoveToActorForce, OnFinished, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionMoveToActorForce, UnknownData_ITVV, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionMoveToActorForce, StartLocation, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionMoveToActorForce, TargetLocation, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionMoveToActorForce, TargetActor, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionMoveToActorForce, TargetLocationOffset, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionMoveToActorForce, OffsetAlignment, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionMoveToActorForce, UnknownData_KALC, 0x0115);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionMoveToActorForce, Duration, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionMoveToActorForce, bDisableDestinationReachedInterrupt, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionMoveToActorForce, bSetNewMovementMode, 0x011D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionMoveToActorForce, NewMovementMode, 0x011E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionMoveToActorForce, bRestrictSpeedToExpected, 0x011F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionMoveToActorForce, PathOffsetCurve, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionMoveToActorForce, TimeMappingCurve, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionMoveToActorForce, TargetLerpSpeedHorizontalCurve, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionMoveToActorForce, TargetLerpSpeedVerticalCurve, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionMoveToActorForce, UnknownData_ZG89, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask_ApplyRootMotionMoveToActorForce, 0x0148);
		}

		// class UAbilityTask_ApplyRootMotionMoveToForce : public UAbilityTask_ApplyRootMotion_Base
		TEST_METHOD(Class__GameplayAbilities__AbilityTask_ApplyRootMotionMoveToForce)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionMoveToForce, OnTimedOut, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionMoveToForce, OnTimedOutAndDestinationReached, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionMoveToForce, StartLocation, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionMoveToForce, TargetLocation, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionMoveToForce, Duration, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionMoveToForce, bSetNewMovementMode, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionMoveToForce, NewMovementMode, 0x010D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionMoveToForce, bRestrictSpeedToExpected, 0x010E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionMoveToForce, UnknownData_8UWK, 0x010F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionMoveToForce, PathOffsetCurve, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionMoveToForce, UnknownData_0K62, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask_ApplyRootMotionMoveToForce, 0x0120);
		}

		// class UAbilityTask_ApplyRootMotionRadialForce : public UAbilityTask_ApplyRootMotion_Base
		TEST_METHOD(Class__GameplayAbilities__AbilityTask_ApplyRootMotionRadialForce)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionRadialForce, OnFinish, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionRadialForce, Location, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionRadialForce, UnknownData_ADXI, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionRadialForce, LocationActor, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionRadialForce, Strength, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionRadialForce, Duration, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionRadialForce, Radius, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionRadialForce, bIsPush, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionRadialForce, bIsAdditive, 0x0105);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionRadialForce, bNoZForce, 0x0106);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionRadialForce, UnknownData_W0NC, 0x0107);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionRadialForce, StrengthDistanceFalloff, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionRadialForce, StrengthOverTime, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionRadialForce, bUseFixedWorldDirection, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionRadialForce, UnknownData_4SKZ, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionRadialForce, FixedWorldDirection, 0x011C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask_ApplyRootMotionRadialForce, 0x0128);
		}

		// class UAbilityTask_MoveToLocation : public UAbilityTask
		TEST_METHOD(Class__GameplayAbilities__AbilityTask_MoveToLocation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_MoveToLocation, OnTargetLocationReached, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_MoveToLocation, UnknownData_1Q7V, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_MoveToLocation, StartLocation, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_MoveToLocation, TargetLocation, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_MoveToLocation, DurationOfMovement, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_MoveToLocation, UnknownData_EDSZ, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_MoveToLocation, LerpCurve, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_MoveToLocation, LerpCurveVector, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask_MoveToLocation, 0x00E0);
		}

		// class UAbilityTask_NetworkSyncPoint : public UAbilityTask
		TEST_METHOD(Class__GameplayAbilities__AbilityTask_NetworkSyncPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_NetworkSyncPoint, OnSync, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_NetworkSyncPoint, UnknownData_DK97, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask_NetworkSyncPoint, 0x00B0);
		}

		// class UAbilityTask_PlayMontageAndWait : public UAbilityTask
		TEST_METHOD(Class__GameplayAbilities__AbilityTask_PlayMontageAndWait)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_PlayMontageAndWait, OnCompleted, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_PlayMontageAndWait, OnBlendOut, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_PlayMontageAndWait, OnInterrupted, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_PlayMontageAndWait, OnCancelled, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_PlayMontageAndWait, UnknownData_2FX0, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_PlayMontageAndWait, MontageToPlay, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_PlayMontageAndWait, Rate, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_PlayMontageAndWait, StartSection, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_PlayMontageAndWait, AnimRootMotionTranslationScale, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_PlayMontageAndWait, bStopWhenAbilityEnds, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_PlayMontageAndWait, UnknownData_NAMO, 0x0119);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask_PlayMontageAndWait, 0x0120);
		}

		// class UAbilityTask_Repeat : public UAbilityTask
		TEST_METHOD(Class__GameplayAbilities__AbilityTask_Repeat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_Repeat, OnPerformAction, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_Repeat, OnFinished, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_Repeat, UnknownData_KF9Z, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask_Repeat, 0x00D0);
		}

		// class UAbilityTask_SpawnActor : public UAbilityTask
		TEST_METHOD(Class__GameplayAbilities__AbilityTask_SpawnActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_SpawnActor, Success, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_SpawnActor, DidNotSpawn, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_SpawnActor, UnknownData_TCE3, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask_SpawnActor, 0x00D8);
		}

		// class UAbilityTask_StartAbilityState : public UAbilityTask
		TEST_METHOD(Class__GameplayAbilities__AbilityTask_StartAbilityState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_StartAbilityState, OnStateEnded, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_StartAbilityState, OnStateInterrupted, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_StartAbilityState, UnknownData_VGC3, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask_StartAbilityState, 0x00D0);
		}

		// class UAbilityTask_VisualizeTargeting : public UAbilityTask
		TEST_METHOD(Class__GameplayAbilities__AbilityTask_VisualizeTargeting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_VisualizeTargeting, TimeElapsed, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_VisualizeTargeting, UnknownData_ABYS, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask_VisualizeTargeting, 0x00C0);
		}

		// class UAbilityTask_WaitAbilityActivate : public UAbilityTask
		TEST_METHOD(Class__GameplayAbilities__AbilityTask_WaitAbilityActivate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitAbilityActivate, OnActivate, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitAbilityActivate, UnknownData_WAFW, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask_WaitAbilityActivate, 0x0150);
		}

		// class UAbilityTask_WaitAbilityCommit : public UAbilityTask
		TEST_METHOD(Class__GameplayAbilities__AbilityTask_WaitAbilityCommit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitAbilityCommit, OnCommit, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitAbilityCommit, UnknownData_D0QQ, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask_WaitAbilityCommit, 0x0110);
		}

		// class UAbilityTask_WaitAttributeChange : public UAbilityTask
		TEST_METHOD(Class__GameplayAbilities__AbilityTask_WaitAttributeChange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitAttributeChange, OnChange, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitAttributeChange, UnknownData_DWZ3, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitAttributeChange, ExternalOwner, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask_WaitAttributeChange, 0x00F8);
		}

		// class UAbilityTask_WaitAttributeChangeRatioThreshold : public UAbilityTask
		TEST_METHOD(Class__GameplayAbilities__AbilityTask_WaitAttributeChangeRatioThreshold)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitAttributeChangeRatioThreshold, OnChange, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitAttributeChangeRatioThreshold, UnknownData_G6PW, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitAttributeChangeRatioThreshold, ExternalOwner, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask_WaitAttributeChangeRatioThreshold, 0x0128);
		}

		// class UAbilityTask_WaitAttributeChangeThreshold : public UAbilityTask
		TEST_METHOD(Class__GameplayAbilities__AbilityTask_WaitAttributeChangeThreshold)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitAttributeChangeThreshold, OnChange, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitAttributeChangeThreshold, UnknownData_QICC, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitAttributeChangeThreshold, ExternalOwner, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask_WaitAttributeChangeThreshold, 0x00F0);
		}

		// class UAbilityTask_WaitCancel : public UAbilityTask
		TEST_METHOD(Class__GameplayAbilities__AbilityTask_WaitCancel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitCancel, OnCancel, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitCancel, UnknownData_9YE6, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask_WaitCancel, 0x00B0);
		}

		// class UAbilityTask_WaitConfirm : public UAbilityTask
		TEST_METHOD(Class__GameplayAbilities__AbilityTask_WaitConfirm)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitConfirm, OnConfirm, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitConfirm, UnknownData_IG70, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask_WaitConfirm, 0x00B8);
		}

		// class UAbilityTask_WaitConfirmCancel : public UAbilityTask
		TEST_METHOD(Class__GameplayAbilities__AbilityTask_WaitConfirmCancel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitConfirmCancel, OnConfirm, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitConfirmCancel, OnCancel, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitConfirmCancel, UnknownData_REEM, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask_WaitConfirmCancel, 0x00C0);
		}

		// class UAbilityTask_WaitDelay : public UAbilityTask
		TEST_METHOD(Class__GameplayAbilities__AbilityTask_WaitDelay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitDelay, OnFinish, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitDelay, UnknownData_5ZWC, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask_WaitDelay, 0x00B0);
		}

		// class UAbilityTask_WaitGameplayEffectApplied : public UAbilityTask
		TEST_METHOD(Class__GameplayAbilities__AbilityTask_WaitGameplayEffectApplied)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitGameplayEffectApplied, UnknownData_QKV3, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitGameplayEffectApplied, ExternalOwner, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitGameplayEffectApplied, UnknownData_WX08, 0x01C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask_WaitGameplayEffectApplied, 0x01D0);
		}

		// class UAbilityTask_WaitGameplayEffectApplied_Self : public UAbilityTask_WaitGameplayEffectApplied
		TEST_METHOD(Class__GameplayAbilities__AbilityTask_WaitGameplayEffectApplied_Self)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitGameplayEffectApplied_Self, OnApplied, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitGameplayEffectApplied_Self, UnknownData_RIWE, 0x01E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask_WaitGameplayEffectApplied_Self, 0x01F0);
		}

		// class UAbilityTask_WaitGameplayEffectApplied_Target : public UAbilityTask_WaitGameplayEffectApplied
		TEST_METHOD(Class__GameplayAbilities__AbilityTask_WaitGameplayEffectApplied_Target)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitGameplayEffectApplied_Target, OnApplied, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitGameplayEffectApplied_Target, UnknownData_WCCO, 0x01E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask_WaitGameplayEffectApplied_Target, 0x01F0);
		}

		// class UAbilityTask_WaitGameplayEffectBlockedImmunity : public UAbilityTask
		TEST_METHOD(Class__GameplayAbilities__AbilityTask_WaitGameplayEffectBlockedImmunity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitGameplayEffectBlockedImmunity, Blocked, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitGameplayEffectBlockedImmunity, UnknownData_8DWD, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitGameplayEffectBlockedImmunity, ExternalOwner, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitGameplayEffectBlockedImmunity, UnknownData_D2R7, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask_WaitGameplayEffectBlockedImmunity, 0x0140);
		}

		// class UAbilityTask_WaitGameplayEffectRemoved : public UAbilityTask
		TEST_METHOD(Class__GameplayAbilities__AbilityTask_WaitGameplayEffectRemoved)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitGameplayEffectRemoved, OnRemoved, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitGameplayEffectRemoved, InvalidHandle, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitGameplayEffectRemoved, UnknownData_C0N1, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask_WaitGameplayEffectRemoved, 0x00D8);
		}

		// class UAbilityTask_WaitGameplayEffectStackChange : public UAbilityTask
		TEST_METHOD(Class__GameplayAbilities__AbilityTask_WaitGameplayEffectStackChange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitGameplayEffectStackChange, OnChange, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitGameplayEffectStackChange, InvalidHandle, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitGameplayEffectStackChange, UnknownData_NRN9, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask_WaitGameplayEffectStackChange, 0x00D0);
		}

		// class UAbilityTask_WaitGameplayEvent : public UAbilityTask
		TEST_METHOD(Class__GameplayAbilities__AbilityTask_WaitGameplayEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitGameplayEvent, EventReceived, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitGameplayEvent, UnknownData_9HP1, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitGameplayEvent, OptionalExternalTarget, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitGameplayEvent, UnknownData_MSN7, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask_WaitGameplayEvent, 0x00C8);
		}

		// class UAbilityTask_WaitGameplayTag : public UAbilityTask
		TEST_METHOD(Class__GameplayAbilities__AbilityTask_WaitGameplayTag)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitGameplayTag, UnknownData_84RG, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitGameplayTag, OptionalExternalTarget, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitGameplayTag, UnknownData_LAKC, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask_WaitGameplayTag, 0x00C0);
		}

		// class UAbilityTask_WaitGameplayTagAdded : public UAbilityTask_WaitGameplayTag
		TEST_METHOD(Class__GameplayAbilities__AbilityTask_WaitGameplayTagAdded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitGameplayTagAdded, Added, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask_WaitGameplayTagAdded, 0x00D0);
		}

		// class UAbilityTask_WaitGameplayTagRemoved : public UAbilityTask_WaitGameplayTag
		TEST_METHOD(Class__GameplayAbilities__AbilityTask_WaitGameplayTagRemoved)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitGameplayTagRemoved, Removed, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask_WaitGameplayTagRemoved, 0x00D0);
		}

		// class UAbilityTask_WaitInputPress : public UAbilityTask
		TEST_METHOD(Class__GameplayAbilities__AbilityTask_WaitInputPress)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitInputPress, OnPress, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitInputPress, UnknownData_6XFB, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask_WaitInputPress, 0x00B8);
		}

		// class UAbilityTask_WaitInputRelease : public UAbilityTask
		TEST_METHOD(Class__GameplayAbilities__AbilityTask_WaitInputRelease)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitInputRelease, OnRelease, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitInputRelease, UnknownData_0C7O, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask_WaitInputRelease, 0x00B8);
		}

		// class UAbilityTask_WaitMovementModeChange : public UAbilityTask
		TEST_METHOD(Class__GameplayAbilities__AbilityTask_WaitMovementModeChange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitMovementModeChange, OnChange, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitMovementModeChange, UnknownData_S3RD, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask_WaitMovementModeChange, 0x00B8);
		}

		// class UAbilityTask_WaitOverlap : public UAbilityTask
		TEST_METHOD(Class__GameplayAbilities__AbilityTask_WaitOverlap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitOverlap, OnOverlap, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask_WaitOverlap, 0x00A8);
		}

		// class UAbilityTask_WaitTargetData : public UAbilityTask
		TEST_METHOD(Class__GameplayAbilities__AbilityTask_WaitTargetData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitTargetData, ValidData, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitTargetData, Cancelled, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitTargetData, TargetClass, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitTargetData, TargetActor, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitTargetData, UnknownData_VAIC, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask_WaitTargetData, 0x00D8);
		}

		// class UAbilityTask_WaitVelocityChange : public UAbilityTask
		TEST_METHOD(Class__GameplayAbilities__AbilityTask_WaitVelocityChange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitVelocityChange, OnVelocityChage, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitVelocityChange, CachedMovementComponent, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitVelocityChange, UnknownData_18A1, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask_WaitVelocityChange, 0x00C0);
		}

		// class UGameplayAbility : public UObject
		TEST_METHOD(Class__GameplayAbilities__GameplayAbility)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility, UnknownData_HJ48, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility, AbilityTags, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility, bReplicateInputDirectly, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility, RemoteInstanceEnded, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility, UnknownData_1G7C, 0x00D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility, ReplicationPolicy, 0x00D6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility, InstancingPolicy, 0x00D7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility, bServerRespectsRemoteAbilityCancellation, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility, bRetriggerInstancedAbility, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility, UnknownData_KE3A, 0x00DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility, CurrentActivationInfo, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility, CurrentEventData, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility, NetExecutionPolicy, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility, UnknownData_BZFD, 0x01A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility, CostGameplayEffectClass, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility, AbilityTriggers, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility, CooldownGameplayEffectClass, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility, CancelAbilitiesMatchingTagQuery, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility, CancelAbilitiesWithTag, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility, BlockAbilitiesWithTag, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility, ActivationOwnedTags, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility, ActivationRequiredTags, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility, ActivationBlockedTags, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility, SourceRequiredTags, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility, SourceBlockedTags, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility, TargetRequiredTags, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility, TargetBlockedTags, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility, UnknownData_QDQA, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility, ActiveTasks, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility, UnknownData_UJIZ, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility, CurrentMontage, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility, UnknownData_YCIL, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility, bIsActive, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility, bIsCancelable, 0x03E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility, bIsBlockingOtherAbilities, 0x03E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility, UnknownData_0VJK, 0x03E3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility, bMarkPendingKillOnAbilityEnd, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility, UnknownData_6J76, 0x03F9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayAbility, 0x0400);
		}

		// class UGameplayAbility_CharacterJump : public UGameplayAbility
		TEST_METHOD(Class__GameplayAbilities__GameplayAbility_CharacterJump)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayAbility_CharacterJump, 0x0400);
		}

		// class UGameplayAbility_Montage : public UGameplayAbility
		TEST_METHOD(Class__GameplayAbilities__GameplayAbility_Montage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility_Montage, MontageToPlay, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility_Montage, PlayRate, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility_Montage, SectionName, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility_Montage, UnknownData_FHUW, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility_Montage, GameplayEffectClassesWhileAnimating, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility_Montage, GameplayEffectsWhileAnimating, 0x0428);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayAbility_Montage, 0x0438);
		}

		// class UGameplayAbilityBlueprint : public UBlueprint
		TEST_METHOD(Class__GameplayAbilities__GameplayAbilityBlueprint)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayAbilityBlueprint, 0x00E0);
		}

		// class UGameplayAbilitySet : public UDataAsset
		TEST_METHOD(Class__GameplayAbilities__GameplayAbilitySet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbilitySet, Abilities, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayAbilitySet, 0x0048);
		}

		// class AGameplayAbilityTargetActor : public AActor
		TEST_METHOD(Class__GameplayAbilities__GameplayAbilityTargetActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayAbilityTargetActor, ShouldProduceTargetDataOnServer, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayAbilityTargetActor, UnknownData_8VMY, 0x0339);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayAbilityTargetActor, StartLocation, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayAbilityTargetActor, UnknownData_5SE2, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayAbilityTargetActor, MasterPC, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayAbilityTargetActor, OwningAbility, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayAbilityTargetActor, bDestroyOnConfirmation, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayAbilityTargetActor, UnknownData_1I7I, 0x03F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayAbilityTargetActor, SourceActor, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayAbilityTargetActor, ReticleParams, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayAbilityTargetActor, UnknownData_T4ZE, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayAbilityTargetActor, ReticleClass, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayAbilityTargetActor, Filter, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayAbilityTargetActor, bDebug, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayAbilityTargetActor, UnknownData_HN9Z, 0x0429);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayAbilityTargetActor, GenericDelegateBoundASC, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayAbilityTargetActor, UnknownData_IJWE, 0x0448);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameplayAbilityTargetActor, 0x044C);
		}

		// class AGameplayAbilityTargetActor_Trace : public AGameplayAbilityTargetActor
		TEST_METHOD(Class__GameplayAbilities__GameplayAbilityTargetActor_Trace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayAbilityTargetActor_Trace, TraceProfile, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayAbilityTargetActor_Trace, bTraceAffectsAimPitch, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayAbilityTargetActor_Trace, UnknownData_M6LX, 0x0455);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameplayAbilityTargetActor_Trace, 0x0460);
		}

		// class AGameplayAbilityTargetActor_GroundTrace : public AGameplayAbilityTargetActor_Trace
		TEST_METHOD(Class__GameplayAbilities__GameplayAbilityTargetActor_GroundTrace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayAbilityTargetActor_GroundTrace, CollisionRadius, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayAbilityTargetActor_GroundTrace, CollisionHeight, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayAbilityTargetActor_GroundTrace, UnknownData_GBB3, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameplayAbilityTargetActor_GroundTrace, 0x0480);
		}

		// class AGameplayAbilityTargetActor_ActorPlacement : public AGameplayAbilityTargetActor_GroundTrace
		TEST_METHOD(Class__GameplayAbilities__GameplayAbilityTargetActor_ActorPlacement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayAbilityTargetActor_ActorPlacement, PlacedActorClass, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayAbilityTargetActor_ActorPlacement, PlacedActorMaterial, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayAbilityTargetActor_ActorPlacement, UnknownData_N15W, 0x0490);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameplayAbilityTargetActor_ActorPlacement, 0x04A0);
		}

		// class AGameplayAbilityTargetActor_Radius : public AGameplayAbilityTargetActor
		TEST_METHOD(Class__GameplayAbilities__GameplayAbilityTargetActor_Radius)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayAbilityTargetActor_Radius, UnknownData_Z1AF, 0x044C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameplayAbilityTargetActor_Radius, 0x0450);
		}

		// class AGameplayAbilityTargetActor_SingleLineTrace : public AGameplayAbilityTargetActor_Trace
		TEST_METHOD(Class__GameplayAbilities__GameplayAbilityTargetActor_SingleLineTrace)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameplayAbilityTargetActor_SingleLineTrace, 0x0460);
		}

		// class AGameplayAbilityWorldReticle : public AActor
		TEST_METHOD(Class__GameplayAbilities__GameplayAbilityWorldReticle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayAbilityWorldReticle, Parameters, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayAbilityWorldReticle, bFaceOwnerFlat, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayAbilityWorldReticle, bSnapToTargetedActor, 0x0345);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayAbilityWorldReticle, bIsTargetValid, 0x0346);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayAbilityWorldReticle, bIsTargetAnActor, 0x0347);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayAbilityWorldReticle, MasterPC, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayAbilityWorldReticle, TargetingActor, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameplayAbilityWorldReticle, 0x0358);
		}

		// class AGameplayAbilityWorldReticle_ActorVisualization : public AGameplayAbilityWorldReticle
		TEST_METHOD(Class__GameplayAbilities__GameplayAbilityWorldReticle_ActorVisualization)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayAbilityWorldReticle_ActorVisualization, CollisionComponent, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayAbilityWorldReticle_ActorVisualization, VisualizationComponents, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameplayAbilityWorldReticle_ActorVisualization, 0x0370);
		}

		// class UGameplayCueInterface : public UInterface
		TEST_METHOD(Class__GameplayAbilities__GameplayCueInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayCueInterface, 0x0030);
		}

		// class UGameplayCueManager : public UDataAsset
		TEST_METHOD(Class__GameplayAbilities__GameplayCueManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayCueManager, UnknownData_BZ3M, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayCueManager, RuntimeGameplayCueObjectLibrary, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayCueManager, EditorGameplayCueObjectLibrary, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayCueManager, UnknownData_U4AC, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayCueManager, LoadedGameplayCueNotifyClasses, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayCueManager, GameplayCueClassesForPreallocation, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayCueManager, PendingExecuteCues, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayCueManager, GameplayCueSendContextCount, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayCueManager, UnknownData_0QZ8, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayCueManager, PreallocationInfoList_Internal, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayCueManager, UnknownData_S70Y, 0x02F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayCueManager, 0x0308);
		}

		// class AGameplayCueNotify_Actor : public AActor
		TEST_METHOD(Class__GameplayAbilities__GameplayCueNotify_Actor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayCueNotify_Actor, bAutoDestroyOnRemove, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayCueNotify_Actor, UnknownData_3D69, 0x0339);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayCueNotify_Actor, AutoDestroyDelay, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayCueNotify_Actor, WarnIfTimelineIsStillRunning, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayCueNotify_Actor, WarnIfLatentActionIsStillRunning, 0x0341);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayCueNotify_Actor, UnknownData_BGZD, 0x0342);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayCueNotify_Actor, GameplayCueTag, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayCueNotify_Actor, UnknownData_MWB6, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayCueNotify_Actor, ReferenceHelper, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayCueNotify_Actor, GameplayCueName, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayCueNotify_Actor, bAutoAttachToOwner, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayCueNotify_Actor, IsOverride, 0x0369);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayCueNotify_Actor, bUniqueInstancePerInstigator, 0x036A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayCueNotify_Actor, bUniqueInstancePerSourceObject, 0x036B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayCueNotify_Actor, bAllowMultipleOnActiveEvents, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayCueNotify_Actor, bAllowMultipleWhileActiveEvents, 0x036D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayCueNotify_Actor, UnknownData_YG3S, 0x036E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayCueNotify_Actor, NumPreallocatedInstances, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayCueNotify_Actor, UnknownData_CEE8, 0x0374);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameplayCueNotify_Actor, 0x03A8);
		}

		// class UGameplayCueNotify_Static : public UObject
		TEST_METHOD(Class__GameplayAbilities__GameplayCueNotify_Static)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayCueNotify_Static, GameplayCueTag, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayCueNotify_Static, ReferenceHelper, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayCueNotify_Static, GameplayCueName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayCueNotify_Static, IsOverride, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayCueNotify_Static, UnknownData_V0ZE, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayCueNotify_Static, 0x0058);
		}

		// class UGameplayCueNotify_HitImpact : public UGameplayCueNotify_Static
		TEST_METHOD(Class__GameplayAbilities__GameplayCueNotify_HitImpact)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayCueNotify_HitImpact, Sound, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayCueNotify_HitImpact, ParticleSystem, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayCueNotify_HitImpact, 0x0068);
		}

		// class UGameplayCueSet : public UDataAsset
		TEST_METHOD(Class__GameplayAbilities__GameplayCueSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayCueSet, GameplayCueData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayCueSet, UnknownData_5FLG, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayCueSet, 0x0098);
		}

		// class UGameplayCueTranslator : public UObject
		TEST_METHOD(Class__GameplayAbilities__GameplayCueTranslator)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayCueTranslator, 0x0030);
		}

		// class UGameplayCueTranslator_Test : public UGameplayCueTranslator
		TEST_METHOD(Class__GameplayAbilities__GameplayCueTranslator_Test)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayCueTranslator_Test, 0x0030);
		}

		// class UGameplayEffect : public UObject
		TEST_METHOD(Class__GameplayAbilities__GameplayEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, UnknownData_IU3I, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, DurationPolicy, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, UnknownData_VBF2, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, DurationMagnitude, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, Period, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, bExecutePeriodicEffectOnApplication, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, UnknownData_YI1E, 0x01F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, Modifiers, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, Executions, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, ChanceToApplyToTarget, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, ApplicationRequirements, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, TargetEffectClasses, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, ConditionalGameplayEffects, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, OverflowEffects, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, bDenyOverflowApplication, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, bClearStackOnOverflow, 0x0279);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, UnknownData_CRHA, 0x027A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, PrematureExpirationEffectClasses, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, RoutineExpirationEffectClasses, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, bRequireModifierSuccessToTriggerCues, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, bSuppressStackingCues, 0x02A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, UnknownData_DIZY, 0x02A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, GameplayCues, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, UIData, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, InheritableGameplayEffectTags, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, InheritableOwnedTagsContainer, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, OngoingTagRequirements, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, ApplicationTagRequirements, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, RemoveGameplayEffectsWithTags, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, GrantedApplicationImmunityTags, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, GrantedApplicationImmunityQuery, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, UnknownData_Y9DZ, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, StackingType, 0x05D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, UnknownData_J6YN, 0x05DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, StackLimitCount, 0x05DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, StackDurationRefreshPolicy, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, StackPeriodResetPolicy, 0x05E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, StackExpirationPolicy, 0x05E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, UnknownData_FHH7, 0x05E3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, GrantedAbilities, 0x05E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayEffect, 0x05F8);
		}

		// class UGameplayEffectCalculation : public UObject
		TEST_METHOD(Class__GameplayAbilities__GameplayEffectCalculation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffectCalculation, RelevantAttributesToCapture, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayEffectCalculation, 0x0040);
		}

		// class UGameplayEffectCustomApplicationRequirement : public UObject
		TEST_METHOD(Class__GameplayAbilities__GameplayEffectCustomApplicationRequirement)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayEffectCustomApplicationRequirement, 0x0030);
		}

		// class UGameplayEffectExecutionCalculation : public UGameplayEffectCalculation
		TEST_METHOD(Class__GameplayAbilities__GameplayEffectExecutionCalculation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffectExecutionCalculation, bRequiresPassedInTags, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffectExecutionCalculation, UnknownData_H4P9, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayEffectExecutionCalculation, 0x0048);
		}

		// class UGameplayEffectUIData : public UObject
		TEST_METHOD(Class__GameplayAbilities__GameplayEffectUIData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayEffectUIData, 0x0030);
		}

		// class UGameplayEffectUIData_TextOnly : public UGameplayEffectUIData
		TEST_METHOD(Class__GameplayAbilities__GameplayEffectUIData_TextOnly)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffectUIData_TextOnly, Description, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayEffectUIData_TextOnly, 0x0048);
		}

		// class UGameplayModMagnitudeCalculation : public UGameplayEffectCalculation
		TEST_METHOD(Class__GameplayAbilities__GameplayModMagnitudeCalculation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayModMagnitudeCalculation, bAllowNonNetAuthorityDependencyRegistration, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayModMagnitudeCalculation, UnknownData_H0HR, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayModMagnitudeCalculation, 0x0048);
		}

		// class UGameplayTagReponseTable : public UDataAsset
		TEST_METHOD(Class__GameplayAbilities__GameplayTagReponseTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagReponseTable, Entries, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagReponseTable, UnknownData_V6Y6, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagReponseTable, 0x01D8);
		}

		// class UTickableAttributeSetInterface : public UInterface
		TEST_METHOD(Class__GameplayAbilities__TickableAttributeSetInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTickableAttributeSetInterface, 0x0030);
		}

		// class UBlueprintFunctionLibrary : public UObject
		TEST_METHOD(Class__Engine__BlueprintFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintFunctionLibrary, 0x0030);
		}

		// class UActorComponent : public UObject
		TEST_METHOD(Class__Engine__ActorComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UnknownData_FHR2, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, PrimaryComponentTick, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, ComponentTags, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, AssetUserData, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UnknownData_IN8C, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UnknownData_558X, 0x00B7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, CreationMethod, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UnknownData_R0X2, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UCSModifiedProperties, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, OnComponentActivated, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, OnComponentDeactivated, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UnknownData_E943, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorComponent, 0x0100);
		}

		// class AActor : public UObject
		TEST_METHOD(Class__Engine__Actor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, PrimaryActorTick, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, RemoteRole, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_86Q3, 0x008E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, ReplicatedMovement, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, InitialLifeSpan, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, CustomTimeDilation, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_7L0K, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, AttachmentReplication, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Owner, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetDriverName, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Role, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetDormancy, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, SpawnCollisionHandlingMethod, 0x0122);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, AutoReceiveInput, 0x0123);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, InputPriority, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, InputComponent, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetCullDistanceSquared, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetTag, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetUpdateFrequency, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, MinNetUpdateFrequency, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetPriority, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_JSH2, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Instigator, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Children, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, RootComponent, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, ControllingMatineeActors, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_9UPA, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Layers, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, ParentComponent, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Tags, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnTakeAnyDamage, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnTakePointDamage, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnTakeRadialDamage, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnActorBeginOverlap, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnActorEndOverlap, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnBeginCursorOver, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnEndCursorOver, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnClicked, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnReleased, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnInputTouchBegin, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnInputTouchEnd, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnInputTouchEnter, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnInputTouchLeave, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnActorHit, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnDestroyed, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnEndPlay, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_YC2E, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, InstanceComponents, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, BlueprintCreatedComponents, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_HHDC, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AActor, 0x0338);
		}

		// class AHUD : public AActor
		TEST_METHOD(Class__Engine__HUD)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, PlayerOwner, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, UnknownData_3Z98, 0x0341);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, CurrentTargetIndex, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, UnknownData_SM8R, 0x0349);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, PostRenderedActors, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, UnknownData_JMFG, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, DebugDisplay, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, ToggledDebugCategories, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, Canvas, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, DebugCanvas, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, DebugTextList, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, ShowDebugTargetDesiredClass, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, ShowDebugTargetActor, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, UnknownData_WIQM, 0x03B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHUD, 0x0428);
		}

		// class APawn : public AActor
		TEST_METHOD(Class__Engine__Pawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_CS9X, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_2YA6, 0x0341);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, BaseEyeHeight, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, AutoPossessPlayer, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, AutoPossessAI, 0x0349);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, RemoteViewPitch, 0x034A);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_X2QE, 0x034B);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, AIControllerClass, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, PlayerState, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_JF4J, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, LastHitBy, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, Controller, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_6610, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, ControlInputVector, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, LastControlInputVector, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_XKG7, 0x0394);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APawn, 0x0398);
		}

		// class ADefaultPawn : public APawn
		TEST_METHOD(Class__Engine__DefaultPawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, BaseTurnRate, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, BaseLookUpRate, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, MovementComponent, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, CollisionComponent, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, MeshComponent, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, UnknownData_VV62, 0x03B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADefaultPawn, 0x03C0);
		}

		// class UBlueprintCore : public UObject
		TEST_METHOD(Class__Engine__BlueprintCore)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, SkeletonGeneratedClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, GeneratedClass, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, bLegacyNeedToPurgeSkelRefs, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, UnknownData_8XD1, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, BlueprintGuid, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, UnknownData_MCKK, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintCore, 0x0058);
		}

		// class UBlueprint : public UBlueprintCore
		TEST_METHOD(Class__Engine__Blueprint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, UnknownData_DZ4L, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, ParentClass, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, UnknownData_DXPK, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, SimpleConstructionScript, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, ComponentTemplates, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, Timelines, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, InheritableComponentHandler, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, BlueprintType, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, UnknownData_JWJB, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, BlueprintSystemVersion, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, UnknownData_FYY6, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, bNativize, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, UnknownData_7DXE, 0x00D9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprint, 0x00E0);
		}

		// class UDataAsset : public UObject
		TEST_METHOD(Class__Engine__DataAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataAsset, NativeClass, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDataAsset, 0x0038);
		}

		// class USceneComponent : public UActorComponent
		TEST_METHOD(Class__Engine__SceneComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, UnknownData_DO9H, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, PhysicsVolume, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, AttachParent, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, AttachSocketName, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, AttachChildren, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, ClientAttachedChildren, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, UnknownData_4LMP, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, RelativeLocation, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, RelativeRotation, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, RelativeScale3D, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, UnknownData_7N9L, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, ComponentVelocity, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, UnknownData_GUZ5, 0x01CE);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, Mobility, 0x01CF);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, DetailMode, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, UnknownData_8RYF, 0x01D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, PhysicsVolumeChangedDelegate, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, UnknownData_DRKM, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USceneComponent, 0x0258);
		}

		// class UPrimitiveComponent : public USceneComponent
		TEST_METHOD(Class__Engine__PrimitiveComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_IH6X, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, MinDrawDistance, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LDMaxDrawDistance, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CachedMaxDrawDistance, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, DepthPriorityGroup, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, ViewOwnerDepthPriorityGroup, 0x026D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, IndirectLightingCacheQuality, 0x026E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LightmapType, 0x026F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_9RDZ, 0x0276);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, bHasCustomNavigableGeometry, 0x0277);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_P0TE, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CanCharacterStepUpOn, 0x0279);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LightingChannels, 0x027A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CustomDepthStencilWriteMask, 0x027B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CustomDepthStencilValue, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, TranslucencySortPriority, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, VisibilityId, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_JSY6, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LpvBiasMultiplier, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_NXD4, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, BoundsScale, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LastSubmitTime, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LastRenderTime, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LastRenderTimeOnScreen, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, MoveIgnoreActors, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, MoveIgnoreComponents, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_8E3O, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, BodyInstance, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnComponentHit, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnComponentBeginOverlap, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnComponentEndOverlap, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnComponentWake, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnComponentSleep, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_QAPA, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnBeginCursorOver, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnEndCursorOver, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnClicked, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnReleased, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnInputTouchBegin, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnInputTouchEnd, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnInputTouchEnter, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnInputTouchLeave, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_NUAP, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LODParentPrimitive, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, PostPhysicsComponentTick, 0x0520);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimitiveComponent, 0x0578);
		}

		// class UMeshComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__MeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshComponent, OverrideMaterials, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshComponent, UnknownData_Y92R, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshComponent, bEnableMaterialParameterCaching, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshComponent, UnknownData_8RRN, 0x0599);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshComponent, 0x05A0);
		}

		// class USkinnedMeshComponent : public UMeshComponent
		TEST_METHOD(Class__Engine__SkinnedMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, SkeletalMesh, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, MasterPoseComponent, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_FZUM, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, PhysicsAssetOverride, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, ForcedLodModel, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, MinLodModel, 0x0664);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_5QJE, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, StreamingDistanceMultiplier, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_T7BY, 0x0674);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, LODInfo, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_SS6M, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, VisibilityBasedAnimTickOption, 0x06B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_7GP9, 0x06B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, CapsuleIndirectShadowMinVisibility, 0x06BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_ZX46, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, CachedLocalBounds, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_Q6BG, 0x06E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkinnedMeshComponent, 0x0700);
		}

		// class USkeletalMesh : public UObject
		TEST_METHOD(Class__Engine__SkeletalMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_K0S4, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, Skeleton, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, ImportedBounds, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, ExtendedBounds, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, PositiveBoundsExtension, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, NegativeBoundsExtension, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, Materials, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, SkelMirrorTable, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, LODInfo, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_SAE9, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, MinLOD, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, SkelMirrorAxis, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, SkelMirrorFlipAxis, 0x012D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_48AK, 0x012F);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, BodySetup, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, PhysicsAsset, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, ShadowPhysicsAsset, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, NodeMappingData, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, MorphTargets, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_FV38, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, PostProcessAnimBlueprint, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, MeshClothingAssets, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, SamplingInfo, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, AssetUserData, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, Sockets, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_GKP6, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMesh, 0x0358);
		}

		// class UBlueprintGeneratedClass : public UClass
		TEST_METHOD(Class__Engine__BlueprintGeneratedClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, NumReplicatedProperties, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, UnknownData_ZGU9, 0x021D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, DynamicBindingObjects, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, ComponentTemplates, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, Timelines, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, SimpleConstructionScript, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, InheritableComponentHandler, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, UberGraphFramePointerProperty, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, UberGraphFunction, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, UnknownData_IPMB, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, CookedComponentInstancingData, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, UnknownData_8QMX, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintGeneratedClass, 0x0300);
		}

		// class USkeletalMeshComponent : public USkinnedMeshComponent
		TEST_METHOD(Class__Engine__SkeletalMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_LD8D, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AnimBlueprintGeneratedClass, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AnimClass, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AnimScriptInstance, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, SubInstances, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, PostProcessAnimInstance, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AnimationData, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_4XM0, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, RootBoneTranslation, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, LineCheckBoundsScale, 0x076C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_V1JJ, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, CachedBoneSpaceTransforms, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, CachedComponentSpaceTransforms, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_79DP, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, GlobalAnimRateScale, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, KinematicBonesUpdateType, 0x07DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, PhysicsTransformUpdateMode, 0x07DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_NA7J, 0x07DE);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AnimationMode, 0x07DF);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_Y0EA, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_Y23Q, 0x07E7);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, CachedAnimCurveUidVersion, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_6IRJ, 0x07EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, ClothBlendWeight, 0x07EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, EdgeStiffness, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, BendingStiffness, 0x07F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AreaStiffness, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, VolumeStiffness, 0x07FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, StrainLimitingStiffness, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, ShapeTargetStiffness, 0x0804);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, DisallowedAnimCurves, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, BodySetup, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_HFQF, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, OnConstraintBroken, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, ClothingSimulationFactory, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_0A4M, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, TeleportDistanceThreshold, 0x0930);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, TeleportRotationThreshold, 0x0934);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_6361, 0x0938);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, LastPoseTickFrame, 0x0940);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_IL6S, 0x0944);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, ClothingInteractor, 0x09A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_TG8C, 0x09A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, OnAnimInitialized, 0x0A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_T9FW, 0x0A70);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshComponent, 0x0BC0);
		}

		// class UAnimInstance : public UObject
		TEST_METHOD(Class__Engine__AnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, CurrentSkeleton, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, RootMotionMode, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, UnknownData_KXSQ, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, OnMontageBlendingOut, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, OnMontageStarted, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, OnMontageEnded, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, OnAllMontageInstancesEnded, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, UnknownData_Y71Q, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, NotifyQueue, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, ActiveAnimNotifyState, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, UnknownData_0YQT, 0x0188);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimInstance, 0x0268);
		}

		// class USoundBase : public UObject
		TEST_METHOD(Class__Engine__SoundBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, SoundClassObject, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, UnknownData_95B7, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, SoundConcurrencySettings, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, ConcurrencySet, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, ConcurrencyOverrides, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, Duration, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, MaxDistance, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, TotalSamples, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, Priority, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, AttenuationSettings, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, SoundSubmixObject, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, SoundSubmixSends, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, SourceEffectChain, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, BusSends, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, PreEffectBusSends, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundBase, 0x0100);
		}

		// class USoundEffectPreset : public UObject
		TEST_METHOD(Class__Engine__SoundEffectPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundEffectPreset, UnknownData_EQH2, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundEffectPreset, 0x0048);
		}

		// class USoundEffectSourcePreset : public USoundEffectPreset
		TEST_METHOD(Class__Engine__SoundEffectSourcePreset)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundEffectSourcePreset, 0x0048);
		}

		// class USoundEffectSubmixPreset : public USoundEffectPreset
		TEST_METHOD(Class__Engine__SoundEffectSubmixPreset)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundEffectSubmixPreset, 0x0048);
		}

		// class UAmbisonicsSubmixSettingsBase : public UObject
		TEST_METHOD(Class__Engine__AmbisonicsSubmixSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAmbisonicsSubmixSettingsBase, 0x0030);
		}

		// class USpatializationPluginSourceSettingsBase : public UObject
		TEST_METHOD(Class__Engine__SpatializationPluginSourceSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpatializationPluginSourceSettingsBase, 0x0030);
		}

		// class UOnlineBlueprintCallProxyBase : public UObject
		TEST_METHOD(Class__Engine__OnlineBlueprintCallProxyBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineBlueprintCallProxyBase, 0x0030);
		}

		// class UPlayer : public UObject
		TEST_METHOD(Class__Engine__Player)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, UnknownData_R7NI, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, PlayerController, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, CurrentNetSpeed, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, ConfiguredInternetSpeed, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, ConfiguredLanSpeed, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, UnknownData_VESX, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayer, 0x0050);
		}

		// class UNetConnection : public UPlayer
		TEST_METHOD(Class__Engine__NetConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, Children, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, Driver, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, PackageMapClass, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, PackageMap, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, OpenChannels, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, SentTemporaries, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, ViewTarget, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, OwningActor, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, MaxPacket, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, UnknownData_42R4, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, PlayerId, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, UnknownData_V3HR, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, LastReceiveTime, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, UnknownData_BCQR, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, ChannelsToTick, 0x1508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, UnknownData_F8NC, 0x1518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetConnection, 0x18F0);
		}

		// class UNetDriver : public UObject
		TEST_METHOD(Class__Engine__NetDriver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_2OPL, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, NetConnectionClassName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ReplicationDriverClassName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, MaxDownloadSize, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_2P44, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, NetServerMaxTickRate, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, MaxInternetClientRate, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, MaxClientRate, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ServerTravelPause, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, SpawnPrioritySeconds, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, RelevantTimeout, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, KeepAliveTime, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, InitialConnectTimeout, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ConnectionTimeout, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, TimeoutMultiplierForUnoptimizedBuilds, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, bNoTimeouts, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_TFOZ, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ServerConnection, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ClientConnections, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_4CHE, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, RecentlyDisconnectedTrackingTime, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_I53C, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, World, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, WorldPackage, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_0XQ6, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, NetConnectionClass, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ReplicationDriverClass, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, RoleProperty, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, RemoteRoleProperty, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, NetDriverName, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_ILDS, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ChannelDefinitions, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ChannelDefinitionMap, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ActorChannelPool, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_JJ2X, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, Time, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_TT6Q, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ReplicationDriver, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_R3X5, 0x0738);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetDriver, 0x0758);
		}

		// class UBlueprintAsyncActionBase : public UObject
		TEST_METHOD(Class__Engine__BlueprintAsyncActionBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintAsyncActionBase, UnknownData_UCRC, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintAsyncActionBase, 0x0038);
		}

		// class UOnlineEngineInterface : public UObject
		TEST_METHOD(Class__Engine__OnlineEngineInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineEngineInterface, 0x0030);
		}

		// class UDeveloperSettings : public UObject
		TEST_METHOD(Class__Engine__DeveloperSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeveloperSettings, UnknownData_YZO3, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeveloperSettings, 0x0040);
		}

		// class UOnlineSession : public UObject
		TEST_METHOD(Class__Engine__OnlineSession)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineSession, 0x0030);
		}

		// class UMaterialExpression : public UObject
		TEST_METHOD(Class__Engine__MaterialExpression)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpression, Material, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpression, Function, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpression, UnknownData_O3ZD, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpression, 0x0048);
		}

		// class UMaterialExpressionTextureBase : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTextureBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureBase, Texture, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureBase, SamplerType, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureBase, UnknownData_OTFF, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureBase, UnknownData_RNTM, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureBase, 0x0058);
		}

		// class UMaterialExpressionTextureSample : public UMaterialExpressionTextureBase
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSample)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, Coordinates, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, UnknownData_BBRI, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, TextureObject, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, UnknownData_RX9W, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, MipValue, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, UnknownData_VES4, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, CoordinatesDX, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, UnknownData_BO0X, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, CoordinatesDY, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, UnknownData_TOVX, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, AutomaticViewMipBiasValue, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, UnknownData_0Q53, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, MipValueMode, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, SamplerSource, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, UnknownData_71S8, 0x00D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, ConstCoordinate, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, ConstMipValue, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, UnknownData_Q9BB, 0x00DD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSample, 0x00E8);
		}

		// class UMaterialExpressionTextureSampleParameter : public UMaterialExpressionTextureSample
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSampleParameter, ParameterName, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSampleParameter, ExpressionGUID, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSampleParameter, Group, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameter, 0x0108);
		}

		// class UMaterialExpressionTextureSampleParameter2D : public UMaterialExpressionTextureSampleParameter
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameter2D)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameter2D, 0x0108);
		}

		// class ACharacter : public APawn
		TEST_METHOD(Class__Engine__Character)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, Mesh, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, CharacterMovement, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, CapsuleComponent, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, BasedMovement, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ReplicatedBasedMovement, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, AnimRootMotionTranslationScale, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, BaseTranslationOffset, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, BaseRotationOffset, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ReplicatedServerLastTransformUpdateTimeStamp, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ReplayLastTransformUpdateTimeStamp, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ReplicatedMovementMode, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, bInBaseReplication, 0x0439);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_NZRI, 0x043A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, CrouchedEyeHeight, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_W689, 0x0442);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, JumpKeyHoldTime, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, JumpForceTimeRemaining, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ProxyJumpForceStartedTime, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, JumpMaxHoldTime, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, JumpMaxCount, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, JumpCurrentCount, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_M5UC, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, OnReachedJumpApex, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_CZ1H, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, MovementModeChangedDelegate, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, OnCharacterMovementUpdated, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, SavedRootMotion, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_V2TH, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ClientRootMotionParams, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, RootMotionRepMoves, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, RepRootMotion, 0x05F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACharacter, 0x0748);
		}

		// class USplineComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__SplineComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, SplineCurves, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, SplineInfo, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, SplineRotInfo, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, SplineScaleInfo, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, SplineReparamTable, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bAllowSplineEditingPerInstance, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, UnknownData_N89X, 0x0639);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, ReparamStepsPerSegment, 0x063C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, Duration, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bStationaryEndpoints, 0x0644);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bSplineHasBeenEdited, 0x0645);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bModifiedByConstructionScript, 0x0646);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bInputSplinePointsToConstructionScript, 0x0647);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bDrawDebug, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bClosedLoop, 0x0649);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bLoopPositionOverride, 0x064A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, UnknownData_VUC5, 0x064B);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, LoopPosition, 0x064C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, DefaultUpVector, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, UnknownData_K03M, 0x065C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USplineComponent, 0x0660);
		}

		// class UAudioComponent : public USceneComponent
		TEST_METHOD(Class__Engine__AudioComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, Sound, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, InstanceParameters, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, SoundClassOverride, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_P3CT, 0x027B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AudioComponentUserID, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, PitchModulationMin, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, PitchModulationMax, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, VolumeModulationMin, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, VolumeModulationMax, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, VolumeMultiplier, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, EnvelopeFollowerAttackTime, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, EnvelopeFollowerReleaseTime, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, Priority, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, SubtitlePriority, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, PitchMultiplier, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, LowPassFilterFrequency, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_M7GE, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AttenuationSettings, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AttenuationOverrides, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, ConcurrencySettings, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, ConcurrencySet, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_XUH9, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AutoAttachLocationRule, 0x0604);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AutoAttachRotationRule, 0x0605);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AutoAttachScaleRule, 0x0606);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_DLO8, 0x0607);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnAudioFinished, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_ANBE, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnAudioPlaybackPercent, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_5C00, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnAudioSingleEnvelopeValue, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_9ZGY, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnAudioMultiEnvelopeValue, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_DDHX, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnQueueSubtitles, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AutoAttachParent, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AutoAttachSocketName, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_OWU5, 0x06C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioComponent, 0x0750);
		}

		// class UAssetImportData : public UObject
		TEST_METHOD(Class__Engine__AssetImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetImportData, 0x0030);
		}

		// class UAssetUserData : public UObject
		TEST_METHOD(Class__Engine__AssetUserData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetUserData, 0x0030);
		}

		// class UMovementComponent : public UActorComponent
		TEST_METHOD(Class__Engine__MovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UpdatedComponent, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UpdatedPrimitive, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UnknownData_0SAT, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, Velocity, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, PlaneConstraintNormal, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, PlaneConstraintOrigin, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UnknownData_MTUQ, 0x0139);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, PlaneConstraintAxisSetting, 0x013B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UnknownData_1TUL, 0x013C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovementComponent, 0x0140);
		}

		// class UNavMovementComponent : public UMovementComponent
		TEST_METHOD(Class__Engine__NavMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, NavAgentProps, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, FixedPathBrakingDistance, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, MovementState, 0x0175);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, UnknownData_V5I5, 0x0176);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, PathFollowingComp, 0x0178);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavMovementComponent, 0x0180);
		}

		// class UPawnMovementComponent : public UNavMovementComponent
		TEST_METHOD(Class__Engine__PawnMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnMovementComponent, PawnOwner, 0x0180);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnMovementComponent, 0x0188);
		}

		// class UCharacterMovementComponent : public UPawnMovementComponent
		TEST_METHOD(Class__Engine__CharacterMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_YGX2, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CharacterOwner, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, GravityScale, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxStepHeight, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, JumpZVelocity, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, JumpOffJumpZFactor, 0x01AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, WalkableFloorAngle, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, WalkableFloorZ, 0x01B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MovementMode, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CustomMovementMode, 0x01B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkSmoothingMode, 0x01BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_97FW, 0x01BB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, GroundFriction, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_RSUX, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxWalkSpeed, 0x01DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxWalkSpeedCrouched, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxSwimSpeed, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxFlySpeed, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxCustomMovementSpeed, 0x01EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxAcceleration, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MinAnalogWalkSpeed, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingFrictionFactor, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingFriction, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingSubStepTime, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingDecelerationWalking, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingDecelerationFalling, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingDecelerationSwimming, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingDecelerationFlying, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AirControl, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AirControlBoostMultiplier, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AirControlBoostVelocityThreshold, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, FallingLateralFriction, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CrouchedHalfHeight, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, Buoyancy, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PerchRadiusThreshold, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PerchAdditionalHeight, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, RotationRate, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_TI9C, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, DeferredUpdatedMoveComponent, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxOutOfWaterStepHeight, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, OutofWaterZ, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, Mass, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, StandingDownwardForceScale, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, InitialPushForceFactor, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PushForceFactor, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PushForcePointZOffsetFactor, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, TouchForceFactor, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MinTouchForce, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxTouchForce, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, RepulsionForce, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, Acceleration, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_4R1A, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, LastUpdateRotation, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, LastUpdateLocation, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, LastUpdateVelocity, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ServerLastTransformUpdateTimeStamp, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ServerLastClientGoodMoveAckTime, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ServerLastClientAdjustmentTime, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PendingImpulseToApply, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PendingForceToApply, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AnalogInputModifier, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_L5XL, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxSimulationTimeStep, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxSimulationIterations, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxDepenetrationWithGeometry, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxDepenetrationWithGeometryAsProxy, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxDepenetrationWithPawn, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxDepenetrationWithPawnAsProxy, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkSimulatedSmoothLocationTime, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkSimulatedSmoothRotationTime, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ListenServerNetworkSimulatedSmoothLocationTime, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ListenServerNetworkSimulatedSmoothRotationTime, 0x030C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetProxyShrinkRadius, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetProxyShrinkHalfHeight, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkMaxSmoothUpdateDistance, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkNoSmoothUpdateDistance, 0x031C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkMinTimeBetweenClientAckGoodMoves, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkMinTimeBetweenClientAdjustments, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkMinTimeBetweenClientAdjustmentsLargeCorrection, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkLargeClientCorrectionDistance, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, LedgeCheckThreshold, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, JumpOutOfWaterPitch, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CurrentFloor, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, DefaultLandMovementMode, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, DefaultWaterMovementMode, 0x03CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, GroundMovementMode, 0x03CE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_NBX9, 0x03D3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AvoidanceConsiderationRadius, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, RequestedVelocity, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AvoidanceUID, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AvoidanceGroup, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, GroupsToAvoid, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, GroupsToIgnore, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AvoidanceWeight, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PendingLaunchVelocity, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_G4W0, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavMeshProjectionInterval, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavMeshProjectionTimer, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavMeshProjectionInterpSpeed, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavMeshProjectionHeightScaleUp, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavMeshProjectionHeightScaleDown, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavWalkingFloorDistTolerance, 0x04CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PostPhysicsTickFunction, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_0SCE, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MinTimeBetweenTimeStampResets, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_WRJ1, 0x053C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CurrentRootMotion, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_7D29, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, RootMotionParams, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AnimRootMotionVelocity, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_0TM2, 0x071C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCharacterMovementComponent, 0x0740);
		}

		// class UPrimaryDataAsset : public UDataAsset
		TEST_METHOD(Class__Engine__PrimaryDataAsset)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimaryDataAsset, 0x0038);
		}

		// class UAssetManager : public UObject
		TEST_METHOD(Class__Engine__AssetManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, UnknownData_MJ1R, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, ObjectReferenceList, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIsGlobalAsyncScanEnvironment, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bShouldGuessTypeAndName, 0x02C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bShouldUseSynchronousLoad, 0x02CA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIsLoadingFromPakFiles, 0x02CB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bShouldAcquireMissingChunksOnLoad, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bOnlyCookProductionAssets, 0x02CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIsBulkScanning, 0x02CE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIsPrimaryAssetDirectoryCurrent, 0x02CF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIsManagementDatabaseCurrent, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bUpdateManagementDatabaseAfterScan, 0x02D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIncludeOnlyOnDiskAssets, 0x02D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, UnknownData_UA59, 0x02D3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, NumberOfSpawnedNotifications, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, UnknownData_4AK2, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetManager, 0x0430);
		}

		// class UCameraShake : public UObject
		TEST_METHOD(Class__Engine__CameraShake)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, UnknownData_KQKC, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, OscillationDuration, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, OscillationBlendInTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, OscillationBlendOutTime, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, RotOscillation, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, LocOscillation, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, FOVOscillation, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, AnimPlayRate, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, AnimScale, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, AnimBlendInTime, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, AnimBlendOutTime, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, RandomAnimSegmentDuration, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, Anim, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, UnknownData_4VTB, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, CameraOwner, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, UnknownData_PCLY, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, ShakeScale, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, OscillatorTimeRemaining, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, AnimInst, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, UnknownData_2C8U, 0x0168);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraShake, 0x0170);
		}

		// class AController : public AActor
		TEST_METHOD(Class__Engine__Controller)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, UnknownData_V2O5, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, PlayerState, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, UnknownData_CF2N, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, OnInstigatedAnyDamage, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, StateName, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, Pawn, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, UnknownData_MGBK, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, Character, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, TransformComponent, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, UnknownData_1RW4, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, ControlRotation, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, UnknownData_5UH3, 0x03AD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AController, 0x03B0);
		}

		// class APlayerController : public AController
		TEST_METHOD(Class__Engine__PlayerController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, Player, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, AcknowledgedPawn, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, ControllingDirTrackInst, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, MyHUD, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, PlayerCameraManager, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, PlayerCameraManagerClass, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, bAutoManageActiveCameraTarget, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_IGXT, 0x03E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, TargetViewRotation, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_AZCC, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, SmoothTargetViewRotationSpeed, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_O567, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, HiddenActors, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, HiddenPrimitiveComponents, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_VU0A, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, LastSpectatorStateSynchTime, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, LastSpectatorSyncLocation, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, LastSpectatorSyncRotation, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, ClientCap, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_VHFU, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, CheatManager, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, CheatClass, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, PlayerInput, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, ActiveForceFeedbackEffects, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_JFEF, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_QC5F, 0x04F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, NetPlayerIndex, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_S5R0, 0x04FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, PendingSwapConnection, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, NetConnection, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_A8GM, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, InputYawScale, 0x0554);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, InputPitchScale, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, InputRollScale, 0x055C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_DC5X, 0x0561);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, ForceFeedbackScale, 0x0564);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, ClickEventKeys, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, DefaultMouseCursor, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, CurrentMouseCursor, 0x0579);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, DefaultClickTraceChannel, 0x057A);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, CurrentClickTraceChannel, 0x057B);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, HitResultTraceDistance, 0x057C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, SeamlessTravelCount, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, LastCompletedSeamlessTravelCount, 0x0582);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_RR4B, 0x0584);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, InactiveStateInputComponent, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_MUQD, 0x0601);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, CurrentTouchInterface, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_CRO9, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, SpectatorPawn, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_IYWL, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, bIsLocalPlayerController, 0x067C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_A1PZ, 0x067D);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, SpawnLocation, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_C99W, 0x068C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerController, 0x0690);
		}

		// class UCheatManager : public UObject
		TEST_METHOD(Class__Engine__CheatManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheatManager, DebugCameraControllerRef, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheatManager, DebugCameraControllerClass, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheatManager, UnknownData_PTX0, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheatManager, 0x0080);
		}

		// class UGameInstance : public UObject
		TEST_METHOD(Class__Engine__GameInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, UnknownData_QCXT, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, LocalPlayers, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, OnlineSession, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, ReferencedObjects, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, UnknownData_EJ2W, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameInstance, 0x0170);
		}

		// class UPlatformGameInstance : public UGameInstance
		TEST_METHOD(Class__Engine__PlatformGameInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationWillDeactivateDelegate, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationHasReactivatedDelegate, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationWillEnterBackgroundDelegate, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationHasEnteredForegroundDelegate, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationWillTerminateDelegate, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationShouldUnloadResourcesDelegate, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationReceivedStartupArgumentsDelegate, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationRegisteredForRemoteNotificationsDelegate, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationRegisteredForUserNotificationsDelegate, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationFailedToRegisterForRemoteNotificationsDelegate, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationReceivedRemoteNotificationDelegate, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationReceivedLocalNotificationDelegate, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationReceivedScreenOrientationChangedNotificationDelegate, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformGameInstance, 0x0240);
		}

		// class AInfo : public AActor
		TEST_METHOD(Class__Engine__Info)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInfo, 0x0338);
		}

		// class AGameModeBase : public AInfo
		TEST_METHOD(Class__Engine__GameModeBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, OptionsString, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, GameSessionClass, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, GameStateClass, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, PlayerControllerClass, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, PlayerStateClass, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, HUDClass, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, DefaultPawnClass, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, SpectatorClass, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, ReplaySpectatorPlayerControllerClass, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, ServerStatReplicatorClass, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, GameSession, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, GameState, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, ServerStatReplicator, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, DefaultPlayerName, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, UnknownData_3V83, 0x03C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameModeBase, 0x03D8);
		}

		// class AGameMode : public AGameModeBase
		TEST_METHOD(Class__Engine__GameMode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, MatchState, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, UnknownData_9RLY, 0x03E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, NumSpectators, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, NumPlayers, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, NumBots, 0x03EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, MinRespawnDelay, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, NumTravellingPlayers, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, EngineMessageClass, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, InactivePlayerArray, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, InactivePlayerStateLifeSpan, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, MaxInactivePlayers, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, bHandleDedicatedServerReplays, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, UnknownData_LQD4, 0x0419);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameMode, 0x0420);
		}

		// class AGameStateBase : public AInfo
		TEST_METHOD(Class__Engine__GameStateBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, GameModeClass, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, AuthorityGameMode, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, SpectatorClass, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, PlayerArray, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, bReplicatedHasBegunPlay, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, UnknownData_ZA10, 0x0361);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, ReplicatedWorldTimeSeconds, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, ServerWorldTimeSecondsDelta, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, ServerWorldTimeSecondsUpdateFrequency, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, UnknownData_27TB, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameStateBase, 0x0378);
		}

		// class AGameState : public AGameStateBase
		TEST_METHOD(Class__Engine__GameState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameState, MatchState, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameState, PreviousMatchState, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameState, ElapsedTime, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameState, UnknownData_RLUK, 0x038C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameState, 0x0398);
		}

		// class APlayerState : public AInfo
		TEST_METHOD(Class__Engine__PlayerState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, Score, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_TI3F, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, PlayerName, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_VCZ1, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, PlayerId, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, Ping, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_NLV3, 0x0365);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_3KH9, 0x0367);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, startTime, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_924D, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, EngineMessageClass, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_RB35, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, SavedNetworkAddress, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UniqueId, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_I2JS, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, PawnPrivate, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_BYJ0, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, PlayerNamePrivate, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_YGCJ, 0x0450);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerState, 0x0460);
		}

		// class USaveGame : public UObject
		TEST_METHOD(Class__Engine__SaveGame)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USaveGame, 0x0030);
		}

		// class ASkyLight : public AInfo
		TEST_METHOD(Class__Engine__SkyLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkyLight, LightComponent, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkyLight, UnknownData_0LRN, 0x0341);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkyLight, 0x0348);
		}

		// class UTexture : public UObject
		TEST_METHOD(Class__Engine__Texture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, UnknownData_OZXT, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, LightingGuid, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, LODBias, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, NumCinematicMipLevels, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, CompressionSettings, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, Filter, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, LODGroup, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, CachedCombinedLODBias, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, AssetUserData, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, UnknownData_I3TV, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTexture, 0x00C0);
		}

		// class UTextureCube : public UTexture
		TEST_METHOD(Class__Engine__TextureCube)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureCube, UnknownData_CC26, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureCube, 0x0118);
		}

		// class UStaticMeshComponent : public UMeshComponent
		TEST_METHOD(Class__Engine__StaticMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, ForcedLodModel, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, PreviousLODLevel, 0x05A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, MinLOD, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, SubDivisionStepSize, 0x05AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, StaticMesh, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, WireframeColorOverride, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, UnknownData_Y8EY, 0x05BE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, OverriddenLightMapRes, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, DistanceFieldIndirectShadowMinVisibility, 0x05C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, DistanceFieldSelfShadowBias, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, StreamingDistanceMultiplier, 0x05CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, LODData, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, StreamingTextureData, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, LightmassSettings, 0x05F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaticMeshComponent, 0x0608);
		}

		// class UInstancedStaticMeshComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Engine__InstancedStaticMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, PerInstanceSMData, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, InstancingRandomSeed, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, InstanceStartCullDistance, 0x061C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, InstanceEndCullDistance, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, UnknownData_181Y, 0x0624);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, InstanceReorderTable, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, UnknownData_1A7T, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, NumPendingLightmaps, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, UnknownData_CC7M, 0x0684);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, CachedMappings, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, UnknownData_F36K, 0x0698);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInstancedStaticMeshComponent, 0x06A0);
		}

		// class UHierarchicalInstancedStaticMeshComponent : public UInstancedStaticMeshComponent
		TEST_METHOD(Class__Engine__HierarchicalInstancedStaticMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_A03M, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, SortedInstances, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, NumBuiltInstances, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_UOV4, 0x06BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, BuiltInstanceBounds, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnbuiltInstanceBounds, 0x06DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnbuiltInstanceBoundsList, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_XS7D, 0x0709);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, OcclusionLayerNumNodes, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, CacheMeshExtendedBounds, 0x0714);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_EER0, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, bDisableCollision, 0x0734);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_EG8F, 0x0735);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, InstanceCountToRender, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_4FSU, 0x073C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHierarchicalInstancedStaticMeshComponent, 0x0788);
		}

		// class AStaticMeshActor : public AActor
		TEST_METHOD(Class__Engine__StaticMeshActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaticMeshActor, StaticMeshComponent, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaticMeshActor, bStaticMeshReplicateMovement, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaticMeshActor, NavigationGeometryGatheringMode, 0x0341);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaticMeshActor, UnknownData_YIP1, 0x0342);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AStaticMeshActor, 0x0348);
		}

		// class ABrush : public AActor
		TEST_METHOD(Class__Engine__Brush)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, BrushType, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, UnknownData_3BX7, 0x0339);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, BrushColor, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, PolyFlags, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, UnknownData_B0JJ, 0x0345);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, Brush, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, BrushComponent, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, UnknownData_2V1Z, 0x0359);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, SavedSelections, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABrush, 0x0370);
		}

		// class AVolume : public ABrush
		TEST_METHOD(Class__Engine__Volume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVolume, 0x0370);
		}

		// class UMaterialInterface : public UObject
		TEST_METHOD(Class__Engine__MaterialInterface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, UnknownData_8ZZM, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, SubsurfaceProfile, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, UnknownData_UKJE, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, LightmassSettings, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, UnknownData_U0ZV, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, TextureStreamingData, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, AssetUserData, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialInterface, 0x0090);
		}

		// class UMaterialInstance : public UMaterialInterface
		TEST_METHOD(Class__Engine__MaterialInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, PhysMaterial, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, Parent, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, UnknownData_V8NF, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, UnknownData_W1VE, 0x00A3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, ScalarParameterValues, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, VectorParameterValues, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, TextureParameterValues, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, FontParameterValues, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, BasePropertyOverrides, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, UnknownData_B1MV, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, PermutationTextureReferences, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, StaticParameters, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, UnknownData_8EKC, 0x0150);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialInstance, 0x01D0);
		}

		// class UMaterialInstanceConstant : public UMaterialInstance
		TEST_METHOD(Class__Engine__MaterialInstanceConstant)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialInstanceConstant, 0x01D0);
		}

		// class UMaterialExpressionCustomOutput : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCustomOutput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCustomOutput, 0x0048);
		}

		// class UEngineCustomTimeStep : public UObject
		TEST_METHOD(Class__Engine__EngineCustomTimeStep)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineCustomTimeStep, 0x0030);
		}

		// class UAnimNotify : public UObject
		TEST_METHOD(Class__Engine__AnimNotify)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify, UnknownData_8R3O, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify, 0x0040);
		}

		// class UAnimNotifyState : public UObject
		TEST_METHOD(Class__Engine__AnimNotifyState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState, UnknownData_PQ9W, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState, 0x0038);
		}

		// class UDynamicBlueprintBinding : public UObject
		TEST_METHOD(Class__Engine__DynamicBlueprintBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicBlueprintBinding, 0x0030);
		}

		// class ACameraActor : public AActor
		TEST_METHOD(Class__Engine__CameraActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, AutoActivateForPlayer, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, UnknownData_E7LK, 0x0339);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, CameraComponent, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, SceneComponent, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, UnknownData_CS0X, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, UnknownData_W7OC, 0x0359);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, AspectRatio, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, FOVAngle, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, PostProcessBlendWeight, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, UnknownData_XWF1, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, PostProcessSettings, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACameraActor, 0x08A0);
		}

		// class UCameraComponent : public USceneComponent
		TEST_METHOD(Class__Engine__CameraComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, UnknownData_HZDB, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, OrthoWidth, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, OrthoNearClipPlane, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, OrthoFarClipPlane, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, AspectRatio, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, ProjectionMode, 0x026D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, UnknownData_QA02, 0x026E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, PostProcessBlendWeight, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, UnknownData_9U2E, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, PostProcessSettings, 0x02D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraComponent, 0x0800);
		}

		// class USoundWave : public USoundBase
		TEST_METHOD(Class__Engine__SoundWave)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, CompressionQuality, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, StreamingPriority, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SampleRateQuality, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, UnknownData_SLXK, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SoundGroup, 0x010A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, UnknownData_QOVO, 0x010D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, FrequenciesToAnalyze, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, CookedSpectralTimeData, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, CookedEnvelopeTimeData, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, UnknownData_0SON, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SpokenText, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SubtitlePriority, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, Volume, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, Pitch, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, NumChannels, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SampleRate, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, UnknownData_8AYZ, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, Subtitles, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, Curves, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, InternalCurves, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, UnknownData_PN15, 0x0198);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundWave, 0x02A8);
		}

		// class USoundWaveProcedural : public USoundWave
		TEST_METHOD(Class__Engine__SoundWaveProcedural)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWaveProcedural, UnknownData_U1J5, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundWaveProcedural, 0x0300);
		}

		// class UModel : public UObject
		TEST_METHOD(Class__Engine__Model)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UModel, UnknownData_1FUK, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModel, 0x02D8);
		}

		// class UChannel : public UObject
		TEST_METHOD(Class__Engine__Channel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChannel, Connection, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChannel, UnknownData_0JEZ, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChannel, 0x0078);
		}

		// class UActorChannel : public UChannel
		TEST_METHOD(Class__Engine__ActorChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorChannel, Actor, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorChannel, UnknownData_3YRZ, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorChannel, CreateSubObjects, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorChannel, UnknownData_UTXI, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorChannel, 0x0248);
		}

		// class UAnimationAsset : public UObject
		TEST_METHOD(Class__Engine__AnimationAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationAsset, UnknownData_91RM, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationAsset, Skeleton, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationAsset, UnknownData_CO71, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationAsset, MetaData, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationAsset, AssetUserData, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimationAsset, 0x0088);
		}

		// class UBlendSpaceBase : public UAnimationAsset
		TEST_METHOD(Class__Engine__BlendSpaceBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, UnknownData_4KXQ, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, bRotationBlendInMeshSpace, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, UnknownData_OZUK, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, AnimLength, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, InterpolationParam, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, TargetWeightInterpolationSpeedPerSec, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, NotifyTriggerMode, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, UnknownData_S8F6, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, PerBoneBlend, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, SampleIndexWithMarkers, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, UnknownData_0S63, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, SampleData, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, GridSamples, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, BlendParameters, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendSpaceBase, 0x0150);
		}

		// class UBlendSpace : public UBlendSpaceBase
		TEST_METHOD(Class__Engine__BlendSpace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpace, AxisToScaleAnimation, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpace, UnknownData_YMOZ, 0x0151);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendSpace, 0x0158);
		}

		// class UAimOffsetBlendSpace : public UBlendSpace
		TEST_METHOD(Class__Engine__AimOffsetBlendSpace)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAimOffsetBlendSpace, 0x0158);
		}

		// class UBlendSpace1D : public UBlendSpaceBase
		TEST_METHOD(Class__Engine__BlendSpace1D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpace1D, bScaleAnimation, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpace1D, UnknownData_DA7M, 0x0151);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendSpace1D, 0x0158);
		}

		// class UAimOffsetBlendSpace1D : public UBlendSpace1D
		TEST_METHOD(Class__Engine__AimOffsetBlendSpace1D)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAimOffsetBlendSpace1D, 0x0158);
		}

		// class UAISystemBase : public UObject
		TEST_METHOD(Class__Engine__AISystemBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemBase, AISystemClassName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemBase, AISystemModuleName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemBase, UnknownData_4XJN, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemBase, bInstantiateAISystemOnClient, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemBase, UnknownData_ZUOC, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISystemBase, 0x0060);
		}

		// class AAmbientSound : public AActor
		TEST_METHOD(Class__Engine__AmbientSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAmbientSound, AudioComponent, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAmbientSound, 0x0340);
		}

		// class UAnimationSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__AnimationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, CompressCommandletVersion, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, UnknownData_8L6U, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, KeyEndEffectorsMatchNameArray, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, DefaultCompressionAlgorithm, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, RotationCompressionFormat, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, TranslationCompressionFormat, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, UnknownData_CT55, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, MaxCurveError, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, AlternativeCompressionThreshold, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, ForceRecompression, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bOnlyCheckForMissingSkeletalMeshes, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bForceBelowThreshold, 0x006E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bFirstRecompressUsingCurrentOrDefault, 0x006F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bRaiseMaxErrorToExisting, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bTryExhaustiveSearch, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bEnableSegmenting, 0x0072);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bEnablePerformanceLog, 0x0073);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bStripAnimationDataOnDedicatedServer, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bTickAnimationOnSkeletalMeshInit, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, UnknownData_E5H2, 0x0076);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimationSettings, 0x0078);
		}

		// class UAnimBlueprint : public UBlueprint
		TEST_METHOD(Class__Engine__AnimBlueprint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, UnknownData_3XZ7, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, TargetSkeleton, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, Groups, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, bUseMultiThreadedAnimationUpdate, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, bWarnAboutBlueprintUsage, 0x0101);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, UnknownData_ZHBD, 0x0102);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimBlueprint, 0x0108);
		}

		// class UAnimBlueprintGeneratedClass : public UBlueprintGeneratedClass
		TEST_METHOD(Class__Engine__AnimBlueprintGeneratedClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, UnknownData_NV6K, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, BakedStateMachines, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, TargetSkeleton, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, AnimNotifies, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, UnknownData_7I42, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, OrderedSavedPoseIndices, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, UnknownData_XDL1, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, SyncGroupNames, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, EvaluateGraphExposedInputs, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimBlueprintGeneratedClass, 0x0380);
		}

		// class UAnimClassData : public UObject
		TEST_METHOD(Class__Engine__AnimClassData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_JD1K, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, BakedStateMachines, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, TargetSkeleton, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, AnimNotifies, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, RootAnimNodeIndex, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_SJR1, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, OrderedSavedPoseIndices, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, RootAnimNodeProperty, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, AnimNodeProperties, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, SyncGroupNames, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, EvaluateGraphExposedInputs, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimClassData, 0x00B0);
		}

		// class UAnimClassInterface : public UInterface
		TEST_METHOD(Class__Engine__AnimClassInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimClassInterface, 0x0030);
		}

		// class UAnimSequenceBase : public UAnimationAsset
		TEST_METHOD(Class__Engine__AnimSequenceBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequenceBase, Notifies, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequenceBase, SequenceLength, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequenceBase, RateScale, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequenceBase, RawCurveData, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSequenceBase, 0x00B0);
		}

		// class UAnimCompositeBase : public UAnimSequenceBase
		TEST_METHOD(Class__Engine__AnimCompositeBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompositeBase, 0x00B0);
		}

		// class UAnimComposite : public UAnimCompositeBase
		TEST_METHOD(Class__Engine__AnimComposite)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimComposite, AnimationTrack, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimComposite, 0x00C0);
		}

		// class UAnimCompress : public UObject
		TEST_METHOD(Class__Engine__AnimCompress)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, Description, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, UnknownData_N37D, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, IdealNumFramesPerSegment, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, MaxNumFramesPerSegment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, TranslationCompressionFormat, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, RotationCompressionFormat, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, ScaleCompressionFormat, 0x004E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, UnknownData_3K6G, 0x004F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, MaxCurveError, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, UnknownData_Y90Q, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress, 0x0058);
		}

		// class UAnimCompress_Automatic : public UAnimCompress
		TEST_METHOD(Class__Engine__AnimCompress_Automatic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_Automatic, MaxEndEffectorError, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_Automatic, UnknownData_FECN, 0x005D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_Automatic, 0x0060);
		}

		// class UAnimCompress_BitwiseCompressOnly : public UAnimCompress
		TEST_METHOD(Class__Engine__AnimCompress_BitwiseCompressOnly)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_BitwiseCompressOnly, 0x0058);
		}

		// class UAnimCompress_LeastDestructive : public UAnimCompress
		TEST_METHOD(Class__Engine__AnimCompress_LeastDestructive)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_LeastDestructive, 0x0058);
		}

		// class UAnimCompress_RemoveLinearKeys : public UAnimCompress
		TEST_METHOD(Class__Engine__AnimCompress_RemoveLinearKeys)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MaxPosDiff, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MaxAngleDiff, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MaxScaleDiff, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MaxEffectorDiff, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MinEffectorDiff, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, EffectorDiffSocket, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, ParentKeyScale, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, UnknownData_PWW3, 0x0075);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_RemoveLinearKeys, 0x0078);
		}

		// class UAnimCompress_PerTrackCompression : public UAnimCompress_RemoveLinearKeys
		TEST_METHOD(Class__Engine__AnimCompress_PerTrackCompression)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxZeroingThreshold, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxPosDiffBitwise, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxAngleDiffBitwise, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxScaleDiffBitwise, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, AllowedRotationFormats, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, AllowedTranslationFormats, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, AllowedScaleFormats, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, UnknownData_6PPQ, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, ResampledFramerate, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MinKeysForResampling, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, UnknownData_ZJ0T, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, TrackHeightBias, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, ParentingDivisor, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, ParentingDivisorExponent, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, UnknownData_X2QX, 0x00D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, RotationErrorSourceRatio, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, TranslationErrorSourceRatio, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, ScaleErrorSourceRatio, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxErrorPerTrackRatio, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, PerturbationProbeSize, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, UnknownData_LXEY, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_PerTrackCompression, 0x00F8);
		}

		// class UAnimCompress_RemoveEverySecondKey : public UAnimCompress
		TEST_METHOD(Class__Engine__AnimCompress_RemoveEverySecondKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveEverySecondKey, MinKeys, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveEverySecondKey, UnknownData_AN55, 0x005D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_RemoveEverySecondKey, 0x0060);
		}

		// class UAnimCompress_RemoveTrivialKeys : public UAnimCompress
		TEST_METHOD(Class__Engine__AnimCompress_RemoveTrivialKeys)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveTrivialKeys, MaxPosDiff, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveTrivialKeys, MaxAngleDiff, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveTrivialKeys, MaxScaleDiff, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveTrivialKeys, UnknownData_WXCK, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_RemoveTrivialKeys, 0x0068);
		}

		// class UAnimCurveCompressionCodec : public UObject
		TEST_METHOD(Class__Engine__AnimCurveCompressionCodec)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCurveCompressionCodec, 0x0030);
		}

		// class UAnimCurveCompressionCodec_CompressedRichCurve : public UAnimCurveCompressionCodec
		TEST_METHOD(Class__Engine__AnimCurveCompressionCodec_CompressedRichCurve)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCurveCompressionCodec_CompressedRichCurve, 0x0030);
		}

		// class UAnimCurveCompressionCodec_UniformlySampled : public UAnimCurveCompressionCodec
		TEST_METHOD(Class__Engine__AnimCurveCompressionCodec_UniformlySampled)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCurveCompressionCodec_UniformlySampled, 0x0030);
		}

		// class UAnimCurveCompressionSettings : public UObject
		TEST_METHOD(Class__Engine__AnimCurveCompressionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCurveCompressionSettings, Codec, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCurveCompressionSettings, 0x0038);
		}

		// class UAnimMetaData : public UObject
		TEST_METHOD(Class__Engine__AnimMetaData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimMetaData, 0x0030);
		}

		// class UAnimMontage : public UAnimCompositeBase
		TEST_METHOD(Class__Engine__AnimMontage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BlendIn, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BlendInTime, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, UnknownData_9TYY, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BlendOut, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BlendOutTime, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BlendOutTriggerTime, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, SyncGroup, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, SyncSlotIndex, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, UnknownData_3N0S, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, MarkerData, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, CompositeSections, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, SlotAnimTracks, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BranchingPoints, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, bEnableRootMotionTranslation, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, bEnableRootMotionRotation, 0x0181);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, bEnableAutoBlendOut, 0x0182);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, RootMotionRootLock, 0x0183);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, UnknownData_TT4B, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BranchingPointMarkers, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BranchingPointStateNotifyIndices, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, TimeStretchCurve, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, TimeStretchCurveName, 0x01D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimMontage, 0x01D8);
		}

		// class UAnimNotify_PauseClothingSimulation : public UAnimNotify
		TEST_METHOD(Class__Engine__AnimNotify_PauseClothingSimulation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PauseClothingSimulation, 0x0040);
		}

		// class UAnimNotify_PlayParticleEffect : public UAnimNotify
		TEST_METHOD(Class__Engine__AnimNotify_PlayParticleEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, PSTemplate, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, LocationOffset, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, RotationOffset, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, Scale, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, UnknownData_HP82, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, UnknownData_JC6F, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, SocketName, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, UnknownData_O4EC, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PlayParticleEffect, 0x0090);
		}

		// class UAnimNotify_PlaySound : public UAnimNotify
		TEST_METHOD(Class__Engine__AnimNotify_PlaySound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, Sound, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, VolumeMultiplier, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, PitchMultiplier, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, UnknownData_EZ0R, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, AttachName, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, UnknownData_XJ0X, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PlaySound, 0x0060);
		}

		// class UAnimNotify_ResetClothingSimulation : public UAnimNotify
		TEST_METHOD(Class__Engine__AnimNotify_ResetClothingSimulation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_ResetClothingSimulation, 0x0040);
		}

		// class UAnimNotify_ResetDynamics : public UAnimNotify
		TEST_METHOD(Class__Engine__AnimNotify_ResetDynamics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_ResetDynamics, 0x0040);
		}

		// class UAnimNotify_ResumeClothingSimulation : public UAnimNotify
		TEST_METHOD(Class__Engine__AnimNotify_ResumeClothingSimulation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_ResumeClothingSimulation, 0x0040);
		}

		// class UAnimNotifyState_DisableRootMotion : public UAnimNotifyState
		TEST_METHOD(Class__Engine__AnimNotifyState_DisableRootMotion)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_DisableRootMotion, 0x0038);
		}

		// class UAnimNotifyState_TimedParticleEffect : public UAnimNotifyState
		TEST_METHOD(Class__Engine__AnimNotifyState_TimedParticleEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, PSTemplate, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, SocketName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, LocationOffset, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, RotationOffset, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, bDestroyAtEnd, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, UnknownData_FBLB, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_TimedParticleEffect, 0x0068);
		}

		// class UAnimNotifyState_Trail : public UAnimNotifyState
		TEST_METHOD(Class__Engine__AnimNotifyState_Trail)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, PSTemplate, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, FirstSocketName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, SecondSocketName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, WidthScaleMode, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, UnknownData_G5UN, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, WidthScaleCurve, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, UnknownData_Q0ZA, 0x005D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_Trail, 0x0060);
		}

		// class UAnimSequence : public UAnimSequenceBase
		TEST_METHOD(Class__Engine__AnimSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, NumFrames, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_X98L, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, TrackToSkeletonMapTable, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_9FD4, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, CurveCompressionSettings, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_KEOG, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, AdditiveAnimType, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RefPoseType, 0x018D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_VD27, 0x018E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RefPoseSeq, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RefFrameIndex, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, EncodingPkgVersion, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RetargetSource, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, Interpolation, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, bEnableRootMotion, 0x01A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RootMotionRootLock, 0x01AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, bForceRootLock, 0x01AB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, bUseNormalizedRootMotionScale, 0x01AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, bRootMotionSettingsCopiedFromMontage, 0x01AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_KACC, 0x01AE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, AuthoredSyncMarkers, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_2R11, 0x01C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSequence, 0x01D8);
		}

		// class UAnimSet : public UObject
		TEST_METHOD(Class__Engine__AnimSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, UnknownData_DBFO, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, TrackBoneNames, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, LinkupCache, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, BoneUseAnimTranslation, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, ForceUseMeshTranslation, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, UseTranslationBoneNames, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, ForceMeshTranslationBoneNames, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, PreviewSkelMeshName, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, BestRatioSkelMeshName, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, UnknownData_IKVF, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSet, 0x00F8);
		}

		// class UAnimSingleNodeInstance : public UAnimInstance
		TEST_METHOD(Class__Engine__AnimSingleNodeInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSingleNodeInstance, CurrentAsset, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSingleNodeInstance, PostEvaluateAnimEvent, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSingleNodeInstance, 0x0280);
		}

		// class UAnimStateMachineTypes : public UObject
		TEST_METHOD(Class__Engine__AnimStateMachineTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimStateMachineTypes, 0x0030);
		}

		// class UApplicationLifecycleComponent : public UActorComponent
		TEST_METHOD(Class__Engine__ApplicationLifecycleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationWillDeactivateDelegate, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationHasReactivatedDelegate, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationWillEnterBackgroundDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationHasEnteredForegroundDelegate, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationWillTerminateDelegate, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationShouldUnloadResourcesDelegate, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationReceivedStartupArgumentsDelegate, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, OnTemperatureChangeDelegate, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, OnLowPowerModeDelegate, 0x0180);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UApplicationLifecycleComponent, 0x0190);
		}

		// class UArrowComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__ArrowComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, UnknownData_4ZCR, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, ArrowSize, 0x057C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, bIsScreenSizeScaled, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, UnknownData_M570, 0x0581);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, ScreenSize, 0x0584);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, UnknownData_9AXZ, 0x0589);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UArrowComponent, 0x0590);
		}

		// class UAssetExportTask : public UObject
		TEST_METHOD(Class__Engine__AssetExportTask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, Object, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, Exporter, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, Filename, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bSelected, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bReplaceIdentical, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bPrompt, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bAutomated, 0x0053);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bUseFileArchive, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bWriteEmptyFiles, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, UnknownData_05NK, 0x0056);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, IgnoreObjectList, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, Options, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, Errors, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetExportTask, 0x0080);
		}

		// class UAssetManagerSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__AssetManagerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, PrimaryAssetTypesToScan, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, DirectoriesToExclude, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, PrimaryAssetRules, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, CustomPrimaryAssetRules, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, bOnlyCookProductionAssets, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, bShouldManagerDetermineTypeAndName, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, bShouldGuessTypeAndNameInEditor, 0x0082);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, bShouldAcquireMissingChunksOnLoad, 0x0083);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, UnknownData_6Q1F, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, PrimaryAssetIdRedirects, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, PrimaryAssetTypeRedirects, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, AssetPathRedirects, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, MetaDataTagsForAssetRegistry, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetManagerSettings, 0x0108);
		}

		// class UAssetMappingTable : public UObject
		TEST_METHOD(Class__Engine__AssetMappingTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetMappingTable, MappedAssets, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetMappingTable, 0x0040);
		}

		// class UAsyncActionLoadPrimaryAssetBase : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__Engine__AsyncActionLoadPrimaryAssetBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionLoadPrimaryAssetBase, UnknownData_HHOV, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionLoadPrimaryAssetBase, 0x0080);
		}

		// class UAsyncActionLoadPrimaryAsset : public UAsyncActionLoadPrimaryAssetBase
		TEST_METHOD(Class__Engine__AsyncActionLoadPrimaryAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionLoadPrimaryAsset, Completed, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionLoadPrimaryAsset, 0x0090);
		}

		// class UAsyncActionLoadPrimaryAssetClass : public UAsyncActionLoadPrimaryAssetBase
		TEST_METHOD(Class__Engine__AsyncActionLoadPrimaryAssetClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionLoadPrimaryAssetClass, Completed, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionLoadPrimaryAssetClass, 0x0090);
		}

		// class UAsyncActionLoadPrimaryAssetList : public UAsyncActionLoadPrimaryAssetBase
		TEST_METHOD(Class__Engine__AsyncActionLoadPrimaryAssetList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionLoadPrimaryAssetList, Completed, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionLoadPrimaryAssetList, 0x0090);
		}

		// class UAsyncActionLoadPrimaryAssetClassList : public UAsyncActionLoadPrimaryAssetBase
		TEST_METHOD(Class__Engine__AsyncActionLoadPrimaryAssetClassList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionLoadPrimaryAssetClassList, Completed, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionLoadPrimaryAssetClassList, 0x0090);
		}

		// class UAsyncActionChangePrimaryAssetBundles : public UAsyncActionLoadPrimaryAssetBase
		TEST_METHOD(Class__Engine__AsyncActionChangePrimaryAssetBundles)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionChangePrimaryAssetBundles, Completed, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionChangePrimaryAssetBundles, 0x0090);
		}

		// class AAtmosphericFog : public AInfo
		TEST_METHOD(Class__Engine__AtmosphericFog)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAtmosphericFog, AtmosphericFogComponent, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAtmosphericFog, 0x0340);
		}

		// class UAtmosphericFogComponent : public USceneComponent
		TEST_METHOD(Class__Engine__AtmosphericFogComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, UnknownData_CJQO, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, FogMultiplier, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DensityMultiplier, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DensityOffset, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DistanceScale, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, AltitudeScale, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DistanceOffset, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, GroundOffset, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, StartDistance, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, SunDiscScale, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DefaultBrightness, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DefaultLightColor, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, UnknownData_7NZ9, 0x0289);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, PrecomputeParams, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, TransmittanceTexture, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, IrradianceTexture, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, UnknownData_P706, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAtmosphericFogComponent, 0x04A0);
		}

		// class UAudioSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__AudioSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DefaultSoundClassName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DefaultMediaSoundClassName, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DefaultSoundConcurrencyName, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DefaultBaseSoundMix, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, VoiPSoundClass, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, VoiPSampleRate, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, UnknownData_96AR, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, VoipBufferingDelay, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DefaultReverbSendLevel, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, MaximumConcurrentStreams, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, GlobalMinPitchScale, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, GlobalMaxPitchScale, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, QualityLevels, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, UnknownData_8E2N, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, MaxWaveInstances, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, NumStoppingSources, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, PanningMethod, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, MonoChannelUpmixMethod, 0x00ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, UnknownData_GN59, 0x00EE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DialogueFilenameFormat, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, UnknownData_04VG, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioSettings, 0x0108);
		}

		// class AAudioVolume : public AVolume
		TEST_METHOD(Class__Engine__AudioVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, Priority, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, UnknownData_GXDQ, 0x0375);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, Settings, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, AmbientZoneSettings, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, UnknownData_K97X, 0x03BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAudioVolume, 0x03C0);
		}

		// class UAutomationTestSettings : public UObject
		TEST_METHOD(Class__Engine__AutomationTestSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, EngineTestModules, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, EditorTestModules, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, AutomationTestmap, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, EditorPerformanceTestMaps, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, AssetsToOpen, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, BuildPromotionTest, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, MaterialEditorPromotionTest, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, ParticleEditorPromotionTest, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, BlueprintEditorPromotionTest, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, TestLevelFolders, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, ExternalTools, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, ImportExportTestDefinitions, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, LaunchOnSettings, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, DefaultScreenshotResolution, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAutomationTestSettings, 0x0330);
		}

		// class UAvoidanceManager : public UObject
		TEST_METHOD(Class__Engine__AvoidanceManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, UnknownData_BJ8V, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, DefaultTimeToLive, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, LockTimeAfterAvoid, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, LockTimeAfterClean, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, DeltaTimeToPredict, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, ArtificialRadiusExpansion, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, TestHeightDifference, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, HeightCheckMargin, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, UnknownData_DN5T, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAvoidanceManager, 0x0100);
		}

		// class UBillboardComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__BillboardComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, Sprite, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, UnknownData_IA6P, 0x0581);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, ScreenSize, 0x0584);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, U, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, UL, 0x058C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, V, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, VL, 0x0594);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, UnknownData_PAVO, 0x0598);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBillboardComponent, 0x05A0);
		}

		// class UBlendableInterface : public UInterface
		TEST_METHOD(Class__Engine__BlendableInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendableInterface, 0x0030);
		}

		// class USkeleton : public UObject
		TEST_METHOD(Class__Engine__Skeleton)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_BTAN, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, BoneTree, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, RefLocalPoses, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_MV1N, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, VirtualBoneGuid, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, VirtualBones, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, Sockets, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_1FV7, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, SmartNames, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_PH1U, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, BlendProfiles, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, SlotGroups, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_4I76, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, AssetUserData, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeleton, 0x0368);
		}

		// class UBlendProfile : public UObject
		TEST_METHOD(Class__Engine__BlendProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendProfile, UnknownData_5SMA, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendProfile, OwningSkeleton, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendProfile, ProfileEntries, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendProfile, 0x0050);
		}

		// class ABlockingVolume : public AVolume
		TEST_METHOD(Class__Engine__BlockingVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABlockingVolume, 0x0370);
		}

		// class UBlueprintMapLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__BlueprintMapLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintMapLibrary, 0x0030);
		}

		// class UBlueprintPathsLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__BlueprintPathsLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintPathsLibrary, 0x0030);
		}

		// class UBlueprintPlatformLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__BlueprintPlatformLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintPlatformLibrary, 0x0030);
		}

		// class UBlueprintSetLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__BlueprintSetLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintSetLibrary, 0x0030);
		}

		// class UBodySetup : public UObject
		TEST_METHOD(Class__Engine__BodySetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, AggGeom, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, BoneName, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, PhysicsType, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, UnknownData_J389, 0x0092);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, CollisionReponse, 0x0093);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, CollisionTraceFlag, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, UnknownData_43IJ, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, PhysMaterial, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, WalkableSlopeOverride, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, UnknownData_4CW7, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, DefaultInstance, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, UnknownData_8M9N, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, BuildScale3D, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, UnknownData_E6VN, 0x0274);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBodySetup, 0x0280);
		}

		// class UBoneMaskFilter : public UObject
		TEST_METHOD(Class__Engine__BoneMaskFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoneMaskFilter, BlendPoses, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoneMaskFilter, 0x0040);
		}

		// class UBookmarkBase : public UObject
		TEST_METHOD(Class__Engine__BookmarkBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBookmarkBase, 0x0030);
		}

		// class UBookMark : public UBookmarkBase
		TEST_METHOD(Class__Engine__BookMark)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark, Location, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark, Rotation, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark, HiddenLevels, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBookMark, 0x0058);
		}

		// class UBookMark2D : public UBookmarkBase
		TEST_METHOD(Class__Engine__BookMark2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark2D, Zoom2D, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark2D, Location, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark2D, UnknownData_RO2N, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBookMark2D, 0x0040);
		}

		// class UShapeComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__ShapeComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UShapeComponent, ShapeBodySetup, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShapeComponent, ShapeColor, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShapeComponent, UnknownData_EU2C, 0x0585);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShapeComponent, AreaClass, 0x0588);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShapeComponent, 0x0590);
		}

		// class UBoxComponent : public UShapeComponent
		TEST_METHOD(Class__Engine__BoxComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxComponent, BoxExtent, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxComponent, LineThickness, 0x059C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoxComponent, 0x05A0);
		}

		// class AReflectionCapture : public AActor
		TEST_METHOD(Class__Engine__ReflectionCapture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AReflectionCapture, CaptureComponent, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AReflectionCapture, 0x0340);
		}

		// class ABoxReflectionCapture : public AReflectionCapture
		TEST_METHOD(Class__Engine__BoxReflectionCapture)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABoxReflectionCapture, 0x0340);
		}

		// class UReflectionCaptureComponent : public USceneComponent
		TEST_METHOD(Class__Engine__ReflectionCaptureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, CaptureOffsetComponent, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, ReflectionSourceType, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, UnknownData_FLZD, 0x0261);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, Cubemap, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, SourceCubemapAngle, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, Brightness, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, CaptureOffset, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, MapBuildDataId, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, UnknownData_6LIA, 0x0294);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReflectionCaptureComponent, 0x02D0);
		}

		// class UBoxReflectionCaptureComponent : public UReflectionCaptureComponent
		TEST_METHOD(Class__Engine__BoxReflectionCaptureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxReflectionCaptureComponent, BoxTransitionDistance, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxReflectionCaptureComponent, UnknownData_D8FY, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxReflectionCaptureComponent, PreviewInfluenceBox, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxReflectionCaptureComponent, PreviewCaptureBox, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxReflectionCaptureComponent, UnknownData_4MIU, 0x02E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoxReflectionCaptureComponent, 0x02F0);
		}

		// class UBreakpoint : public UObject
		TEST_METHOD(Class__Engine__Breakpoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBreakpoint, UnknownData_S6MA, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBreakpoint, Node, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBreakpoint, UnknownData_VI9G, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBreakpoint, 0x0048);
		}

		// class UBrushBuilder : public UObject
		TEST_METHOD(Class__Engine__BrushBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, BitmapFilename, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, Tooltip, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, UnknownData_WVRP, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, Vertices, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, Polys, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, Layer, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, UnknownData_B5EK, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushBuilder, 0x0088);
		}

		// class UBrushComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__BrushComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushComponent, Brush, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushComponent, BrushBodySetup, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushComponent, UnknownData_JU2W, 0x0588);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushComponent, 0x0590);
		}

		// class ABrushShape : public ABrush
		TEST_METHOD(Class__Engine__BrushShape)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABrushShape, 0x0370);
		}

		// class UButtonStyleAsset : public UObject
		TEST_METHOD(Class__Engine__ButtonStyleAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonStyleAsset, ButtonStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UButtonStyleAsset, 0x02A8);
		}

		// class UCameraAnim : public UObject
		TEST_METHOD(Class__Engine__CameraAnim)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, CameraInterpGroup, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, AnimLength, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, BoundingBox, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, UnknownData_FI4H, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, BaseFOV, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, BasePostProcessSettings, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, BasePostProcessBlendWeight, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, UnknownData_I1R6, 0x0594);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraAnim, 0x05A0);
		}

		// class UCameraAnimInst : public UObject
		TEST_METHOD(Class__Engine__CameraAnimInst)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, CamAnim, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, InterpGroupInst, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, UnknownData_LSQL, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, PlayRate, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, UnknownData_329H, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, MoveTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, MoveInst, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, PlaySpace, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, UnknownData_45OK, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraAnimInst, 0x0120);
		}

		// class ACameraBlockingVolume : public AVolume
		TEST_METHOD(Class__Engine__CameraBlockingVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACameraBlockingVolume, 0x0370);
		}

		// class UCameraModifier : public UObject
		TEST_METHOD(Class__Engine__CameraModifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, UnknownData_PTNA, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, Priority, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, UnknownData_8QJD, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, CameraOwner, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, AlphaInTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, AlphaOutTime, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, Alpha, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, UnknownData_BMK2, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraModifier, 0x0050);
		}

		// class UCameraModifier_CameraShake : public UCameraModifier
		TEST_METHOD(Class__Engine__CameraModifier_CameraShake)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier_CameraShake, ActiveShakes, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier_CameraShake, ExpiredPooledShakesMap, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier_CameraShake, SplitScreenShakeScale, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier_CameraShake, UnknownData_B7BS, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraModifier_CameraShake, 0x00B8);
		}

		// class UCanvas : public UObject
		TEST_METHOD(Class__Engine__Canvas)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, OrgX, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, OrgY, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, ClipX, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, ClipY, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, DrawColor, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, UnknownData_SGF6, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, SizeX, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, SizeY, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, ColorModulate, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, DefaultTexture, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, GradientTexture0, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, ReporterGraph, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, UnknownData_35HX, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCanvas, 0x02C0);
		}

		// class UTextureRenderTarget : public UTexture
		TEST_METHOD(Class__Engine__TextureRenderTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget, TargetGamma, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget, UnknownData_L2IK, 0x00C4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureRenderTarget, 0x00C8);
		}

		// class UTextureRenderTarget2D : public UTextureRenderTarget
		TEST_METHOD(Class__Engine__TextureRenderTarget2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, SizeX, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, SizeY, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, ClearColor, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, AddressX, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, AddressY, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, RenderTargetFormat, 0x00E3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, OverrideFormat, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, UnknownData_5SMP, 0x00E5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureRenderTarget2D, 0x00F0);
		}

		// class UCanvasRenderTarget2D : public UTextureRenderTarget2D
		TEST_METHOD(Class__Engine__CanvasRenderTarget2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasRenderTarget2D, OnCanvasRenderTargetUpdate, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasRenderTarget2D, World, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasRenderTarget2D, bShouldClearRenderTargetOnReceiveUpdate, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasRenderTarget2D, UnknownData_B7IS, 0x0109);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCanvasRenderTarget2D, 0x0110);
		}

		// class UCapsuleComponent : public UShapeComponent
		TEST_METHOD(Class__Engine__CapsuleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCapsuleComponent, CapsuleHalfHeight, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCapsuleComponent, CapsuleRadius, 0x0594);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCapsuleComponent, UnknownData_8RE5, 0x0598);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCapsuleComponent, 0x05A0);
		}

		// class UCheckBoxStyleAsset : public UObject
		TEST_METHOD(Class__Engine__CheckBoxStyleAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBoxStyleAsset, CheckBoxStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheckBoxStyleAsset, 0x05B0);
		}

		// class UChildActorComponent : public USceneComponent
		TEST_METHOD(Class__Engine__ChildActorComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildActorComponent, ChildActorClass, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildActorComponent, ChildActor, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildActorComponent, ChildActorTemplate, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildActorComponent, UnknownData_BDDA, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChildActorComponent, 0x0290);
		}

		// class UChildConnection : public UNetConnection
		TEST_METHOD(Class__Engine__ChildConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildConnection, Parent, 0x18F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChildConnection, 0x18F8);
		}

		// class UPlatformInterfaceBase : public UObject
		TEST_METHOD(Class__Engine__PlatformInterfaceBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceBase, AllDelegates, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformInterfaceBase, 0x0040);
		}

		// class UCloudStorageBase : public UPlatformInterfaceBase
		TEST_METHOD(Class__Engine__CloudStorageBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCloudStorageBase, LocalCloudFiles, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCloudStorageBase, UnknownData_7GOC, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCloudStorageBase, 0x0058);
		}

		// class UCollisionProfile : public UDeveloperSettings
		TEST_METHOD(Class__Engine__CollisionProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, Profiles, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, DefaultChannelResponses, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, EditProfiles, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, ProfileRedirects, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, CollisionChannelRedirects, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, UnknownData_L5XP, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCollisionProfile, 0x0160);
		}

		// class UCommandlet : public UObject
		TEST_METHOD(Class__Engine__Commandlet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpDescription, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpUsage, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpWebLink, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpParamNames, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpParamDescriptions, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, UnknownData_2U0V, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCommandlet, 0x0088);
		}

		// class UComponentDelegateBinding : public UDynamicBlueprintBinding
		TEST_METHOD(Class__Engine__ComponentDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UComponentDelegateBinding, ComponentDelegateBindings, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComponentDelegateBinding, 0x0040);
		}

		// class UCurveTable : public UObject
		TEST_METHOD(Class__Engine__CurveTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveTable, UnknownData_92RR, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveTable, 0x00A8);
		}

		// class UCompositeCurveTable : public UCurveTable
		TEST_METHOD(Class__Engine__CompositeCurveTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeCurveTable, ParentTables, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeCurveTable, UnknownData_HMU1, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeCurveTable, OldParentTables, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCompositeCurveTable, 0x00D0);
		}

		// class UDataTable : public UObject
		TEST_METHOD(Class__Engine__DataTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataTable, RowStruct, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataTable, UnknownData_DCZB, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataTable, UnknownData_GDBX, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDataTable, 0x00A8);
		}

		// class UCompositeDataTable : public UDataTable
		TEST_METHOD(Class__Engine__CompositeDataTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeDataTable, ParentTables, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeDataTable, UnknownData_Y5JZ, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeDataTable, OldParentTables, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCompositeDataTable, 0x00D0);
		}

		// class UEngine : public UObject
		TEST_METHOD(Class__Engine__Engine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_ODUG, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TinyFont, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TinyFontName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SmallFont, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SmallFontName, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MediumFont, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MediumFontName, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LargeFont, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LargeFontName, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SubtitleFont, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SubtitleFontName, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AdditionalFonts, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_SUXH, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AdditionalFontNames, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConsoleClass, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConsoleClassName, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameViewportClientClass, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameViewportClientClassName, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LocalPlayerClass, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LocalPlayerClassName, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WorldSettingsClass, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WorldSettingsClassName, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NavigationSystemClassName, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NavigationSystemClass, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NavigationSystemConfigClassName, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NavigationSystemConfigClass, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AvoidanceManagerClassName, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AvoidanceManagerClass, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PhysicsCollisionHandlerClass, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PhysicsCollisionHandlerClassName, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameUserSettingsClassName, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameUserSettingsClass, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AIControllerClassName, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameUserSettings, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelScriptActorClass, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelScriptActorClassName, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBlueprintBaseClassName, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameSingletonClassName, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameSingleton, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AssetManagerClassName, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AssetManager, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultTexture, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultTextureName, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultDiffuseTexture, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultDiffuseTextureName, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBSPVertexTexture, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBSPVertexTextureName, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, HighFrequencyNoiseTexture, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, HighFrequencyNoiseTextureName, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBokehTexture, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBokehTextureName, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBloomKernelTexture, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBloomKernelTextureName, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WireframeMaterial, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WireframeMaterialName, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DebugMeshMaterial, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DebugMeshMaterialName, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelColorationLitMaterial, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelColorationLitMaterialName, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelColorationUnlitMaterial, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelColorationUnlitMaterialName, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightingTexelDensityMaterial, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightingTexelDensityName, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ShadedLevelColorationLitMaterial, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ShadedLevelColorationLitMaterialName, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ShadedLevelColorationUnlitMaterial, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ShadedLevelColorationUnlitMaterialName, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, RemoveSurfaceMaterial, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, RemoveSurfaceMaterialName, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorMaterial, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorMaterialName, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterial_ColorOnly, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterialName_ColorOnly, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterial_AlphaAsColor, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterialName_AlphaAsColor, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterial_RedOnly, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterialName_RedOnly, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterial_GreenOnly, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterialName_GreenOnly, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterial_BlueOnly, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterialName_BlueOnly, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DebugEditorMaterialName, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterial, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialX, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialXAxis, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialY, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialYAxis, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialZ, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialZAxis, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialPrismatic, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, InvalidLightmapSettingsMaterial, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, InvalidLightmapSettingsMaterialName, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PreviewShadowsIndicatorMaterial, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PreviewShadowsIndicatorMaterialName, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ArrowMaterial, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ArrowMaterialYellow, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ArrowMaterialName, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightingOnlyBrightness, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ShaderComplexityColors, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, QuadComplexityColors, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightComplexityColors, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, StationaryLightOverlapColors, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LODColorationColors, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, HLODColorationColors, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, StreamingAccuracyColors, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxPixelShaderAdditiveComplexityCount, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxES2PixelShaderAdditiveComplexityCount, 0x061C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxES3PixelShaderAdditiveComplexityCount, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MinLightMapDensity, 0x0624);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, IdealLightMapDensity, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxLightMapDensity, 0x062C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_KAF5, 0x0631);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, RenderLightMapDensityGrayscaleScale, 0x0634);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, RenderLightMapDensityColorScale, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightMapDensityVertexMappedColor, 0x063C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightMapDensitySelectedColor, 0x064C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_V8SL, 0x065C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, StatColorMappings, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultPhysMaterial, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultPhysMaterialName, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ActiveGameNameRedirects, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ActiveClassRedirects, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ActivePluginRedirects, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ActiveStructRedirects, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PreIntegratedSkinBRDFTexture, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PreIntegratedSkinBRDFTextureName, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MiniFontTexture, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MiniFontTextureName, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WeightMapPlaceholderTexture, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WeightMapPlaceholderTextureName, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightMapDensityTexture, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightMapDensityTextureName, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_2E14, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameViewport, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DeferredCommands, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TickCycles, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameCycles, 0x0774);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ClientCycles, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NearClipPlane, 0x077C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_E5OO, 0x0781);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaximumLoopIterationCount, 0x0784);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_UAAO, 0x0789);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, FixedFrameRate, 0x078C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SmoothedFrameRateRange, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultCustomTimeStep, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, CurrentCustomTimeStep, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, CustomTimeStepClassName, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultTimecodeProvider, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, CustomTimecodeProvider, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultTimecodeProviderClassName, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TimecodeProviderClassName, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultTimecodeFrameRate, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_HMIS, 0x0811);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NumPawnsAllowedToBeSpawnedInAFrame, 0x0814);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_IMKI, 0x0819);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_WorldBox, 0x081C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_BrushWire, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_AddWire, 0x0824);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_SubtractWire, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_SemiSolidWire, 0x082C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_NonSolidWire, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_WireBackground, 0x0834);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_ScaleBoxHi, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_VolumeCollision, 0x083C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_BSPCollision, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_OrthoBackground, 0x0844);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_Volume, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_BrushShape, 0x084C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, StreamingDistanceFactor, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_FEUK, 0x0854);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameScreenshotSaveDirectory, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TransitionType, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_2KN5, 0x0869);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TransitionDescription, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TransitionGameMode, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MeshLODRange, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_5QOO, 0x0895);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, CameraRotationThreshold, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, CameraTranslationThreshold, 0x089C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PrimitiveProbablyVisibleTime, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxOcclusionPixelsFraction, 0x08A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_23D8, 0x08A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxParticleResize, 0x08AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxParticleResizeWarn, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_WMYG, 0x08B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PendingDroppedNotes, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NetClientTicksPerSecond, 0x08C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DisplayGamma, 0x08CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MinDesiredFrameRate, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultSelectedMaterialColor, 0x08D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectedMaterialColor, 0x08E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectionOutlineColor, 0x08F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SubduedSelectionOutlineColor, 0x0904);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectedMaterialColorOverride, 0x0914);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, bIsOverridingSelectedColor, 0x0924);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_03LV, 0x0925);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_8DDQ, 0x0929);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, bEnableVisualLogRecordingOnStart, 0x092C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_KZ5P, 0x0930);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ScreenSaverInhibitorSemaphore, 0x0934);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_3SY9, 0x0939);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ParticleEventManagerClassPath, 0x0940);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_KDW7, 0x0950);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectionHighlightIntensity, 0x0960);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, BSPSelectionHighlightIntensity, 0x0964);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectionHighlightIntensityBillboards, 0x0968);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_0OQE, 0x096C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NetDriverDefinitions, 0x0BA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ServerActors, 0x0BB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, RuntimeServerActors, 0x0BC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NetErrorLogInterval, 0x0BD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_VVWO, 0x0BDD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NextWorldContextHandle, 0x0BF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_IK66, 0x0BFC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngine, 0x0D90);
		}

		// class UIngame_Hunter_PC1_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Ingame_Hunter_PC1__Ingame_Hunter_PC1_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Hunter_PC1_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Hunter_PC1_C, HPAlert, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Hunter_PC1_C, ShowTutorial, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Hunter_PC1_C, ShowGuide, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Hunter_PC1_C, ScreenFXAnimation, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Hunter_PC1_C, CanvasPanel_1, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Hunter_PC1_C, Crosshair, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Hunter_PC1_C, HPBorder, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Hunter_PC1_C, HPIcon, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Hunter_PC1_C, HPProgress, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Hunter_PC1_C, ImmuneActiveIcon, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Hunter_PC1_C, Ingame_PingPanel, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Hunter_PC1_C, Ingame_Quest, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Hunter_PC1_C, Ingame_Tutorial, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Hunter_PC1_C, InteractPanel, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Hunter_PC1_C, KeyIMG, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Hunter_PC1_C, PlayerStatusPanel, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Hunter_PC1_C, ScreenFX, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Hunter_PC1_C, TextBlock_DebugCameraMode, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Hunter_PC1_C, TextBlock_Debuging, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Hunter_PC1_C, TextBlock_Interact, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Hunter_PC1_C, TextBlock_SuddenDeath, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Hunter_PC1_C, Widget_ImagePerk_2, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Hunter_PC1_C, Widget_ImagePerk_3, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Hunter_PC1_C, Widget_ImagePerk_Unique, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Hunter_PC1_C, Widget_Skillimmune, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Hunter_PC1_C, Widget_SkillPerk, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Hunter_PC1_C, Widget_SkillSpecter, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Hunter_PC1_C, Widget_SkillSpecterLimit, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Hunter_PC1_C, OnTrapped, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Hunter_PC1_C, FoundInteract_, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Hunter_PC1_C, UnknownData_ZDHB, 0x0341);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Hunter_PC1_C, TutorialIngame, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Hunter_PC1_C, CurrentHP, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Hunter_PC1_C, UnknownData_TPS0, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Hunter_PC1_C, HPDynamicInstance, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Hunter_PC1_C, Quest, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Hunter_PC1_C, playerData, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIngame_Hunter_PC1_C, 0x0370);
		}

		// class AHSHPlayerStart_Survivor_C : public AHSHPlayerStart_C
		TEST_METHOD(BlueprintGeneratedClass__HSHPlayerStart_Survivor__HSHPlayerStart_Survivor_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHSHPlayerStart_Survivor_C, 0x0358);
		}

		// class UScriptViewportClient : public UObject
		TEST_METHOD(Class__Engine__ScriptViewportClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScriptViewportClient, UnknownData_XDSM, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScriptViewportClient, 0x0040);
		}

		// class UGameViewportClient : public UScriptViewportClient
		TEST_METHOD(Class__Engine__GameViewportClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, UnknownData_39LZ, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, ViewportConsole, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, DebugProperties, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, UnknownData_G6VF, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, World, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, GameInstance, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, UnknownData_V8UJ, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameViewportClient, 0x0300);
		}

		// class UConsole : public UObject
		TEST_METHOD(Class__Engine__Console)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, UnknownData_EDXS, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, ConsoleTargetPlayer, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, DefaultTexture_Black, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, DefaultTexture_White, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, UnknownData_00QL, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, HistoryBuffer, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, UnknownData_MH9M, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConsole, 0x0138);
		}

		// class UControlChannel : public UChannel
		TEST_METHOD(Class__Engine__ControlChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlChannel, UnknownData_QZI9, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UControlChannel, 0x0090);
		}

		// class UControlRigInterface : public UInterface
		TEST_METHOD(Class__Engine__ControlRigInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UControlRigInterface, 0x0030);
		}

		// class UStreamingSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__StreamingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, UnknownData_2810, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, TimeLimitExceededMultiplier, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, TimeLimitExceededMinTime, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, MinBulkDataSizeForAsyncLoading, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, UnknownData_AMGL, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, AsyncLoadingTimeLimit, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, PriorityAsyncLoadingExtraTime, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, LevelStreamingActorsUpdateTimeLimit, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, PriorityLevelStreamingActorsUpdateExtraTime, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, LevelStreamingComponentsRegistrationGranularity, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, LevelStreamingUnregisterComponentsTimeLimit, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, LevelStreamingComponentsUnregistrationGranularity, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, UnknownData_2604, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStreamingSettings, 0x0078);
		}

		// class UGarbageCollectionSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__GarbageCollectionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, TimeBetweenPurgingPendingKillObjects, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, UnknownData_3KSX, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, MinGCClusterSize, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, NumRetriesBeforeForcingGC, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, MaxObjectsNotConsideredByGC, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, SizeOfPermanentObjectPool, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, MaxObjectsInGame, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, MaxObjectsInEditor, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGarbageCollectionSettings, 0x0060);
		}

		// class ACullDistanceVolume : public AVolume
		TEST_METHOD(Class__Engine__CullDistanceVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACullDistanceVolume, CullDistances, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACullDistanceVolume, UnknownData_WOG7, 0x0381);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACullDistanceVolume, 0x0388);
		}

		// class UCurveBase : public UObject
		TEST_METHOD(Class__Engine__CurveBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveBase, UnknownData_XH9W, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveBase, 0x0038);
		}

		// class UCurveEdPresetCurve : public UObject
		TEST_METHOD(Class__Engine__CurveEdPresetCurve)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveEdPresetCurve, 0x0030);
		}

		// class UCurveFloat : public UCurveBase
		TEST_METHOD(Class__Engine__CurveFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveFloat, FloatCurve, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveFloat, bIsEventCurve, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveFloat, UnknownData_99IR, 0x00B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveFloat, 0x00C0);
		}

		// class UCurveLinearColor : public UCurveBase
		TEST_METHOD(Class__Engine__CurveLinearColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, FloatCurves, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustHue, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustSaturation, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustBrightness, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustBrightnessCurve, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustVibrance, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustMinAlpha, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustMaxAlpha, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, UnknownData_YWNW, 0x0254);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveLinearColor, 0x0258);
		}

		// class UTexture2D : public UTexture
		TEST_METHOD(Class__Engine__Texture2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, StreamingIndex, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, LevelIndex, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, FirstResourceMemMip, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, AddressX, 0x00CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, AddressY, 0x00CE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, UnknownData_G3J2, 0x00CF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, ImportedSize, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, ForceMipLevelsToBeResidentTimestamp, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, UnknownData_7M03, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTexture2D, 0x00F8);
		}

		// class UCurveLinearColorAtlas : public UTexture2D
		TEST_METHOD(Class__Engine__CurveLinearColorAtlas)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColorAtlas, TextureSize, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColorAtlas, GradientPixelSize, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColorAtlas, GradientCurves, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveLinearColorAtlas, 0x0110);
		}

		// class UCurveSourceInterface : public UInterface
		TEST_METHOD(Class__Engine__CurveSourceInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveSourceInterface, 0x0030);
		}

		// class UCurveVector : public UCurveBase
		TEST_METHOD(Class__Engine__CurveVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveVector, FloatCurves, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveVector, 0x01B8);
		}

		// class UDamageType : public UObject
		TEST_METHOD(Class__Engine__DamageType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, UnknownData_9VRB, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, DamageImpulse, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, DestructibleImpulse, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, DestructibleDamageSpreadScale, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, DamageFalloff, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, UnknownData_YMLD, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDamageType, 0x0048);
		}

		// class UDataTableFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__DataTableFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDataTableFunctionLibrary, 0x0030);
		}

		// class ADebugCameraController : public APlayerController
		TEST_METHOD(Class__Engine__DebugCameraController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, UnknownData_MUM3, 0x0691);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, DrawFrustum, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, SelectedActor, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, SelectedComponent, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, OriginalControllerRef, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, OriginalPlayer, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, SpeedScale, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, InitialMaxSpeed, 0x06C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, InitialAccel, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, InitialDecel, 0x06CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, UnknownData_YJGH, 0x06D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADebugCameraController, 0x06D8);
		}

		// class ADebugCameraHUD : public AHUD
		TEST_METHOD(Class__Engine__DebugCameraHUD)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADebugCameraHUD, 0x0428);
		}

		// class UDebugDrawService : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__DebugDrawService)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDebugDrawService, 0x0030);
		}

		// class ADecalActor : public AActor
		TEST_METHOD(Class__Engine__DecalActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADecalActor, Decal, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADecalActor, 0x0340);
		}

		// class UDecalComponent : public USceneComponent
		TEST_METHOD(Class__Engine__DecalComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, DecalMaterial, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, SortOrder, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, FadeScreenSize, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, FadeStartDelay, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, FadeDuration, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, FadeInDuration, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, FadeInStartDelay, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, UnknownData_76QH, 0x0279);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, DecalSize, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, UnknownData_DRHK, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDecalComponent, 0x02A0);
		}

		// class APhysicsVolume : public AVolume
		TEST_METHOD(Class__Engine__PhysicsVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsVolume, TerminalVelocity, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsVolume, Priority, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsVolume, FluidFriction, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsVolume, UnknownData_XN7B, 0x037D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APhysicsVolume, 0x0380);
		}

		// class ADefaultPhysicsVolume : public APhysicsVolume
		TEST_METHOD(Class__Engine__DefaultPhysicsVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADefaultPhysicsVolume, 0x0380);
		}

		// class UDemoNetConnection : public UNetConnection
		TEST_METHOD(Class__Engine__DemoNetConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetConnection, UnknownData_Z87W, 0x18F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDemoNetConnection, 0x1910);
		}

		// class UDemoNetDriver : public UNetDriver
		TEST_METHOD(Class__Engine__DemoNetDriver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, UnknownData_YFBU, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, RollbackNetStartupActors, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, UnknownData_I84M, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, CheckpointSaveMaxMSPerFrame, 0x0B3C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, UnknownData_0QPM, 0x0B40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, bIsLocalReplay, 0x0B70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, UnknownData_97F0, 0x0B71);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDemoNetDriver, 0x0E70);
		}

		// class UPendingNetGame : public UObject
		TEST_METHOD(Class__Engine__PendingNetGame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPendingNetGame, UnknownData_PKE2, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPendingNetGame, NetDriver, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPendingNetGame, DemoNetDriver, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPendingNetGame, UnknownData_5D97, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPendingNetGame, 0x00C8);
		}

		// class UDemoPendingNetGame : public UPendingNetGame
		TEST_METHOD(Class__Engine__DemoPendingNetGame)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDemoPendingNetGame, 0x00C8);
		}

		// class UDestructibleInterface : public UInterface
		TEST_METHOD(Class__Engine__DestructibleInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDestructibleInterface, 0x0030);
		}

		// class UTextureLODSettings : public UObject
		TEST_METHOD(Class__Engine__TextureLODSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureLODSettings, TextureLODGroups, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureLODSettings, 0x0040);
		}

		// class UDeviceProfile : public UTextureLODSettings
		TEST_METHOD(Class__Engine__DeviceProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, DeviceType, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, BaseProfileName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, Parent, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, UnknownData_B4K0, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, CVars, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, UnknownData_HHWO, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeviceProfile, 0x00A0);
		}

		// class UDeviceProfileManager : public UObject
		TEST_METHOD(Class__Engine__DeviceProfileManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfileManager, Profiles, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfileManager, UnknownData_4F1U, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeviceProfileManager, 0x00B0);
		}

		// class UDialogueSoundWaveProxy : public USoundBase
		TEST_METHOD(Class__Engine__DialogueSoundWaveProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueSoundWaveProxy, UnknownData_FEYF, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDialogueSoundWaveProxy, 0x0120);
		}

		// class UDialogueVoice : public UObject
		TEST_METHOD(Class__Engine__DialogueVoice)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, Gender, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, Plurality, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, UnknownData_HPOZ, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, LocalizationGUID, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, UnknownData_NB0K, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDialogueVoice, 0x0048);
		}

		// class UDialogueWave : public UObject
		TEST_METHOD(Class__Engine__DialogueWave)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, UnknownData_2WS4, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, SpokenText, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, SubtitleOverride, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, ContextMappings, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, LocalizationGUID, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDialogueWave, 0x0078);
		}

		// class ALight : public AActor
		TEST_METHOD(Class__Engine__Light)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALight, LightComponent, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALight, UnknownData_ME01, 0x0341);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALight, 0x0348);
		}

		// class ADirectionalLight : public ALight
		TEST_METHOD(Class__Engine__DirectionalLight)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADirectionalLight, 0x0348);
		}

		// class ULightComponentBase : public USceneComponent
		TEST_METHOD(Class__Engine__LightComponentBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, LightGuid, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, Brightness, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, Intensity, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, LightColor, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, UnknownData_WM5B, 0x0276);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, IndirectLightingIntensity, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, VolumetricScatteringIntensity, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, SamplesPerPixel, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, UnknownData_0XLH, 0x0284);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightComponentBase, 0x028C);
		}

		// class ULightComponent : public ULightComponentBase
		TEST_METHOD(Class__Engine__LightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, MaxDrawDistance, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, MaxDistanceFadeRange, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_OYUQ, 0x0295);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowMapChannel, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_8UND, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, MinRoughness, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, SpecularScale, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowResolutionScale, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowBias, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowSharpen, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ContactShadowLength, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_621W, 0x02B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, LightingChannels, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_Z1KA, 0x02BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, LightFunctionMaterial, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, LightFunctionScale, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_E98V, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, IESTexture, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_Y1CZ, 0x02E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, IESBrightnessScale, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, LightFunctionFadeDistance, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, DisabledBrightness, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_P982, 0x02F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, BloomScale, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, BloomThreshold, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, BloomTint, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, bUseRayTracedDistanceFieldShadows, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_IXNH, 0x0301);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, RayStartOffsetDepthScale, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_IYLY, 0x0308);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightComponent, 0x0390);
		}

		// class UGE_Buff_Survivalist_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Buff_Survivalist__GE_Buff_Survivalist_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Buff_Survivalist_C, 0x05F8);
		}

		// class UDirectionalLightComponent : public ULightComponent
		TEST_METHOD(Class__Engine__DirectionalLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, UnknownData_X0NI, 0x0391);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, OcclusionMaskDarkness, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, OcclusionDepthRange, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, LightShaftOverrideDirection, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, WholeSceneDynamicShadowRadius, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, DynamicShadowDistanceMovableLight, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, DynamicShadowDistanceStationaryLight, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, DynamicShadowCascades, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CascadeDistributionExponent, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CascadeTransitionFraction, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, ShadowDistanceFadeoutFraction, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, UnknownData_4SML, 0x03C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, FarShadowCascadeCount, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, FarShadowDistance, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, DistanceFieldShadowDistance, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, LightSourceAngle, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, LightSourceSoftAngle, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, TraceDistance, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, LightmassSettings, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, UnknownData_8D0N, 0x03F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, ModulatedShadowColor, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, UnknownData_0UGX, 0x03F9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDirectionalLightComponent, 0x0400);
		}

		// class UDistribution : public UObject
		TEST_METHOD(Class__Engine__Distribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistribution, UnknownData_WYCW, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistribution, 0x0038);
		}

		// class UDistributionFloat : public UDistribution
		TEST_METHOD(Class__Engine__DistributionFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloat, UnknownData_VYE2, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloat, 0x0040);
		}

		// class UDistributionFloatConstant : public UDistributionFloat
		TEST_METHOD(Class__Engine__DistributionFloatConstant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatConstant, Constant, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatConstant, UnknownData_0APQ, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatConstant, 0x0048);
		}

		// class UDistributionFloatConstantCurve : public UDistributionFloat
		TEST_METHOD(Class__Engine__DistributionFloatConstantCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatConstantCurve, ConstantCurve, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatConstantCurve, 0x0058);
		}

		// class UDistributionFloatParameterBase : public UDistributionFloatConstant
		TEST_METHOD(Class__Engine__DistributionFloatParameterBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, ParameterName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, MinInput, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, MaxInput, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, MinOutput, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, MaxOutput, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, ParamMode, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, UnknownData_MCFL, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatParameterBase, 0x0068);
		}

		// class UDistributionFloatParticleParameter : public UDistributionFloatParameterBase
		TEST_METHOD(Class__Engine__DistributionFloatParticleParameter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatParticleParameter, 0x0068);
		}

		// class UDistributionFloatUniform : public UDistributionFloat
		TEST_METHOD(Class__Engine__DistributionFloatUniform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatUniform, Min, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatUniform, Max, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatUniform, 0x0048);
		}

		// class UDistributionFloatUniformCurve : public UDistributionFloat
		TEST_METHOD(Class__Engine__DistributionFloatUniformCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatUniformCurve, ConstantCurve, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatUniformCurve, 0x0058);
		}

		// class UDistributionVector : public UDistribution
		TEST_METHOD(Class__Engine__DistributionVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVector, UnknownData_I32E, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVector, 0x0040);
		}

		// class UDistributionVectorConstant : public UDistributionVector
		TEST_METHOD(Class__Engine__DistributionVectorConstant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstant, Constant, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstant, UnknownData_SZ9R, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstant, LockedAxes, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstant, UnknownData_4RS5, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorConstant, 0x0058);
		}

		// class UDistributionVectorConstantCurve : public UDistributionVector
		TEST_METHOD(Class__Engine__DistributionVectorConstantCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstantCurve, ConstantCurve, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstantCurve, UnknownData_N0O1, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstantCurve, LockedAxes, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstantCurve, UnknownData_T6VJ, 0x005D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorConstantCurve, 0x0060);
		}

		// class UDistributionVectorParameterBase : public UDistributionVectorConstant
		TEST_METHOD(Class__Engine__DistributionVectorParameterBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, ParameterName, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, MinInput, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, MaxInput, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, MinOutput, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, MaxOutput, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, ParamModes, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, UnknownData_D0XF, 0x0093);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorParameterBase, 0x0098);
		}

		// class UDistributionVectorParticleParameter : public UDistributionVectorParameterBase
		TEST_METHOD(Class__Engine__DistributionVectorParticleParameter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorParticleParameter, 0x0098);
		}

		// class UDistributionVectorUniform : public UDistributionVector
		TEST_METHOD(Class__Engine__DistributionVectorUniform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, Max, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, Min, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, UnknownData_YKBX, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, LockedAxes, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, MirrorFlags, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, UnknownData_OE2D, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorUniform, 0x0068);
		}

		// class UDistributionVectorUniformCurve : public UDistributionVector
		TEST_METHOD(Class__Engine__DistributionVectorUniformCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, ConstantCurve, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, UnknownData_FJOA, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, LockedAxes, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, MirrorFlags, 0x005E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, UnknownData_WX6P, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, UnknownData_R6HR, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorUniformCurve, 0x0068);
		}

		// class ADocumentationActor : public AActor
		TEST_METHOD(Class__Engine__DocumentationActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADocumentationActor, UnknownData_GX18, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADocumentationActor, 0x0340);
		}

		// class UDPICustomScalingRule : public UObject
		TEST_METHOD(Class__Engine__DPICustomScalingRule)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDPICustomScalingRule, 0x0030);
		}

		// class UDrawFrustumComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__DrawFrustumComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, UnknownData_GBCP, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, FrustumAngle, 0x057C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, FrustumAspectRatio, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, FrustumStartDist, 0x0584);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, FrustumEndDist, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, UnknownData_EB3T, 0x058C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, Texture, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, UnknownData_Q5QS, 0x0598);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDrawFrustumComponent, 0x05A0);
		}

		// class USphereComponent : public UShapeComponent
		TEST_METHOD(Class__Engine__SphereComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereComponent, SphereRadius, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereComponent, UnknownData_LU6W, 0x0594);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USphereComponent, 0x05A0);
		}

		// class UDrawSphereComponent : public USphereComponent
		TEST_METHOD(Class__Engine__DrawSphereComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDrawSphereComponent, 0x05A0);
		}

		// class UEdGraph : public UObject
		TEST_METHOD(Class__Engine__EdGraph)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraph, Schema, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraph, Nodes, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraph, UnknownData_1B58, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraph, 0x0068);
		}

		// class UEdGraphNode : public UObject
		TEST_METHOD(Class__Engine__EdGraphNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, UnknownData_7TAD, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, DeprecatedPins, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodePosX, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodePosY, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodeWidth, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodeHeight, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, AdvancedPinDisplay, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, EnabledState, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, UnknownData_FULB, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, UnknownData_LJXJ, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodeComment, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, errorType, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, UnknownData_26YB, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, ErrorMsg, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodeGuid, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraphNode, 0x00A0);
		}

		// class UEdGraphNode_Documentation : public UEdGraphNode
		TEST_METHOD(Class__Engine__EdGraphNode_Documentation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode_Documentation, Link, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode_Documentation, Excerpt, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraphNode_Documentation, 0x00C0);
		}

		// class UEdGraphPin_Deprecated : public UObject
		TEST_METHOD(Class__Engine__EdGraphPin_Deprecated)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, PinName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, PinToolTip, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, Direction, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, UnknownData_WX3U, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, PinType, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, DefaultValue, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, AutogeneratedDefaultValue, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, DefaultObject, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, DefaultTextValue, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, LinkedTo, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, SubPins, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, ParentPin, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, ReferencePassThroughConnection, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraphPin_Deprecated, 0x0120);
		}

		// class UEdGraphSchema : public UObject
		TEST_METHOD(Class__Engine__EdGraphSchema)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraphSchema, 0x0030);
		}

		// class AEmitter : public AActor
		TEST_METHOD(Class__Engine__Emitter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, ParticleSystemComponent, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, UnknownData_Z84O, 0x0341);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, OnParticleSpawn, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, OnParticleBurst, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, OnParticleDeath, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, OnParticleCollide, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AEmitter, 0x0388);
		}

		// class AEmitterCameraLensEffectBase : public AEmitter
		TEST_METHOD(Class__Engine__EmitterCameraLensEffectBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, PS_CameraEffect, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, PS_CameraEffectNonExtremeContent, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, BaseCamera, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, RelativeTransform, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, BaseFOV, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, UnknownData_7XPV, 0x03D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, EmittersToTreatAsSame, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, DistFromCamera, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, UnknownData_WSWY, 0x03EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AEmitterCameraLensEffectBase, 0x03F0);
		}

		// class UEngineBaseTypes : public UObject
		TEST_METHOD(Class__Engine__EngineBaseTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineBaseTypes, 0x0030);
		}

		// class UEngineHandlerComponentFactory : public UHandlerComponentFactory
		TEST_METHOD(Class__Engine__EngineHandlerComponentFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineHandlerComponentFactory, 0x0030);
		}

		// class ULocalMessage : public UObject
		TEST_METHOD(Class__Engine__LocalMessage)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalMessage, 0x0030);
		}

		// class UEngineMessage : public ULocalMessage
		TEST_METHOD(Class__Engine__EngineMessage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, FailedPlaceMessage, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, MaxedOutMessage, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, EnteredMessage, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, LeftMessage, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, GlobalNameChange, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, SpecEnteredMessage, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, NewPlayerMessage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, NewSpecMessage, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineMessage, 0x00B0);
		}

		// class USubsystem : public UObject
		TEST_METHOD(Class__Engine__Subsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubsystem, UnknownData_5KKD, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubsystem, 0x0038);
		}

		// class UDynamicSubsystem : public USubsystem
		TEST_METHOD(Class__Engine__DynamicSubsystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicSubsystem, 0x0038);
		}

		// class UEngineSubsystem : public UDynamicSubsystem
		TEST_METHOD(Class__Engine__EngineSubsystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineSubsystem, 0x0038);
		}

		// class UEngineTypes : public UObject
		TEST_METHOD(Class__Engine__EngineTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineTypes, 0x0030);
		}

		// class AExponentialHeightFog : public AInfo
		TEST_METHOD(Class__Engine__ExponentialHeightFog)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AExponentialHeightFog, Component, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AExponentialHeightFog, UnknownData_7ZRP, 0x0341);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AExponentialHeightFog, 0x0348);
		}

		// class UExponentialHeightFogComponent : public USceneComponent
		TEST_METHOD(Class__Engine__ExponentialHeightFogComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, UnknownData_FB81, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FogHeightFalloff, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, SecondFogData, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FogInscatteringColor, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, UnknownData_M4XT, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, InscatteringColorCubemap, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, InscatteringColorCubemapAngle, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, InscatteringTextureTint, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FullyDirectionalInscatteringColorDistance, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, NonDirectionalInscatteringColorDistance, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, DirectionalInscatteringExponent, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, DirectionalInscatteringStartDistance, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, DirectionalInscatteringColor, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FogMaxOpacity, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, StartDistance, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FogCutoffDistance, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, bEnableVolumetricFog, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, UnknownData_BKED, 0x02C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogScatteringDistribution, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogAlbedo, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogEmissive, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogExtinctionScale, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogDistance, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogStaticLightingScatteringIntensity, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, bOverrideLightColorsWithFogInscatteringColors, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, UnknownData_4C3S, 0x02F1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExponentialHeightFogComponent, 0x0300);
		}

		// class UExporter : public UObject
		TEST_METHOD(Class__Engine__Exporter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, SupportedClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, ExportRootScope, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, FormatExtension, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, FormatDescription, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, PreferredFormatIndex, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, TextIndent, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, UnknownData_V616, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, ExportTask, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, UnknownData_LUZP, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExporter, 0x0080);
		}

		// class UFloatingPawnMovement : public UPawnMovementComponent
		TEST_METHOD(Class__Engine__FloatingPawnMovement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, MaxSpeed, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, Acceleration, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, Deceleration, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, TurningBoost, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, UnknownData_RB79, 0x0199);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFloatingPawnMovement, 0x01A0);
		}

		// class UFont : public UObject
		TEST_METHOD(Class__Engine__Font)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, UnknownData_LY04, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, FontCacheType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, UnknownData_NEJL, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Characters, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Textures, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, IsRemapped, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, EmScale, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Ascent, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Descent, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Leading, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Kerning, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, ImportOptions, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, NumCharacters, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, UnknownData_2CDR, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, MaxCharHeight, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, ScalingFactor, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, LegacyFontSize, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, LegacyFontName, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, CompositeFont, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, UnknownData_VVXN, 0x0188);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFont, 0x01D8);
		}

		// class UFontFace : public UObject
		TEST_METHOD(Class__Engine__FontFace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, UnknownData_ZQYW, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, SourceFilename, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, Hinting, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, LoadingPolicy, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, LayoutMethod, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, UnknownData_BTHV, 0x004B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFontFace, 0x0060);
		}

		// class UFontImportOptions : public UObject
		TEST_METHOD(Class__Engine__FontImportOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontImportOptions, Data, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFontImportOptions, 0x00E0);
		}

		// class UForceFeedbackAttenuation : public UObject
		TEST_METHOD(Class__Engine__ForceFeedbackAttenuation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackAttenuation, Attenuation, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UForceFeedbackAttenuation, 0x00E0);
		}

		// class UForceFeedbackComponent : public USceneComponent
		TEST_METHOD(Class__Engine__ForceFeedbackComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, ForceFeedbackEffect, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, UnknownData_DUK8, 0x0261);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, IntensityMultiplier, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, AttenuationSettings, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, AttenuationOverrides, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, OnForceFeedbackFinished, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, UnknownData_FMB6, 0x0330);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UForceFeedbackComponent, 0x0340);
		}

		// class UForceFeedbackEffect : public UObject
		TEST_METHOD(Class__Engine__ForceFeedbackEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackEffect, ChannelDetails, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackEffect, Duration, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackEffect, UnknownData_80J2, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UForceFeedbackEffect, 0x0048);
		}

		// class UMovieSceneSignedObject : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneSignedObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSignedObject, Signature, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSignedObject, UnknownData_Z865, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSignedObject, 0x0058);
		}

		// class UGameEngine : public UEngine
		TEST_METHOD(Class__Engine__GameEngine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEngine, MaxDeltaTime, 0x0D90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEngine, ServerFlushLogInterval, 0x0D94);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEngine, GameInstance, 0x0D98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEngine, UnknownData_UXIM, 0x0DA0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameEngine, 0x0DE0);
		}

		// class UMovieSceneTrack : public UMovieSceneSignedObject
		TEST_METHOD(Class__MovieScene__MovieSceneTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrack, EvalOptions, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrack, UnknownData_F9PV, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneTrack, 0x0060);
		}

		// class UGameInstanceSubsystem : public USubsystem
		TEST_METHOD(Class__Engine__GameInstanceSubsystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameInstanceSubsystem, 0x0038);
		}

		// class AGameNetworkManager : public AInfo
		TEST_METHOD(Class__Engine__GameNetworkManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, AdjustedNetSpeed, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, LastNetSpeedUpdateTime, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, TotalNetBandwidth, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MinDynamicBandwidth, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MaxDynamicBandwidth, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, UnknownData_LAR1, 0x034D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, StandbyRxCheatTime, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, StandbyTxCheatTime, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, BadPingThreshold, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, PercentMissingForRxStandby, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, PercentMissingForTxStandby, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, PercentForBadPing, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, JoinInProgressStandbyWaitTime, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MoveRepSize, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MAXPOSITIONERRORSQUARED, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MAXNEARZEROVELOCITYSQUARED, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, CLIENTADJUSTUPDATECOST, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MAXCLIENTUPDATEINTERVAL, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MaxClientForcedUpdateDuration, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MaxMoveDeltaTime, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MaxClientSmoothingDeltaTime, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetSendMoveDeltaTime, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetSendMoveDeltaTimeThrottled, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetSendMoveDeltaTimeStationary, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetSendMoveThrottleAtNetSpeed, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetSendMoveThrottleOverPlayerCount, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientAuthorativePosition, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, UnknownData_QE12, 0x03A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientErrorUpdateRateLimit, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, bMovementTimeDiscrepancyDetection, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, bMovementTimeDiscrepancyResolution, 0x03A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, UnknownData_3LFP, 0x03AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MovementTimeDiscrepancyMaxTimeMargin, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MovementTimeDiscrepancyMinTimeMargin, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MovementTimeDiscrepancyResolutionRate, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MovementTimeDiscrepancyDriftAllowance, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, bMovementTimeDiscrepancyForceCorrectionsDuringResolution, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, bUseDistanceBasedRelevancy, 0x03BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, UnknownData_AGGK, 0x03BE);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameNetworkManager, 0x03C8);
		}

		// class UMovieSceneSequence : public UMovieSceneSignedObject
		TEST_METHOD(Class__MovieScene__MovieSceneSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, PrecompiledEvaluationTemplate, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, DefaultCompletionMode, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, bParentContextsAreSignificant, 0x0349);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, UnknownData_V256, 0x034A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSequence, 0x0350);
		}

		// class UMovieSceneSection : public UMovieSceneSignedObject
		TEST_METHOD(Class__MovieScene__MovieSceneSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, EvalOptions, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, UnknownData_Y3UY, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, Easing, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, SectionRange, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, PreRollFrames, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, PostRollFrames, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, RowIndex, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, OverlapPriority, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, UnknownData_G74T, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, startTime, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, endTime, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, PrerollTime, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, PostrollTime, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, UnknownData_LCKV, 0x00CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, bSupportsInfiniteRange, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, BlendType, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, UnknownData_LXCC, 0x00D3);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSection, 0x00E8);
		}

		// class UGameplayStatics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__GameplayStatics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayStatics, 0x0030);
		}

		// class UMovieSceneSubSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieScene__MovieSceneSubSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, Parameters, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, StartOffset, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, TimeScale, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, PrerollTime, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, UnknownData_S6J8, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, SubSequence, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, ActorToRecord, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, UnknownData_2Q6Q, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, TargetSequenceName, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, TargetPathToRecordTo, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSubSection, 0x0158);
		}

		// class UMovieSceneNameableTrack : public UMovieSceneTrack
		TEST_METHOD(Class__MovieScene__MovieSceneNameableTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNameableTrack, 0x0060);
		}

		// class UMovieSceneSubTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieScene__MovieSceneSubTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubTrack, Sections, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSubTrack, 0x0070);
		}

		// class UMovieSceneSequencePlayer : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneSequencePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_BYBZ, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, OnPlay, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, OnPlayReverse, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, OnStop, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, OnPause, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, OnFinished, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, Status, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_SI9D, 0x03C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_5HDT, 0x03CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, Sequence, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, startTime, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, DurationFrames, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, CurrentNumLoops, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_71KI, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, PlaybackSettings, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_ZJ2Q, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, RootTemplateInstance, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_Q8GP, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, NetSyncProps, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, PlaybackClient, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_ABW1, 0x0798);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSequencePlayer, 0x07D0);
		}

		// class UMovieScenePlaybackClient : public UInterface
		TEST_METHOD(Class__MovieScene__MovieScenePlaybackClient)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePlaybackClient, 0x0030);
		}

		// class UMovieScene : public UMovieSceneSignedObject
		TEST_METHOD(Class__MovieScene__MovieScene)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, Spawnables, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, Possessables, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, ObjectBindings, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, MasterTracks, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, CameraCutTrack, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, SelectionRange, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, PlaybackRange, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, TickResolution, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, DisplayRate, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, EvaluationType, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, ClockSource, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, UnknownData_PJVF, 0x00D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, MarkedFrames, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene, 0x00E8);
		}

		// class UMovieSceneBindingOverrides : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneBindingOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBindingOverrides, BindingData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBindingOverrides, UnknownData_9G69, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBindingOverrides, 0x0098);
		}

		// class UMovieSceneBindingOwnerInterface : public UInterface
		TEST_METHOD(Class__MovieScene__MovieSceneBindingOwnerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBindingOwnerInterface, 0x0030);
		}

		// class UMovieSceneBuiltInEasingFunction : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneBuiltInEasingFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBuiltInEasingFunction, UnknownData_EWBC, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBuiltInEasingFunction, Type, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBuiltInEasingFunction, UnknownData_CVJG, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBuiltInEasingFunction, 0x0040);
		}

		// class UMovieSceneEasingExternalCurve : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneEasingExternalCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEasingExternalCurve, UnknownData_BBQI, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEasingExternalCurve, Curve, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEasingExternalCurve, 0x0040);
		}

		// class UMovieSceneEasingFunction : public UInterface
		TEST_METHOD(Class__MovieScene__MovieSceneEasingFunction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEasingFunction, 0x0030);
		}

		// class UMovieSceneFolder : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneFolder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFolder, FolderName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFolder, ChildFolders, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFolder, ChildMasterTracks, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFolder, ChildObjectBindingStrings, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFolder, UnknownData_NWBY, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFolder, 0x0078);
		}

		// class UMovieSceneKeyProxy : public UInterface
		TEST_METHOD(Class__MovieScene__MovieSceneKeyProxy)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneKeyProxy, 0x0030);
		}

		// class UTestMovieSceneTrack : public UMovieSceneTrack
		TEST_METHOD(Class__MovieScene__TestMovieSceneTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMovieSceneTrack, bHighPassFilter, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMovieSceneTrack, UnknownData_5BL0, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMovieSceneTrack, SectionArray, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestMovieSceneTrack, 0x0078);
		}

		// class UTestMovieSceneSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieScene__TestMovieSceneSection)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestMovieSceneSection, 0x00E8);
		}

		// class UTestMovieSceneSequence : public UMovieSceneSequence
		TEST_METHOD(Class__MovieScene__TestMovieSceneSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMovieSceneSequence, MovieScene, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestMovieSceneSequence, 0x0358);
		}

		// class AGameSession : public AInfo
		TEST_METHOD(Class__Engine__GameSession)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, MaxSpectators, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, MaxPlayers, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, MaxPartySize, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, MaxSplitscreensPerConnection, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, bRequiresPushToTalk, 0x0345);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, UnknownData_7XLL, 0x0346);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, SessionName, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameSession, 0x0350);
		}

		// class UGameUserSettings : public UObject
		TEST_METHOD(Class__Engine__GameUserSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, bUseVSync, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, bUseDynamicResolution, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_SCZR, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, ResolutionSizeX, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, ResolutionSizeY, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastUserConfirmedResolutionSizeX, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastUserConfirmedResolutionSizeY, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, WindowPosX, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, WindowPosY, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, FullscreenMode, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastConfirmedFullscreenMode, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, PreferredFullscreenMode, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, Version, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, AudioQualityLevel, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastConfirmedAudioQualityLevel, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, FrameRateLimit, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_X3S4, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, DesiredScreenWidth, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, bUseDesiredScreenHeight, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_P5JI, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, DesiredScreenHeight, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastUserConfirmedDesiredScreenWidth, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastUserConfirmedDesiredScreenHeight, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastRecommendedScreenWidth, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastRecommendedScreenHeight, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastCPUBenchmarkResult, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastGPUBenchmarkResult, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_O77W, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastCPUBenchmarkSteps, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastGPUBenchmarkSteps, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastGPUBenchmarkMultiplier, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, bUseHDRDisplayOutput, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_5E2C, 0x0105);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, HDRDisplayOutputNits, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_O8Y6, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, OnGameUserSettingsUINeedsUpdate, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameUserSettings, 0x0120);
		}

		// class ASpotLight : public ALight
		TEST_METHOD(Class__Engine__SpotLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpotLight, SpotLightComponent, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASpotLight, 0x0350);
		}

		// class AGeneratedMeshAreaLight : public ASpotLight
		TEST_METHOD(Class__Engine__GeneratedMeshAreaLight)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGeneratedMeshAreaLight, 0x0350);
		}

		// class UHapticFeedbackEffect_Base : public UObject
		TEST_METHOD(Class__Engine__HapticFeedbackEffect_Base)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHapticFeedbackEffect_Base, 0x0030);
		}

		// class UHapticFeedbackEffect_Buffer : public UHapticFeedbackEffect_Base
		TEST_METHOD(Class__Engine__HapticFeedbackEffect_Buffer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_Buffer, Amplitudes, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_Buffer, SampleRate, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_Buffer, UnknownData_RQZ2, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHapticFeedbackEffect_Buffer, 0x0070);
		}

		// class UHapticFeedbackEffect_Curve : public UHapticFeedbackEffect_Base
		TEST_METHOD(Class__Engine__HapticFeedbackEffect_Curve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_Curve, HapticDetails, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHapticFeedbackEffect_Curve, 0x0140);
		}

		// class UHapticFeedbackEffect_SoundWave : public UHapticFeedbackEffect_Base
		TEST_METHOD(Class__Engine__HapticFeedbackEffect_SoundWave)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_SoundWave, SoundWave, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_SoundWave, UnknownData_IEUW, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHapticFeedbackEffect_SoundWave, 0x0068);
		}

		// class UHealthSnapshotBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__HealthSnapshotBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHealthSnapshotBlueprintLibrary, 0x0030);
		}

		// class UHLODProxy : public UObject
		TEST_METHOD(Class__Engine__HLODProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHLODProxy, ProxyMeshes, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHLODProxy, 0x0040);
		}

		// class UOcclusionPluginSourceSettingsBase : public UObject
		TEST_METHOD(Class__Engine__OcclusionPluginSourceSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOcclusionPluginSourceSettingsBase, 0x0030);
		}

		// class UReverbPluginSourceSettingsBase : public UObject
		TEST_METHOD(Class__Engine__ReverbPluginSourceSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReverbPluginSourceSettingsBase, 0x0030);
		}

		// class UImportanceSamplingLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__ImportanceSamplingLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImportanceSamplingLibrary, 0x0030);
		}

		// class UImportantToggleSettingInterface : public UInterface
		TEST_METHOD(Class__Engine__ImportantToggleSettingInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImportantToggleSettingInterface, 0x0030);
		}

		// class UInGameAdManager : public UPlatformInterfaceBase
		TEST_METHOD(Class__Engine__InGameAdManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameAdManager, UnknownData_QANG, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameAdManager, ClickedBannerDelegates, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameAdManager, ClosedAdDelegates, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInGameAdManager, 0x0068);
		}

		// class UInheritableComponentHandler : public UObject
		TEST_METHOD(Class__Engine__InheritableComponentHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInheritableComponentHandler, Records, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInheritableComponentHandler, UnnecessaryComponents, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInheritableComponentHandler, 0x0050);
		}

		// class UInputDelegateBinding : public UDynamicBlueprintBinding
		TEST_METHOD(Class__Engine__InputDelegateBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputDelegateBinding, 0x0030);
		}

		// class UInputActionDelegateBinding : public UInputDelegateBinding
		TEST_METHOD(Class__Engine__InputActionDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputActionDelegateBinding, InputActionDelegateBindings, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputActionDelegateBinding, 0x0040);
		}

		// class UInputAxisDelegateBinding : public UInputDelegateBinding
		TEST_METHOD(Class__Engine__InputAxisDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputAxisDelegateBinding, InputAxisDelegateBindings, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputAxisDelegateBinding, 0x0040);
		}

		// class UInputAxisKeyDelegateBinding : public UInputDelegateBinding
		TEST_METHOD(Class__Engine__InputAxisKeyDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputAxisKeyDelegateBinding, InputAxisKeyDelegateBindings, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputAxisKeyDelegateBinding, 0x0040);
		}

		// class UInputComponent : public UActorComponent
		TEST_METHOD(Class__Engine__InputComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputComponent, UnknownData_N29H, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputComponent, CachedKeyToActionInfo, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputComponent, UnknownData_E0WL, 0x0180);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputComponent, 0x0188);
		}

		// class UInputKeyDelegateBinding : public UInputDelegateBinding
		TEST_METHOD(Class__Engine__InputKeyDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeyDelegateBinding, InputKeyDelegateBindings, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputKeyDelegateBinding, 0x0040);
		}

		// class UInputSettings : public UObject
		TEST_METHOD(Class__Engine__InputSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, AxisConfig, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, bUseAutocorrect, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, UnknownData_YMCG, 0x0043);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ExcludedAutocorrectOS, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ExcludedAutocorrectCultures, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ExcludedAutocorrectDeviceModels, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, DefaultViewportMouseCaptureMode, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, DefaultViewportMouseLockMode, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, UnknownData_V8M1, 0x007A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, FOVScale, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, DoubleClickTime, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, UnknownData_KVXD, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ActionMappings, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, AxisMappings, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, DefaultTouchInterface, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ConsoleKey, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ConsoleKeys, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputSettings, 0x00E8);
		}

		// class UInputTouchDelegateBinding : public UInputDelegateBinding
		TEST_METHOD(Class__Engine__InputTouchDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputTouchDelegateBinding, InputTouchDelegateBindings, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputTouchDelegateBinding, 0x0040);
		}

		// class UInputVectorAxisDelegateBinding : public UInputAxisKeyDelegateBinding
		TEST_METHOD(Class__Engine__InputVectorAxisDelegateBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputVectorAxisDelegateBinding, 0x0040);
		}

		// class UInterface_AssetUserData : public UInterface
		TEST_METHOD(Class__Engine__Interface_AssetUserData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface_AssetUserData, 0x0030);
		}

		// class UInterface_CollisionDataProvider : public UInterface
		TEST_METHOD(Class__Engine__Interface_CollisionDataProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface_CollisionDataProvider, 0x0030);
		}

		// class UInterface_PostProcessVolume : public UInterface
		TEST_METHOD(Class__Engine__Interface_PostProcessVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface_PostProcessVolume, 0x0030);
		}

		// class UInterface_PreviewMeshProvider : public UInterface
		TEST_METHOD(Class__Engine__Interface_PreviewMeshProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface_PreviewMeshProvider, 0x0030);
		}

		// class UInterpCurveEdSetup : public UObject
		TEST_METHOD(Class__Engine__InterpCurveEdSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpCurveEdSetup, Tabs, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpCurveEdSetup, ActiveTab, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpCurveEdSetup, UnknownData_U3K0, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpCurveEdSetup, 0x0048);
		}

		// class UInterpData : public UObject
		TEST_METHOD(Class__Engine__InterpData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, InterpLength, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, PathBuildTime, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, InterpGroups, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, CurveEdSetup, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, EdSectionStart, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, EdSectionEnd, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, UnknownData_51MF, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, CachedDirectorGroup, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, AllEventNames, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpData, 0x0078);
		}

		// class UInterpFilter : public UObject
		TEST_METHOD(Class__Engine__InterpFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpFilter, Caption, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpFilter, 0x0040);
		}

		// class UInterpFilter_Classes : public UInterpFilter
		TEST_METHOD(Class__Engine__InterpFilter_Classes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpFilter_Classes, 0x0040);
		}

		// class UInterpFilter_Custom : public UInterpFilter
		TEST_METHOD(Class__Engine__InterpFilter_Custom)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpFilter_Custom, 0x0040);
		}

		// class UInterpGroup : public UObject
		TEST_METHOD(Class__Engine__InterpGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, UnknownData_ESZT, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, InterpTracks, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, GroupName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, GroupColor, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, UnknownData_ZW66, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroup, 0x0058);
		}

		// class UInterpGroupCamera : public UInterpGroup
		TEST_METHOD(Class__Engine__InterpGroupCamera)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupCamera, CameraAnimInst, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupCamera, CompressTolerance, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupCamera, UnknownData_S7LS, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupCamera, 0x0068);
		}

		// class UInterpGroupDirector : public UInterpGroup
		TEST_METHOD(Class__Engine__InterpGroupDirector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupDirector, 0x0058);
		}

		// class UInterpGroupInst : public UObject
		TEST_METHOD(Class__Engine__InterpGroupInst)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupInst, Group, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupInst, GroupActor, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupInst, TrackInst, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupInst, 0x0050);
		}

		// class UInterpGroupInstCamera : public UInterpGroupInst
		TEST_METHOD(Class__Engine__InterpGroupInstCamera)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupInstCamera, 0x0050);
		}

		// class UInterpGroupInstDirector : public UInterpGroupInst
		TEST_METHOD(Class__Engine__InterpGroupInstDirector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupInstDirector, 0x0050);
		}

		// class UInterpToMovementComponent : public UMovementComponent
		TEST_METHOD(Class__Engine__InterpToMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, Duration, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, UnknownData_75AG, 0x0145);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, BehaviourType, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, UnknownData_45CB, 0x0149);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, UnknownData_N9J6, 0x014D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, OnInterpToReverse, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, OnInterpToStop, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, OnWaitBeginDelegate, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, OnWaitEndDelegate, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, OnResetDelegate, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, MaxSimulationTimeStep, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, MaxSimulationIterations, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, ControlPoints, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, UnknownData_DWQ9, 0x01B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpToMovementComponent, 0x01E0);
		}

		// class UInterpTrack : public UObject
		TEST_METHOD(Class__Engine__InterpTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, UnknownData_RIPJ, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, SubTracks, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, TrackInstClass, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, ActiveCondition, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, UnknownData_LDZW, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, TrackTitle, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, UnknownData_1SJG, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrack, 0x0078);
		}

		// class UInterpTrackFloatBase : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackFloatBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatBase, FloatTrack, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatBase, CurveTension, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatBase, UnknownData_EOTE, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatBase, 0x0098);
		}

		// class UInterpTrackAnimControl : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackAnimControl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackAnimControl, SlotName, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackAnimControl, AnimSeqs, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackAnimControl, UnknownData_QB4A, 0x00B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackAnimControl, 0x00B8);
		}

		// class UInterpTrackVectorBase : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackVectorBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorBase, VectorTrack, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorBase, CurveTension, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorBase, UnknownData_5M09, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackVectorBase, 0x0098);
		}

		// class UInterpTrackAudioMaster : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackAudioMaster)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackAudioMaster, 0x0098);
		}

		// class UInterpTrackBoolProp : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackBoolProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackBoolProp, BoolTrack, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackBoolProp, PropertyName, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackBoolProp, 0x0090);
		}

		// class UInterpTrackColorProp : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackColorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackColorProp, PropertyName, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackColorProp, 0x00A0);
		}

		// class UInterpTrackColorScale : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackColorScale)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackColorScale, 0x0098);
		}

		// class UInterpTrackDirector : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackDirector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackDirector, CutTrack, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackDirector, UnknownData_G26L, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackDirector, 0x0090);
		}

		// class UInterpTrackEvent : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackEvent, EventTrack, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackEvent, UnknownData_PBO2, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackEvent, 0x0090);
		}

		// class UInterpTrackFade : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackFade)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFade, UnknownData_P3ZK, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFade, FadeColor, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFade, UnknownData_JXFO, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFade, 0x00B0);
		}

		// class UInterpTrackFloatAnimBPParam : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackFloatAnimBPParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatAnimBPParam, AnimBlueprintClass, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatAnimBPParam, AnimClass, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatAnimBPParam, ParamName, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatAnimBPParam, UnknownData_9SIZ, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatAnimBPParam, 0x00B8);
		}

		// class UInterpTrackFloatMaterialParam : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackFloatMaterialParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatMaterialParam, TargetMaterials, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatMaterialParam, ParamName, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatMaterialParam, 0x00B0);
		}

		// class UInterpTrackFloatParticleParam : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackFloatParticleParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatParticleParam, ParamName, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatParticleParam, 0x00A0);
		}

		// class UInterpTrackFloatProp : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackFloatProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatProp, PropertyName, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatProp, 0x00A0);
		}

		// class UInterpTrackInst : public UObject
		TEST_METHOD(Class__Engine__InterpTrackInst)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInst, 0x0030);
		}

		// class UInterpTrackInstAnimControl : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstAnimControl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstAnimControl, LastUpdatePosition, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstAnimControl, UnknownData_DMT0, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstAnimControl, 0x0038);
		}

		// class UInterpTrackInstAudioMaster : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstAudioMaster)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstAudioMaster, 0x0030);
		}

		// class UInterpTrackInstProperty : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstProperty, InterpProperty, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstProperty, PropertyOuterObjectInst, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstProperty, 0x0040);
		}

		// class UInterpTrackInstBoolProp : public UInterpTrackInstProperty
		TEST_METHOD(Class__Engine__InterpTrackInstBoolProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstBoolProp, UnknownData_0HYF, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstBoolProp, BoolProperty, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstBoolProp, ResetBool, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstBoolProp, UnknownData_SQCS, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstBoolProp, 0x0058);
		}

		// class UInterpTrackInstColorProp : public UInterpTrackInstProperty
		TEST_METHOD(Class__Engine__InterpTrackInstColorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstColorProp, UnknownData_GNHZ, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstColorProp, ResetColor, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstColorProp, UnknownData_DQZ5, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstColorProp, 0x0050);
		}

		// class UInterpTrackInstColorScale : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstColorScale)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstColorScale, 0x0030);
		}

		// class UInterpTrackInstDirector : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstDirector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstDirector, OldViewTarget, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstDirector, 0x0038);
		}

		// class UInterpTrackInstEvent : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstEvent, LastUpdatePosition, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstEvent, UnknownData_57YW, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstEvent, 0x0038);
		}

		// class UInterpTrackInstFade : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstFade)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFade, 0x0030);
		}

		// class UInterpTrackInstFloatAnimBPParam : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstFloatAnimBPParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatAnimBPParam, AnimScriptInstance, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatAnimBPParam, ResetFloat, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatAnimBPParam, UnknownData_LT0H, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFloatAnimBPParam, 0x0048);
		}

		// class UInterpTrackInstFloatMaterialParam : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstFloatMaterialParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatMaterialParam, MaterialInstances, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatMaterialParam, ResetFloats, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatMaterialParam, PrimitiveMaterialRefs, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatMaterialParam, InstancedTrack, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFloatMaterialParam, 0x0068);
		}

		// class UInterpTrackInstFloatParticleParam : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstFloatParticleParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatParticleParam, ResetFloat, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatParticleParam, UnknownData_HL9Y, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFloatParticleParam, 0x0038);
		}

		// class UInterpTrackInstFloatProp : public UInterpTrackInstProperty
		TEST_METHOD(Class__Engine__InterpTrackInstFloatProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatProp, UnknownData_THID, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatProp, ResetFloat, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatProp, UnknownData_SXCI, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFloatProp, 0x0050);
		}

		// class UInterpTrackInstLinearColorProp : public UInterpTrackInstProperty
		TEST_METHOD(Class__Engine__InterpTrackInstLinearColorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstLinearColorProp, UnknownData_UND8, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstLinearColorProp, ResetColor, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstLinearColorProp, 0x0058);
		}

		// class UInterpTrackInstMove : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstMove)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstMove, ResetLocation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstMove, ResetRotation, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstMove, 0x0048);
		}

		// class UInterpTrackInstParticleReplay : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstParticleReplay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstParticleReplay, LastUpdatePosition, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstParticleReplay, UnknownData_0HE6, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstParticleReplay, 0x0038);
		}

		// class UInterpTrackInstSlomo : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstSlomo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSlomo, OldTimeDilation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSlomo, UnknownData_QPLS, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstSlomo, 0x0038);
		}

		// class UInterpTrackInstSound : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSound, LastUpdatePosition, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSound, UnknownData_2M3F, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSound, PlayAudioComp, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstSound, 0x0040);
		}

		// class UInterpTrackInstToggle : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstToggle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstToggle, Action, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstToggle, UnknownData_QO99, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstToggle, LastUpdatePosition, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstToggle, UnknownData_FDHQ, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstToggle, 0x0040);
		}

		// class UInterpTrackInstVectorMaterialParam : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstVectorMaterialParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorMaterialParam, MaterialInstances, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorMaterialParam, ResetVectors, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorMaterialParam, PrimitiveMaterialRefs, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorMaterialParam, InstancedTrack, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstVectorMaterialParam, 0x0068);
		}

		// class UInterpTrackInstVectorProp : public UInterpTrackInstProperty
		TEST_METHOD(Class__Engine__InterpTrackInstVectorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorProp, UnknownData_OQLR, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorProp, ResetVector, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorProp, UnknownData_405E, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstVectorProp, 0x0058);
		}

		// class UInterpTrackInstVisibility : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstVisibility)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVisibility, Action, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVisibility, UnknownData_AR5G, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVisibility, LastUpdatePosition, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstVisibility, 0x0038);
		}

		// class UInterpTrackLinearColorBase : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackLinearColorBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackLinearColorBase, LinearColorTrack, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackLinearColorBase, CurveTension, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackLinearColorBase, UnknownData_NDQW, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackLinearColorBase, 0x0098);
		}

		// class UInterpTrackLinearColorProp : public UInterpTrackLinearColorBase
		TEST_METHOD(Class__Engine__InterpTrackLinearColorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackLinearColorProp, PropertyName, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackLinearColorProp, 0x00A0);
		}

		// class UInterpTrackMove : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackMove)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, PosTrack, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, EulerTrack, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, LookupTrack, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, LookAtGroupName, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, LinCurveTension, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, AngCurveTension, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, UnknownData_BLK6, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, RotMode, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, UnknownData_AK1V, 0x00CD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackMove, 0x00D0);
		}

		// class UInterpTrackMoveAxis : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackMoveAxis)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMoveAxis, MoveAxis, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMoveAxis, UnknownData_S2WC, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMoveAxis, LookupTrack, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackMoveAxis, 0x00B0);
		}

		// class UInterpTrackParticleReplay : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackParticleReplay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackParticleReplay, TrackKeys, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackParticleReplay, 0x0088);
		}

		// class UInterpTrackSlomo : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackSlomo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackSlomo, 0x0098);
		}

		// class UInterpTrackSound : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackSound, Sounds, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackSound, UnknownData_XUHS, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackSound, 0x00B0);
		}

		// class UInterpTrackToggle : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackToggle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackToggle, ToggleTrack, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackToggle, UnknownData_YHB7, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackToggle, 0x0090);
		}

		// class UInterpTrackVectorMaterialParam : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackVectorMaterialParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorMaterialParam, TargetMaterials, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorMaterialParam, ParamName, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackVectorMaterialParam, 0x00B0);
		}

		// class UInterpTrackVectorProp : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackVectorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorProp, PropertyName, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackVectorProp, 0x00A0);
		}

		// class UInterpTrackVisibility : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackVisibility)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVisibility, VisibilityTrack, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVisibility, UnknownData_IT6L, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackVisibility, 0x0090);
		}

		// class UIntSerialization : public UObject
		TEST_METHOD(Class__Engine__IntSerialization)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnsignedInt16Variable, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnknownData_DOTF, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnsignedInt32Variable, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnsignedInt64Variable, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, SignedInt8Variable, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnknownData_NUFB, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, SignedInt16Variable, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnknownData_2TV7, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, SignedInt64Variable, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnsignedInt8Variable, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnknownData_EGOK, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, SignedInt32Variable, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIntSerialization, 0x0058);
		}

		// class AKillZVolume : public APhysicsVolume
		TEST_METHOD(Class__Engine__KillZVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AKillZVolume, 0x0380);
		}

		// class UKismetArrayLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetArrayLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetArrayLibrary, 0x0030);
		}

		// class UKismetGuidLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetGuidLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetGuidLibrary, 0x0030);
		}

		// class UKismetInputLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetInputLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetInputLibrary, 0x0030);
		}

		// class UKismetInternationalizationLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetInternationalizationLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetInternationalizationLibrary, 0x0030);
		}

		// class UKismetMaterialLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetMaterialLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetMaterialLibrary, 0x0030);
		}

		// class UKismetMathLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetMathLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetMathLibrary, 0x0030);
		}

		// class ARitualEffectBase_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__RitualEffectBase__RitualEffectBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualEffectBase_C, UberGraphFrame, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualEffectBase_C, Sphere, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualEffectBase_C, SphereEffect, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualEffectBase_C, PostProcess, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualEffectBase_C, OnBeginOverlap, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARitualEffectBase_C, 0x0370);
		}

		// class UKismetNodeHelperLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetNodeHelperLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetNodeHelperLibrary, 0x0030);
		}

		// class UKismetRenderingLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetRenderingLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetRenderingLibrary, 0x0030);
		}

		// class AHSHPlayerStart_Spectator_C : public AHSHPlayerStart_C
		TEST_METHOD(BlueprintGeneratedClass__HSHPlayerStart_Spectator__HSHPlayerStart_Spectator_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHSHPlayerStart_Spectator_C, 0x0358);
		}

		// class UKismetStringLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetStringLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetStringLibrary, 0x0030);
		}

		// class UIngame_Tutorial_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Ingame_Tutorial__Ingame_Tutorial_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Tutorial_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Tutorial_C, Image_73, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Tutorial_C, TextBlock_Header, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Tutorial_C, TextBlock_Tutorial, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIngame_Tutorial_C, 0x0268);
		}

		// class UKismetStringTableLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetStringTableLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetStringTableLibrary, 0x0030);
		}

		// class UKismetSystemLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetSystemLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetSystemLibrary, 0x0030);
		}

		// class UKismetTextLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetTextLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetTextLibrary, 0x0030);
		}

		// class ULayer : public UObject
		TEST_METHOD(Class__Engine__Layer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULayer, LayerName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULayer, UnknownData_EY2Y, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULayer, ActorStats, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULayer, 0x0050);
		}

		// class ULevel : public UObject
		TEST_METHOD(Class__Engine__Level)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_90LJ, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, OwningWorld, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, Model, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, ModelComponents, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, ActorCluster, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, NumTextureStreamingUnbuiltComponents, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, NumTextureStreamingDirtyResources, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, LevelScriptActor, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, NavListStart, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, NavListEnd, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, NavDataChunks, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, LightmapTotalSize, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, ShadowmapTotalSize, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, StaticNavigableGeometry, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, StreamingTextureGuids, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_7QV2, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, LevelBuildDataId, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, MapBuildData, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, LightBuildLevelOffset, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_A1UY, 0x01FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, WorldSettings, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_53KX, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, AssetUserData, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_520Z, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, DestroyedReplicatedStaticActors, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevel, 0x0288);
		}

		// class ULevelActorContainer : public UObject
		TEST_METHOD(Class__Engine__LevelActorContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelActorContainer, Actors, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelActorContainer, 0x0040);
		}

		// class ALevelBounds : public AActor
		TEST_METHOD(Class__Engine__LevelBounds)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelBounds, bAutoUpdateBounds, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelBounds, UnknownData_S6A9, 0x0339);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelBounds, 0x0340);
		}

		// class ALevelScriptActor : public AActor
		TEST_METHOD(Class__Engine__LevelScriptActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelScriptActor, UnknownData_QD2R, 0x0339);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelScriptActor, 0x0340);
		}

		// class ULevelScriptBlueprint : public UBlueprint
		TEST_METHOD(Class__Engine__LevelScriptBlueprint)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelScriptBlueprint, 0x00E0);
		}

		// class UWorld : public UObject
		TEST_METHOD(Class__Engine__World)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_ZLY1, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, PersistentLevel, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, NetDriver, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, LineBatcher, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, PersistentLineBatcher, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, ForegroundLineBatcher, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, NetworkManager, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, PhysicsCollisionHandler, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, ExtraReferencedObjects, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, PerModuleDataObjects, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, StreamingLevels, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, StreamingLevelsToConsider, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, StreamingLevelsPrefix, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, CurrentLevelPendingVisibility, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, CurrentLevelPendingInvisibility, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, DemoNetDriver, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, MyParticleEventManager, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, DefaultPhysicsVolume, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_A1Y1, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_2DGN, 0x0117);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, NavigationSystem, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, AuthorityGameMode, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, GameState, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, AISystem, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, AvoidanceManager, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, Levels, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, LevelCollections, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_EE2P, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, OwningGameInstance, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, ParameterCollectionInstances, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, CanvasForRenderingToTarget, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, CanvasForDrawMaterialToRenderTarget, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_OYBG, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, ComponentsThatNeedEndOfFrameUpdate, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, ComponentsThatNeedEndOfFrameUpdate_OnGameThread, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_9W0B, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, WorldComposition, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_QVM3, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, PSCPool, 0x0608);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWorld, 0x0660);
		}

		// class ULevelStreaming : public UObject
		TEST_METHOD(Class__Engine__LevelStreaming)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, WorldAsset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, PackageNameToLoad, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LODPackageNames, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_C2XE, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LevelTransform, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LevelLODIndex, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, StreamingPriority, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_ESYJ, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LevelColor, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_0W5L, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, EditorStreamingVolumes, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, MinTimeBetweenVolumeUnloadRequests, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_KMCA, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, OnLevelLoaded, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, OnLevelUnloaded, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, OnLevelShown, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, OnLevelHidden, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LoadedLevel, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, PendingUnloadLevel, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_JR1O, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelStreaming, 0x0150);
		}

		// class ULevelStreamingAlwaysLoaded : public ULevelStreaming
		TEST_METHOD(Class__Engine__LevelStreamingAlwaysLoaded)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelStreamingAlwaysLoaded, 0x0150);
		}

		// class ULevelStreamingDynamic : public ULevelStreaming
		TEST_METHOD(Class__Engine__LevelStreamingDynamic)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelStreamingDynamic, 0x0150);
		}

		// class ULevelStreamingPersistent : public ULevelStreaming
		TEST_METHOD(Class__Engine__LevelStreamingPersistent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelStreamingPersistent, 0x0150);
		}

		// class ALevelStreamingVolume : public AVolume
		TEST_METHOD(Class__Engine__LevelStreamingVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelStreamingVolume, StreamingLevelNames, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelStreamingVolume, UnknownData_A17V, 0x0381);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelStreamingVolume, StreamingUsage, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelStreamingVolume, UnknownData_YLL3, 0x0385);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelStreamingVolume, 0x0388);
		}

		// class ULightmappedSurfaceCollection : public UObject
		TEST_METHOD(Class__Engine__LightmappedSurfaceCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightmappedSurfaceCollection, SourceModel, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightmappedSurfaceCollection, Surfaces, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightmappedSurfaceCollection, 0x0048);
		}

		// class ULightMapTexture2D : public UTexture2D
		TEST_METHOD(Class__Engine__LightMapTexture2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightMapTexture2D, UnknownData_0ASE, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightMapTexture2D, 0x0100);
		}

		// class ALightmassCharacterIndirectDetailVolume : public AVolume
		TEST_METHOD(Class__Engine__LightmassCharacterIndirectDetailVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALightmassCharacterIndirectDetailVolume, 0x0370);
		}

		// class ALightmassImportanceVolume : public AVolume
		TEST_METHOD(Class__Engine__LightmassImportanceVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALightmassImportanceVolume, 0x0370);
		}

		// class ALightmassPortal : public AActor
		TEST_METHOD(Class__Engine__LightmassPortal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALightmassPortal, PortalComponent, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALightmassPortal, 0x0340);
		}

		// class ULightmassPortalComponent : public USceneComponent
		TEST_METHOD(Class__Engine__LightmassPortalComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightmassPortalComponent, PreviewBox, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightmassPortalComponent, 0x0260);
		}

		// class ULightmassPrimitiveSettingsObject : public UObject
		TEST_METHOD(Class__Engine__LightmassPrimitiveSettingsObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightmassPrimitiveSettingsObject, LightmassSettings, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightmassPrimitiveSettingsObject, 0x0048);
		}

		// class ULineBatchComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__LineBatchComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULineBatchComponent, UnknownData_83MY, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULineBatchComponent, UnknownData_AJEQ, 0x0580);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULineBatchComponent, 0x05C0);
		}

		// class ULocalLightComponent : public ULightComponent
		TEST_METHOD(Class__Engine__LocalLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalLightComponent, IntensityUnits, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalLightComponent, UnknownData_MT4X, 0x0391);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalLightComponent, Radius, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalLightComponent, AttenuationRadius, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalLightComponent, LightmassSettings, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalLightComponent, UnknownData_JSU6, 0x03A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalLightComponent, 0x03AC);
		}

		// class ULocalPlayer : public UPlayer
		TEST_METHOD(Class__Engine__LocalPlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_BZKH, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, ViewportClient, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_T4X0, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, AspectRatioAxisConstraint, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_2OBH, 0x009D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, PendingLevelPlayerControllerClass, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_ABQG, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, ControllerId, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_G5EC, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalPlayer, 0x0288);
		}

		// class UGameSparksComponent : public USceneComponent
		TEST_METHOD(Class__GameSparks__GameSparksComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSparksComponent, OnGameSparksAvailableDelegate, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSparksComponent, OnGameSparksDebugLog, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSparksComponent, UnknownData_DZAB, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameSparksComponent, 0x0280);
		}

		// class ULocalPlayerSubsystem : public USubsystem
		TEST_METHOD(Class__Engine__LocalPlayerSubsystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalPlayerSubsystem, 0x0038);
		}

		// class ALODActor : public AActor
		TEST_METHOD(Class__Engine__LODActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, StaticMeshComponent, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, Proxy, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, Key, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, LODDrawDistance, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, LODLevel, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, SubActors, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, CachedNumHLODLevels, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, UnknownData_87A4, 0x0369);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALODActor, 0x0380);
		}

		// class UMapBuildDataRegistry : public UObject
		TEST_METHOD(Class__Engine__MapBuildDataRegistry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapBuildDataRegistry, LevelLightingQuality, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapBuildDataRegistry, UnknownData_X0N2, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapBuildDataRegistry, 0x01F0);
		}

		// class UGameSparksLogEventData : public UObject
		TEST_METHOD(Class__GameSparks__GameSparksLogEventData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSparksLogEventData, m_strings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSparksLogEventData, m_numbers, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSparksLogEventData, m_objects, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameSparksLogEventData, 0x0120);
		}

		// class UMaterial : public UMaterialInterface
		TEST_METHOD(Class__Engine__Material)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, PhysMaterial, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Metallic, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_9AOV, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Specular, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_HYF6, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Normal, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_U3RH, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, EmissiveColor, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_TTSY, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, MaterialDomain, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, BlendMode, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, DecalBlendMode, 0x00EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, MaterialDecalResponse, 0x00EB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, ShadingModel, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_VR64, 0x00ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, OpacityMaskClipValue, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_2UL6, 0x00F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, WorldPositionOffset, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_K6N7, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Refraction, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_C04Y, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, MaterialAttributes, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_6FT1, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, PixelDepthOffset, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_T7RS, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_Z2R8, 0x014E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, NumCustomizedUVs, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucencyLightingMode, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_LQWE, 0x0155);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucencyDirectionalLightingIntensity, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_URUS, 0x015D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentShadowDensityScale, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentSelfShadowDensityScale, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentSelfShadowSecondDensityScale, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentSelfShadowSecondOpacity, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentBackscatteringExponent, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentMultipleScatteringExtinction, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentShadowStartOffset, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, D3D11TessellationMode, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_IC9O, 0x018D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_YRLK, 0x0191);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, MaxDisplacement, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_LH44, 0x0199);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Expressions, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, MaterialFunctionInfos, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, MaterialParameterCollectionInfos, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_93LO, 0x01D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UsageFlagWarnings, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, BlendableLocation, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_A0EX, 0x01D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, BlendablePriority, 0x01DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, BlendableOutputAlpha, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, RefractionMode, 0x01E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_9NFA, 0x01E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, RefractionDepthBias, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, StateId, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_DNV3, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, CachedQualityLevelsUsed, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_JJNV, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, ExpressionTextureReferences, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterial, 0x02A0);
		}

		// class UGameSparksObject : public UObject
		TEST_METHOD(Class__GameSparks__GameSparksObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSparksObject, OnGameSparksAvailableDelegate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSparksObject, OnGameSparksDebugLog, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameSparksObject, 0x0050);
		}

		// class UGameSparksRequestArray : public UObject
		TEST_METHOD(Class__GameSparks__GameSparksRequestArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSparksRequestArray, StringArray, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameSparksRequestArray, 0x0040);
		}

		// class UGameSparksScriptData : public UObject
		TEST_METHOD(Class__GameSparks__GameSparksScriptData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSparksScriptData, UnknownData_GTFL, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameSparksScriptData, 0x0040);
		}

		// class UGSAcceptChallengeRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSAcceptChallengeRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAcceptChallengeRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAcceptChallengeRequest, ChallengeInstanceId, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAcceptChallengeRequest, Message, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAcceptChallengeRequest, ScriptData, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAcceptChallengeRequest, Durable, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAcceptChallengeRequest, UnknownData_FCY1, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAcceptChallengeRequest, requestTimeoutSeconds, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAcceptChallengeRequest, PlayerId, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSAcceptChallengeRequest, 0x0080);
		}

		// class UGSAccountDetailsRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSAccountDetailsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAccountDetailsRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAccountDetailsRequest, ScriptData, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAccountDetailsRequest, Durable, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAccountDetailsRequest, UnknownData_QQ4P, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAccountDetailsRequest, requestTimeoutSeconds, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAccountDetailsRequest, PlayerId, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSAccountDetailsRequest, 0x0060);
		}

		// class UGSAmazonBuyGoodsRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSAmazonBuyGoodsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAmazonBuyGoodsRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAmazonBuyGoodsRequest, AmazonUserId, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAmazonBuyGoodsRequest, CurrencyCode, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAmazonBuyGoodsRequest, ReceiptId, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAmazonBuyGoodsRequest, SubUnitPrice, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAmazonBuyGoodsRequest, UniqueTransactionByPlayer, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAmazonBuyGoodsRequest, UnknownData_AH1U, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAmazonBuyGoodsRequest, ScriptData, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAmazonBuyGoodsRequest, Durable, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAmazonBuyGoodsRequest, UnknownData_EOBM, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAmazonBuyGoodsRequest, requestTimeoutSeconds, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAmazonBuyGoodsRequest, PlayerId, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSAmazonBuyGoodsRequest, 0x0098);
		}

		// class UMaterialBillboardComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__MaterialBillboardComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialBillboardComponent, Elements, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialBillboardComponent, UnknownData_FLQ3, 0x0588);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialBillboardComponent, 0x0590);
		}

		// class UMaterialExpressionAbs : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAbs)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAbs, Input, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAbs, UnknownData_FECB, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAbs, 0x0060);
		}

		// class UMaterialExpressionActorPositionWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionActorPositionWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionActorPositionWS, 0x0048);
		}

		// class UMaterialExpressionAdd : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAdd)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, A, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, UnknownData_WGHR, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, B, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, UnknownData_8X8S, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, ConstA, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, ConstB, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAdd, 0x0078);
		}

		// class UMaterialExpressionAntialiasedTextureMask : public UMaterialExpressionTextureSampleParameter2D
		TEST_METHOD(Class__Engine__MaterialExpressionAntialiasedTextureMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAntialiasedTextureMask, threshold, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAntialiasedTextureMask, Channel, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAntialiasedTextureMask, UnknownData_6RAB, 0x010D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAntialiasedTextureMask, 0x0110);
		}

		// class UMaterialExpressionAppendVector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAppendVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAppendVector, A, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAppendVector, UnknownData_3IYX, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAppendVector, B, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAppendVector, UnknownData_MRI6, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAppendVector, 0x0070);
		}

		// class UMaterialExpressionArccosine : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArccosine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArccosine, Input, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArccosine, UnknownData_XCB3, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArccosine, 0x0060);
		}

		// class UMaterialExpressionArccosineFast : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArccosineFast)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArccosineFast, Input, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArccosineFast, UnknownData_FXBP, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArccosineFast, 0x0060);
		}

		// class UMaterialExpressionArcsine : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArcsine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArcsine, Input, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArcsine, UnknownData_OCYB, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArcsine, 0x0060);
		}

		// class UMaterialExpressionArcsineFast : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArcsineFast)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArcsineFast, Input, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArcsineFast, UnknownData_FUHJ, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArcsineFast, 0x0060);
		}

		// class UMaterialExpressionArctangent : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArctangent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent, Input, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent, UnknownData_3V5F, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArctangent, 0x0060);
		}

		// class UMaterialExpressionArctangent2 : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArctangent2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2, Y, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2, UnknownData_21FF, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2, X, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2, UnknownData_FFYZ, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArctangent2, 0x0070);
		}

		// class UMaterialExpressionArctangent2Fast : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArctangent2Fast)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2Fast, Y, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2Fast, UnknownData_9LFX, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2Fast, X, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2Fast, UnknownData_9HFK, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArctangent2Fast, 0x0070);
		}

		// class UMaterialExpressionArctangentFast : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArctangentFast)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangentFast, Input, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangentFast, UnknownData_5ZYK, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArctangentFast, 0x0060);
		}

		// class UMaterialExpressionAtmosphericFogColor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAtmosphericFogColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAtmosphericFogColor, WorldPosition, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAtmosphericFogColor, UnknownData_7664, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAtmosphericFogColor, 0x0060);
		}

		// class UMaterialExpressionAtmosphericLightColor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAtmosphericLightColor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAtmosphericLightColor, 0x0048);
		}

		// class UMaterialExpressionAtmosphericLightVector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAtmosphericLightVector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAtmosphericLightVector, 0x0048);
		}

		// class UMaterialExpressionBentNormalCustomOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionBentNormalCustomOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBentNormalCustomOutput, Input, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBentNormalCustomOutput, UnknownData_395J, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBentNormalCustomOutput, 0x0060);
		}

		// class UMaterialExpressionBlackBody : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionBlackBody)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlackBody, Temp, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlackBody, UnknownData_BO41, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBlackBody, 0x0060);
		}

		// class UMaterialExpressionBlendMaterialAttributes : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionBlendMaterialAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, A, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, UnknownData_5KMG, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, B, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, UnknownData_JOXU, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, Alpha, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, UnknownData_QOB6, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, PixelAttributeBlendType, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, VertexAttributeBlendType, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, UnknownData_DJM8, 0x008E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBlendMaterialAttributes, 0x0090);
		}

		// class UMaterialExpressionBreakMaterialAttributes : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionBreakMaterialAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBreakMaterialAttributes, MaterialAttributes, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBreakMaterialAttributes, UnknownData_BYLU, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBreakMaterialAttributes, 0x0060);
		}

		// class UMaterialExpressionBumpOffset : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionBumpOffset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, Coordinate, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, UnknownData_Q271, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, Height, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, UnknownData_674D, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, HeightRatioInput, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, UnknownData_A04A, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, HeightRatio, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, ReferencePlane, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, ConstCoordinate, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBumpOffset, 0x0090);
		}

		// class UMaterialExpressionCameraPositionWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCameraPositionWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCameraPositionWS, 0x0048);
		}

		// class UMaterialExpressionCameraVectorWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCameraVectorWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCameraVectorWS, 0x0048);
		}

		// class UMaterialExpressionCeil : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCeil)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCeil, Input, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCeil, UnknownData_5HAW, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCeil, 0x0060);
		}

		// class UMaterialExpressionParameter : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionParameter, ParameterName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionParameter, ExpressionGUID, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParameter, 0x0060);
		}

		// class UMaterialExpressionVectorParameter : public UMaterialExpressionParameter
		TEST_METHOD(Class__Engine__MaterialExpressionVectorParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorParameter, DefaultValue, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVectorParameter, 0x0070);
		}

		// class UMaterialExpressionChannelMaskParameter : public UMaterialExpressionVectorParameter
		TEST_METHOD(Class__Engine__MaterialExpressionChannelMaskParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionChannelMaskParameter, MaskChannel, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionChannelMaskParameter, UnknownData_UR0U, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionChannelMaskParameter, Input, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionChannelMaskParameter, UnknownData_Z5XR, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionChannelMaskParameter, 0x0088);
		}

		// class UMaterialExpressionClamp : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionClamp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, Input, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, UnknownData_MUJM, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, Min, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, UnknownData_UUT0, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, Max, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, UnknownData_UBA5, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, ClampMode, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, UnknownData_JZOU, 0x0085);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, MinDefault, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, MaxDefault, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionClamp, 0x0090);
		}

		// class UMaterialExpressionClearCoatNormalCustomOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionClearCoatNormalCustomOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClearCoatNormalCustomOutput, Input, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClearCoatNormalCustomOutput, UnknownData_705V, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionClearCoatNormalCustomOutput, 0x0060);
		}

		// class UMaterialExpressionCollectionParameter : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCollectionParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCollectionParameter, Collection, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCollectionParameter, ParameterName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCollectionParameter, ParameterId, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCollectionParameter, 0x0068);
		}

		// class UMaterialExpressionComment : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionComment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, SizeX, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, SizeY, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, Text, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, CommentColor, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, FontSize, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, UnknownData_FQ20, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionComment, 0x0078);
		}

		// class UMaterialExpressionComponentMask : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionComponentMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComponentMask, Input, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComponentMask, UnknownData_CZTV, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComponentMask, UnknownData_XVZI, 0x005D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionComponentMask, 0x0060);
		}

		// class UMaterialExpressionConstant : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionConstant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant, R, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant, UnknownData_26KA, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstant, 0x0050);
		}

		// class UMaterialExpressionConstant2Vector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionConstant2Vector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant2Vector, R, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant2Vector, G, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstant2Vector, 0x0050);
		}

		// class UMaterialExpressionConstant3Vector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionConstant3Vector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant3Vector, Constant, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstant3Vector, 0x0058);
		}

		// class UMaterialExpressionConstant4Vector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionConstant4Vector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant4Vector, Constant, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstant4Vector, 0x0058);
		}

		// class UMaterialExpressionConstantBiasScale : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionConstantBiasScale)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstantBiasScale, Input, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstantBiasScale, UnknownData_HOAE, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstantBiasScale, Bias, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstantBiasScale, Scale, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstantBiasScale, UnknownData_L668, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstantBiasScale, 0x0068);
		}

		// class UMaterialExpressionCosine : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCosine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCosine, Input, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCosine, UnknownData_F964, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCosine, Period, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCosine, 0x0060);
		}

		// class UMaterialExpressionCrossProduct : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCrossProduct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCrossProduct, A, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCrossProduct, UnknownData_ARKT, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCrossProduct, B, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCrossProduct, UnknownData_0486, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCrossProduct, 0x0070);
		}

		// class UMaterialExpressionScalarParameter : public UMaterialExpressionParameter
		TEST_METHOD(Class__Engine__MaterialExpressionScalarParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionScalarParameter, DefaultValue, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionScalarParameter, UnknownData_1SK5, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionScalarParameter, 0x0068);
		}

		// class UMaterialExpressionCurveAtlasRowParameter : public UMaterialExpressionScalarParameter
		TEST_METHOD(Class__Engine__MaterialExpressionCurveAtlasRowParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCurveAtlasRowParameter, Curve, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCurveAtlasRowParameter, Atlas, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCurveAtlasRowParameter, InputTime, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCurveAtlasRowParameter, UnknownData_A7C9, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCurveAtlasRowParameter, 0x0090);
		}

		// class UMaterialExpressionCustom : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCustom)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, code, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, OutputType, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, UnknownData_T4VC, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, Description, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, Inputs, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCustom, 0x0080);
		}

		// class UMaterialExpressionDDX : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDDX)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDDX, Value, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDDX, UnknownData_KFR8, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDDX, 0x0060);
		}

		// class UMaterialExpressionDDY : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDDY)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDDY, Value, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDDY, UnknownData_8NIZ, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDDY, 0x0060);
		}

		// class UMaterialExpressionDecalDerivative : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDecalDerivative)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDecalDerivative, 0x0048);
		}

		// class UMaterialExpressionDecalLifetimeOpacity : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDecalLifetimeOpacity)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDecalLifetimeOpacity, 0x0048);
		}

		// class UMaterialExpressionDecalMipmapLevel : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDecalMipmapLevel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDecalMipmapLevel, TextureSize, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDecalMipmapLevel, UnknownData_EFDO, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDecalMipmapLevel, ConstWidth, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDecalMipmapLevel, ConstHeight, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDecalMipmapLevel, UnknownData_37WM, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDecalMipmapLevel, 0x0068);
		}

		// class UMaterialExpressionDeltaTime : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDeltaTime)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDeltaTime, 0x0048);
		}

		// class UMaterialExpressionDepthFade : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDepthFade)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, InOpacity, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, UnknownData_5UOV, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, FadeDistance, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, UnknownData_E139, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, OpacityDefault, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, FadeDistanceDefault, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDepthFade, 0x0078);
		}

		// class UMaterialExpressionDepthOfFieldFunction : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDepthOfFieldFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthOfFieldFunction, FunctionValue, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthOfFieldFunction, UnknownData_L6YF, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthOfFieldFunction, Depth, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthOfFieldFunction, UnknownData_KFNC, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDepthOfFieldFunction, 0x0060);
		}

		// class UMaterialExpressionDeriveNormalZ : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDeriveNormalZ)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDeriveNormalZ, InXY, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDeriveNormalZ, UnknownData_GXPV, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDeriveNormalZ, 0x0060);
		}

		// class UMaterialExpressionDesaturation : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDesaturation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDesaturation, Input, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDesaturation, UnknownData_HIHI, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDesaturation, Fraction, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDesaturation, UnknownData_JABT, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDesaturation, LuminanceFactors, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDesaturation, 0x0080);
		}

		// class UMaterialExpressionDistance : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDistance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistance, A, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistance, UnknownData_GMOR, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistance, B, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistance, UnknownData_MHMZ, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDistance, 0x0070);
		}

		// class UMaterialExpressionDistanceCullFade : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDistanceCullFade)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDistanceCullFade, 0x0048);
		}

		// class UMaterialExpressionDistanceFieldGradient : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDistanceFieldGradient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistanceFieldGradient, Position, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistanceFieldGradient, UnknownData_5F33, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDistanceFieldGradient, 0x0060);
		}

		// class UMaterialExpressionDistanceToNearestSurface : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDistanceToNearestSurface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistanceToNearestSurface, Position, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistanceToNearestSurface, UnknownData_1EB6, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDistanceToNearestSurface, 0x0060);
		}

		// class UMaterialExpressionDivide : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDivide)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, A, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, UnknownData_5SS5, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, B, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, UnknownData_3SM0, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, ConstA, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, ConstB, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDivide, 0x0078);
		}

		// class UMaterialExpressionDotProduct : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDotProduct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDotProduct, A, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDotProduct, UnknownData_GRC7, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDotProduct, B, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDotProduct, UnknownData_VTHE, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDotProduct, 0x0070);
		}

		// class UMaterialExpressionDynamicParameter : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDynamicParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDynamicParameter, ParamNames, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDynamicParameter, DefaultValue, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDynamicParameter, ParameterIndex, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDynamicParameter, UnknownData_EY8I, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDynamicParameter, 0x0070);
		}

		// class UMaterialExpressionEyeAdaptation : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionEyeAdaptation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionEyeAdaptation, 0x0048);
		}

		// class UMaterialExpressionFeatureLevelSwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFeatureLevelSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFeatureLevelSwitch, Default, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFeatureLevelSwitch, UnknownData_TE6J, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFeatureLevelSwitch, Inputs, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFeatureLevelSwitch, UnknownData_Z0AE, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFeatureLevelSwitch, 0x00B0);
		}

		// class UMaterialExpressionFloor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFloor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFloor, Input, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFloor, UnknownData_XI8B, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFloor, 0x0060);
		}

		// class UMaterialExpressionFmod : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFmod)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFmod, A, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFmod, UnknownData_KSV3, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFmod, B, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFmod, UnknownData_ZR62, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFmod, 0x0070);
		}

		// class UMaterialExpressionFontSample : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFontSample)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSample, Font, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSample, FontTexturePage, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSample, UnknownData_P9RS, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFontSample, 0x0058);
		}

		// class UMaterialExpressionFontSampleParameter : public UMaterialExpressionFontSample
		TEST_METHOD(Class__Engine__MaterialExpressionFontSampleParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSampleParameter, ParameterName, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSampleParameter, ExpressionGUID, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSampleParameter, Group, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFontSampleParameter, 0x0078);
		}

		// class UMaterialExpressionFrac : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFrac)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFrac, Input, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFrac, UnknownData_1F0L, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFrac, 0x0060);
		}

		// class UMaterialExpressionFresnel : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFresnel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, ExponentIn, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, UnknownData_8YYD, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, Exponent, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, BaseReflectFractionIn, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, UnknownData_G3M1, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, BaseReflectFraction, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, Normal, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, UnknownData_VIGC, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFresnel, 0x0090);
		}

		// class UMaterialExpressionFunctionInput : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFunctionInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, Preview, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, UnknownData_RHD8, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, InputName, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, UnknownData_TAWD, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, Description, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, ID, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, InputType, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, UnknownData_8NPX, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, PreviewValue, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, UnknownData_2F2U, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, SortPriority, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, UnknownData_XNST, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFunctionInput, 0x00C0);
		}

		// class UMaterialExpressionFunctionOutput : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFunctionOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, OutputName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, Description, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, SortPriority, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, A, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, UnknownData_AZG9, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, UnknownData_T45R, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, ID, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, UnknownData_F4HQ, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFunctionOutput, 0x0090);
		}

		// class UMaterialExpressionGetMaterialAttributes : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionGetMaterialAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGetMaterialAttributes, MaterialAttributes, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGetMaterialAttributes, UnknownData_L3LH, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGetMaterialAttributes, AttributeGetTypes, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionGetMaterialAttributes, 0x0070);
		}

		// class UMaterialExpressionGIReplace : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionGIReplace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, Default, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, UnknownData_6S90, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, StaticIndirect, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, UnknownData_SWNU, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, DynamicIndirect, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, UnknownData_IBLB, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionGIReplace, 0x0088);
		}

		// class UMaterialExpressionIf : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionIf)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, A, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, UnknownData_A2EH, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, B, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, UnknownData_0WB2, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, AGreaterThanB, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, UnknownData_BDOY, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, AEqualsB, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, UnknownData_FF7D, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, ALessThanB, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, UnknownData_F8L8, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, EqualsThreshold, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, ConstB, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, ConstAEqualsB, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionIf, 0x00B8);
		}

		// class UMaterialExpressionLightmapUVs : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLightmapUVs)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLightmapUVs, 0x0048);
		}

		// class UMaterialExpressionLightmassReplace : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLightmassReplace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLightmassReplace, Realtime, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLightmassReplace, UnknownData_2TG2, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLightmassReplace, Lightmass, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLightmassReplace, UnknownData_EKVN, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLightmassReplace, 0x0070);
		}

		// class UMaterialExpressionLightVector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLightVector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLightVector, 0x0048);
		}

		// class UMaterialExpressionLinearInterpolate : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLinearInterpolate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, A, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, UnknownData_ZJOJ, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, B, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, UnknownData_ZMHQ, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, Alpha, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, UnknownData_E938, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, ConstA, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, ConstB, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, ConstAlpha, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLinearInterpolate, 0x0090);
		}

		// class UMaterialExpressionLogarithm10 : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLogarithm10)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLogarithm10, X, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLogarithm10, UnknownData_UXQQ, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLogarithm10, 0x0060);
		}

		// class UMaterialExpressionLogarithm2 : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLogarithm2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLogarithm2, X, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLogarithm2, UnknownData_N6FL, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLogarithm2, 0x0060);
		}

		// class UMaterialExpressionMakeMaterialAttributes : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMakeMaterialAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, BaseColor, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_ZUNG, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Metallic, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_IWGJ, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Specular, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_O5AE, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Roughness, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_FXYB, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, EmissiveColor, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_GQ2G, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Opacity, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_VAI0, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, OpacityMask, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_G1EE, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Normal, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_CZPH, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, WorldPositionOffset, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_EKYE, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, WorldDisplacement, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_6IBC, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, TessellationMultiplier, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_G7BI, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, SubsurfaceColor, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_9Z37, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, ClearCoat, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_9PJ6, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, ClearCoatRoughness, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_D9ZY, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, AmbientOcclusion, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_MXAQ, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Refraction, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_SBHZ, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, CustomizedUVs, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_Q295, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, PixelDepthOffset, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_9UF8, 0x0234);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMakeMaterialAttributes, 0x0240);
		}

		// class UGE_StatusSurvivalStudentF_C : public UGE_StatusSurvivalBase_C
		TEST_METHOD(BlueprintGeneratedClass__GE_StatusSurvivalStudentF__GE_StatusSurvivalStudentF_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_StatusSurvivalStudentF_C, 0x05F8);
		}

		// class UMaterialExpressionMaterialAttributeLayers : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMaterialAttributeLayers)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, ParameterName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, ExpressionGUID, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, Input, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, UnknownData_PZ9X, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, DefaultLayers, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, LayerCallers, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, NumActiveLayerCallers, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, UnknownData_891Q, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, BlendCallers, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, NumActiveBlendCallers, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, bIsLayerGraphBuilt, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, UnknownData_8HFX, 0x00E5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMaterialAttributeLayers, 0x00F0);
		}

		// class UMaterialExpressionMaterialFunctionCall : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMaterialFunctionCall)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialFunctionCall, MaterialFunction, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialFunctionCall, FunctionParameterInfo, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMaterialFunctionCall, 0x0060);
		}

		// class UMaterialExpressionMaterialLayerOutput : public UMaterialExpressionFunctionOutput
		TEST_METHOD(Class__Engine__MaterialExpressionMaterialLayerOutput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMaterialLayerOutput, 0x0090);
		}

		// class UMaterialExpressionMaterialProxyReplace : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMaterialProxyReplace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialProxyReplace, Realtime, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialProxyReplace, UnknownData_PTEF, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialProxyReplace, MaterialProxy, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialProxyReplace, UnknownData_U91I, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMaterialProxyReplace, 0x0070);
		}

		// class UMaterialExpressionMax : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMax)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, A, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, UnknownData_HUUF, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, B, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, UnknownData_0M2G, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, ConstA, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, ConstB, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMax, 0x0078);
		}

		// class UMaterialExpressionMin : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMin)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, A, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, UnknownData_087O, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, B, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, UnknownData_JKQO, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, ConstA, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, ConstB, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMin, 0x0078);
		}

		// class UMaterialExpressionMultiply : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMultiply)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, A, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, UnknownData_9B0N, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, B, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, UnknownData_5TSL, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, ConstA, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, ConstB, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMultiply, 0x0078);
		}

		// class UMaterialExpressionNoise : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionNoise)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, Position, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, UnknownData_2604, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, FilterWidth, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, UnknownData_F47W, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, Scale, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, Quality, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, NoiseFunction, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, UnknownData_GU0A, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, UnknownData_J0OF, 0x007D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, Levels, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, OutputMin, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, OutputMax, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, LevelScale, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, UnknownData_CZGT, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, RepeatSize, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionNoise, 0x0098);
		}

		// class UMaterialExpressionNormalize : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionNormalize)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNormalize, VectorInput, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNormalize, UnknownData_JNNY, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionNormalize, 0x0060);
		}

		// class UMaterialExpressionObjectBounds : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionObjectBounds)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionObjectBounds, 0x0048);
		}

		// class UMaterialExpressionObjectOrientation : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionObjectOrientation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionObjectOrientation, 0x0048);
		}

		// class UMaterialExpressionObjectPositionWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionObjectPositionWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionObjectPositionWS, 0x0048);
		}

		// class UMaterialExpressionObjectRadius : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionObjectRadius)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionObjectRadius, 0x0048);
		}

		// class UMaterialExpressionOneMinus : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionOneMinus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionOneMinus, Input, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionOneMinus, UnknownData_CIIH, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionOneMinus, 0x0060);
		}

		// class UMaterialExpressionPanner : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPanner)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, Coordinate, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, UnknownData_C4R6, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, Time, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, UnknownData_X7VM, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, Speed, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, UnknownData_UVIE, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, SpeedX, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, SpeedY, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, ConstCoordinate, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, bFractionalPart, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, UnknownData_EDGL, 0x0091);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPanner, 0x0098);
		}

		// class UMaterialExpressionParticleColor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleColor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleColor, 0x0048);
		}

		// class UMaterialExpressionParticleDirection : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleDirection)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleDirection, 0x0048);
		}

		// class UMaterialExpressionParticleMacroUV : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleMacroUV)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleMacroUV, 0x0048);
		}

		// class UMaterialExpressionParticleMotionBlurFade : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleMotionBlurFade)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleMotionBlurFade, 0x0048);
		}

		// class UMaterialExpressionParticlePositionWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticlePositionWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticlePositionWS, 0x0048);
		}

		// class UMaterialExpressionParticleRadius : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleRadius)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleRadius, 0x0048);
		}

		// class UMaterialExpressionParticleRandom : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleRandom)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleRandom, 0x0048);
		}

		// class UMaterialExpressionParticleRelativeTime : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleRelativeTime)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleRelativeTime, 0x0048);
		}

		// class UMaterialExpressionParticleSize : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleSize)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleSize, 0x0048);
		}

		// class UMaterialExpressionParticleSpeed : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleSpeed)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleSpeed, 0x0048);
		}

		// class UMaterialExpressionParticleSubUV : public UMaterialExpressionTextureSample
		TEST_METHOD(Class__Engine__MaterialExpressionParticleSubUV)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionParticleSubUV, UnknownData_2SCG, 0x00E9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleSubUV, 0x00F0);
		}

		// class UMaterialExpressionPerInstanceFadeAmount : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPerInstanceFadeAmount)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPerInstanceFadeAmount, 0x0048);
		}

		// class UMaterialExpressionPerInstanceRandom : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPerInstanceRandom)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPerInstanceRandom, 0x0048);
		}

		// class UMaterialExpressionPixelDepth : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPixelDepth)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPixelDepth, 0x0048);
		}

		// class UMaterialExpressionPixelNormalWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPixelNormalWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPixelNormalWS, 0x0048);
		}

		// class UMaterialExpressionPower : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPower)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, Base, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, UnknownData_FE58, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, Exponent, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, UnknownData_X11O, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, ConstExponent, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, UnknownData_TB26, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPower, 0x0078);
		}

		// class UMaterialExpressionPrecomputedAOMask : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPrecomputedAOMask)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPrecomputedAOMask, 0x0048);
		}

		// class UMaterialExpressionPreSkinnedNormal : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPreSkinnedNormal)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPreSkinnedNormal, 0x0048);
		}

		// class UMaterialExpressionPreSkinnedPosition : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPreSkinnedPosition)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPreSkinnedPosition, 0x0048);
		}

		// class UMaterialExpressionPreviousFrameSwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPreviousFrameSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPreviousFrameSwitch, CurrentFrame, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPreviousFrameSwitch, UnknownData_C4MM, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPreviousFrameSwitch, PreviousFrame, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPreviousFrameSwitch, UnknownData_EBUQ, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPreviousFrameSwitch, 0x0070);
		}

		// class UMaterialExpressionQualitySwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionQualitySwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionQualitySwitch, Default, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionQualitySwitch, UnknownData_RBOG, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionQualitySwitch, Inputs, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionQualitySwitch, UnknownData_HC6T, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionQualitySwitch, 0x0098);
		}

		// class UMaterialExpressionRayTracingQualitySwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionRayTracingQualitySwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRayTracingQualitySwitch, Normal, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRayTracingQualitySwitch, UnknownData_GCC8, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRayTracingQualitySwitch, RayTraced, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRayTracingQualitySwitch, UnknownData_9TJ6, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRayTracingQualitySwitch, 0x0070);
		}

		// class UMaterialExpressionReflectionVectorWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionReflectionVectorWS)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReflectionVectorWS, CustomWorldNormal, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReflectionVectorWS, UnknownData_GG3S, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReflectionVectorWS, UnknownData_3MSO, 0x005D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionReflectionVectorWS, 0x0060);
		}

		// class UMaterialExpressionReroute : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionReroute)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReroute, Input, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReroute, UnknownData_T4I8, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionReroute, 0x0060);
		}

		// class UMaterialExpressionRotateAboutAxis : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionRotateAboutAxis)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, NormalizedRotationAxis, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, UnknownData_GZBE, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, RotationAngle, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, UnknownData_TORV, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, PivotPoint, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, UnknownData_MUHR, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, Position, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, UnknownData_FIZT, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, Period, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, UnknownData_XVMT, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRotateAboutAxis, 0x00A0);
		}

		// class UMaterialExpressionRotator : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionRotator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, Coordinate, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, UnknownData_UPG7, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, Time, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, UnknownData_HCXE, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, CenterX, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, CenterY, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, Speed, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, ConstCoordinate, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRotator, 0x0080);
		}

		// class UMaterialExpressionRound : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionRound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRound, Input, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRound, UnknownData_S9WM, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRound, 0x0060);
		}

		// class UMaterialExpressionSaturate : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSaturate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSaturate, Input, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSaturate, UnknownData_37NR, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSaturate, 0x0060);
		}

		// class UMaterialExpressionSceneColor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSceneColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, InputMode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, UnknownData_A7PV, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, Input, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, UnknownData_BXUV, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, OffsetFraction, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, UnknownData_9LMU, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, ConstInput, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, UnknownData_X918, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSceneColor, 0x0080);
		}

		// class UMaterialExpressionSceneDepth : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSceneDepth)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, InputMode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, UnknownData_SYN0, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, Input, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, UnknownData_TE6Q, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, Coordinates, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, UnknownData_1MDM, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, ConstInput, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, UnknownData_84XH, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSceneDepth, 0x0080);
		}

		// class UMaterialExpressionSceneTexelSize : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSceneTexelSize)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSceneTexelSize, 0x0048);
		}

		// class UMaterialExpressionSceneTexture : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSceneTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, Coordinates, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, UnknownData_QB21, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, SceneTextureId, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, bFiltered, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, UnknownData_HR58, 0x005E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSceneTexture, 0x0060);
		}

		// class UMaterialExpressionScreenPosition : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionScreenPosition)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionScreenPosition, 0x0048);
		}

		// class UMaterialExpressionSetMaterialAttributes : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSetMaterialAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSetMaterialAttributes, Inputs, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSetMaterialAttributes, AttributeSetTypes, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSetMaterialAttributes, 0x0068);
		}

		// class UMaterialExpressionShadingPathSwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionShadingPathSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadingPathSwitch, Default, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadingPathSwitch, UnknownData_FA1Z, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadingPathSwitch, Inputs, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadingPathSwitch, UnknownData_5TDJ, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionShadingPathSwitch, 0x0098);
		}

		// class UMaterialExpressionShadowReplace : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionShadowReplace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadowReplace, Default, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadowReplace, UnknownData_ATXI, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadowReplace, Shadow, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadowReplace, UnknownData_KVYH, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionShadowReplace, 0x0070);
		}

		// class UMaterialExpressionSign : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSign)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSign, Input, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSign, UnknownData_72LX, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSign, 0x0060);
		}

		// class UMaterialExpressionSine : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSine, Input, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSine, UnknownData_73HU, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSine, Period, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSine, 0x0060);
		}

		// class UMaterialExpressionSobol : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSobol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, Cell, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, UnknownData_MCCH, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, Index, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, UnknownData_6C7C, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, Seed, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, UnknownData_181A, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, ConstIndex, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, ConstSeed, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSobol, 0x0090);
		}

		// class UMaterialExpressionSpeedTree : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSpeedTree)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, GeometryInput, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_RSD4, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, WindInput, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_MU4O, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, LODInput, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_FIBM, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, ExtraBendWS, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_2GN2, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, GeometryType, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, WindType, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, LODType, 0x009A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_Q6M8, 0x009B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, BillboardThreshold, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, bAccurateWindVelocities, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_VUQM, 0x00A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSpeedTree, 0x00A8);
		}

		// class UMaterialExpressionSphereMask : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSphereMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, A, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, UnknownData_4XA3, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, B, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, UnknownData_9KTU, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, Radius, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, UnknownData_0DD4, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, Hardness, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, UnknownData_9H4M, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, AttenuationRadius, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, HardnessPercent, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSphereMask, 0x00A0);
		}

		// class UMaterialExpressionSphericalParticleOpacity : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSphericalParticleOpacity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphericalParticleOpacity, Density, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphericalParticleOpacity, UnknownData_IT7S, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphericalParticleOpacity, ConstantDensity, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSphericalParticleOpacity, 0x0060);
		}

		// class UMaterialExpressionSquareRoot : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSquareRoot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSquareRoot, Input, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSquareRoot, UnknownData_0AUH, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSquareRoot, 0x0060);
		}

		// class UMaterialExpressionStaticBool : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionStaticBool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticBool, UnknownData_AFT6, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticBool, 0x0050);
		}

		// class UMaterialExpressionStaticBoolParameter : public UMaterialExpressionParameter
		TEST_METHOD(Class__Engine__MaterialExpressionStaticBoolParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticBoolParameter, UnknownData_B1AZ, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticBoolParameter, 0x0068);
		}

		// class UMaterialExpressionStaticComponentMaskParameter : public UMaterialExpressionParameter
		TEST_METHOD(Class__Engine__MaterialExpressionStaticComponentMaskParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticComponentMaskParameter, Input, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticComponentMaskParameter, UnknownData_UAO4, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticComponentMaskParameter, UnknownData_YRWZ, 0x0075);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticComponentMaskParameter, 0x0078);
		}

		// class UMaterialExpressionStaticSwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionStaticSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, UnknownData_CT3I, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, A, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, UnknownData_BAZC, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, B, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, UnknownData_X8OP, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, Value, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, UnknownData_P9C8, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticSwitch, 0x0088);
		}

		// class UMaterialExpressionStaticSwitchParameter : public UMaterialExpressionStaticBoolParameter
		TEST_METHOD(Class__Engine__MaterialExpressionStaticSwitchParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitchParameter, A, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitchParameter, UnknownData_0MTU, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitchParameter, B, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitchParameter, UnknownData_TH2H, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticSwitchParameter, 0x0090);
		}

		// class UMaterialExpressionSubtract : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSubtract)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, A, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, UnknownData_HE2H, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, B, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, UnknownData_EC4Q, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, ConstA, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, ConstB, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSubtract, 0x0078);
		}

		// class UMaterialExpressionTangent : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTangent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTangent, Input, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTangent, UnknownData_2S8H, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTangent, Period, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTangent, 0x0060);
		}

		// class UMaterialExpressionTangentOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionTangentOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTangentOutput, Input, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTangentOutput, UnknownData_HLFA, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTangentOutput, 0x0060);
		}

		// class UMaterialExpressionTemporalSobol : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTemporalSobol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, Index, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, UnknownData_PRID, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, Seed, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, UnknownData_NUKU, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, ConstIndex, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, ConstSeed, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, UnknownData_7QEM, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTemporalSobol, 0x0080);
		}

		// class UMaterialExpressionTextureCoordinate : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTextureCoordinate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureCoordinate, CoordinateIndex, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureCoordinate, UTiling, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureCoordinate, VTiling, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureCoordinate, UnknownData_8BG4, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureCoordinate, 0x0058);
		}

		// class UMaterialExpressionTextureObject : public UMaterialExpressionTextureBase
		TEST_METHOD(Class__Engine__MaterialExpressionTextureObject)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureObject, 0x0058);
		}

		// class UMaterialExpressionTextureObjectParameter : public UMaterialExpressionTextureSampleParameter
		TEST_METHOD(Class__Engine__MaterialExpressionTextureObjectParameter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureObjectParameter, 0x0108);
		}

		// class UMaterialExpressionTextureProperty : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTextureProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureProperty, TextureObject, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureProperty, UnknownData_IS7U, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureProperty, Property, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureProperty, UnknownData_D7W6, 0x005D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureProperty, 0x0060);
		}

		// class UGSAmazonConnectRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSAmazonConnectRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAmazonConnectRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAmazonConnectRequest, AccessToken, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAmazonConnectRequest, DoNotCreateNewPlayer, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAmazonConnectRequest, DoNotLinkToCurrentPlayer, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAmazonConnectRequest, ErrorOnSwitch, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAmazonConnectRequest, UnknownData_GOTT, 0x0053);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAmazonConnectRequest, Segments, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAmazonConnectRequest, SwitchIfPossible, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAmazonConnectRequest, SyncDisplayName, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAmazonConnectRequest, UnknownData_DQ4I, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAmazonConnectRequest, ScriptData, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAmazonConnectRequest, Durable, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAmazonConnectRequest, UnknownData_PPSO, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAmazonConnectRequest, requestTimeoutSeconds, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAmazonConnectRequest, PlayerId, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSAmazonConnectRequest, 0x0088);
		}

		// class UMaterialExpressionTextureSampleParameterCube : public UMaterialExpressionTextureSampleParameter
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameterCube)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameterCube, 0x0108);
		}

		// class UMaterialExpressionTextureSampleParameterSubUV : public UMaterialExpressionTextureSampleParameter2D
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameterSubUV)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSampleParameterSubUV, UnknownData_A51O, 0x0109);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameterSubUV, 0x0110);
		}

		// class UMaterialExpressionTextureSampleParameterVolume : public UMaterialExpressionTextureSampleParameter
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameterVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameterVolume, 0x0108);
		}

		// class UGSAnalyticsRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSAnalyticsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAnalyticsRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAnalyticsRequest, Data, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAnalyticsRequest, End, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAnalyticsRequest, UnknownData_8SDO, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAnalyticsRequest, Key, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAnalyticsRequest, Start, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAnalyticsRequest, UnknownData_K3Z2, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAnalyticsRequest, ScriptData, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAnalyticsRequest, Durable, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAnalyticsRequest, UnknownData_9WIZ, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAnalyticsRequest, requestTimeoutSeconds, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAnalyticsRequest, PlayerId, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSAnalyticsRequest, 0x0088);
		}

		// class UGSAroundMeLeaderboardRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSAroundMeLeaderboardRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAroundMeLeaderboardRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAroundMeLeaderboardRequest, ChallengeInstanceId, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAroundMeLeaderboardRequest, CustomIdFilter, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAroundMeLeaderboardRequest, DontErrorOnNotSocial, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAroundMeLeaderboardRequest, UnknownData_BMGX, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAroundMeLeaderboardRequest, EntryCount, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAroundMeLeaderboardRequest, FriendIds, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAroundMeLeaderboardRequest, IncludeFirst, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAroundMeLeaderboardRequest, IncludeLast, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAroundMeLeaderboardRequest, InverseSocial, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAroundMeLeaderboardRequest, UnknownData_YZAR, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAroundMeLeaderboardRequest, LeaderboardShortCode, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAroundMeLeaderboardRequest, Social, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAroundMeLeaderboardRequest, UnknownData_3L3N, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAroundMeLeaderboardRequest, TeamIds, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAroundMeLeaderboardRequest, TeamTypes, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAroundMeLeaderboardRequest, ScriptData, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAroundMeLeaderboardRequest, Durable, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAroundMeLeaderboardRequest, UnknownData_FQZ4, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAroundMeLeaderboardRequest, requestTimeoutSeconds, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAroundMeLeaderboardRequest, PlayerId, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSAroundMeLeaderboardRequest, 0x00C0);
		}

		// class UMaterialExpressionTime : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTime, UnknownData_GSFC, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTime, Period, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTime, 0x0050);
		}

		// class UMaterialExpressionTransform : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, Input, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, UnknownData_2OCB, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, TransformSourceType, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, TransformType, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, UnknownData_IJWV, 0x005E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTransform, 0x0060);
		}

		// class UMaterialExpressionTransformPosition : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTransformPosition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, Input, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, UnknownData_0OYQ, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, TransformSourceType, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, TransformType, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, UnknownData_WH9I, 0x005E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTransformPosition, 0x0060);
		}

		// class UMaterialExpressionTruncate : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTruncate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTruncate, Input, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTruncate, UnknownData_LC5I, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTruncate, 0x0060);
		}

		// class UGSAuthenticationRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSAuthenticationRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAuthenticationRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAuthenticationRequest, Password, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAuthenticationRequest, Username, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAuthenticationRequest, ScriptData, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAuthenticationRequest, Durable, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAuthenticationRequest, UnknownData_MBAX, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAuthenticationRequest, requestTimeoutSeconds, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSAuthenticationRequest, PlayerId, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSAuthenticationRequest, 0x0080);
		}

		// class UGSBatchAdminRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSBatchAdminRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSBatchAdminRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSBatchAdminRequest, playerIds, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSBatchAdminRequest, Request, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSBatchAdminRequest, ScriptData, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSBatchAdminRequest, Durable, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSBatchAdminRequest, UnknownData_RMGF, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSBatchAdminRequest, requestTimeoutSeconds, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSBatchAdminRequest, 0x0060);
		}

		// class UMaterialExpressionTwoSidedSign : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTwoSidedSign)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTwoSidedSign, 0x0048);
		}

		// class UMaterialExpressionVectorNoise : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionVectorNoise)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, Position, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, UnknownData_VTJN, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, NoiseFunction, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, UnknownData_ZVOB, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, Quality, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, UnknownData_ALW8, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, TileSize, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, UnknownData_NIZ9, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVectorNoise, 0x0070);
		}

		// class UGSBuyVirtualGoodsRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSBuyVirtualGoodsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSBuyVirtualGoodsRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSBuyVirtualGoodsRequest, CurrencyShortCode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSBuyVirtualGoodsRequest, CurrencyType, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSBuyVirtualGoodsRequest, Quantity, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSBuyVirtualGoodsRequest, ShortCode, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSBuyVirtualGoodsRequest, ScriptData, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSBuyVirtualGoodsRequest, Durable, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSBuyVirtualGoodsRequest, UnknownData_PTC9, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSBuyVirtualGoodsRequest, requestTimeoutSeconds, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSBuyVirtualGoodsRequest, PlayerId, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSBuyVirtualGoodsRequest, 0x0088);
		}

		// class UMaterialExpressionVertexColor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionVertexColor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVertexColor, 0x0048);
		}

		// class UMaterialExpressionVertexInterpolator : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionVertexInterpolator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVertexInterpolator, Input, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVertexInterpolator, UnknownData_OWW8, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVertexInterpolator, 0x0068);
		}

		// class UGSCancelBulkJobAdminRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSCancelBulkJobAdminRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSCancelBulkJobAdminRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSCancelBulkJobAdminRequest, BulkJobIds, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSCancelBulkJobAdminRequest, ScriptData, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSCancelBulkJobAdminRequest, Durable, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSCancelBulkJobAdminRequest, UnknownData_O958, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSCancelBulkJobAdminRequest, requestTimeoutSeconds, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSCancelBulkJobAdminRequest, 0x0058);
		}

		// class UMaterialExpressionVertexNormalWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionVertexNormalWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVertexNormalWS, 0x0048);
		}

		// class UMaterialExpressionViewProperty : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionViewProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionViewProperty, Property, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionViewProperty, UnknownData_LXAY, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionViewProperty, 0x0050);
		}

		// class UGSChangeUserDetailsRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSChangeUserDetailsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSChangeUserDetailsRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSChangeUserDetailsRequest, DisplayName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSChangeUserDetailsRequest, Language, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSChangeUserDetailsRequest, NewPassword, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSChangeUserDetailsRequest, OldPassword, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSChangeUserDetailsRequest, Username, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSChangeUserDetailsRequest, ScriptData, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSChangeUserDetailsRequest, Durable, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSChangeUserDetailsRequest, UnknownData_7QV7, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSChangeUserDetailsRequest, requestTimeoutSeconds, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSChangeUserDetailsRequest, PlayerId, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSChangeUserDetailsRequest, 0x00B0);
		}

		// class UMaterialExpressionViewSize : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionViewSize)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionViewSize, 0x0048);
		}

		// class UMaterialExpressionWorldPosition : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionWorldPosition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionWorldPosition, WorldPositionShaderOffset, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionWorldPosition, UnknownData_BZGN, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionWorldPosition, 0x0050);
		}

		// class UMaterialFunctionInterface : public UObject
		TEST_METHOD(Class__Engine__MaterialFunctionInterface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInterface, StateId, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInterface, MaterialFunctionUsage, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInterface, UnknownData_K69D, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionInterface, 0x0048);
		}

		// class UMaterialFunction : public UMaterialFunctionInterface
		TEST_METHOD(Class__Engine__MaterialFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunction, Description, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunction, UnknownData_8QR4, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunction, FunctionExpressions, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunction, UnknownData_0I82, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunction, 0x0078);
		}

		// class UGSChatOnChallengeRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSChatOnChallengeRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSChatOnChallengeRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSChatOnChallengeRequest, ChallengeInstanceId, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSChatOnChallengeRequest, Message, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSChatOnChallengeRequest, ScriptData, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSChatOnChallengeRequest, Durable, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSChatOnChallengeRequest, UnknownData_5WW3, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSChatOnChallengeRequest, requestTimeoutSeconds, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSChatOnChallengeRequest, PlayerId, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSChatOnChallengeRequest, 0x0080);
		}

		// class UGSConsumeVirtualGoodRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSConsumeVirtualGoodRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSConsumeVirtualGoodRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSConsumeVirtualGoodRequest, Quantity, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSConsumeVirtualGoodRequest, UnknownData_W2WN, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSConsumeVirtualGoodRequest, ShortCode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSConsumeVirtualGoodRequest, ScriptData, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSConsumeVirtualGoodRequest, Durable, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSConsumeVirtualGoodRequest, UnknownData_6H72, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSConsumeVirtualGoodRequest, requestTimeoutSeconds, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSConsumeVirtualGoodRequest, PlayerId, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSConsumeVirtualGoodRequest, 0x0078);
		}

		// class UMaterialFunctionInstance : public UMaterialFunctionInterface
		TEST_METHOD(Class__Engine__MaterialFunctionInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, Parent, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, Base, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, ScalarParameterValues, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, VectorParameterValues, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, TextureParameterValues, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, FontParameterValues, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, StaticSwitchParameterValues, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, StaticComponentMaskParameterValues, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionInstance, 0x00B8);
		}

		// class UGSCreateChallengeRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSCreateChallengeRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSCreateChallengeRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSCreateChallengeRequest, AccessType, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSCreateChallengeRequest, AutoStartJoinedChallengeOnMaxPlayers, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSCreateChallengeRequest, UnknownData_5318, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSCreateChallengeRequest, ChallengeMessage, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSCreateChallengeRequest, ChallengeShortCode, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSCreateChallengeRequest, Currency1Wager, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSCreateChallengeRequest, Currency2Wager, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSCreateChallengeRequest, Currency3Wager, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSCreateChallengeRequest, Currency4Wager, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSCreateChallengeRequest, Currency5Wager, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSCreateChallengeRequest, Currency6Wager, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSCreateChallengeRequest, CurrencyWagers, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSCreateChallengeRequest, EligibilityCriteria, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSCreateChallengeRequest, endTime, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSCreateChallengeRequest, ExpiryTime, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSCreateChallengeRequest, MaxAttempts, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSCreateChallengeRequest, MaxPlayers, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSCreateChallengeRequest, MinPlayers, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSCreateChallengeRequest, Silent, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSCreateChallengeRequest, UnknownData_1NFL, 0x00CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSCreateChallengeRequest, startTime, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSCreateChallengeRequest, UsersToChallenge, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSCreateChallengeRequest, ScriptData, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSCreateChallengeRequest, Durable, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSCreateChallengeRequest, UnknownData_T5BJ, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSCreateChallengeRequest, requestTimeoutSeconds, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSCreateChallengeRequest, PlayerId, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSCreateChallengeRequest, 0x0108);
		}

		// class UMaterialFunctionMaterialLayer : public UMaterialFunction
		TEST_METHOD(Class__Engine__MaterialFunctionMaterialLayer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionMaterialLayer, 0x0078);
		}

		// class UMaterialFunctionMaterialLayerInstance : public UMaterialFunctionInstance
		TEST_METHOD(Class__Engine__MaterialFunctionMaterialLayerInstance)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionMaterialLayerInstance, 0x00B8);
		}

		// class UMaterialFunctionMaterialLayerBlend : public UMaterialFunction
		TEST_METHOD(Class__Engine__MaterialFunctionMaterialLayerBlend)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionMaterialLayerBlend, 0x0078);
		}

		// class UMaterialFunctionMaterialLayerBlendInstance : public UMaterialFunctionInstance
		TEST_METHOD(Class__Engine__MaterialFunctionMaterialLayerBlendInstance)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionMaterialLayerBlendInstance, 0x00B8);
		}

		// class AMaterialInstanceActor : public AActor
		TEST_METHOD(Class__Engine__MaterialInstanceActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMaterialInstanceActor, TargetActors, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMaterialInstanceActor, 0x0348);
		}

		// class UMaterialInstanceDynamic : public UMaterialInstance
		TEST_METHOD(Class__Engine__MaterialInstanceDynamic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstanceDynamic, UnknownData_Y718, 0x01D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialInstanceDynamic, 0x0220);
		}

		// class UGSCreateTeamRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSCreateTeamRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSCreateTeamRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSCreateTeamRequest, TeamId, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSCreateTeamRequest, TeamName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSCreateTeamRequest, TeamType, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSCreateTeamRequest, ScriptData, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSCreateTeamRequest, Durable, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSCreateTeamRequest, UnknownData_LJNA, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSCreateTeamRequest, requestTimeoutSeconds, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSCreateTeamRequest, PlayerId, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSCreateTeamRequest, 0x0090);
		}

		// class UMaterialParameterCollection : public UObject
		TEST_METHOD(Class__Engine__MaterialParameterCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollection, StateId, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollection, ScalarParameters, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollection, VectorParameters, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollection, UnknownData_BEY6, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialParameterCollection, 0x0070);
		}

		// class UMaterialParameterCollectionInstance : public UObject
		TEST_METHOD(Class__Engine__MaterialParameterCollectionInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollectionInstance, UnknownData_IVK0, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollectionInstance, Collection, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollectionInstance, UnknownData_UE63, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialParameterCollectionInstance, 0x00F8);
		}

		// class UGSDeclineChallengeRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSDeclineChallengeRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSDeclineChallengeRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSDeclineChallengeRequest, ChallengeInstanceId, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSDeclineChallengeRequest, Message, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSDeclineChallengeRequest, ScriptData, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSDeclineChallengeRequest, Durable, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSDeclineChallengeRequest, UnknownData_VMU1, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSDeclineChallengeRequest, requestTimeoutSeconds, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSDeclineChallengeRequest, PlayerId, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSDeclineChallengeRequest, 0x0080);
		}

		// class AMatineeActor : public AActor
		TEST_METHOD(Class__Engine__MatineeActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, MatineeData, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, MatineeControllerName, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, PlayRate, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_JJSZ, 0x034D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, ForceStartPosition, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_DJOJ, 0x0355);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, PreferredSplitScreenNum, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_PCX5, 0x035D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, GroupActorInfos, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_FF74, 0x0371);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, GroupInst, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, CameraCuts, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_ZJ3E, 0x0399);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, InterpPosition, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_8HLP, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, ReplicationForceIsPlaying, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_AHFZ, 0x03A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, OnPlay, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, OnStop, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, OnPause, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_WIT3, 0x03D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMatineeActor, 0x03E0);
		}

		// class UGSDeviceAuthenticationRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSDeviceAuthenticationRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSDeviceAuthenticationRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSDeviceAuthenticationRequest, DeviceID, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSDeviceAuthenticationRequest, DeviceModel, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSDeviceAuthenticationRequest, DeviceName, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSDeviceAuthenticationRequest, DeviceOS, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSDeviceAuthenticationRequest, DeviceType, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSDeviceAuthenticationRequest, DisplayName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSDeviceAuthenticationRequest, operatingSystem, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSDeviceAuthenticationRequest, Segments, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSDeviceAuthenticationRequest, ScriptData, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSDeviceAuthenticationRequest, Durable, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSDeviceAuthenticationRequest, UnknownData_KBM1, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSDeviceAuthenticationRequest, requestTimeoutSeconds, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSDeviceAuthenticationRequest, PlayerId, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSDeviceAuthenticationRequest, 0x00D8);
		}

		// class UGSDismissMessageRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSDismissMessageRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSDismissMessageRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSDismissMessageRequest, MessageId, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSDismissMessageRequest, ScriptData, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSDismissMessageRequest, Durable, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSDismissMessageRequest, UnknownData_B4S9, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSDismissMessageRequest, requestTimeoutSeconds, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSDismissMessageRequest, PlayerId, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSDismissMessageRequest, 0x0070);
		}

		// class AMatineeActorCameraAnim : public AMatineeActor
		TEST_METHOD(Class__Engine__MatineeActorCameraAnim)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActorCameraAnim, CameraAnim, 0x03E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMatineeActorCameraAnim, 0x03E8);
		}

		// class UMatineeAnimInterface : public UInterface
		TEST_METHOD(Class__Engine__MatineeAnimInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMatineeAnimInterface, 0x0030);
		}

		// class UMatineeInterface : public UInterface
		TEST_METHOD(Class__Engine__MatineeInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMatineeInterface, 0x0030);
		}

		// class UGSDismissMultipleMessagesRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSDismissMultipleMessagesRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSDismissMultipleMessagesRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSDismissMultipleMessagesRequest, MessageIds, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSDismissMultipleMessagesRequest, ScriptData, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSDismissMultipleMessagesRequest, Durable, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSDismissMultipleMessagesRequest, UnknownData_HQVZ, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSDismissMultipleMessagesRequest, requestTimeoutSeconds, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSDismissMultipleMessagesRequest, PlayerId, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSDismissMultipleMessagesRequest, 0x0068);
		}

		// class AMeshMergeCullingVolume : public AVolume
		TEST_METHOD(Class__Engine__MeshMergeCullingVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMeshMergeCullingVolume, 0x0370);
		}

		// class UMeshSimplificationSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__MeshSimplificationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSimplificationSettings, MeshReductionModuleName, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSimplificationSettings, 0x0048);
		}

		// class UMeshVertexPainterKismetLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__MeshVertexPainterKismetLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshVertexPainterKismetLibrary, 0x0030);
		}

		// class UGSDropTeamRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSDropTeamRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSDropTeamRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSDropTeamRequest, OwnerId, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSDropTeamRequest, TeamId, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSDropTeamRequest, TeamType, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSDropTeamRequest, ScriptData, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSDropTeamRequest, Durable, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSDropTeamRequest, UnknownData_W3W8, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSDropTeamRequest, requestTimeoutSeconds, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSDropTeamRequest, PlayerId, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSDropTeamRequest, 0x0090);
		}

		// class UMicroTransactionBase : public UPlatformInterfaceBase
		TEST_METHOD(Class__Engine__MicroTransactionBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMicroTransactionBase, AvailableProducts, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMicroTransactionBase, LastError, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMicroTransactionBase, LastErrorSolution, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMicroTransactionBase, 0x0070);
		}

		// class UModelComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__ModelComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UModelComponent, UnknownData_CLXR, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModelComponent, UnknownData_YM7I, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModelComponent, ModelBodySetup, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModelComponent, UnknownData_QDCG, 0x0598);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModelComponent, 0x05C0);
		}

		// class UGSEndSessionRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSEndSessionRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSEndSessionRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSEndSessionRequest, ScriptData, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSEndSessionRequest, Durable, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSEndSessionRequest, UnknownData_0O7Z, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSEndSessionRequest, requestTimeoutSeconds, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSEndSessionRequest, PlayerId, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSEndSessionRequest, 0x0060);
		}

		// class UMorphTarget : public UObject
		TEST_METHOD(Class__Engine__MorphTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMorphTarget, BaseSkelMesh, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMorphTarget, UnknownData_GIS2, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMorphTarget, 0x0048);
		}

		// class UNavAgentInterface : public UInterface
		TEST_METHOD(Class__Engine__NavAgentInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavAgentInterface, 0x0030);
		}

		// class UGSFacebookConnectRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSFacebookConnectRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSFacebookConnectRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSFacebookConnectRequest, AccessToken, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSFacebookConnectRequest, code, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSFacebookConnectRequest, DoNotCreateNewPlayer, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSFacebookConnectRequest, DoNotLinkToCurrentPlayer, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSFacebookConnectRequest, ErrorOnSwitch, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSFacebookConnectRequest, UnknownData_0K60, 0x0063);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSFacebookConnectRequest, Segments, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSFacebookConnectRequest, SwitchIfPossible, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSFacebookConnectRequest, SyncDisplayName, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSFacebookConnectRequest, UnknownData_WA79, 0x0072);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSFacebookConnectRequest, ScriptData, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSFacebookConnectRequest, Durable, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSFacebookConnectRequest, UnknownData_DGQD, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSFacebookConnectRequest, requestTimeoutSeconds, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSFacebookConnectRequest, PlayerId, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSFacebookConnectRequest, 0x0098);
		}

		// class UNavAreaBase : public UObject
		TEST_METHOD(Class__Engine__NavAreaBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaBase, UnknownData_2STW, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavAreaBase, 0x0038);
		}

		// class UNavCollisionBase : public UObject
		TEST_METHOD(Class__Engine__NavCollisionBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollisionBase, UnknownData_V3K3, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavCollisionBase, 0x0098);
		}

		// class UNavEdgeProviderInterface : public UInterface
		TEST_METHOD(Class__Engine__NavEdgeProviderInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavEdgeProviderInterface, 0x0030);
		}

		// class UNavigationDataChunk : public UObject
		TEST_METHOD(Class__Engine__NavigationDataChunk)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationDataChunk, NavigationDataName, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationDataChunk, 0x0038);
		}

		// class UNavigationDataInterface : public UInterface
		TEST_METHOD(Class__Engine__NavigationDataInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationDataInterface, 0x0030);
		}

		// class ANavigationObjectBase : public AActor
		TEST_METHOD(Class__Engine__NavigationObjectBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationObjectBase, UnknownData_4MPX, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationObjectBase, CapsuleComponent, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationObjectBase, GoodSprite, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationObjectBase, BadSprite, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationObjectBase, UnknownData_RKQG, 0x0359);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavigationObjectBase, 0x0360);
		}

		// class UGSFindChallengeRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSFindChallengeRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSFindChallengeRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSFindChallengeRequest, AccessType, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSFindChallengeRequest, Count, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSFindChallengeRequest, UnknownData_XYC4, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSFindChallengeRequest, Eligibility, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSFindChallengeRequest, Offset, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSFindChallengeRequest, UnknownData_6ICY, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSFindChallengeRequest, ShortCode, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSFindChallengeRequest, ScriptData, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSFindChallengeRequest, Durable, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSFindChallengeRequest, UnknownData_0O6Q, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSFindChallengeRequest, requestTimeoutSeconds, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSFindChallengeRequest, PlayerId, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSFindChallengeRequest, 0x0090);
		}

		// class UNavigationSystemBase : public UObject
		TEST_METHOD(Class__Engine__NavigationSystemBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationSystemBase, 0x0030);
		}

		// class UNavigationSystem : public UObject
		TEST_METHOD(Class__Engine__NavigationSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystem, UnknownData_LV15, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationSystem, 0x0040);
		}

		// class UNavigationSystemConfig : public UObject
		TEST_METHOD(Class__Engine__NavigationSystemConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemConfig, NavigationSystemClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemConfig, UnknownData_FONV, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationSystemConfig, 0x0050);
		}

		// class UGSFindMatchRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSFindMatchRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSFindMatchRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSFindMatchRequest, Action, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSFindMatchRequest, MatchGroup, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSFindMatchRequest, MatchShortCode, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSFindMatchRequest, Skill, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSFindMatchRequest, UnknownData_OHBT, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSFindMatchRequest, ScriptData, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSFindMatchRequest, Durable, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSFindMatchRequest, UnknownData_XYBY, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSFindMatchRequest, requestTimeoutSeconds, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSFindMatchRequest, PlayerId, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSFindMatchRequest, 0x0098);
		}

		// class UNullNavSysConfig : public UNavigationSystemConfig
		TEST_METHOD(Class__Engine__NullNavSysConfig)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNullNavSysConfig, 0x0050);
		}

		// class UNavLinkDefinition : public UObject
		TEST_METHOD(Class__Engine__NavLinkDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkDefinition, Links, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkDefinition, SegmentLinks, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkDefinition, UnknownData_FQPB, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkDefinition, 0x0058);
		}

		// class UNavPathObserverInterface : public UInterface
		TEST_METHOD(Class__Engine__NavPathObserverInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavPathObserverInterface, 0x0030);
		}

		// class UNavRelevantInterface : public UInterface
		TEST_METHOD(Class__Engine__NavRelevantInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavRelevantInterface, 0x0030);
		}

		// class USimulatedClientNetConnection : public UNetConnection
		TEST_METHOD(Class__Engine__SimulatedClientNetConnection)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USimulatedClientNetConnection, 0x18F0);
		}

		// class UGSFindPendingMatchesRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSFindPendingMatchesRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSFindPendingMatchesRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSFindPendingMatchesRequest, MatchGroup, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSFindPendingMatchesRequest, MatchShortCode, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSFindPendingMatchesRequest, MaxMatchesToFind, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSFindPendingMatchesRequest, UnknownData_70IG, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSFindPendingMatchesRequest, ScriptData, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSFindPendingMatchesRequest, Durable, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSFindPendingMatchesRequest, UnknownData_ENFK, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSFindPendingMatchesRequest, requestTimeoutSeconds, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSFindPendingMatchesRequest, PlayerId, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSFindPendingMatchesRequest, 0x0088);
		}

		// class UNetworkPredictionInterface : public UInterface
		TEST_METHOD(Class__Engine__NetworkPredictionInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetworkPredictionInterface, 0x0030);
		}

		// class UNetworkSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__NetworkSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetworkSettings, UnknownData_WQ9L, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetworkSettings, MaxRepArraySize, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetworkSettings, MaxRepArrayMemory, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetworkSettings, UnknownData_KSYD, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetworkSettings, 0x0050);
		}

		// class UNodeMappingContainer : public UObject
		TEST_METHOD(Class__Engine__NodeMappingContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNodeMappingContainer, SourceItems, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNodeMappingContainer, TargetItems, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNodeMappingContainer, SourceToTarget, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNodeMappingContainer, SourceAsset, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNodeMappingContainer, TargetAsset, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNodeMappingContainer, 0x0170);
		}

		// class UGSGameCenterConnectRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSGameCenterConnectRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGameCenterConnectRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGameCenterConnectRequest, DisplayName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGameCenterConnectRequest, DoNotCreateNewPlayer, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGameCenterConnectRequest, DoNotLinkToCurrentPlayer, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGameCenterConnectRequest, ErrorOnSwitch, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGameCenterConnectRequest, UnknownData_K44I, 0x0053);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGameCenterConnectRequest, ExternalPlayerId, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGameCenterConnectRequest, PublicKeyUrl, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGameCenterConnectRequest, Salt, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGameCenterConnectRequest, Segments, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGameCenterConnectRequest, Signature, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGameCenterConnectRequest, SwitchIfPossible, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGameCenterConnectRequest, SyncDisplayName, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGameCenterConnectRequest, UnknownData_DHXL, 0x00A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGameCenterConnectRequest, Timestamp, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGameCenterConnectRequest, ScriptData, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGameCenterConnectRequest, Durable, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGameCenterConnectRequest, UnknownData_1B2M, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGameCenterConnectRequest, requestTimeoutSeconds, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGameCenterConnectRequest, PlayerId, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSGameCenterConnectRequest, 0x00C8);
		}

		// class UNodeMappingProviderInterface : public UInterface
		TEST_METHOD(Class__Engine__NodeMappingProviderInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNodeMappingProviderInterface, 0x0030);
		}

		// class ANote : public AActor
		TEST_METHOD(Class__Engine__Note)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANote, 0x0338);
		}

		// class UObjectLibrary : public UObject
		TEST_METHOD(Class__Engine__ObjectLibrary)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, ObjectBaseClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, bHasBlueprintClasses, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, UnknownData_7S4Z, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, Objects, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, WeakObjects, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, bUseWeakReferences, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, bIsFullyLoaded, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, UnknownData_F2WM, 0x0062);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectLibrary, 0x00B0);
		}

		// class UObjectReferencer : public UObject
		TEST_METHOD(Class__Engine__ObjectReferencer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectReferencer, ReferencedObjects, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectReferencer, 0x0040);
		}

		// class UPackageMapClient : public UPackageMap
		TEST_METHOD(Class__Engine__PackageMapClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPackageMapClient, UnknownData_6K0G, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPackageMapClient, 0x0390);
		}

		// class APainCausingVolume : public APhysicsVolume
		TEST_METHOD(Class__Engine__PainCausingVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, UnknownData_W55V, 0x0381);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, DamagePerSec, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, DamageType, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, PainInterval, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, UnknownData_QXWO, 0x0395);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, DamageInstigator, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, UnknownData_E8QE, 0x03A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APainCausingVolume, 0x03A8);
		}

		// class UGSGetChallengeRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSGetChallengeRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetChallengeRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetChallengeRequest, ChallengeInstanceId, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetChallengeRequest, Message, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetChallengeRequest, ScriptData, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetChallengeRequest, Durable, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetChallengeRequest, UnknownData_V4HL, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetChallengeRequest, requestTimeoutSeconds, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetChallengeRequest, PlayerId, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSGetChallengeRequest, 0x0080);
		}

		// class UParticleEmitter : public UObject
		TEST_METHOD(Class__Engine__ParticleEmitter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, EmitterName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, SubUVDataOffset, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, EmitterRenderMode, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, SignificanceLevel, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, UnknownData_5J89, 0x003E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, UnknownData_VJ92, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, LODLevels, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, PeakActiveParticles, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, InitialAllocationCount, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, QualityLevelSpawnRateScale, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, DetailModeBitmask, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, UnknownData_70UJ, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleEmitter, 0x0170);
		}

		// class UGSGetDownloadableRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSGetDownloadableRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetDownloadableRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetDownloadableRequest, ShortCode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetDownloadableRequest, ScriptData, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetDownloadableRequest, Durable, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetDownloadableRequest, UnknownData_NQMP, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetDownloadableRequest, requestTimeoutSeconds, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetDownloadableRequest, PlayerId, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSGetDownloadableRequest, 0x0070);
		}

		// class UGSGetLeaderboardEntriesRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSGetLeaderboardEntriesRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetLeaderboardEntriesRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetLeaderboardEntriesRequest, Challenges, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetLeaderboardEntriesRequest, InverseSocial, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetLeaderboardEntriesRequest, UnknownData_9NLP, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetLeaderboardEntriesRequest, Leaderboards, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetLeaderboardEntriesRequest, Player, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetLeaderboardEntriesRequest, Social, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetLeaderboardEntriesRequest, UnknownData_E1F7, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetLeaderboardEntriesRequest, TeamTypes, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetLeaderboardEntriesRequest, ScriptData, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetLeaderboardEntriesRequest, Durable, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetLeaderboardEntriesRequest, UnknownData_Q60S, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetLeaderboardEntriesRequest, requestTimeoutSeconds, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetLeaderboardEntriesRequest, PlayerId, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSGetLeaderboardEntriesRequest, 0x0098);
		}

		// class AParticleEventManager : public AActor
		TEST_METHOD(Class__Engine__ParticleEventManager)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AParticleEventManager, 0x0338);
		}

		// class UParticleLODLevel : public UObject
		TEST_METHOD(Class__Engine__ParticleLODLevel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, Level, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, UnknownData_6JWE, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, RequiredModule, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, Modules, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, TypeDataModule, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, SpawnModule, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, EventGenerator, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, SpawningModules, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, SpawnModules, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, UpdateModules, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, OrbitModules, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, EventReceiverModules, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, UnknownData_JVPD, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, PeakActiveParticles, 0x00BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleLODLevel, 0x00C0);
		}

		// class UParticleModule : public UObject
		TEST_METHOD(Class__Engine__ParticleModule)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModule, UnknownData_3P18, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModule, LODValidity, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModule, UnknownData_IZEM, 0x0035);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModule, 0x0038);
		}

		// class UGSGetMessageRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSGetMessageRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetMessageRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetMessageRequest, MessageId, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetMessageRequest, ScriptData, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetMessageRequest, Durable, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetMessageRequest, UnknownData_C2N6, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetMessageRequest, requestTimeoutSeconds, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetMessageRequest, PlayerId, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSGetMessageRequest, 0x0070);
		}

		// class UGSGetMyTeamsRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSGetMyTeamsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetMyTeamsRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetMyTeamsRequest, OwnedOnly, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetMyTeamsRequest, UnknownData_UXMH, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetMyTeamsRequest, TeamTypes, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetMyTeamsRequest, ScriptData, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetMyTeamsRequest, Durable, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetMyTeamsRequest, UnknownData_TZ1V, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetMyTeamsRequest, requestTimeoutSeconds, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetMyTeamsRequest, PlayerId, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSGetMyTeamsRequest, 0x0070);
		}

		// class UGSGetPropertyRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSGetPropertyRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetPropertyRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetPropertyRequest, PropertyShortCode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetPropertyRequest, ScriptData, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetPropertyRequest, Durable, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetPropertyRequest, UnknownData_5YDD, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetPropertyRequest, requestTimeoutSeconds, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetPropertyRequest, PlayerId, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSGetPropertyRequest, 0x0070);
		}

		// class UParticleModuleAccelerationBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationBase, UnknownData_OK0B, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationBase, 0x0040);
		}

		// class UParticleModuleAcceleration : public UParticleModuleAccelerationBase
		TEST_METHOD(Class__Engine__ParticleModuleAcceleration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAcceleration, Acceleration, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAcceleration, UnknownData_Z31S, 0x0091);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAcceleration, 0x0098);
		}

		// class UParticleModuleAccelerationConstant : public UParticleModuleAccelerationBase
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationConstant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationConstant, Acceleration, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationConstant, UnknownData_A579, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationConstant, 0x0050);
		}

		// class UGSGetPropertySetRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSGetPropertySetRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetPropertySetRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetPropertySetRequest, PropertySetShortCode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetPropertySetRequest, ScriptData, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetPropertySetRequest, Durable, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetPropertySetRequest, UnknownData_S62Y, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetPropertySetRequest, requestTimeoutSeconds, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetPropertySetRequest, PlayerId, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSGetPropertySetRequest, 0x0070);
		}

		// class UParticleModuleAccelerationDrag : public UParticleModuleAccelerationBase
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationDrag)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationDrag, DragCoefficient, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationDrag, DragCoefficientRaw, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationDrag, 0x0080);
		}

		// class UParticleModuleAccelerationDragScaleOverLife : public UParticleModuleAccelerationBase
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationDragScaleOverLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationDragScaleOverLife, DragScale, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationDragScaleOverLife, DragScaleRaw, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationDragScaleOverLife, 0x0080);
		}

		// class UParticleModuleAccelerationOverLifetime : public UParticleModuleAccelerationBase
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationOverLifetime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationOverLifetime, AccelOverLife, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationOverLifetime, 0x0090);
		}

		// class UGSGetTeamRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSGetTeamRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetTeamRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetTeamRequest, OwnerId, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetTeamRequest, TeamId, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetTeamRequest, TeamType, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetTeamRequest, ScriptData, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetTeamRequest, Durable, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetTeamRequest, UnknownData_BZL7, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetTeamRequest, requestTimeoutSeconds, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetTeamRequest, PlayerId, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSGetTeamRequest, 0x0090);
		}

		// class UParticleModuleAttractorBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleAttractorBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorBase, 0x0038);
		}

		// class UParticleModuleAttractorLine : public UParticleModuleAttractorBase
		TEST_METHOD(Class__Engine__ParticleModuleAttractorLine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorLine, EndPoint0, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorLine, EndPoint1, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorLine, Range, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorLine, Strength, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorLine, 0x00C0);
		}

		// class UParticleModuleAttractorParticle : public UParticleModuleAttractorBase
		TEST_METHOD(Class__Engine__ParticleModuleAttractorParticle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, EmitterName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, Range, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, UnknownData_RBUI, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, Strength, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, UnknownData_WI4M, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, SelectionMethod, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, UnknownData_L3YD, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, UnknownData_REDN, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, LastSelIndex, 0x00C4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorParticle, 0x00C8);
		}

		// class UGSGetUploadUrlRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSGetUploadUrlRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetUploadUrlRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetUploadUrlRequest, UploadData, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetUploadUrlRequest, ScriptData, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetUploadUrlRequest, Durable, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetUploadUrlRequest, UnknownData_SPDM, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetUploadUrlRequest, requestTimeoutSeconds, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetUploadUrlRequest, PlayerId, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSGetUploadUrlRequest, 0x0068);
		}

		// class UGSGetUploadedRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSGetUploadedRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetUploadedRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetUploadedRequest, UploadId, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetUploadedRequest, ScriptData, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetUploadedRequest, Durable, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetUploadedRequest, UnknownData_B044, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetUploadedRequest, requestTimeoutSeconds, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGetUploadedRequest, PlayerId, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSGetUploadedRequest, 0x0070);
		}

		// class UParticleModuleAttractorPoint : public UParticleModuleAttractorBase
		TEST_METHOD(Class__Engine__ParticleModuleAttractorPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPoint, Position, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPoint, Range, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPoint, Strength, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPoint, UnknownData_XQOY, 0x00FA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorPoint, 0x0100);
		}

		// class UGSGooglePlayBuyGoodsRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSGooglePlayBuyGoodsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGooglePlayBuyGoodsRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGooglePlayBuyGoodsRequest, CurrencyCode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGooglePlayBuyGoodsRequest, Signature, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGooglePlayBuyGoodsRequest, SignedData, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGooglePlayBuyGoodsRequest, SubUnitPrice, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGooglePlayBuyGoodsRequest, UniqueTransactionByPlayer, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGooglePlayBuyGoodsRequest, UnknownData_RL1Z, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGooglePlayBuyGoodsRequest, ScriptData, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGooglePlayBuyGoodsRequest, Durable, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGooglePlayBuyGoodsRequest, UnknownData_VZTQ, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGooglePlayBuyGoodsRequest, requestTimeoutSeconds, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGooglePlayBuyGoodsRequest, PlayerId, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSGooglePlayBuyGoodsRequest, 0x0098);
		}

		// class UParticleModuleAttractorPointGravity : public UParticleModuleAttractorBase
		TEST_METHOD(Class__Engine__ParticleModuleAttractorPointGravity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPointGravity, Position, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPointGravity, Radius, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPointGravity, Strength, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPointGravity, StrengthRaw, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorPointGravity, 0x0088);
		}

		// class UParticleModuleBeamBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleBeamBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamBase, 0x0038);
		}

		// class UParticleModuleBeamModifier : public UParticleModuleBeamBase
		TEST_METHOD(Class__Engine__ParticleModuleBeamModifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, ModifierType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, UnknownData_8RZU, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, PositionOptions, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, Position, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, TangentOptions, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, UnknownData_UK0R, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, Tangent, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, UnknownData_1VB8, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, StrengthOptions, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, Strength, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamModifier, 0x0128);
		}

		// class UGSGooglePlayConnectRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSGooglePlayConnectRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGooglePlayConnectRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGooglePlayConnectRequest, AccessToken, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGooglePlayConnectRequest, code, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGooglePlayConnectRequest, DisplayName, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGooglePlayConnectRequest, DoNotCreateNewPlayer, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGooglePlayConnectRequest, DoNotLinkToCurrentPlayer, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGooglePlayConnectRequest, ErrorOnSwitch, 0x0072);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGooglePlayConnectRequest, GooglePlusScope, 0x0073);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGooglePlayConnectRequest, ProfileScope, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGooglePlayConnectRequest, UnknownData_EBQM, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGooglePlayConnectRequest, RedirectUri, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGooglePlayConnectRequest, Segments, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGooglePlayConnectRequest, SwitchIfPossible, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGooglePlayConnectRequest, SyncDisplayName, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGooglePlayConnectRequest, UnknownData_RQNF, 0x0092);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGooglePlayConnectRequest, ScriptData, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGooglePlayConnectRequest, Durable, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGooglePlayConnectRequest, UnknownData_UAG2, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGooglePlayConnectRequest, requestTimeoutSeconds, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGooglePlayConnectRequest, PlayerId, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSGooglePlayConnectRequest, 0x00B8);
		}

		// class UParticleModuleBeamNoise : public UParticleModuleBeamBase
		TEST_METHOD(Class__Engine__ParticleModuleBeamNoise)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_LZMR, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, Frequency, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, Frequency_LowRange, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_K2H1, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseRange, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseRangeScale, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_2XES, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseSpeed, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_1L24, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseLockRadius, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_3O5I, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseLockTime, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseTension, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_X2JE, 0x013D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseTangentStrength, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseTessellation, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_TK1B, 0x017D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, FrequencyDistance, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_CGM5, 0x0185);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseScale, 0x0188);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamNoise, 0x01C0);
		}

		// class UGSGooglePlusConnectRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSGooglePlusConnectRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGooglePlusConnectRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGooglePlusConnectRequest, AccessToken, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGooglePlusConnectRequest, code, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGooglePlusConnectRequest, DoNotCreateNewPlayer, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGooglePlusConnectRequest, DoNotLinkToCurrentPlayer, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGooglePlusConnectRequest, ErrorOnSwitch, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGooglePlusConnectRequest, UnknownData_47KV, 0x0063);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGooglePlusConnectRequest, RedirectUri, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGooglePlusConnectRequest, Segments, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGooglePlusConnectRequest, SwitchIfPossible, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGooglePlusConnectRequest, SyncDisplayName, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGooglePlusConnectRequest, UnknownData_OKVG, 0x0082);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGooglePlusConnectRequest, ScriptData, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGooglePlusConnectRequest, Durable, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGooglePlusConnectRequest, UnknownData_FDU7, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGooglePlusConnectRequest, requestTimeoutSeconds, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSGooglePlusConnectRequest, PlayerId, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSGooglePlusConnectRequest, 0x00A8);
		}

		// class UParticleModuleBeamSource : public UParticleModuleBeamBase
		TEST_METHOD(Class__Engine__ParticleModuleBeamSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceMethod, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_PH8A, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceName, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_BGYV, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, Source, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_LJQX, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceTangentMethod, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_J306, 0x009D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceTangent, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_ANHB, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceStrength, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_281M, 0x0131);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamSource, 0x0138);
		}

		// class UGSIOSBuyGoodsRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSIOSBuyGoodsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSIOSBuyGoodsRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSIOSBuyGoodsRequest, CurrencyCode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSIOSBuyGoodsRequest, Receipt, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSIOSBuyGoodsRequest, Sandbox, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSIOSBuyGoodsRequest, UnknownData_9UJT, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSIOSBuyGoodsRequest, SubUnitPrice, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSIOSBuyGoodsRequest, UniqueTransactionByPlayer, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSIOSBuyGoodsRequest, UnknownData_7R9Y, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSIOSBuyGoodsRequest, ScriptData, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSIOSBuyGoodsRequest, Durable, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSIOSBuyGoodsRequest, UnknownData_XWM7, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSIOSBuyGoodsRequest, requestTimeoutSeconds, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSIOSBuyGoodsRequest, PlayerId, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSIOSBuyGoodsRequest, 0x0090);
		}

		// class UParticleModuleBeamTarget : public UParticleModuleBeamBase
		TEST_METHOD(Class__Engine__ParticleModuleBeamTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetMethod, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_SSTG, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetName, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_S9FJ, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, Target, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_3ST6, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetTangentMethod, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_8NQ4, 0x009D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetTangent, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_8NAD, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetStrength, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_0F8X, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, LockRadius, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_F1MN, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamTarget, 0x0140);
		}

		// class UGSJoinChallengeRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSJoinChallengeRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSJoinChallengeRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSJoinChallengeRequest, ChallengeInstanceId, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSJoinChallengeRequest, Eligibility, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSJoinChallengeRequest, Message, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSJoinChallengeRequest, ScriptData, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSJoinChallengeRequest, Durable, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSJoinChallengeRequest, UnknownData_6Z2K, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSJoinChallengeRequest, requestTimeoutSeconds, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSJoinChallengeRequest, PlayerId, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSJoinChallengeRequest, 0x0088);
		}

		// class UParticleModuleCameraBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleCameraBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCameraBase, 0x0038);
		}

		// class UParticleModuleCameraOffset : public UParticleModuleCameraBase
		TEST_METHOD(Class__Engine__ParticleModuleCameraOffset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCameraOffset, CameraOffset, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCameraOffset, UnknownData_T5B1, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCameraOffset, UpdateMethod, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCameraOffset, UnknownData_W2YT, 0x0075);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCameraOffset, 0x0078);
		}

		// class UParticleModuleCollisionBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleCollisionBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCollisionBase, 0x0038);
		}

		// class UGSJoinPendingMatchRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSJoinPendingMatchRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSJoinPendingMatchRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSJoinPendingMatchRequest, MatchGroup, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSJoinPendingMatchRequest, MatchShortCode, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSJoinPendingMatchRequest, PendingMatchId, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSJoinPendingMatchRequest, ScriptData, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSJoinPendingMatchRequest, Durable, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSJoinPendingMatchRequest, UnknownData_O56M, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSJoinPendingMatchRequest, requestTimeoutSeconds, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSJoinPendingMatchRequest, PlayerId, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSJoinPendingMatchRequest, 0x0090);
		}

		// class UParticleModuleCollision : public UParticleModuleCollisionBase
		TEST_METHOD(Class__Engine__ParticleModuleCollision)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, DampingFactor, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, DampingFactorRotation, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, MaxCollisions, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, CollisionCompletionOption, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_LHMK, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, CollisionTypes, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_2ZRI, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_HMS2, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, ParticleMass, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, DirScalar, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_9F90, 0x0175);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, VerticalFudgeFactor, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_RK9I, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, DelayAmount, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_FWDK, 0x01B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, MaxCollisionDistance, 0x01BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCollision, 0x01C0);
		}

		// class UGSJoinTeamRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSJoinTeamRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSJoinTeamRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSJoinTeamRequest, OwnerId, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSJoinTeamRequest, TeamId, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSJoinTeamRequest, TeamType, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSJoinTeamRequest, ScriptData, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSJoinTeamRequest, Durable, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSJoinTeamRequest, UnknownData_LJZ0, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSJoinTeamRequest, requestTimeoutSeconds, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSJoinTeamRequest, PlayerId, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSJoinTeamRequest, 0x0090);
		}

		// class UParticleModuleCollisionGPU : public UParticleModuleCollisionBase
		TEST_METHOD(Class__Engine__ParticleModuleCollisionGPU)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, Resilience, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, ResilienceScaleOverLife, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, Friction, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, RandomSpread, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, RandomDistribution, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, RadiusScale, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, RadiusBias, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, Response, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, CollisionMode, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, UnknownData_IIE7, 0x00BE);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCollisionGPU, 0x00C0);
		}

		// class UGSKongregateConnectRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSKongregateConnectRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSKongregateConnectRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSKongregateConnectRequest, DoNotCreateNewPlayer, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSKongregateConnectRequest, DoNotLinkToCurrentPlayer, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSKongregateConnectRequest, ErrorOnSwitch, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSKongregateConnectRequest, UnknownData_FUO6, 0x0043);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSKongregateConnectRequest, GameAuthToken, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSKongregateConnectRequest, Segments, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSKongregateConnectRequest, SwitchIfPossible, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSKongregateConnectRequest, SyncDisplayName, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSKongregateConnectRequest, UnknownData_84D9, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSKongregateConnectRequest, UserId, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSKongregateConnectRequest, ScriptData, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSKongregateConnectRequest, Durable, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSKongregateConnectRequest, UnknownData_T42S, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSKongregateConnectRequest, requestTimeoutSeconds, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSKongregateConnectRequest, PlayerId, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSKongregateConnectRequest, 0x0098);
		}

		// class UParticleModuleColorBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleColorBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColorBase, 0x0038);
		}

		// class UParticleModuleColor : public UParticleModuleColorBase
		TEST_METHOD(Class__Engine__ParticleModuleColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColor, StartColor, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColor, StartAlpha, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColor, UnknownData_FXHZ, 0x00C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColor, 0x00C8);
		}

		// class UParticleModuleColor_Seeded : public UParticleModuleColor
		TEST_METHOD(Class__Engine__ParticleModuleColor_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColor_Seeded, RandomSeedInfo, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColor_Seeded, 0x00E8);
		}

		// class UParticleModuleColorOverLife : public UParticleModuleColorBase
		TEST_METHOD(Class__Engine__ParticleModuleColorOverLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorOverLife, ColorOverLife, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorOverLife, AlphaOverLife, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorOverLife, UnknownData_M2AB, 0x00C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColorOverLife, 0x00C8);
		}

		// class UParticleModuleColorScaleOverLife : public UParticleModuleColorBase
		TEST_METHOD(Class__Engine__ParticleModuleColorScaleOverLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorScaleOverLife, ColorScaleOverLife, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorScaleOverLife, AlphaScaleOverLife, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorScaleOverLife, UnknownData_8UY0, 0x00C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColorScaleOverLife, 0x00C8);
		}

		// class UParticleModuleEventBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleEventBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventBase, 0x0038);
		}

		// class UGSLeaderboardDataRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSLeaderboardDataRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSLeaderboardDataRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSLeaderboardDataRequest, ChallengeInstanceId, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSLeaderboardDataRequest, DontErrorOnNotSocial, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSLeaderboardDataRequest, UnknownData_W31T, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSLeaderboardDataRequest, EntryCount, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSLeaderboardDataRequest, FriendIds, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSLeaderboardDataRequest, IncludeFirst, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSLeaderboardDataRequest, IncludeLast, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSLeaderboardDataRequest, InverseSocial, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSLeaderboardDataRequest, UnknownData_DOE9, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSLeaderboardDataRequest, LeaderboardShortCode, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSLeaderboardDataRequest, Offset, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSLeaderboardDataRequest, Social, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSLeaderboardDataRequest, UnknownData_9WBM, 0x0085);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSLeaderboardDataRequest, TeamIds, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSLeaderboardDataRequest, TeamTypes, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSLeaderboardDataRequest, ScriptData, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSLeaderboardDataRequest, Durable, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSLeaderboardDataRequest, UnknownData_HAHX, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSLeaderboardDataRequest, requestTimeoutSeconds, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSLeaderboardDataRequest, PlayerId, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSLeaderboardDataRequest, 0x00B8);
		}

		// class UParticleModuleEventGenerator : public UParticleModuleEventBase
		TEST_METHOD(Class__Engine__ParticleModuleEventGenerator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventGenerator, events, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventGenerator, 0x0048);
		}

		// class UParticleModuleEventReceiverBase : public UParticleModuleEventBase
		TEST_METHOD(Class__Engine__ParticleModuleEventReceiverBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverBase, EventGeneratorType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverBase, UnknownData_IB9Y, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverBase, EventName, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverBase, UnknownData_WEL9, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventReceiverBase, 0x0048);
		}

		// class UParticleModuleEventReceiverKillParticles : public UParticleModuleEventReceiverBase
		TEST_METHOD(Class__Engine__ParticleModuleEventReceiverKillParticles)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverKillParticles, UnknownData_A9DO, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventReceiverKillParticles, 0x0050);
		}

		// class UParticleModuleEventReceiverSpawn : public UParticleModuleEventReceiverBase
		TEST_METHOD(Class__Engine__ParticleModuleEventReceiverSpawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, SpawnCount, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, UnknownData_4182, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, InheritVelocityScale, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, PhysicalMaterials, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, UnknownData_N1HK, 0x00E9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventReceiverSpawn, 0x00F0);
		}

		// class UParticleModuleEventSendToGame : public UObject
		TEST_METHOD(Class__Engine__ParticleModuleEventSendToGame)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventSendToGame, 0x0030);
		}

		// class UParticleModuleKillBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleKillBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleKillBase, 0x0038);
		}

		// class UGSLeaderboardsEntriesRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSLeaderboardsEntriesRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSLeaderboardsEntriesRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSLeaderboardsEntriesRequest, Challenges, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSLeaderboardsEntriesRequest, InverseSocial, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSLeaderboardsEntriesRequest, UnknownData_SKIC, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSLeaderboardsEntriesRequest, Leaderboards, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSLeaderboardsEntriesRequest, Player, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSLeaderboardsEntriesRequest, Social, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSLeaderboardsEntriesRequest, UnknownData_WPHK, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSLeaderboardsEntriesRequest, TeamTypes, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSLeaderboardsEntriesRequest, ScriptData, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSLeaderboardsEntriesRequest, Durable, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSLeaderboardsEntriesRequest, UnknownData_49NK, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSLeaderboardsEntriesRequest, requestTimeoutSeconds, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSLeaderboardsEntriesRequest, PlayerId, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSLeaderboardsEntriesRequest, 0x0098);
		}

		// class UParticleModuleKillBox : public UParticleModuleKillBase
		TEST_METHOD(Class__Engine__ParticleModuleKillBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillBox, LowerLeftCorner, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillBox, UpperRightCorner, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillBox, UnknownData_TQUK, 0x00D9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleKillBox, 0x00E0);
		}

		// class UParticleModuleKillHeight : public UParticleModuleKillBase
		TEST_METHOD(Class__Engine__ParticleModuleKillHeight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillHeight, Height, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillHeight, UnknownData_IKWG, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleKillHeight, 0x0078);
		}

		// class UParticleModuleLifetimeBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleLifetimeBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLifetimeBase, 0x0038);
		}

		// class UParticleModuleLifetime : public UParticleModuleLifetimeBase
		TEST_METHOD(Class__Engine__ParticleModuleLifetime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLifetime, LifeTime, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLifetime, 0x0070);
		}

		// class UGSLeaveTeamRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSLeaveTeamRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSLeaveTeamRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSLeaveTeamRequest, OwnerId, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSLeaveTeamRequest, TeamId, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSLeaveTeamRequest, TeamType, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSLeaveTeamRequest, ScriptData, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSLeaveTeamRequest, Durable, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSLeaveTeamRequest, UnknownData_UIIC, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSLeaveTeamRequest, requestTimeoutSeconds, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSLeaveTeamRequest, PlayerId, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSLeaveTeamRequest, 0x0090);
		}

		// class UParticleModuleLifetime_Seeded : public UParticleModuleLifetime
		TEST_METHOD(Class__Engine__ParticleModuleLifetime_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLifetime_Seeded, RandomSeedInfo, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLifetime_Seeded, 0x0090);
		}

		// class UParticleModuleLightBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleLightBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLightBase, 0x0038);
		}

		// class UParticleModuleLight : public UParticleModuleLightBase
		TEST_METHOD(Class__Engine__ParticleModuleLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bUseInverseSquaredFalloff, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bAffectsTranslucency, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bPreviewLightRadius, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, UnknownData_XACX, 0x003B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, SpawnFraction, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, ColorScaleOverLife, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, BrightnessOverLife, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, RadiusScale, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, LightExponent, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, LightingChannels, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, UnknownData_QF97, 0x0139);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, VolumetricScatteringIntensity, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bHighQualityLights, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bShadowCastingLights, 0x0141);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, UnknownData_SN8E, 0x0142);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLight, 0x0148);
		}

		// class UGSListAchievementsRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSListAchievementsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListAchievementsRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListAchievementsRequest, ScriptData, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListAchievementsRequest, Durable, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListAchievementsRequest, UnknownData_GV5P, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListAchievementsRequest, requestTimeoutSeconds, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListAchievementsRequest, PlayerId, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSListAchievementsRequest, 0x0060);
		}

		// class UParticleModuleLight_Seeded : public UParticleModuleLight
		TEST_METHOD(Class__Engine__ParticleModuleLight_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight_Seeded, RandomSeedInfo, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLight_Seeded, 0x0168);
		}

		// class UParticleModuleLocationBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleLocationBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationBase, 0x0038);
		}

		// class UParticleModuleLocation : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocation, StartLocation, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocation, DistributeOverNPoints, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocation, DistributeThreshold, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocation, 0x0090);
		}

		// class UGSListBulkJobsAdminRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSListBulkJobsAdminRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListBulkJobsAdminRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListBulkJobsAdminRequest, BulkJobIds, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListBulkJobsAdminRequest, ScriptData, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListBulkJobsAdminRequest, Durable, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListBulkJobsAdminRequest, UnknownData_0SAJ, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListBulkJobsAdminRequest, requestTimeoutSeconds, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSListBulkJobsAdminRequest, 0x0058);
		}

		// class UParticleModuleLocation_Seeded : public UParticleModuleLocation
		TEST_METHOD(Class__Engine__ParticleModuleLocation_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocation_Seeded, RandomSeedInfo, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocation_Seeded, 0x00B0);
		}

		// class UParticleModuleLocationBoneSocket : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationBoneSocket)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, SourceType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UnknownData_NNH1, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UniversalOffset, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, SourceLocations, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, SelectionMethod, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UnknownData_QZQM, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UnknownData_REM9, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, InheritVelocityScale, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, SkelMeshActorParamName, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, NumPreSelectedIndices, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UnknownData_6Q8Z, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationBoneSocket, 0x0078);
		}

		// class UGSListChallengeRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSListChallengeRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListChallengeRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListChallengeRequest, EntryCount, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListChallengeRequest, Offset, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListChallengeRequest, ShortCode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListChallengeRequest, State, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListChallengeRequest, States, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListChallengeRequest, ScriptData, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListChallengeRequest, Durable, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListChallengeRequest, UnknownData_1IYF, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListChallengeRequest, requestTimeoutSeconds, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListChallengeRequest, PlayerId, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSListChallengeRequest, 0x0090);
		}

		// class UParticleModuleLocationDirect : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationDirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationDirect, Location, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationDirect, LocationOffset, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationDirect, ScaleFactor, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationDirect, Direction, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationDirect, 0x0178);
		}

		// class UParticleModuleLocationEmitter : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationEmitter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, EmitterName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, SelectionMethod, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, UnknownData_GXTI, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, UnknownData_JUPY, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, InheritSourceVelocityScale, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, UnknownData_RACF, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, InheritSourceRotationScale, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, UnknownData_9Q46, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationEmitter, 0x0058);
		}

		// class UGSListChallengeTypeRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSListChallengeTypeRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListChallengeTypeRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListChallengeTypeRequest, ScriptData, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListChallengeTypeRequest, Durable, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListChallengeTypeRequest, UnknownData_K9BZ, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListChallengeTypeRequest, requestTimeoutSeconds, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListChallengeTypeRequest, PlayerId, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSListChallengeTypeRequest, 0x0060);
		}

		// class UParticleModuleLocationEmitterDirect : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationEmitterDirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitterDirect, EmitterName, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationEmitterDirect, 0x0040);
		}

		// class UParticleModuleLocationPrimitiveBase : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveBase, UnknownData_XHB5, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveBase, VelocityScale, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveBase, StartLocation, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveBase, 0x00C8);
		}

		// class UGSListGameFriendsRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSListGameFriendsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListGameFriendsRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListGameFriendsRequest, ScriptData, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListGameFriendsRequest, Durable, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListGameFriendsRequest, UnknownData_VUFB, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListGameFriendsRequest, requestTimeoutSeconds, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListGameFriendsRequest, PlayerId, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSListGameFriendsRequest, 0x0060);
		}

		// class UGSListInviteFriendsRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSListInviteFriendsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListInviteFriendsRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListInviteFriendsRequest, ScriptData, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListInviteFriendsRequest, Durable, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListInviteFriendsRequest, UnknownData_Q02R, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListInviteFriendsRequest, requestTimeoutSeconds, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListInviteFriendsRequest, PlayerId, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSListInviteFriendsRequest, 0x0060);
		}

		// class UParticleModuleLocationPrimitiveCylinder : public UParticleModuleLocationPrimitiveBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveCylinder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, UnknownData_R7TE, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, StartRadius, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, StartHeight, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, HeightAxis, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, UnknownData_3VVE, 0x0141);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveCylinder, 0x0148);
		}

		// class UParticleModuleLocationPrimitiveCylinder_Seeded : public UParticleModuleLocationPrimitiveCylinder
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveCylinder_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder_Seeded, RandomSeedInfo, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveCylinder_Seeded, 0x0168);
		}

		// class UGSListLeaderboardsRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSListLeaderboardsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListLeaderboardsRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListLeaderboardsRequest, ScriptData, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListLeaderboardsRequest, Durable, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListLeaderboardsRequest, UnknownData_V5OA, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListLeaderboardsRequest, requestTimeoutSeconds, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListLeaderboardsRequest, PlayerId, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSListLeaderboardsRequest, 0x0060);
		}

		// class UParticleModuleLocationPrimitiveSphere : public UParticleModuleLocationPrimitiveBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveSphere)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveSphere, StartRadius, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveSphere, 0x0100);
		}

		// class UParticleModuleLocationPrimitiveSphere_Seeded : public UParticleModuleLocationPrimitiveSphere
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveSphere_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveSphere_Seeded, RandomSeedInfo, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveSphere_Seeded, 0x0120);
		}

		// class UParticleModuleLocationPrimitiveTriangle : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveTriangle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveTriangle, StartOffset, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveTriangle, Height, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveTriangle, Angle, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveTriangle, Thickness, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveTriangle, 0x0130);
		}

		// class UGSListMessageDetailRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSListMessageDetailRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListMessageDetailRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListMessageDetailRequest, EntryCount, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListMessageDetailRequest, UnknownData_UMXK, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListMessageDetailRequest, Include, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListMessageDetailRequest, Offset, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListMessageDetailRequest, UnknownData_7UY4, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListMessageDetailRequest, Status, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListMessageDetailRequest, ScriptData, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListMessageDetailRequest, Durable, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListMessageDetailRequest, UnknownData_MB20, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListMessageDetailRequest, requestTimeoutSeconds, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListMessageDetailRequest, PlayerId, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSListMessageDetailRequest, 0x0090);
		}

		// class UParticleModuleLocationSkelVertSurface : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationSkelVertSurface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, SourceType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UnknownData_A4ON, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UniversalOffset, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UnknownData_X3F3, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, InheritVelocityScale, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, SkelMeshActorParamName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, ValidAssociatedBones, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UnknownData_VV6R, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, NormalToCompare, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, NormalCheckToleranceDegrees, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, NormalCheckTolerance, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, ValidMaterialIndices, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UnknownData_L4V7, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, InheritUVChannel, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationSkelVertSurface, 0x0098);
		}

		// class UGSListMessageRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSListMessageRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListMessageRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListMessageRequest, EntryCount, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListMessageRequest, UnknownData_0DF3, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListMessageRequest, Include, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListMessageRequest, Offset, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListMessageRequest, UnknownData_K78P, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListMessageRequest, ScriptData, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListMessageRequest, Durable, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListMessageRequest, UnknownData_RK9M, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListMessageRequest, requestTimeoutSeconds, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListMessageRequest, PlayerId, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSListMessageRequest, 0x0080);
		}

		// class UParticleModuleLocationWorldOffset : public UParticleModuleLocation
		TEST_METHOD(Class__Engine__ParticleModuleLocationWorldOffset)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationWorldOffset, 0x0090);
		}

		// class UParticleModuleLocationWorldOffset_Seeded : public UParticleModuleLocationWorldOffset
		TEST_METHOD(Class__Engine__ParticleModuleLocationWorldOffset_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationWorldOffset_Seeded, RandomSeedInfo, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationWorldOffset_Seeded, 0x00B0);
		}

		// class UParticleModuleMaterialBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleMaterialBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMaterialBase, 0x0038);
		}

		// class UParticleModuleMeshMaterial : public UParticleModuleMaterialBase
		TEST_METHOD(Class__Engine__ParticleModuleMeshMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshMaterial, MeshMaterials, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshMaterial, 0x0048);
		}

		// class UGSListMessageSummaryRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSListMessageSummaryRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListMessageSummaryRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListMessageSummaryRequest, EntryCount, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListMessageSummaryRequest, Offset, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListMessageSummaryRequest, ScriptData, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListMessageSummaryRequest, Durable, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListMessageSummaryRequest, UnknownData_W0D4, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListMessageSummaryRequest, requestTimeoutSeconds, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListMessageSummaryRequest, PlayerId, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSListMessageSummaryRequest, 0x0068);
		}

		// class UParticleModuleRotationBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleRotationBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationBase, 0x0038);
		}

		// class UParticleModuleMeshRotation : public UParticleModuleRotationBase
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotation, StartRotation, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotation, UnknownData_4H8G, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotation, 0x0090);
		}

		// class UParticleModuleMeshRotation_Seeded : public UParticleModuleMeshRotation
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotation_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotation_Seeded, RandomSeedInfo, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotation_Seeded, 0x00B0);
		}

		// class UParticleModuleRotationRateBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleRotationRateBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationRateBase, 0x0038);
		}

		// class UGSListTeamChatRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSListTeamChatRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListTeamChatRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListTeamChatRequest, EntryCount, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListTeamChatRequest, Offset, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListTeamChatRequest, OwnerId, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListTeamChatRequest, TeamId, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListTeamChatRequest, TeamType, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListTeamChatRequest, ScriptData, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListTeamChatRequest, Durable, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListTeamChatRequest, UnknownData_1W7I, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListTeamChatRequest, requestTimeoutSeconds, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListTeamChatRequest, PlayerId, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSListTeamChatRequest, 0x0098);
		}

		// class UParticleModuleMeshRotationRate : public UParticleModuleRotationRateBase
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotationRate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRate, StartRotationRate, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotationRate, 0x0088);
		}

		// class UParticleModuleMeshRotationRate_Seeded : public UParticleModuleMeshRotationRate
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotationRate_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRate_Seeded, RandomSeedInfo, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotationRate_Seeded, 0x00A8);
		}

		// class UParticleModuleMeshRotationRateMultiplyLife : public UParticleModuleRotationRateBase
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotationRateMultiplyLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRateMultiplyLife, LifeMultiplier, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotationRateMultiplyLife, 0x0088);
		}

		// class UParticleModuleMeshRotationRateOverLife : public UParticleModuleRotationRateBase
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotationRateOverLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRateOverLife, RotRate, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRateOverLife, UnknownData_XISB, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotationRateOverLife, 0x0090);
		}

		// class UGSListTeamsRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSListTeamsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListTeamsRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListTeamsRequest, EntryCount, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListTeamsRequest, Offset, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListTeamsRequest, TeamNameFilter, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListTeamsRequest, TeamTypeFilter, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListTeamsRequest, ScriptData, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListTeamsRequest, Durable, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListTeamsRequest, UnknownData_65DM, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListTeamsRequest, requestTimeoutSeconds, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListTeamsRequest, PlayerId, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSListTeamsRequest, 0x0088);
		}

		// class UParticleModuleOrbitBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleOrbitBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbitBase, UnknownData_1VIY, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleOrbitBase, 0x0040);
		}

		// class UParticleModuleOrbit : public UParticleModuleOrbitBase
		TEST_METHOD(Class__Engine__ParticleModuleOrbit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, ChainMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, UnknownData_V6Y9, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, OffsetAmount, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, OffsetOptions, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, UnknownData_NIGP, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, RotationAmount, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, RotationOptions, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, UnknownData_SZS5, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, RotationRateAmount, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, RotationRateOptions, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, UnknownData_0UUH, 0x014C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleOrbit, 0x0150);
		}

		// class UGSListTransactionsRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSListTransactionsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListTransactionsRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListTransactionsRequest, DateFrom, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListTransactionsRequest, DateTo, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListTransactionsRequest, EntryCount, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListTransactionsRequest, UnknownData_I0PO, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListTransactionsRequest, Include, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListTransactionsRequest, Offset, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListTransactionsRequest, UnknownData_8C3N, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListTransactionsRequest, ScriptData, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListTransactionsRequest, Durable, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListTransactionsRequest, UnknownData_GPES, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListTransactionsRequest, requestTimeoutSeconds, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListTransactionsRequest, PlayerId, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSListTransactionsRequest, 0x00A0);
		}

		// class UParticleModuleOrientationBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleOrientationBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleOrientationBase, 0x0038);
		}

		// class UParticleModuleOrientationAxisLock : public UParticleModuleOrientationBase
		TEST_METHOD(Class__Engine__ParticleModuleOrientationAxisLock)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrientationAxisLock, LockAxisFlags, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrientationAxisLock, UnknownData_QMQH, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleOrientationAxisLock, 0x0040);
		}

		// class UParticleModuleParameterBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleParameterBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleParameterBase, 0x0038);
		}

		// class UParticleModuleParameterDynamic : public UParticleModuleParameterBase
		TEST_METHOD(Class__Engine__ParticleModuleParameterDynamic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleParameterDynamic, DynamicParams, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleParameterDynamic, UpdateFlags, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleParameterDynamic, UnknownData_H0CK, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleParameterDynamic, 0x0050);
		}

		// class UGSListVirtualGoodsRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSListVirtualGoodsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListVirtualGoodsRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListVirtualGoodsRequest, IncludeDisabled, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListVirtualGoodsRequest, UnknownData_CP17, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListVirtualGoodsRequest, Tags, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListVirtualGoodsRequest, ScriptData, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListVirtualGoodsRequest, Durable, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListVirtualGoodsRequest, UnknownData_R4PA, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListVirtualGoodsRequest, requestTimeoutSeconds, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSListVirtualGoodsRequest, PlayerId, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSListVirtualGoodsRequest, 0x0070);
		}

		// class UParticleModuleParameterDynamic_Seeded : public UParticleModuleParameterDynamic
		TEST_METHOD(Class__Engine__ParticleModuleParameterDynamic_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleParameterDynamic_Seeded, RandomSeedInfo, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleParameterDynamic_Seeded, 0x0070);
		}

		// class UParticleModulePivotOffset : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModulePivotOffset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModulePivotOffset, PivotOffset, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModulePivotOffset, 0x0040);
		}

		// class UParticleModuleRequired : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleRequired)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, Material, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterOrigin, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterRotation, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, ScreenAlignment, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_JVJJ, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MinFacingCameraBlendDistance, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MaxFacingCameraBlendDistance, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_8HFQ, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, SortMode, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_JLAR, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_R9G4, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterDuration, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterDurationLow, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_3NQA, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterLoops, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, SpawnRate, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, ParticleBurstMethod, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_VZBW, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, BurstList, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterDelay, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterDelayLow, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_XCCZ, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, InterpolationMethod, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_6QIZ, 0x00DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, SubImages_Horizontal, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, SubImages_Vertical, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_E97V, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, RandomImageTime, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, RandomImageChanges, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_R3LL, 0x00F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MacroUVPosition, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MacroUVRadius, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_HGHC, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MaxDrawCount, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UVFlippingMode, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_5T83, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, CutoutTexture, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, BoundingMode, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, OpacitySourceMode, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_53KV, 0x0122);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, AlphaThreshold, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterNormalsMode, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_KH6U, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, NormalsSphereCenter, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, NormalsCylinderDirection, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_UWV5, 0x0145);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, NamedMaterialOverrides, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_EQT2, 0x0158);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRequired, 0x0180);
		}

		// class UGSLogChallengeEventRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSLogChallengeEventRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSLogChallengeEventRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSLogChallengeEventRequest, ChallengeInstanceId, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSLogChallengeEventRequest, EventKey, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSLogChallengeEventRequest, LogEventData, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSLogChallengeEventRequest, Durable, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSLogChallengeEventRequest, UnknownData_D2LI, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSLogChallengeEventRequest, requestTimeoutSeconds, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSLogChallengeEventRequest, PlayerId, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSLogChallengeEventRequest, 0x0080);
		}

		// class UGSLogEventRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSLogEventRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSLogEventRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSLogEventRequest, EventKey, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSLogEventRequest, LogEventData, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSLogEventRequest, Durable, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSLogEventRequest, UnknownData_2IS5, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSLogEventRequest, requestTimeoutSeconds, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSLogEventRequest, PlayerId, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSLogEventRequest, 0x0070);
		}

		// class UGSMatchDetailsRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSMatchDetailsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMatchDetailsRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMatchDetailsRequest, MatchId, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMatchDetailsRequest, RealtimeEnabled, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMatchDetailsRequest, UnknownData_9FE4, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMatchDetailsRequest, ScriptData, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMatchDetailsRequest, Durable, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMatchDetailsRequest, UnknownData_0NG8, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMatchDetailsRequest, requestTimeoutSeconds, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMatchDetailsRequest, PlayerId, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSMatchDetailsRequest, 0x0078);
		}

		// class UParticleModuleRotation : public UParticleModuleRotationBase
		TEST_METHOD(Class__Engine__ParticleModuleRotation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotation, StartRotation, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotation, 0x0070);
		}

		// class UGSMatchmakingRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSMatchmakingRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMatchmakingRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMatchmakingRequest, Action, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMatchmakingRequest, CustomQuery, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMatchmakingRequest, MatchData, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMatchmakingRequest, MatchGroup, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMatchmakingRequest, MatchShortCode, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMatchmakingRequest, ParticipantData, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMatchmakingRequest, Skill, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMatchmakingRequest, UnknownData_FC8N, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMatchmakingRequest, ScriptData, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMatchmakingRequest, Durable, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMatchmakingRequest, UnknownData_21E1, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMatchmakingRequest, requestTimeoutSeconds, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMatchmakingRequest, PlayerId, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSMatchmakingRequest, 0x00B0);
		}

		// class UParticleModuleRotation_Seeded : public UParticleModuleRotation
		TEST_METHOD(Class__Engine__ParticleModuleRotation_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotation_Seeded, RandomSeedInfo, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotation_Seeded, 0x0090);
		}

		// class UParticleModuleRotationOverLifetime : public UParticleModuleRotationBase
		TEST_METHOD(Class__Engine__ParticleModuleRotationOverLifetime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationOverLifetime, RotationOverLife, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationOverLifetime, UnknownData_CLMS, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationOverLifetime, 0x0078);
		}

		// class UParticleModuleRotationRate : public UParticleModuleRotationRateBase
		TEST_METHOD(Class__Engine__ParticleModuleRotationRate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationRate, StartRotationRate, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationRate, 0x0070);
		}

		// class UParticleModuleRotationRate_Seeded : public UParticleModuleRotationRate
		TEST_METHOD(Class__Engine__ParticleModuleRotationRate_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationRate_Seeded, RandomSeedInfo, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationRate_Seeded, 0x0090);
		}

		// class UParticleModuleRotationRateMultiplyLife : public UParticleModuleRotationRateBase
		TEST_METHOD(Class__Engine__ParticleModuleRotationRateMultiplyLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationRateMultiplyLife, LifeMultiplier, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationRateMultiplyLife, 0x0070);
		}

		// class UParticleModuleSizeBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleSizeBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSizeBase, 0x0038);
		}

		// class UParticleModuleSize : public UParticleModuleSizeBase
		TEST_METHOD(Class__Engine__ParticleModuleSize)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSize, StartSize, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSize, 0x0088);
		}

		// class UGSNXConnectRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSNXConnectRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSNXConnectRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSNXConnectRequest, AccountPerLoginId, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSNXConnectRequest, UnknownData_E82U, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSNXConnectRequest, DisplayName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSNXConnectRequest, DoNotCreateNewPlayer, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSNXConnectRequest, DoNotLinkToCurrentPlayer, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSNXConnectRequest, ErrorOnSwitch, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSNXConnectRequest, UnknownData_CXDX, 0x005B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSNXConnectRequest, NsaIdToken, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSNXConnectRequest, Segments, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSNXConnectRequest, SwitchIfPossible, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSNXConnectRequest, SyncDisplayName, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSNXConnectRequest, UnknownData_ERMY, 0x007A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSNXConnectRequest, ScriptData, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSNXConnectRequest, Durable, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSNXConnectRequest, UnknownData_K8OO, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSNXConnectRequest, requestTimeoutSeconds, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSNXConnectRequest, PlayerId, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSNXConnectRequest, 0x00A0);
		}

		// class UParticleModuleSize_Seeded : public UParticleModuleSize
		TEST_METHOD(Class__Engine__ParticleModuleSize_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSize_Seeded, RandomSeedInfo, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSize_Seeded, 0x00A8);
		}

		// class UParticleModuleSizeMultiplyLife : public UParticleModuleSizeBase
		TEST_METHOD(Class__Engine__ParticleModuleSizeMultiplyLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeMultiplyLife, LifeMultiplier, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeMultiplyLife, UnknownData_BUN9, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSizeMultiplyLife, 0x0090);
		}

		// class UParticleModuleSizeScale : public UParticleModuleSizeBase
		TEST_METHOD(Class__Engine__ParticleModuleSizeScale)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeScale, SizeScale, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeScale, UnknownData_CF3O, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSizeScale, 0x0090);
		}

		// class UParticleModuleSizeScaleBySpeed : public UParticleModuleSizeBase
		TEST_METHOD(Class__Engine__ParticleModuleSizeScaleBySpeed)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeScaleBySpeed, SpeedScale, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeScaleBySpeed, MaxScale, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSizeScaleBySpeed, 0x0048);
		}

		// class UGSPSNAccountConnectRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSPSNAccountConnectRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSPSNAccountConnectRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSPSNAccountConnectRequest, AuthorizationCode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSPSNAccountConnectRequest, DoNotCreateNewPlayer, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSPSNAccountConnectRequest, DoNotLinkToCurrentPlayer, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSPSNAccountConnectRequest, ErrorOnSwitch, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSPSNAccountConnectRequest, UnknownData_CJH1, 0x0053);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSPSNAccountConnectRequest, RedirectUri, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSPSNAccountConnectRequest, Segments, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSPSNAccountConnectRequest, SwitchIfPossible, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSPSNAccountConnectRequest, SyncDisplayName, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSPSNAccountConnectRequest, UnknownData_GA8Z, 0x0072);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSPSNAccountConnectRequest, ScriptData, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSPSNAccountConnectRequest, Durable, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSPSNAccountConnectRequest, UnknownData_I32P, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSPSNAccountConnectRequest, requestTimeoutSeconds, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSPSNAccountConnectRequest, PlayerId, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSPSNAccountConnectRequest, 0x0098);
		}

		// class UParticleModuleSourceMovement : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleSourceMovement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSourceMovement, SourceMovementScale, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSourceMovement, 0x0088);
		}

		// class UParticleModuleSpawnBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleSpawnBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnBase, UnknownData_S81D, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSpawnBase, 0x0040);
		}

		// class UParticleModuleSpawn : public UParticleModuleSpawnBase
		TEST_METHOD(Class__Engine__ParticleModuleSpawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, Rate, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, RateScale, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, ParticleBurstMethod, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, UnknownData_EJ3D, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, BurstList, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, BurstScale, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, UnknownData_GXO7, 0x0101);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSpawn, 0x0108);
		}

		// class UGSPSNConnectRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSPSNConnectRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSPSNConnectRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSPSNConnectRequest, AuthorizationCode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSPSNConnectRequest, DoNotCreateNewPlayer, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSPSNConnectRequest, DoNotLinkToCurrentPlayer, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSPSNConnectRequest, ErrorOnSwitch, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSPSNConnectRequest, UnknownData_6BHL, 0x0053);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSPSNConnectRequest, RedirectUri, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSPSNConnectRequest, Segments, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSPSNConnectRequest, SwitchIfPossible, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSPSNConnectRequest, SyncDisplayName, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSPSNConnectRequest, UnknownData_YUD3, 0x0072);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSPSNConnectRequest, ScriptData, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSPSNConnectRequest, Durable, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSPSNConnectRequest, UnknownData_P73M, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSPSNConnectRequest, requestTimeoutSeconds, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSPSNConnectRequest, PlayerId, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSPSNConnectRequest, 0x0098);
		}

		// class UParticleModuleSpawnPerUnit : public UParticleModuleSpawnBase
		TEST_METHOD(Class__Engine__ParticleModuleSpawnPerUnit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, UnitScalar, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, UnknownData_GP1K, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, SpawnPerUnit, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, UnknownData_OSBV, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, MovementTolerance, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, MaxFrameDistance, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, UnknownData_5R04, 0x008D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSpawnPerUnit, 0x0090);
		}

		// class UParticleModuleSubUVBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleSubUVBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSubUVBase, 0x0038);
		}

		// class UParticleModuleSubUV : public UParticleModuleSubUVBase
		TEST_METHOD(Class__Engine__ParticleModuleSubUV)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUV, Animation, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUV, SubImageIndex, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUV, UnknownData_WPWP, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSubUV, 0x0080);
		}

		// class UParticleModuleSubUVMovie : public UParticleModuleSubUV
		TEST_METHOD(Class__Engine__ParticleModuleSubUVMovie)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUVMovie, UnknownData_6PPY, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUVMovie, FrameRate, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUVMovie, StartingFrame, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUVMovie, UnknownData_ST2W, 0x00C4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSubUVMovie, 0x00C8);
		}

		// class UGSPsnBuyGoodsRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSPsnBuyGoodsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSPsnBuyGoodsRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSPsnBuyGoodsRequest, AuthorizationCode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSPsnBuyGoodsRequest, CurrencyCode, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSPsnBuyGoodsRequest, EntitlementLabel, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSPsnBuyGoodsRequest, RedirectUri, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSPsnBuyGoodsRequest, SubUnitPrice, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSPsnBuyGoodsRequest, UniqueTransactionByPlayer, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSPsnBuyGoodsRequest, UnknownData_BQZI, 0x0085);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSPsnBuyGoodsRequest, UseCount, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSPsnBuyGoodsRequest, UnknownData_ASXG, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSPsnBuyGoodsRequest, ScriptData, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSPsnBuyGoodsRequest, Durable, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSPsnBuyGoodsRequest, UnknownData_XULT, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSPsnBuyGoodsRequest, requestTimeoutSeconds, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSPsnBuyGoodsRequest, PlayerId, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSPsnBuyGoodsRequest, 0x00B0);
		}

		// class UParticleModuleTrailBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleTrailBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTrailBase, 0x0038);
		}

		// class UParticleModuleTrailSource : public UParticleModuleTrailBase
		TEST_METHOD(Class__Engine__ParticleModuleTrailSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceMethod, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, UnknownData_8G6Z, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceName, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, UnknownData_RTY6, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceStrength, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, UnknownData_EISU, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceOffsetCount, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceOffsetDefaults, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SelectionMethod, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, UnknownData_LP8Z, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, UnknownData_YMFI, 0x009D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTrailSource, 0x00A0);
		}

		// class UParticleModuleTypeDataBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataBase, 0x0038);
		}

		// class UGSPushRegistrationRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSPushRegistrationRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSPushRegistrationRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSPushRegistrationRequest, DeviceOS, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSPushRegistrationRequest, PushId, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSPushRegistrationRequest, ScriptData, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSPushRegistrationRequest, Durable, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSPushRegistrationRequest, UnknownData_UMUE, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSPushRegistrationRequest, requestTimeoutSeconds, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSPushRegistrationRequest, PlayerId, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSPushRegistrationRequest, 0x0080);
		}

		// class UParticleModuleTypeDataAnimTrail : public UParticleModuleTypeDataBase
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataAnimTrail)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, UnknownData_9D15, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, TilingDistance, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, DistanceTessellationStepSize, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, TangentTessellationStepSize, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, WidthTessellationStepSize, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, UnknownData_S5HM, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataAnimTrail, 0x0050);
		}

		// class UGSQQConnectRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSQQConnectRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSQQConnectRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSQQConnectRequest, AccessToken, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSQQConnectRequest, DoNotCreateNewPlayer, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSQQConnectRequest, DoNotLinkToCurrentPlayer, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSQQConnectRequest, ErrorOnSwitch, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSQQConnectRequest, UnknownData_9DMI, 0x0053);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSQQConnectRequest, Segments, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSQQConnectRequest, SwitchIfPossible, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSQQConnectRequest, SyncDisplayName, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSQQConnectRequest, UnknownData_4Y1D, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSQQConnectRequest, ScriptData, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSQQConnectRequest, Durable, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSQQConnectRequest, UnknownData_KAA0, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSQQConnectRequest, requestTimeoutSeconds, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSQQConnectRequest, PlayerId, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSQQConnectRequest, 0x0088);
		}

		// class UParticleModuleTypeDataBeam2 : public UParticleModuleTypeDataBase
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataBeam2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, BeamMethod, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_8VES, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TextureTile, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TextureTileDistance, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, Sheets, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, MaxBeamCount, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, Speed, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, InterpolationPoints, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_S3EG, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UpVectorStepSize, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, BranchParentName, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_S6ZT, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, Distance, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TaperMethod, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_PXMG, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TaperFactor, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TaperScale, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_NRLP, 0x0119);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataBeam2, 0x0170);
		}

		// class UGSRegistrationRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSRegistrationRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSRegistrationRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSRegistrationRequest, DisplayName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSRegistrationRequest, Password, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSRegistrationRequest, Segments, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSRegistrationRequest, Username, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSRegistrationRequest, ScriptData, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSRegistrationRequest, Durable, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSRegistrationRequest, UnknownData_IM13, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSRegistrationRequest, requestTimeoutSeconds, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSRegistrationRequest, PlayerId, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSRegistrationRequest, 0x0098);
		}

		// class UGSRevokePurchaseGoodsRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSRevokePurchaseGoodsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSRevokePurchaseGoodsRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSRevokePurchaseGoodsRequest, PlayerId, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSRevokePurchaseGoodsRequest, StoreType, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSRevokePurchaseGoodsRequest, TransactionIds, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSRevokePurchaseGoodsRequest, ScriptData, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSRevokePurchaseGoodsRequest, Durable, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSRevokePurchaseGoodsRequest, UnknownData_YKMK, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSRevokePurchaseGoodsRequest, requestTimeoutSeconds, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSRevokePurchaseGoodsRequest, 0x0078);
		}

		// class UParticleModuleTypeDataGpu : public UParticleModuleTypeDataBase
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataGpu)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataGpu, UnknownData_VVZR, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataGpu, EmitterInfo, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataGpu, ResourceData, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataGpu, CameraMotionBlurAmount, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataGpu, UnknownData_DOSF, 0x0465);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataGpu, 0x0470);
		}

		// class UParticleModuleTypeDataMesh : public UParticleModuleTypeDataBase
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, Mesh, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, bUseStaticMeshLODs, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_569U, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, LODSizeScale, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_ZGV5, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, MeshAlignment, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_0ZMK, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_D3OX, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, Pitch, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, Roll, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, Yaw, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, RollPitchYawRange, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_L9P8, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, AxisLockOption, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_6N3B, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_GVDZ, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, CameraFacingUpAxisOption, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, CameraFacingOption, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_KJKG, 0x00C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_9TC3, 0x00C5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataMesh, 0x00C8);
		}

		// class UGSScheduleBulkJobAdminRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSScheduleBulkJobAdminRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSScheduleBulkJobAdminRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSScheduleBulkJobAdminRequest, Data, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSScheduleBulkJobAdminRequest, ModuleShortCode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSScheduleBulkJobAdminRequest, PlayerQuery, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSScheduleBulkJobAdminRequest, ScheduledTime, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSScheduleBulkJobAdminRequest, Script, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSScheduleBulkJobAdminRequest, ScriptData, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSScheduleBulkJobAdminRequest, Durable, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSScheduleBulkJobAdminRequest, UnknownData_7PB2, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSScheduleBulkJobAdminRequest, requestTimeoutSeconds, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSScheduleBulkJobAdminRequest, 0x0090);
		}

		// class UGSSendFriendMessageRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSSendFriendMessageRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSendFriendMessageRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSendFriendMessageRequest, FriendIds, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSendFriendMessageRequest, Message, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSendFriendMessageRequest, ScriptData, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSendFriendMessageRequest, Durable, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSendFriendMessageRequest, UnknownData_L04I, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSendFriendMessageRequest, requestTimeoutSeconds, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSendFriendMessageRequest, PlayerId, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSSendFriendMessageRequest, 0x0078);
		}

		// class UParticleModuleTypeDataRibbon : public UParticleModuleTypeDataBase
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataRibbon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, MaxTessellationBetweenParticles, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, SheetsPerTrail, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, MaxTrailCount, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, MaxParticleInTrailCount, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, UnknownData_EG2F, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, RenderAxis, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, UnknownData_83JJ, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, TangentSpawningScalar, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, UnknownData_NSYD, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, TilingDistance, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, DistanceTessellationStepSize, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, UnknownData_8BWR, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, TangentTessellationScalar, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataRibbon, 0x0068);
		}

		// class UGSSendTeamChatMessageRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSSendTeamChatMessageRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSendTeamChatMessageRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSendTeamChatMessageRequest, Message, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSendTeamChatMessageRequest, OwnerId, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSendTeamChatMessageRequest, TeamId, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSendTeamChatMessageRequest, TeamType, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSendTeamChatMessageRequest, ScriptData, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSendTeamChatMessageRequest, Durable, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSendTeamChatMessageRequest, UnknownData_ZPNB, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSendTeamChatMessageRequest, requestTimeoutSeconds, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSendTeamChatMessageRequest, PlayerId, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSSendTeamChatMessageRequest, 0x00A0);
		}

		// class UGSSocialDisconnectRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSSocialDisconnectRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSocialDisconnectRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSocialDisconnectRequest, SystemId, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSocialDisconnectRequest, ScriptData, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSocialDisconnectRequest, Durable, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSocialDisconnectRequest, UnknownData_CIXX, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSocialDisconnectRequest, requestTimeoutSeconds, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSocialDisconnectRequest, PlayerId, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSSocialDisconnectRequest, 0x0070);
		}

		// class UGSSocialLeaderboardDataRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSSocialLeaderboardDataRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSocialLeaderboardDataRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSocialLeaderboardDataRequest, ChallengeInstanceId, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSocialLeaderboardDataRequest, DontErrorOnNotSocial, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSocialLeaderboardDataRequest, UnknownData_GYEO, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSocialLeaderboardDataRequest, EntryCount, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSocialLeaderboardDataRequest, FriendIds, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSocialLeaderboardDataRequest, IncludeFirst, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSocialLeaderboardDataRequest, IncludeLast, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSocialLeaderboardDataRequest, InverseSocial, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSocialLeaderboardDataRequest, UnknownData_4Y2X, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSocialLeaderboardDataRequest, LeaderboardShortCode, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSocialLeaderboardDataRequest, Offset, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSocialLeaderboardDataRequest, Social, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSocialLeaderboardDataRequest, UnknownData_JBGM, 0x0085);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSocialLeaderboardDataRequest, TeamIds, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSocialLeaderboardDataRequest, TeamTypes, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSocialLeaderboardDataRequest, ScriptData, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSocialLeaderboardDataRequest, Durable, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSocialLeaderboardDataRequest, UnknownData_UOBF, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSocialLeaderboardDataRequest, requestTimeoutSeconds, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSocialLeaderboardDataRequest, PlayerId, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSSocialLeaderboardDataRequest, 0x00B8);
		}

		// class UParticleModuleVectorFieldBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldBase, 0x0038);
		}

		// class UParticleModuleVectorFieldGlobal : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldGlobal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldGlobal, UnknownData_D8NE, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldGlobal, GlobalVectorFieldScale, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldGlobal, GlobalVectorFieldTightness, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldGlobal, UnknownData_C5VR, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldGlobal, 0x0048);
		}

		// class UParticleModuleVectorFieldLocal : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldLocal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, VectorField, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, RelativeTranslation, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, RelativeRotation, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, RelativeScale3D, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, Intensity, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, Tightness, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, UnknownData_PGLT, 0x006D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldLocal, 0x0070);
		}

		// class UGSSocialStatusRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSSocialStatusRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSocialStatusRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSocialStatusRequest, ScriptData, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSocialStatusRequest, Durable, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSocialStatusRequest, UnknownData_ANNA, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSocialStatusRequest, requestTimeoutSeconds, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSocialStatusRequest, PlayerId, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSSocialStatusRequest, 0x0060);
		}

		// class UParticleModuleVectorFieldRotation : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldRotation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldRotation, MinInitialRotation, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldRotation, MaxInitialRotation, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldRotation, 0x0050);
		}

		// class UGSSteamBuyGoodsRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSSteamBuyGoodsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSteamBuyGoodsRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSteamBuyGoodsRequest, CurrencyCode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSteamBuyGoodsRequest, OrderId, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSteamBuyGoodsRequest, SubUnitPrice, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSteamBuyGoodsRequest, UniqueTransactionByPlayer, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSteamBuyGoodsRequest, UnknownData_Q03E, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSteamBuyGoodsRequest, ScriptData, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSteamBuyGoodsRequest, Durable, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSteamBuyGoodsRequest, UnknownData_LTPO, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSteamBuyGoodsRequest, requestTimeoutSeconds, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSteamBuyGoodsRequest, PlayerId, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSSteamBuyGoodsRequest, 0x0088);
		}

		// class UParticleModuleVectorFieldRotationRate : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldRotationRate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldRotationRate, RotationRate, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldRotationRate, UnknownData_1VLL, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldRotationRate, 0x0048);
		}

		// class UParticleModuleVectorFieldScale : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldScale)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldScale, VectorFieldScale, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldScale, VectorFieldScaleRaw, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldScale, 0x0078);
		}

		// class UParticleModuleVectorFieldScaleOverLife : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldScaleOverLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldScaleOverLife, VectorFieldScaleOverLife, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldScaleOverLife, VectorFieldScaleOverLifeRaw, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldScaleOverLife, 0x0078);
		}

		// class UParticleModuleVelocityBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleVelocityBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityBase, UnknownData_VYDN, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocityBase, 0x0040);
		}

		// class UGSSteamConnectRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSSteamConnectRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSteamConnectRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSteamConnectRequest, DoNotCreateNewPlayer, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSteamConnectRequest, DoNotLinkToCurrentPlayer, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSteamConnectRequest, ErrorOnSwitch, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSteamConnectRequest, UnknownData_CLQC, 0x0043);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSteamConnectRequest, Segments, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSteamConnectRequest, SessionTicket, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSteamConnectRequest, SwitchIfPossible, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSteamConnectRequest, SyncDisplayName, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSteamConnectRequest, UnknownData_B7LK, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSteamConnectRequest, ScriptData, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSteamConnectRequest, Durable, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSteamConnectRequest, UnknownData_R1ZW, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSteamConnectRequest, requestTimeoutSeconds, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSSteamConnectRequest, PlayerId, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSSteamConnectRequest, 0x0088);
		}

		// class UParticleModuleVelocity : public UParticleModuleVelocityBase
		TEST_METHOD(Class__Engine__ParticleModuleVelocity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocity, StartVelocity, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocity, StartVelocityRadial, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocity, 0x00C8);
		}

		// class UParticleModuleVelocity_Seeded : public UParticleModuleVelocity
		TEST_METHOD(Class__Engine__ParticleModuleVelocity_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocity_Seeded, RandomSeedInfo, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocity_Seeded, 0x00E8);
		}

		// class UParticleModuleVelocityCone : public UParticleModuleVelocityBase
		TEST_METHOD(Class__Engine__ParticleModuleVelocityCone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityCone, Angle, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityCone, Velocity, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityCone, Direction, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityCone, UnknownData_VGH7, 0x00BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocityCone, 0x00C0);
		}

		// class UParticleModuleVelocityInheritParent : public UParticleModuleVelocityBase
		TEST_METHOD(Class__Engine__ParticleModuleVelocityInheritParent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityInheritParent, Scale, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocityInheritParent, 0x0090);
		}

		// class UParticleModuleVelocityOverLifetime : public UParticleModuleVelocityBase
		TEST_METHOD(Class__Engine__ParticleModuleVelocityOverLifetime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityOverLifetime, VelOverLife, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityOverLifetime, UnknownData_UKZ1, 0x0091);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocityOverLifetime, 0x0098);
		}

		// class UParticleSpriteEmitter : public UParticleEmitter
		TEST_METHOD(Class__Engine__ParticleSpriteEmitter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleSpriteEmitter, 0x0170);
		}

		// class UParticleSystem : public UObject
		TEST_METHOD(Class__Engine__ParticleSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, SystemUpdateMode, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_58XA, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UpdateTime_FPS, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UpdateTime_Delta, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, WarmupTime, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, WarmupTickRate, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_KUGL, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, Emitters, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, PreviewComponent, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, CurveEdSetup, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_8L5W, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, LODDistanceCheckTime, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, LODMethod, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_LUVI, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, LODDistances, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_BVZC, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, LODSettings, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_ZKSW, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, FixedRelativeBoundingBox, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, SecondsBeforeInactive, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_D100, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, Delay, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, DelayLow, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_NR2D, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, bAutoDeactivate, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_DM6H, 0x00D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, MinTimeBetweenTicks, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, InsignificantReaction, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_ZFLX, 0x00DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, InsignificanceDelay, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, MaxSignificanceLevel, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_ZURT, 0x00E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, MaxPoolSize, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, MacroUVPosition, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, MacroUVRadius, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, OcclusionBoundsMethod, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_FG78, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, CustomOcclusionBounds, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_IYHN, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, SoloTracking, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, NamedMaterialSlots, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_YTQV, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleSystem, 0x0148);
		}

		// class UParticleSystemComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__ParticleSystemComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, Template, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, EmitterMaterials, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, SkelMeshComponents, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_3P7Q, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_JCNF, 0x05A3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, LODMethod, 0x05AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, RequiredSignificance, 0x05AE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_38R6, 0x05AF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, InstanceParameters, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnParticleSpawn, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnParticleBurst, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnParticleDeath, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnParticleCollide, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OldPosition, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, PartSysVelocity, 0x060C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, WarmupTime, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, WarmupTickRate, 0x061C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_32SZ, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, SecondsBeforeInactive, 0x0624);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_JOPU, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, MaxTimeBeforeForceUpdateTransform, 0x062C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_6K1X, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, ReplayClips, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_J24J, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, CustomTimeDilation, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_WAAO, 0x066C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, AutoAttachParent, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, AutoAttachSocketName, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, AutoAttachLocationRule, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, AutoAttachRotationRule, 0x06D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, AutoAttachScaleRule, 0x06D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_Y9K4, 0x06D3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnSystemFinished, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_FMEV, 0x0710);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleSystemComponent, 0x07D0);
		}

		// class UIWidgetPingable_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__IWidgetPingable__IWidgetPingable_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIWidgetPingable_C, 0x0030);
		}

		// class UParticleSystemReplay : public UObject
		TEST_METHOD(Class__Engine__ParticleSystemReplay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemReplay, ClipIDNumber, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemReplay, UnknownData_7DI4, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleSystemReplay, 0x0048);
		}

		// class UPathFollowingAgentInterface : public UInterface
		TEST_METHOD(Class__Engine__PathFollowingAgentInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPathFollowingAgentInterface, 0x0030);
		}

		// class UPawnNoiseEmitterComponent : public UActorComponent
		TEST_METHOD(Class__Engine__PawnNoiseEmitterComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, UnknownData_RXT7, 0x0101);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastRemoteNoisePosition, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, NoiseLifetime, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastRemoteNoiseVolume, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastRemoteNoiseTime, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastLocalNoiseVolume, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastLocalNoiseTime, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, UnknownData_K3NU, 0x0124);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnNoiseEmitterComponent, 0x0128);
		}

		// class UPhysicalAnimationComponent : public UActorComponent
		TEST_METHOD(Class__Engine__PhysicalAnimationComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalAnimationComponent, StrengthMultiplyer, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalAnimationComponent, UnknownData_C3LO, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalAnimationComponent, SkeletalMeshComponent, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalAnimationComponent, UnknownData_37D0, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicalAnimationComponent, 0x0138);
		}

		// class UPhysicalMaterial : public UObject
		TEST_METHOD(Class__Engine__PhysicalMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, Friction, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, FrictionCombineMode, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, bOverrideFrictionCombineMode, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, UnknownData_UR3L, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, Restitution, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, RestitutionCombineMode, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, bOverrideRestitutionCombineMode, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, UnknownData_0MOO, 0x003E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, Density, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, RaiseMassToPower, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, DestructibleDamageThresholdScale, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, UnknownData_2D9A, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, PhysicalMaterialProperty, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, SurfaceType, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, UnknownData_PL1U, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, TireFrictionScale, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, TireFrictionScales, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, UnknownData_1XSH, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicalMaterial, 0x0088);
		}

		// class UPhysicalMaterialPropertyBase : public UObject
		TEST_METHOD(Class__Engine__PhysicalMaterialPropertyBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicalMaterialPropertyBase, 0x0030);
		}

		// class UPhysicsAsset : public UObject
		TEST_METHOD(Class__Engine__PhysicsAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, UnknownData_EVGQ, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, BoundsBodies, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, SkeletalBodySetups, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, ConstraintSetup, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, UnknownData_D7TM, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, ThumbnailInfo, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, BodySetup, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsAsset, 0x0128);
		}

		// class USkeletalBodySetup : public UBodySetup
		TEST_METHOD(Class__Engine__SkeletalBodySetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalBodySetup, bSkipScaleFromAnimation, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalBodySetup, UnknownData_I9KZ, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalBodySetup, PhysicalAnimationData, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalBodySetup, 0x0298);
		}

		// class UPhysicsCollisionHandler : public UObject
		TEST_METHOD(Class__Engine__PhysicsCollisionHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, ImpactThreshold, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, ImpactReFireDelay, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, DefaultImpactSound, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, LastImpactSoundTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, UnknownData_8SQJ, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsCollisionHandler, 0x0048);
		}

		// class ARigidBodyBase : public AActor
		TEST_METHOD(Class__Engine__RigidBodyBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARigidBodyBase, 0x0338);
		}

		// class APhysicsConstraintActor : public ARigidBodyBase
		TEST_METHOD(Class__Engine__PhysicsConstraintActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsConstraintActor, ConstraintComp, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsConstraintActor, ConstraintActor1, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsConstraintActor, ConstraintActor2, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsConstraintActor, UnknownData_885P, 0x0351);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APhysicsConstraintActor, 0x0358);
		}

		// class UPhysicsConstraintComponent : public USceneComponent
		TEST_METHOD(Class__Engine__PhysicsConstraintComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ConstraintActor1, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ComponentName1, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ConstraintActor2, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ComponentName2, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, UnknownData_4GF1, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ConstraintSetup, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, OnConstraintBroken, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ConstraintInstance, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, UnknownData_NQ6O, 0x0458);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsConstraintComponent, 0x0460);
		}

		// class UPhysicsConstraintTemplate : public UObject
		TEST_METHOD(Class__Engine__PhysicsConstraintTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, DefaultInstance, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, ProfileHandles, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, DefaultProfile, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, UnknownData_WC8T, 0x02FC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsConstraintTemplate, 0x0300);
		}

		// class UPhysicsHandleComponent : public UActorComponent
		TEST_METHOD(Class__Engine__PhysicsHandleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, GrabbedComponent, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, UnknownData_RP0G, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, UnknownData_WK6W, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, LinearDamping, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, LinearStiffness, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, AngularDamping, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, AngularStiffness, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, UnknownData_74VD, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, InterpolationSpeed, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, UnknownData_863O, 0x0194);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsHandleComponent, 0x01B0);
		}

		// class UPhysicsSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__PhysicsSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, DefaultGravityZ, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, DefaultTerminalVelocity, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, DefaultFluidFriction, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, SimulateScratchMemorySize, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, RagdollAggregateThreshold, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, TriangleMeshTriangleMinAreaThreshold, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bEnableShapeSharing, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bEnablePCM, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bEnableStabilization, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bWarnMissingLocks, 0x005B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bEnable2DPhysics, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_Y2LI, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, PhysicErrorCorrection, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, LockedAxis, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, DefaultDegreesOfFreedom, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_B5SW, 0x0096);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, BounceThresholdVelocity, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, FrictionCombineMode, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, RestitutionCombineMode, 0x009D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_Q9ZR, 0x009E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MaxAngularVelocity, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MaxDepenetrationVelocity, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, ContactOffsetMultiplier, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MinContactOffset, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MaxContactOffset, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSimulateSkeletalMeshOnDedicatedServer, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, DefaultShapeComplexity, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bDefaultHasComplexCollision, 0x00B6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSuppressFaceRemapTable, 0x00B7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSupportUVFromHitResults, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bDisableActiveActors, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bDisableKinematicStaticPairs, 0x00BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bDisableKinematicKinematicPairs, 0x00BB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bDisableCCD, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bEnableEnhancedDeterminism, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_T650, 0x00BE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MaxPhysicsDeltaTime, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSubstepping, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSubsteppingAsync, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_59NC, 0x00C6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MaxSubstepDeltaTime, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MaxSubsteps, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, SyncSceneSmoothingFactor, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, InitialAverageFrameRate, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, PhysXTreeRebuildRate, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_S7A9, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, PhysicalSurfaces, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, DefaultBroadphaseSettings, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_HXP0, 0x0114);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsSettings, 0x0118);
		}

		// class UGSTwitchConnectRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSTwitchConnectRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSTwitchConnectRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSTwitchConnectRequest, AccessToken, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSTwitchConnectRequest, DoNotCreateNewPlayer, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSTwitchConnectRequest, DoNotLinkToCurrentPlayer, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSTwitchConnectRequest, ErrorOnSwitch, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSTwitchConnectRequest, UnknownData_V49S, 0x0053);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSTwitchConnectRequest, Segments, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSTwitchConnectRequest, SwitchIfPossible, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSTwitchConnectRequest, SyncDisplayName, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSTwitchConnectRequest, UnknownData_A1IR, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSTwitchConnectRequest, ScriptData, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSTwitchConnectRequest, Durable, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSTwitchConnectRequest, UnknownData_4WYH, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSTwitchConnectRequest, requestTimeoutSeconds, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSTwitchConnectRequest, PlayerId, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSTwitchConnectRequest, 0x0088);
		}

		// class UGSTwitterConnectRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSTwitterConnectRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSTwitterConnectRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSTwitterConnectRequest, AccessSecret, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSTwitterConnectRequest, AccessToken, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSTwitterConnectRequest, DoNotCreateNewPlayer, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSTwitterConnectRequest, DoNotLinkToCurrentPlayer, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSTwitterConnectRequest, ErrorOnSwitch, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSTwitterConnectRequest, UnknownData_OBLU, 0x0063);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSTwitterConnectRequest, Segments, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSTwitterConnectRequest, SwitchIfPossible, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSTwitterConnectRequest, SyncDisplayName, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSTwitterConnectRequest, UnknownData_3TMJ, 0x0072);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSTwitterConnectRequest, ScriptData, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSTwitterConnectRequest, Durable, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSTwitterConnectRequest, UnknownData_LI3J, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSTwitterConnectRequest, requestTimeoutSeconds, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSTwitterConnectRequest, PlayerId, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSTwitterConnectRequest, 0x0098);
		}

		// class UPhysicsSpringComponent : public USceneComponent
		TEST_METHOD(Class__Engine__PhysicsSpringComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, UnknownData_VVUH, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringDamping, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringLengthAtRest, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringRadius, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringChannel, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, bIgnoreSelf, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, UnknownData_U68B, 0x026A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringCompression, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, UnknownData_Z7CO, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsSpringComponent, 0x0280);
		}

		// class UGSUpdateMessageRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSUpdateMessageRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSUpdateMessageRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSUpdateMessageRequest, MessageId, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSUpdateMessageRequest, Status, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSUpdateMessageRequest, ScriptData, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSUpdateMessageRequest, Durable, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSUpdateMessageRequest, UnknownData_MM0B, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSUpdateMessageRequest, requestTimeoutSeconds, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSUpdateMessageRequest, PlayerId, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSUpdateMessageRequest, 0x0080);
		}

		// class UGSViberConnectRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSViberConnectRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSViberConnectRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSViberConnectRequest, AccessToken, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSViberConnectRequest, DoNotCreateNewPlayer, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSViberConnectRequest, DoNotLinkToCurrentPlayer, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSViberConnectRequest, DoNotRegisterForPush, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSViberConnectRequest, ErrorOnSwitch, 0x0053);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSViberConnectRequest, UnknownData_G028, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSViberConnectRequest, Segments, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSViberConnectRequest, SwitchIfPossible, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSViberConnectRequest, SyncDisplayName, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSViberConnectRequest, UnknownData_9W9R, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSViberConnectRequest, ScriptData, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSViberConnectRequest, Durable, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSViberConnectRequest, UnknownData_IEP9, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSViberConnectRequest, requestTimeoutSeconds, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSViberConnectRequest, PlayerId, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSViberConnectRequest, 0x0088);
		}

		// class APhysicsThruster : public ARigidBodyBase
		TEST_METHOD(Class__Engine__PhysicsThruster)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsThruster, ThrusterComponent, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APhysicsThruster, 0x0340);
		}

		// class UPhysicsThrusterComponent : public USceneComponent
		TEST_METHOD(Class__Engine__PhysicsThrusterComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsThrusterComponent, UnknownData_3FMP, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsThrusterComponent, 0x0260);
		}

		// class ASceneCapture : public AActor
		TEST_METHOD(Class__Engine__SceneCapture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASceneCapture, MeshComp, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASceneCapture, SceneComponent, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASceneCapture, 0x0348);
		}

		// class UGSWeChatConnectRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSWeChatConnectRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSWeChatConnectRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSWeChatConnectRequest, AccessToken, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSWeChatConnectRequest, DoNotCreateNewPlayer, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSWeChatConnectRequest, DoNotLinkToCurrentPlayer, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSWeChatConnectRequest, ErrorOnSwitch, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSWeChatConnectRequest, UnknownData_C28P, 0x0053);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSWeChatConnectRequest, OpenId, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSWeChatConnectRequest, Segments, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSWeChatConnectRequest, SwitchIfPossible, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSWeChatConnectRequest, SyncDisplayName, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSWeChatConnectRequest, UnknownData_2HD9, 0x0072);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSWeChatConnectRequest, ScriptData, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSWeChatConnectRequest, Durable, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSWeChatConnectRequest, UnknownData_AWRM, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSWeChatConnectRequest, requestTimeoutSeconds, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSWeChatConnectRequest, PlayerId, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSWeChatConnectRequest, 0x0098);
		}

		// class APlanarReflection : public ASceneCapture
		TEST_METHOD(Class__Engine__PlanarReflection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlanarReflection, PlanarReflectionComponent, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlanarReflection, bShowPreviewPlane, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlanarReflection, UnknownData_4JNN, 0x0351);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlanarReflection, 0x0358);
		}

		// class AAIController_Hunter_Belle_C : public AAIController_Hunter_C
		TEST_METHOD(BlueprintGeneratedClass__AIController_Hunter_Belle__AIController_Hunter_Belle_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController_Hunter_Belle_C, UnknownData_Z2F4, 0x0581);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController_Hunter_Belle_C, UberGraphFrame, 0x0588);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAIController_Hunter_Belle_C, 0x0598);
		}

		// class UGSWindowsBuyGoodsRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSWindowsBuyGoodsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSWindowsBuyGoodsRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSWindowsBuyGoodsRequest, CurrencyCode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSWindowsBuyGoodsRequest, Platform, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSWindowsBuyGoodsRequest, Receipt, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSWindowsBuyGoodsRequest, SubUnitPrice, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSWindowsBuyGoodsRequest, UniqueTransactionByPlayer, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSWindowsBuyGoodsRequest, UnknownData_WVP0, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSWindowsBuyGoodsRequest, ScriptData, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSWindowsBuyGoodsRequest, Durable, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSWindowsBuyGoodsRequest, UnknownData_DFOZ, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSWindowsBuyGoodsRequest, requestTimeoutSeconds, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSWindowsBuyGoodsRequest, PlayerId, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSWindowsBuyGoodsRequest, 0x0098);
		}

		// class USceneCaptureComponent : public USceneComponent
		TEST_METHOD(Class__Engine__SceneCaptureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, UnknownData_KEP5, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, HiddenComponents, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, HiddenActors, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, ShowOnlyComponents, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, ShowOnlyActors, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, bCaptureEveryFrame, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, bCaptureOnMovement, 0x02A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, bAlwaysPersistRenderingState, 0x02A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, UnknownData_RQEZ, 0x02A3);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, LODDistanceFactor, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, MaxViewDistanceOverride, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, CaptureSortPriority, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, ShowFlagSettings, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, UnknownData_3ZN2, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, ProfilingEventName, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, UnknownData_U87M, 0x02F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USceneCaptureComponent, 0x0300);
		}

		// class UGSWithdrawChallengeRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSWithdrawChallengeRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSWithdrawChallengeRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSWithdrawChallengeRequest, ChallengeInstanceId, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSWithdrawChallengeRequest, Message, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSWithdrawChallengeRequest, ScriptData, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSWithdrawChallengeRequest, Durable, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSWithdrawChallengeRequest, UnknownData_D9BC, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSWithdrawChallengeRequest, requestTimeoutSeconds, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSWithdrawChallengeRequest, PlayerId, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSWithdrawChallengeRequest, 0x0080);
		}

		// class UGSXBOXLiveConnectRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSXBOXLiveConnectRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSXBOXLiveConnectRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSXBOXLiveConnectRequest, DisplayName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSXBOXLiveConnectRequest, DoNotCreateNewPlayer, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSXBOXLiveConnectRequest, DoNotLinkToCurrentPlayer, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSXBOXLiveConnectRequest, ErrorOnSwitch, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSXBOXLiveConnectRequest, UnknownData_RE0A, 0x0053);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSXBOXLiveConnectRequest, Segments, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSXBOXLiveConnectRequest, StsTokenString, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSXBOXLiveConnectRequest, SwitchIfPossible, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSXBOXLiveConnectRequest, SyncDisplayName, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSXBOXLiveConnectRequest, UnknownData_C7KB, 0x0072);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSXBOXLiveConnectRequest, ScriptData, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSXBOXLiveConnectRequest, Durable, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSXBOXLiveConnectRequest, UnknownData_L6PC, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSXBOXLiveConnectRequest, requestTimeoutSeconds, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSXBOXLiveConnectRequest, PlayerId, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSXBOXLiveConnectRequest, 0x0098);
		}

		// class UPlanarReflectionComponent : public USceneCaptureComponent
		TEST_METHOD(Class__Engine__PlanarReflectionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, PreviewBox, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, NormalDistortionStrength, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, PrefilterRoughness, 0x030C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, PrefilterRoughnessDistance, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, ScreenPercentage, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, ExtraFOV, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, DistanceFromPlaneFadeStart, 0x031C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, DistanceFromPlaneFadeEnd, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, DistanceFromPlaneFadeoutStart, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, DistanceFromPlaneFadeoutEnd, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, AngleFromPlaneFadeStart, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, AngleFromPlaneFadeEnd, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, bShowPreviewPlane, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, bRenderSceneTwoSided, 0x0335);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, UnknownData_YT3V, 0x0336);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlanarReflectionComponent, 0x03F0);
		}

		// class APlaneReflectionCapture : public AReflectionCapture
		TEST_METHOD(Class__Engine__PlaneReflectionCapture)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlaneReflectionCapture, 0x0340);
		}

		// class UPlaneReflectionCaptureComponent : public UReflectionCaptureComponent
		TEST_METHOD(Class__Engine__PlaneReflectionCaptureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneReflectionCaptureComponent, InfluenceRadiusScale, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneReflectionCaptureComponent, UnknownData_4R5V, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneReflectionCaptureComponent, PreviewInfluenceRadius, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneReflectionCaptureComponent, PreviewCaptureBox, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneReflectionCaptureComponent, UnknownData_WAKG, 0x02E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlaneReflectionCaptureComponent, 0x02F0);
		}

		// class UPlatformEventsComponent : public UActorComponent
		TEST_METHOD(Class__Engine__PlatformEventsComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformEventsComponent, PlatformChangedToLaptopModeDelegate, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformEventsComponent, PlatformChangedToTabletModeDelegate, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformEventsComponent, 0x0120);
		}

		// class UGSXboxOneConnectRequest : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__GameSparks__GSXboxOneConnectRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSXboxOneConnectRequest, OnResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSXboxOneConnectRequest, DoNotCreateNewPlayer, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSXboxOneConnectRequest, DoNotLinkToCurrentPlayer, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSXboxOneConnectRequest, ErrorOnSwitch, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSXboxOneConnectRequest, UnknownData_TILV, 0x0043);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSXboxOneConnectRequest, Sandbox, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSXboxOneConnectRequest, Segments, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSXboxOneConnectRequest, SwitchIfPossible, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSXboxOneConnectRequest, SyncDisplayName, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSXboxOneConnectRequest, UnknownData_9MLZ, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSXboxOneConnectRequest, Token, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSXboxOneConnectRequest, ScriptData, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSXboxOneConnectRequest, Durable, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSXboxOneConnectRequest, UnknownData_6850, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSXboxOneConnectRequest, requestTimeoutSeconds, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSXboxOneConnectRequest, PlayerId, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSXboxOneConnectRequest, 0x0098);
		}

		// class UPlatformInterfaceWebResponse : public UObject
		TEST_METHOD(Class__Engine__PlatformInterfaceWebResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, OriginalURL, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, ResponseCode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, Tag, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, StringResponse, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, BinaryResponse, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, UnknownData_3Y44, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformInterfaceWebResponse, 0x00B8);
		}

		// class APlayerCameraManager : public AActor
		TEST_METHOD(Class__Engine__PlayerCameraManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, PCOwner, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, TransformComponent, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_YX39, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, DefaultFOV, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_T7TJ, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, DefaultOrthoWidth, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_3NUF, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, DefaultAspectRatio, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_6U33, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, CameraCache, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, LastFrameCameraCache, 0x0940);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewTarget, 0x0ED0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, PendingViewTarget, 0x1470);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_P0XV, 0x1A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, CameraCachePrivate, 0x1A30);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, LastFrameCameraCachePrivate, 0x1FC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ModifierList, 0x2550);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, DefaultModifiers, 0x2560);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, FreeCamDistance, 0x2570);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, FreeCamOffset, 0x2574);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewTargetOffset, 0x2580);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_UN7P, 0x258C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, CameraLensEffects, 0x25A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, CachedCameraShakeMod, 0x25B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, AnimInstPool, 0x25B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, PostProcessBlendCache, 0x25F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_Z1OR, 0x2608);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ActiveAnims, 0x2618);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, FreeAnims, 0x2628);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, AnimCameraActor, 0x2638);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_F731, 0x2642);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewPitchMin, 0x2644);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewPitchMax, 0x2648);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewYawMin, 0x264C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewYawMax, 0x2650);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewRollMin, 0x2654);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewRollMax, 0x2658);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_9U2R, 0x265C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ServerUpdateCameraTimeout, 0x2660);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_6ZYC, 0x2664);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerCameraManager, 0x2670);
		}

		// class UGSMessageListeners : public USceneComponent
		TEST_METHOD(Class__GameSparks__GSMessageListeners)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMessageListeners, OnAchievementEarnedMessage, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMessageListeners, OnChallengeAcceptedMessage, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMessageListeners, OnChallengeChangedMessage, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMessageListeners, OnChallengeChatMessage, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMessageListeners, OnChallengeDeclinedMessage, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMessageListeners, OnChallengeDrawnMessage, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMessageListeners, OnChallengeExpiredMessage, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMessageListeners, OnChallengeIssuedMessage, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMessageListeners, OnChallengeJoinedMessage, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMessageListeners, OnChallengeLapsedMessage, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMessageListeners, OnChallengeLostMessage, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMessageListeners, OnChallengeStartedMessage, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMessageListeners, OnChallengeTurnTakenMessage, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMessageListeners, OnChallengeWaitingMessage, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMessageListeners, OnChallengeWithdrawnMessage, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMessageListeners, OnChallengeWonMessage, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMessageListeners, OnFriendMessage, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMessageListeners, OnGlobalRankChangedMessage, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMessageListeners, OnMatchFoundMessage, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMessageListeners, OnMatchNotFoundMessage, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMessageListeners, OnMatchUpdatedMessage, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMessageListeners, OnNewHighScoreMessage, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMessageListeners, OnNewTeamScoreMessage, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMessageListeners, OnScriptMessage, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMessageListeners, OnSessionTerminatedMessage, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMessageListeners, OnSocialRankChangedMessage, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMessageListeners, OnTeamChatMessage, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMessageListeners, OnTeamRankChangedMessage, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMessageListeners, OnUploadCompleteMessage, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMessageListeners, UnknownData_SWF5, 0x0428);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSMessageListeners, 0x0430);
		}

		// class UGSMessageListenersObject : public UObject
		TEST_METHOD(Class__GameSparks__GSMessageListenersObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMessageListenersObject, OnAchievementEarnedMessage, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMessageListenersObject, OnChallengeAcceptedMessage, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMessageListenersObject, OnChallengeChangedMessage, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMessageListenersObject, OnChallengeChatMessage, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMessageListenersObject, OnChallengeDeclinedMessage, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMessageListenersObject, OnChallengeDrawnMessage, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMessageListenersObject, OnChallengeExpiredMessage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMessageListenersObject, OnChallengeIssuedMessage, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMessageListenersObject, OnChallengeJoinedMessage, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMessageListenersObject, OnChallengeLapsedMessage, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMessageListenersObject, OnChallengeLostMessage, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMessageListenersObject, OnChallengeStartedMessage, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMessageListenersObject, OnChallengeTurnTakenMessage, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMessageListenersObject, OnChallengeWaitingMessage, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMessageListenersObject, OnChallengeWithdrawnMessage, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMessageListenersObject, OnChallengeWonMessage, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMessageListenersObject, OnFriendMessage, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMessageListenersObject, OnGlobalRankChangedMessage, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMessageListenersObject, OnMatchFoundMessage, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMessageListenersObject, OnMatchNotFoundMessage, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMessageListenersObject, OnMatchUpdatedMessage, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMessageListenersObject, OnNewHighScoreMessage, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMessageListenersObject, OnNewTeamScoreMessage, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMessageListenersObject, OnScriptMessage, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMessageListenersObject, OnSessionTerminatedMessage, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMessageListenersObject, OnSocialRankChangedMessage, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMessageListenersObject, OnTeamChatMessage, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMessageListenersObject, OnTeamRankChangedMessage, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSMessageListenersObject, OnUploadCompleteMessage, 0x01F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSMessageListenersObject, 0x0200);
		}

		// class UGSRTData : public UObject
		TEST_METHOD(Class__GameSparks__GSRTData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSRTData, UnknownData_W0PI, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSRTData, 0x1830);
		}

		// class UGSRTSession : public UObject
		TEST_METHOD(Class__GameSparks__GSRTSession)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSRTSession, UnknownData_SNAR, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSRTSession, OnReadyDelegate, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSRTSession, OnPlayerConnectDelegate, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSRTSession, OnPlayerDisconnectDelegate, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSRTSession, OnDataDelegate, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSRTSession, IsReady, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSRTSession, UnknownData_CAI8, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSRTSession, 0x00E8);
		}

		// class UPlayerInput : public UObject
		TEST_METHOD(Class__Engine__PlayerInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInput, UnknownData_GR1C, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInput, DebugExecBindings, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInput, UnknownData_BJKK, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInput, InvertedAxis, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInput, UnknownData_0NJ1, 0x0178);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerInput, 0x03B0);
		}

		// class APlayerStart : public ANavigationObjectBase
		TEST_METHOD(Class__Engine__PlayerStart)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerStart, PlayerStartTag, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerStart, 0x0368);
		}

		// class UGSRTVector : public UObject
		TEST_METHOD(Class__GameSparks__GSRTVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGSRTVector, UnknownData_ZVVY, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGSRTVector, 0x0050);
		}

		// class APlayerStartPIE : public APlayerStart
		TEST_METHOD(Class__Engine__PlayerStartPIE)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerStartPIE, 0x0368);
		}

		// class UPluginCommandlet : public UCommandlet
		TEST_METHOD(Class__Engine__PluginCommandlet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPluginCommandlet, UnknownData_SCD5, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPluginCommandlet, 0x00A8);
		}

		// class APointLight : public ALight
		TEST_METHOD(Class__Engine__PointLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APointLight, PointLightComponent, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APointLight, 0x0350);
		}

		// class UPointLightComponent : public ULocalLightComponent
		TEST_METHOD(Class__Engine__PointLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, LightFalloffExponent, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, SourceRadius, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, SoftSourceRadius, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, SourceLength, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, UnknownData_QPLO, 0x03BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPointLightComponent, 0x03C0);
		}

		// class UPolys : public UObject
		TEST_METHOD(Class__Engine__Polys)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolys, UnknownData_Q7YR, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPolys, 0x0040);
		}

		// class UPoseableMeshComponent : public USkinnedMeshComponent
		TEST_METHOD(Class__Engine__PoseableMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseableMeshComponent, UnknownData_Q6AR, 0x0700);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPoseableMeshComponent, 0x0860);
		}

		// class UPoseAsset : public UAnimationAsset
		TEST_METHOD(Class__Engine__PoseAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseAsset, PoseContainer, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseAsset, bAdditivePose, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseAsset, UnknownData_OKVJ, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseAsset, BasePoseIndex, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseAsset, RetargetSource, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPoseAsset, 0x0128);
		}

		// class UPoseWatch : public UObject
		TEST_METHOD(Class__Engine__PoseWatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseWatch, Node, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseWatch, PoseWatchColour, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseWatch, UnknownData_2KEF, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPoseWatch, 0x0040);
		}

		// class UPostProcessComponent : public USceneComponent
		TEST_METHOD(Class__Engine__PostProcessComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, UnknownData_AE5L, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, Settings, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, Priority, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, BlendRadius, 0x0794);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, BlendWeight, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, UnknownData_WKYK, 0x079D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPostProcessComponent, 0x07A0);
		}

		// class APostProcessVolume : public AVolume
		TEST_METHOD(Class__Engine__PostProcessVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, UnknownData_4KYG, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, Settings, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, Priority, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, BlendRadius, 0x08B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, BlendWeight, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, UnknownData_1PZX, 0x08BD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APostProcessVolume, 0x08C0);
		}

		// class APrecomputedVisibilityOverrideVolume : public AVolume
		TEST_METHOD(Class__Engine__PrecomputedVisibilityOverrideVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APrecomputedVisibilityOverrideVolume, OverrideVisibleActors, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrecomputedVisibilityOverrideVolume, OverrideInvisibleActors, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrecomputedVisibilityOverrideVolume, OverrideInvisibleLevels, 0x0390);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrecomputedVisibilityOverrideVolume, 0x03A0);
		}

		// class APrecomputedVisibilityVolume : public AVolume
		TEST_METHOD(Class__Engine__PrecomputedVisibilityVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrecomputedVisibilityVolume, 0x0370);
		}

		// class UPreviewCollectionInterface : public UInterface
		TEST_METHOD(Class__Engine__PreviewCollectionInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPreviewCollectionInterface, 0x0030);
		}

		// class UPreviewMeshCollection : public UDataAsset
		TEST_METHOD(Class__Engine__PreviewMeshCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewMeshCollection, UnknownData_M0FW, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewMeshCollection, Skeleton, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewMeshCollection, SkeletalMeshes, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPreviewMeshCollection, 0x0058);
		}

		// class UPrimaryAssetLabel : public UPrimaryDataAsset
		TEST_METHOD(Class__Engine__PrimaryAssetLabel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimaryAssetLabel, Rules, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimaryAssetLabel, UnknownData_1735, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimaryAssetLabel, ExplicitAssets, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimaryAssetLabel, ExplicitBlueprints, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimaryAssetLabel, AssetCollection, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimaryAssetLabel, 0x0078);
		}

		// class UProjectileMovementComponent : public UMovementComponent
		TEST_METHOD(Class__Engine__ProjectileMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, InitialSpeed, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, MaxSpeed, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, UnknownData_XZTZ, 0x014A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, PreviousHitTime, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, PreviousHitNormal, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, ProjectileGravityScale, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, Buoyancy, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, Bounciness, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, Friction, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, BounceVelocityStopSimulatingThreshold, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, MinFrictionFraction, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, UnknownData_PCU3, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, OnProjectileBounce, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, OnProjectileStop, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, HomingAccelerationMagnitude, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, HomingTargetComponent, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, MaxSimulationTimeStep, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, MaxSimulationIterations, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, BounceAdditionalIterations, 0x01AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, InterpLocationTime, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, InterpRotationTime, 0x01B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, InterpLocationMaxLagDistance, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, InterpLocationSnapToTargetDistance, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, UnknownData_0B56, 0x01C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProjectileMovementComponent, 0x0200);
		}

		// class UProxyLODMeshSimplificationSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__ProxyLODMeshSimplificationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProxyLODMeshSimplificationSettings, ProxyLODMeshReductionModuleName, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProxyLODMeshSimplificationSettings, 0x0048);
		}

		// class ARadialForceActor : public ARigidBodyBase
		TEST_METHOD(Class__Engine__RadialForceActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ARadialForceActor, ForceComponent, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARadialForceActor, 0x0340);
		}

		// class URadialForceComponent : public USceneComponent
		TEST_METHOD(Class__Engine__RadialForceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, UnknownData_UK4N, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, ImpulseStrength, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, UnknownData_Y888, 0x0265);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, ForceStrength, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, DestructibleDamage, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, ObjectTypesToAffect, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, UnknownData_E56N, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URadialForceComponent, 0x0290);
		}

		// class ARectLight : public ALight
		TEST_METHOD(Class__Engine__RectLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ARectLight, RectLightComponent, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARectLight, 0x0350);
		}

		// class URectLightComponent : public ULocalLightComponent
		TEST_METHOD(Class__Engine__RectLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URectLightComponent, SourceHeight, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URectLightComponent, BarnDoorAngle, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URectLightComponent, BarnDoorLength, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URectLightComponent, SourceTexture, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URectLightComponent, UnknownData_NCGA, 0x03C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URectLightComponent, 0x03D0);
		}

		// class URendererSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__RendererSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_QBIF, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MaxMobileCascades, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MobileMSAASampleCount, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_BEXS, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_WQQO, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MinScreenRadiusForLights, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MinScreenRadiusForEarlyZPass, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MinScreenRadiusForCSMdepth, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_O068, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, ReflectionCaptureResolution, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_QW4B, 0x0066);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, TessellationAdaptivePixelsPerTriangle, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_06OH, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, TranslucentSortPolicy, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_Q143, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, TranslucentSortAxis, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, CustomDepthStencil, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_HXHT, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_MT70, 0x0085);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, bEnableAlphaChannelInPostProcessing, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_7M45, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_298C, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultFeatureAutoExposure, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_CEYG, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_9YL6, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultFeatureAntiAliasing, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultLightUnits, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultBackBufferPixelFormat, 0x009A);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_FOYU, 0x009B);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_XBYJ, 0x009D);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, EarlyZPass, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_J3K8, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_J7B5, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, ClearSceneMethod, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_3GBD, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_19I0, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, GPUSimulationTextureSizeX, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, GPUSimulationTextureSizeY, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_7LEL, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, GBufferFormat, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_CX4S, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_MKN8, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, WireframeCullThreshold, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_4NC6, 0x00CA);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MobileNumDynamicPointLights, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_YUV8, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, SkinCacheSceneMemoryLimitInMB, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_Z93E, 0x00D9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URendererSettings, 0x00E0);
		}

		// class URendererOverrideSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__RendererOverrideSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererOverrideSettings, UnknownData_D3N2, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URendererOverrideSettings, 0x0048);
		}

		// class UReplicationDriver : public UObject
		TEST_METHOD(Class__Engine__ReplicationDriver)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReplicationDriver, 0x0030);
		}

		// class UReplicationConnectionDriver : public UObject
		TEST_METHOD(Class__Engine__ReplicationConnectionDriver)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReplicationConnectionDriver, 0x0030);
		}

		// class UReporterBase : public UObject
		TEST_METHOD(Class__Engine__ReporterBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReporterBase, UnknownData_XIEG, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReporterBase, 0x0038);
		}

		// class UReporterGraph : public UReporterBase
		TEST_METHOD(Class__Engine__ReporterGraph)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReporterGraph, UnknownData_G7XL, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReporterGraph, 0x00B0);
		}

		// class UReverbEffect : public UObject
		TEST_METHOD(Class__Engine__ReverbEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, Density, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, Diffusion, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, Gain, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, GainHF, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, DecayTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, DecayHFRatio, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, ReflectionsGain, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, ReflectionsDelay, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, LateGain, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, LateDelay, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, AirAbsorptionGainHF, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, RoomRolloffFactor, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReverbEffect, 0x0060);
		}

		// class URig : public UObject
		TEST_METHOD(Class__Engine__Rig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URig, UnknownData_6NGV, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::URig, TransformBases, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::URig, Nodes, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URig, 0x0058);
		}

		// class URotatingMovementComponent : public UMovementComponent
		TEST_METHOD(Class__Engine__RotatingMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URotatingMovementComponent, RotationRate, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::URotatingMovementComponent, PivotTranslation, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URotatingMovementComponent, UnknownData_TDAP, 0x0159);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URotatingMovementComponent, 0x0160);
		}

		// class URVOAvoidanceInterface : public UInterface
		TEST_METHOD(Class__Engine__RVOAvoidanceInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URVOAvoidanceInterface, 0x0030);
		}

		// class UScene : public UObject
		TEST_METHOD(Class__Engine__Scene)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScene, 0x0030);
		}

		// class ASceneCapture2D : public ASceneCapture
		TEST_METHOD(Class__Engine__SceneCapture2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASceneCapture2D, CaptureComponent2D, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASceneCapture2D, 0x0350);
		}

		// class USceneCaptureComponent2D : public USceneCaptureComponent
		TEST_METHOD(Class__Engine__SceneCaptureComponent2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, ProjectionType, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_GH26, 0x0301);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, FOVAngle, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, OrthoWidth, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_019K, 0x030C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, TextureTarget, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, CaptureSource, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, CompositeMode, 0x0319);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_N986, 0x031A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, PostProcessSettings, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, PostProcessBlendWeight, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, bUseCustomProjectionMatrix, 0x0854);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_M5U9, 0x0855);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, CustomProjectionMatrix, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, bEnableClipPlane, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_27YS, 0x08A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, ClipPlaneBase, 0x08A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, ClipPlaneNormal, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_2725, 0x08BD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USceneCaptureComponent2D, 0x08D0);
		}

		// class USceneCaptureComponentCube : public USceneCaptureComponent
		TEST_METHOD(Class__Engine__SceneCaptureComponentCube)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, TextureTarget, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, TextureTargetLeft, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, TextureTargetRight, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, TextureTargetODS, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, IPD, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, UnknownData_5Z36, 0x0324);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USceneCaptureComponentCube, 0x0330);
		}

		// class ASceneCaptureCube : public ASceneCapture
		TEST_METHOD(Class__Engine__SceneCaptureCube)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASceneCaptureCube, CaptureComponentCube, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASceneCaptureCube, 0x0350);
		}

		// class USCS_Node : public UObject
		TEST_METHOD(Class__Engine__SCS_Node)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ComponentClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ComponentTemplate, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, CookedComponentInstancingData, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, AttachToName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ParentComponentOrVariableName, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ParentComponentOwnerClassName, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, bIsParentComponentNative, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, UnknownData_E6L7, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ChildNodes, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, MetaDataArray, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, VariableGuid, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, InternalVariableName, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USCS_Node, 0x00E8);
		}

		// class USelection : public UObject
		TEST_METHOD(Class__Engine__Selection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USelection, UnknownData_7T2M, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USelection, 0x00A8);
		}

		// class AServerStatReplicator : public AInfo
		TEST_METHOD(Class__Engine__ServerStatReplicator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, bUpdateStatNet, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, bOverwriteClientStats, 0x0339);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, UnknownData_NLKJ, 0x033A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, Channels, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InRate, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutRate, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutSaturation, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, MaxPacketOverhead, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InRateClientMax, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InRateClientMin, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InRateClientAvg, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InPacketsClientMax, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InPacketsClientMin, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InPacketsClientAvg, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutRateClientMax, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutRateClientMin, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutRateClientAvg, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutPacketsClientMax, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutPacketsClientMin, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutPacketsClientAvg, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NetNumClients, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InPackets, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutPackets, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InBunches, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutBunches, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutLoss, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InLoss, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, VoiceBytesSent, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, VoiceBytesRecv, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, VoicePacketsSent, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, VoicePacketsRecv, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, PercentInVoice, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, PercentOutVoice, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumActorChannels, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumConsideredActors, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, PrioritizedActors, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumRelevantActors, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumRelevantDeletedActors, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumReplicatedActorAttempts, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumReplicatedActors, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumActors, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumNetActors, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumDormantActors, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumInitiallyDormantActors, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumNetGUIDsAckd, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumNetGUIDsPending, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumNetGUIDsUnAckd, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, ObjPathBytes, 0x03EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NetGUIDOutRate, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NetGUIDInRate, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NetSaturated, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, UnknownData_O6BA, 0x03FC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AServerStatReplicator, 0x0400);
		}

		// class UShadowMapTexture2D : public UTexture2D
		TEST_METHOD(Class__Engine__ShadowMapTexture2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UShadowMapTexture2D, ShadowmapFlags, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShadowMapTexture2D, UnknownData_7CGQ, 0x00F9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShadowMapTexture2D, 0x0100);
		}

		// class USimpleConstructionScript : public UObject
		TEST_METHOD(Class__Engine__SimpleConstructionScript)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleConstructionScript, RootNodes, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleConstructionScript, AllNodes, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleConstructionScript, DefaultSceneRootNode, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleConstructionScript, UnknownData_XB83, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USimpleConstructionScript, 0x00A8);
		}

		// class ASkeletalMeshActor : public AActor
		TEST_METHOD(Class__Engine__SkeletalMeshActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, UnknownData_DIYY, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, UnknownData_HLNY, 0x0341);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, SkeletalMeshComponent, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, ReplicatedMesh, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, ReplicatedPhysAsset, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, ReplicatedMaterial0, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, ReplicatedMaterial1, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, UnknownData_DOU0, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkeletalMeshActor, 0x03C0);
		}

		// class USkeletalMeshLODSettings : public UDataAsset
		TEST_METHOD(Class__Engine__SkeletalMeshLODSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, MinLOD, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, UnknownData_EHR5, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, LODGroups, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshLODSettings, 0x0050);
		}

		// class USkeletalMeshSimplificationSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__SkeletalMeshSimplificationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimplificationSettings, SkeletalMeshReductionModuleName, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshSimplificationSettings, 0x0048);
		}

		// class USkeletalMeshSocket : public UObject
		TEST_METHOD(Class__Engine__SkeletalMeshSocket)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, SocketName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, BoneName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, RelativeLocation, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, RelativeRotation, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, RelativeScale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, bForceAlwaysAnimated, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, UnknownData_P9UW, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshSocket, 0x0068);
		}

		// class USkyLightComponent : public ULightComponentBase
		TEST_METHOD(Class__Engine__SkyLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, UnknownData_BMV7, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, Cubemap, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, SourceCubemapAngle, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, CubemapResolution, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, SkyDistanceThreshold, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, bCaptureEmissiveOnly, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, bLowerHemisphereIsBlack, 0x02A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, UnknownData_7MZK, 0x02A6);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, LowerHemisphereColor, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, OcclusionMaxDistance, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, Contrast, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, OcclusionExponent, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, MinOcclusion, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, OcclusionTint, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, OcclusionCombineMode, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, UnknownData_U3EB, 0x02CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, BlendDestinationCubemap, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, UnknownData_8WFA, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkyLightComponent, 0x0450);
		}

		// class USlateBrushAsset : public UObject
		TEST_METHOD(Class__Engine__SlateBrushAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateBrushAsset, Brush, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateBrushAsset, 0x00B8);
		}

		// class USlateTextureAtlasInterface : public UInterface
		TEST_METHOD(Class__Engine__SlateTextureAtlasInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateTextureAtlasInterface, 0x0030);
		}

		// class USmokeTestCommandlet : public UCommandlet
		TEST_METHOD(Class__Engine__SmokeTestCommandlet)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USmokeTestCommandlet, 0x0088);
		}

		// class USoundAttenuation : public UObject
		TEST_METHOD(Class__Engine__SoundAttenuation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundAttenuation, Attenuation, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundAttenuation, 0x0318);
		}

		// class USoundClass : public UObject
		TEST_METHOD(Class__Engine__SoundClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundClass, Properties, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundClass, UnknownData_KJVS, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundClass, ChildClasses, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundClass, PassiveSoundMixModifiers, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundClass, ParentClass, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundClass, 0x0088);
		}

		// class USoundConcurrency : public UObject
		TEST_METHOD(Class__Engine__SoundConcurrency)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundConcurrency, Concurrency, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundConcurrency, 0x0040);
		}

		// class USoundCue : public USoundBase
		TEST_METHOD(Class__Engine__SoundCue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, UnknownData_6K01, 0x0101);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, FirstNode, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, VolumeMultiplier, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, PitchMultiplier, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, AttenuationOverrides, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, SubtitlePriority, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, UnknownData_YKUN, 0x0404);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundCue, 0x0418);
		}

		// class USoundEffectSourcePresetChain : public UObject
		TEST_METHOD(Class__Engine__SoundEffectSourcePresetChain)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundEffectSourcePresetChain, Chain, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundEffectSourcePresetChain, UnknownData_YKLW, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundEffectSourcePresetChain, 0x0048);
		}

		// class USoundGroups : public UObject
		TEST_METHOD(Class__Engine__SoundGroups)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundGroups, SoundGroupProfiles, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundGroups, UnknownData_4SXW, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundGroups, 0x0090);
		}

		// class USoundMix : public UObject
		TEST_METHOD(Class__Engine__SoundMix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, UnknownData_N7D2, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, EQPriority, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, EQSettings, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, SoundClassEffects, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, InitialDelay, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, FadeInTime, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, Duration, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, FadeOutTime, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundMix, 0x0090);
		}

		// class USoundNode : public UObject
		TEST_METHOD(Class__Engine__SoundNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNode, ChildNodes, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNode, 0x0040);
		}

		// class USoundNodeAssetReferencer : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeAssetReferencer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeAssetReferencer, 0x0040);
		}

		// class USoundNodeAttenuation : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeAttenuation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeAttenuation, AttenuationSettings, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeAttenuation, AttenuationOverrides, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeAttenuation, UnknownData_3ZQX, 0x0331);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeAttenuation, 0x0338);
		}

		// class USoundNodeBranch : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeBranch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeBranch, BoolParameterName, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeBranch, 0x0048);
		}

		// class USoundNodeConcatenator : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeConcatenator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeConcatenator, InputVolume, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeConcatenator, 0x0050);
		}

		// class USoundNodeDelay : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeDelay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDelay, DelayMin, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDelay, DelayMax, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeDelay, 0x0048);
		}

		// class USoundNodeDialoguePlayer : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeDialoguePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDialoguePlayer, DialogueWaveParameter, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDialoguePlayer, UnknownData_KB33, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeDialoguePlayer, 0x0068);
		}

		// class USoundNodeDistanceCrossFade : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeDistanceCrossFade)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDistanceCrossFade, CrossFadeInput, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeDistanceCrossFade, 0x0050);
		}

		// class USoundNodeDoppler : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeDoppler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDoppler, DopplerIntensity, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDoppler, bUseSmoothing, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDoppler, UnknownData_F86K, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDoppler, SmoothingInterpSpeed, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDoppler, UnknownData_HWFX, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeDoppler, 0x0050);
		}

		// class USoundNodeEnveloper : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeEnveloper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, LoopStart, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, LoopEnd, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, DurationAfterLoop, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, LoopCount, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, UnknownData_5OLA, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, VolumeInterpCurve, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, PitchInterpCurve, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, VolumeCurve, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, PitchCurve, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, PitchMin, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, PitchMax, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, VolumeMin, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, VolumeMax, 0x0184);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeEnveloper, 0x0188);
		}

		// class USoundNodeGroupControl : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeGroupControl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeGroupControl, GroupSizes, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeGroupControl, 0x0050);
		}

		// class USoundNodeLooping : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeLooping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeLooping, LoopCount, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeLooping, UnknownData_0RBL, 0x0045);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeLooping, 0x0048);
		}

		// class USoundNodeMature : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeMature)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeMature, 0x0040);
		}

		// class USoundNodeMixer : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeMixer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeMixer, InputVolume, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeMixer, 0x0050);
		}

		// class USoundNodeModulator : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeModulator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulator, PitchMin, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulator, PitchMax, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulator, VolumeMin, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulator, VolumeMax, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeModulator, 0x0050);
		}

		// class USoundNodeModulatorContinuous : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeModulatorContinuous)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulatorContinuous, PitchModulationParams, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulatorContinuous, VolumeModulationParams, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeModulatorContinuous, 0x0080);
		}

		// class USoundNodeOscillator : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeOscillator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, UnknownData_F3YH, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, AmplitudeMin, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, AmplitudeMax, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, FrequencyMin, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, FrequencyMax, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, OffsetMin, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, OffsetMax, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, CenterMin, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, CenterMax, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, UnknownData_4DQX, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeOscillator, 0x0068);
		}

		// class USoundNodeParamCrossFade : public USoundNodeDistanceCrossFade
		TEST_METHOD(Class__Engine__SoundNodeParamCrossFade)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeParamCrossFade, ParamName, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeParamCrossFade, 0x0058);
		}

		// class USoundNodeQualityLevel : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeQualityLevel)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeQualityLevel, 0x0040);
		}

		// class USoundNodeRandom : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeRandom)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, Weights, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, PreselectAtLevelLoad, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, UnknownData_Q0HZ, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, UnknownData_NAOI, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, HasBeenUsed, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, NumRandomUsed, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, UnknownData_NA09, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeRandom, 0x0078);
		}

		// class USoundNodeSoundClass : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeSoundClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeSoundClass, SoundClassOverride, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeSoundClass, 0x0048);
		}

		// class USoundNodeSwitch : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeSwitch, IntParameterName, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeSwitch, 0x0048);
		}

		// class USoundNodeWaveParam : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeWaveParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWaveParam, WaveParameterName, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeWaveParam, 0x0048);
		}

		// class USoundNodeWavePlayer : public USoundNodeAssetReferencer
		TEST_METHOD(Class__Engine__SoundNodeWavePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWavePlayer, SoundWaveAssetPtr, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWavePlayer, SoundWave, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWavePlayer, UnknownData_XFX5, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeWavePlayer, 0x0078);
		}

		// class USoundSourceBus : public USoundWave
		TEST_METHOD(Class__Engine__SoundSourceBus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSourceBus, SourceBusChannels, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSourceBus, UnknownData_H5EH, 0x02A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSourceBus, SourceBusDuration, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSourceBus, UnknownData_2TEO, 0x02B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundSourceBus, 0x02C0);
		}

		// class USoundSubmix : public UObject
		TEST_METHOD(Class__Engine__SoundSubmix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, ChildSubmixes, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, ParentSubmix, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, ChannelFormat, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, UnknownData_7831, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, SubmixEffectChain, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, AmbisonicsPluginSettings, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, EnvelopeFollowerAttackTime, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, EnvelopeFollowerReleaseTime, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, OnSubmixRecordedFileDone, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, UnknownData_7YU9, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundSubmix, 0x0088);
		}

		// class ASpectatorPawn : public ADefaultPawn
		TEST_METHOD(Class__Engine__SpectatorPawn)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASpectatorPawn, 0x03C0);
		}

		// class USpectatorPawnMovement : public UFloatingPawnMovement
		TEST_METHOD(Class__Engine__SpectatorPawnMovement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorPawnMovement, UnknownData_BUUY, 0x01A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpectatorPawnMovement, 0x01A8);
		}

		// class ASphereReflectionCapture : public AReflectionCapture
		TEST_METHOD(Class__Engine__SphereReflectionCapture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASphereReflectionCapture, DrawCaptureRadius, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASphereReflectionCapture, 0x0348);
		}

		// class USphereReflectionCaptureComponent : public UReflectionCaptureComponent
		TEST_METHOD(Class__Engine__SphereReflectionCaptureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereReflectionCaptureComponent, InfluenceRadius, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereReflectionCaptureComponent, CaptureDistanceScale, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereReflectionCaptureComponent, PreviewInfluenceRadius, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USphereReflectionCaptureComponent, 0x02E0);
		}

		// class ASplineMeshActor : public AActor
		TEST_METHOD(Class__Engine__SplineMeshActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplineMeshActor, SplineMeshComponent, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASplineMeshActor, 0x0340);
		}

		// class USplineMeshComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Engine__SplineMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, UnknownData_RE7L, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, SplineParams, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, SplineUpDir, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, UnknownData_0MTY, 0x0675);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, ForwardAxis, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, UnknownData_QVPV, 0x0679);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, SplineBoundaryMin, 0x067C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, SplineBoundaryMax, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, UnknownData_VA74, 0x0684);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, BodySetup, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, CachedMeshBodySetupGuid, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, UnknownData_69LP, 0x06A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USplineMeshComponent, 0x06B0);
		}

		// class USpotLightComponent : public UPointLightComponent
		TEST_METHOD(Class__Engine__SpotLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpotLightComponent, InnerConeAngle, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpotLightComponent, OuterConeAngle, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpotLightComponent, LightShaftConeAngle, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpotLightComponent, UnknownData_G8B6, 0x03CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpotLightComponent, 0x03D0);
		}

		// class USpringArmComponent : public USceneComponent
		TEST_METHOD(Class__Engine__SpringArmComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, UnknownData_JP2Q, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, SocketOffset, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, TargetOffset, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, ProbeSize, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, ProbeChannel, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, UnknownData_SCBM, 0x0279);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, UnknownData_HY4W, 0x027E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, CameraLagSpeed, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, CameraRotationLagSpeed, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, CameraLagMaxTimeStep, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, CameraLagMaxDistance, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, UnknownData_KP8V, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpringArmComponent, 0x02E0);
		}

		// class UStaticMesh : public UObject
		TEST_METHOD(Class__Engine__StaticMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, UnknownData_LHQ1, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, MinLOD, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LpvBiasMultiplier, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, StaticMaterials, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LightmapUVDensity, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LightMapResolution, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LightMapCoordinateIndex, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, DistanceFieldSelfShadowBias, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, BodySetup, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LODForCollision, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, UnknownData_CMD4, 0x0085);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, Sockets, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, UnknownData_M0AB, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, PositiveBoundsExtension, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, NegativeBoundsExtension, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, ExtendedBounds, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, ElementToIgnoreForTexFactor, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, AssetUserData, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, EditableMesh, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, NavCollision, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaticMesh, 0x0120);
		}

		// class UStaticMeshSocket : public UObject
		TEST_METHOD(Class__Engine__StaticMeshSocket)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, SocketName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, RelativeLocation, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, RelativeRotation, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, RelativeScale, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, UnknownData_WZXU, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, Tag, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaticMeshSocket, 0x0070);
		}

		// class UStereoLayerComponent : public USceneComponent
		TEST_METHOD(Class__Engine__StereoLayerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, UnknownData_AXS2, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, Texture, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, LeftTexture, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, UnknownData_Q9JH, 0x0271);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, QuadSize, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, UVRect, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, CylinderRadius, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, CylinderOverlayArc, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, CylinderHeight, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, StereoLayerType, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, StereoLayerShape, 0x029D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, UnknownData_YUVQ, 0x029E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, Priority, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, UnknownData_XHHB, 0x02A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerComponent, 0x02F0);
		}

		// class UStereoLayerFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__StereoLayerFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerFunctionLibrary, 0x0030);
		}

		// class UStringTable : public UObject
		TEST_METHOD(Class__Engine__StringTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStringTable, UnknownData_9IZT, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStringTable, 0x0048);
		}

		// class UBelle_Hunter_AnimBP_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Belle_Hunter_AnimBP__Belle_Hunter_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, UnknownData_3EM7, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, AnimGraphNode_BlendListByBool_C60257A04F85BCEBB3CAF2AD53AAA70F, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, AnimGraphNode_UseCachedPose_28E0CCE74665EFDFD717F8BA513F3FD1, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, AnimGraphNode_SaveCachedPose_AF5FE1504CC6DC9E4742BF847D398729, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, AnimGraphNode_LocalToComponentSpace_4D405A3741116A079C6AAD9BBBC9F2BE, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, AnimGraphNode_UseCachedPose_55E51CAF4B6C9732B9021C9501B3C37B, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, AnimGraphNode_ComponentToLocalSpace_75D9C6E4484B106092FFD99C08C1EB54, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, AnimGraphNode_LayeredBoneBlend_4EFFB95F40D3681F9D4F7A99DF02C717, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, AnimGraphNode_SaveCachedPose_1DECF1424FF69B06B9A277845B308396, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, AnimGraphNode_Slot_D438B89B4A0875F7B37BD5ADBADF3591, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, AnimGraphNode_SaveCachedPose_7D40EB25439CEE7D5F8898BE93E4EB86, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, AnimGraphNode_Root_C0F0F9AA4CE631E20B76CCAE37C01274, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, AnimGraphNode_SaveCachedPose_4DF98DC747158023C0C615BB2B980F46, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, AnimGraphNode_UseCachedPose_3D5EE4C74DA1486D9CD7E7B87DAC95FF, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, AnimGraphNode_UseCachedPose_2C894A074E297E2FC84A5C99956FF3D3, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, AnimGraphNode_TwoBoneIK_A096625341E9B49D2CB8A0BF15521A60, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, AnimGraphNode_TwoBoneIK_6F8E9C584DE8DD6C610B529871404FB8, 0x09E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, AnimGraphNode_UseCachedPose_5CEF1E6C4ACB1C1C2F12E0BA3DF5F1A3, 0x0BC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, AnimGraphNode_BlendListByBool_C5AA838A4746C4F585C89A941132E87D, 0x0BE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, AnimGraphNode_TransitionResult_55A9B33944A87DDE311B3CA80A7B1DCB, 0x0C88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, AnimGraphNode_SequencePlayer_1E73AC5F4F6811583F25B2B71EC8B4A3, 0x0CB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, AnimGraphNode_StateResult_B80E91CE42BEE84902D901865E977A1C, 0x0D28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, AnimGraphNode_TransitionResult_7E07C013482DFF0542A2C3A91F161313, 0x0D48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, AnimGraphNode_TransitionResult_AA4029094738B47BC683A0A903239386, 0x0D70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, AnimGraphNode_BlendSpacePlayer_80D961A44A9C8429A72981AC59B7A18E, 0x0D98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, AnimGraphNode_BlendSpacePlayer_31B499C24302AC1FE3F8A1AB70DC6F74, 0x0E78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, AnimGraphNode_ApplyAdditive_512AB4234B4B437B9F5F499595FBA452, 0x0F58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, AnimGraphNode_StateResult_E2734B714C7160F679FBB5B03632E3BB, 0x1020);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, AnimGraphNode_SequencePlayer_F50AF15F46F19AAB34803A8B5CE4CE17, 0x1040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, AnimGraphNode_StateResult_31B6976D489C6E4CEB976C809FF7DDED, 0x10B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, AnimGraphNode_StateMachine_26B5896547A867B79304EFB2D78A08B9, 0x10D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, AnimGraphNode_StateResult_85117EA3458D019EEA8A6B946E850C2B, 0x1188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, AnimGraphNode_StateMachine_0D7ED17A4646E3D2296AF0B3DB048680, 0x11A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, AnimGraphNode_RotationOffsetBlendSpace_5DFEDE1148A01E4DF1573190DC5AA6BA, 0x1258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, AnimGraphNode_Slot_DABAB5D8453DF5FC4CC2B8BDC54D6F86, 0x13E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, AnimGraphNode_LayeredBoneBlend_17B5E6DC4CC270874C51DCA906185788, 0x1428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, AnimGraphNode_SaveCachedPose_59FBEA4046B3D078BF4F67872AF23FE2, 0x14E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, AnimGraphNode_UseCachedPose_A55883F145F3952704F79E86B01385EE, 0x1598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, AnimGraphNode_UseCachedPose_7C6A219046C9FA960DB65B9578EBA627, 0x15C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, AnimGraphNode_UseCachedPose_47892A0E4B45FDDC298CE1B81D077D7B, 0x15E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, AnimGraphNode_UseCachedPose_354AA99843520411524C9B92581BBF86, 0x1610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, AnimGraphNode_LayeredBoneBlend_9354B82846FBF308145BB99400C5F7C6, 0x1638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, AnimGraphNode_ComponentToLocalSpace_CC072BDB4F8C32F9FD1D12AB27BA6E67, 0x16F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, AnimGraphNode_LocalToComponentSpace_DC3E5B694C8439DB2C4DE0BA0F87D971, 0x1710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, AnimGraphNode_UseCachedPose_9C7DAFB04D73D99414AE01B7F549F5B1, 0x1730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, MoveForward, 0x1758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, MoveRight, 0x175C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, Pitch, 0x1760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, Roll, 0x1764);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, Yaw, 0x1768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, RotationLastTick, 0x176C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, YawDelta, 0x1778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, IsAccelerating, 0x177C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, FullBody, 0x177D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, IsAttackHit, 0x177E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, IsDie, 0x177F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, IsSearch, 0x1780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, UnknownData_JENO, 0x1781);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, Hunter_Ref, 0x1788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, FootLeftJointLoc, 0x1790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, FootRightJointLoc, 0x179C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, IK_LeftFoot_Alpha, 0x17A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, IK_RightFoot_Alpha, 0x17AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, RightFootEffectorLoc, 0x17B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, LeftFootEffectorLoc, 0x17B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, IKAdjustOffset, 0x17B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, RightFootRotation, 0x17BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, LeftFootRotation, 0x17C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, IKTraceDistance, 0x17D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, IKFeetInterpSpeed, 0x17D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, DeltaSeconds, 0x17DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, HipsOffest, 0x17E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, IKHipsInterpSpeed, 0x17E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, IKCapsuleHalfHeight, 0x17E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, HandRightEffectorLoc, 0x17EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, HandLeftEffectorLoc, 0x17F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, IKLeftHand_Alpha, 0x1804);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, IKRightHand_Alpha, 0x1808);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, bIsEnableIK, 0x180C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, UnknownData_BH6Q, 0x180D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, Speed, 0x1810);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, HandLeftJointLoc, 0x1814);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, HandRightJointLoc, 0x1820);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, EnableRightHandIK, 0x182C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, IKInteractType, 0x182D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, UnknownData_00SG, 0x182E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, RightSnapSocket, 0x1830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, EnableLeftHandIK, 0x1838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, UnknownData_RQW1, 0x1839);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_Hunter_AnimBP_C, LeftSnapSocket, 0x183C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBelle_Hunter_AnimBP_C, 0x1844);
		}

		// class USubsurfaceProfile : public UObject
		TEST_METHOD(Class__Engine__SubsurfaceProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubsurfaceProfile, Settings, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubsurfaceProfile, 0x0080);
		}

		// class USubsystemBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__SubsystemBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubsystemBlueprintLibrary, 0x0030);
		}

		// class USubUVAnimation : public UObject
		TEST_METHOD(Class__Engine__SubUVAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, SubUVTexture, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, SubImages_Horizontal, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, SubImages_Vertical, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, BoundingMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, OpacitySourceMode, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, UnknownData_EQWP, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, AlphaThreshold, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, UnknownData_HA9S, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubUVAnimation, 0x0070);
		}

		// class UTimecodeProvider : public UObject
		TEST_METHOD(Class__Engine__TimecodeProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimecodeProvider, 0x0030);
		}

		// class USystemTimeTimecodeProvider : public UTimecodeProvider
		TEST_METHOD(Class__Engine__SystemTimeTimecodeProvider)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USystemTimeTimecodeProvider, FrameRate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USystemTimeTimecodeProvider, UnknownData_JMF8, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USystemTimeTimecodeProvider, 0x0040);
		}

		// class ATargetPoint : public AActor
		TEST_METHOD(Class__Engine__TargetPoint)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATargetPoint, 0x0338);
		}

		// class UTextPropertyTestObject : public UObject
		TEST_METHOD(Class__Engine__TextPropertyTestObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextPropertyTestObject, DefaultedText, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextPropertyTestObject, UndefaultedText, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextPropertyTestObject, TransientText, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextPropertyTestObject, 0x0078);
		}

		// class ATextRenderActor : public AActor
		TEST_METHOD(Class__Engine__TextRenderActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATextRenderActor, TextRender, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATextRenderActor, 0x0340);
		}

		// class UTextRenderComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__TextRenderComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, Text, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, TextMaterial, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, Font, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, HorizontalAlignment, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, VerticalAlignment, 0x05A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, UnknownData_PFIM, 0x05A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, TextRenderColor, 0x05A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, XScale, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, YScale, 0x05AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, WorldSize, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, InvDefaultSize, 0x05B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, HorizSpacingAdjust, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, VertSpacingAdjust, 0x05BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, UnknownData_6INM, 0x05C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextRenderComponent, 0x05D0);
		}

		// class UTexture2DDynamic : public UTexture
		TEST_METHOD(Class__Engine__Texture2DDynamic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2DDynamic, UnknownData_Q3NC, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2DDynamic, Format, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2DDynamic, UnknownData_EG6R, 0x00C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTexture2DDynamic, 0x00D8);
		}

		// class UTextureLightProfile : public UTexture2D
		TEST_METHOD(Class__Engine__TextureLightProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureLightProfile, Brightness, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureLightProfile, TextureMultiplier, 0x00FC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureLightProfile, 0x0100);
		}

		// class UTextureRenderTargetCube : public UTextureRenderTarget
		TEST_METHOD(Class__Engine__TextureRenderTargetCube)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetCube, SizeX, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetCube, ClearColor, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetCube, OverrideFormat, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetCube, UnknownData_V6FO, 0x00DE);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureRenderTargetCube, 0x00E0);
		}

		// class UThumbnailInfo : public UObject
		TEST_METHOD(Class__Engine__ThumbnailInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UThumbnailInfo, 0x0030);
		}

		// class UTimelineComponent : public UActorComponent
		TEST_METHOD(Class__Engine__TimelineComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineComponent, TheTimeline, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineComponent, UnknownData_D4AR, 0x0199);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimelineComponent, 0x01A0);
		}

		// class UTimelineTemplate : public UObject
		TEST_METHOD(Class__Engine__TimelineTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, TimelineLength, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, LengthMode, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, UnknownData_DAXQ, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, EventTracks, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, FloatTracks, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, VectorTracks, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, LinearColorTracks, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, MetaDataArray, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, TimelineGuid, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, VariableName, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, DirectionPropertyName, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, UpdateFunctionName, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, FinishedFunctionName, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimelineTemplate, 0x00B8);
		}

		// class UTireType : public UDataAsset
		TEST_METHOD(Class__Engine__TireType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireType, FrictionScale, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireType, UnknownData_A18M, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTireType, 0x0040);
		}

		// class UTouchInterface : public UObject
		TEST_METHOD(Class__Engine__TouchInterface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, Controls, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, ActiveOpacity, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, InactiveOpacity, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, TimeUntilDeactive, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, TimeUntilReset, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, ActivationDelay, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, bPreventRecenter, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, UnknownData_PWBR, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, StartupDelay, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, UnknownData_94F0, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTouchInterface, 0x0060);
		}

		// class ATriggerBase : public AActor
		TEST_METHOD(Class__Engine__TriggerBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggerBase, CollisionComponent, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATriggerBase, 0x0340);
		}

		// class ATriggerBox : public ATriggerBase
		TEST_METHOD(Class__Engine__TriggerBox)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATriggerBox, 0x0340);
		}

		// class ATriggerCapsule : public ATriggerBase
		TEST_METHOD(Class__Engine__TriggerCapsule)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATriggerCapsule, 0x0340);
		}

		// class ATriggerSphere : public ATriggerBase
		TEST_METHOD(Class__Engine__TriggerSphere)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATriggerSphere, 0x0340);
		}

		// class ATriggerVolume : public AVolume
		TEST_METHOD(Class__Engine__TriggerVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATriggerVolume, 0x0370);
		}

		// class UTwitterIntegrationBase : public UPlatformInterfaceBase
		TEST_METHOD(Class__Engine__TwitterIntegrationBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwitterIntegrationBase, 0x0040);
		}

		// class UUserDefinedEnum : public UEnum
		TEST_METHOD(Class__Engine__UserDefinedEnum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedEnum, DisplayNameMap, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserDefinedEnum, 0x00B8);
		}

		// class UUserDefinedStruct : public UScriptStruct
		TEST_METHOD(Class__Engine__UserDefinedStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedStruct, Status, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedStruct, UnknownData_DR6N, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedStruct, Guid, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedStruct, UnknownData_G05U, 0x00C4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserDefinedStruct, 0x00F8);
		}

		// class UUserInterfaceSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__UserInterfaceSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, RenderFocusRule, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UnknownData_F0J6, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, HardwareCursors, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, SoftwareCursors, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, DefaultCursor, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, TextEditBeamCursor, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, CrosshairsCursor, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, HandCursor, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, GrabHandCursor, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, GrabHandClosedCursor, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, SlashedCircleCursor, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, ApplicationScale, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UIScaleRule, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UnknownData_U7LZ, 0x0195);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, CustomScalingRuleClass, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UIScaleCurve, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, bAllowHighDPIInGameMode, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, bLoadWidgetsOnDedicatedServer, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UnknownData_5BWR, 0x023A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, CursorClasses, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, CustomScalingRuleClassInstance, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, CustomScalingRule, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UnknownData_FOR0, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserInterfaceSettings, 0x0270);
		}

		// class UVectorField : public UObject
		TEST_METHOD(Class__Engine__VectorField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorField, Bounds, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorField, Intensity, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVectorField, 0x0050);
		}

		// class UVectorFieldAnimated : public UVectorField
		TEST_METHOD(Class__Engine__VectorFieldAnimated)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, Texture, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, ConstructionOp, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, UnknownData_4UFY, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, VolumeSizeX, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, VolumeSizeY, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, VolumeSizeZ, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, SubImagesX, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, SubImagesY, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, FrameCount, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, FramesPerSecond, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, UnknownData_1QMI, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, NoiseField, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, NoiseScale, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, NoiseMax, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVectorFieldAnimated, 0x0090);
		}

		// class UVectorFieldComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__VectorFieldComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldComponent, VectorField, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldComponent, Intensity, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldComponent, Tightness, 0x0584);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldComponent, UnknownData_VJG7, 0x0589);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVectorFieldComponent, 0x05A0);
		}

		// class UVectorFieldStatic : public UVectorField
		TEST_METHOD(Class__Engine__VectorFieldStatic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, SizeX, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, SizeY, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, SizeZ, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, bAllowCPUAccess, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, UnknownData_BMQA, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, CPUData, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVectorFieldStatic, 0x0108);
		}

		// class AVectorFieldVolume : public AActor
		TEST_METHOD(Class__Engine__VectorFieldVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AVectorFieldVolume, VectorFieldComponent, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVectorFieldVolume, 0x0340);
		}

		// class UVirtualTexture : public UObject
		TEST_METHOD(Class__Engine__VirtualTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTexture, Space, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTexture, Rebuild, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTexture, UnknownData_745Z, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVirtualTexture, 0x0060);
		}

		// class ULightMapVirtualTexture : public UVirtualTexture
		TEST_METHOD(Class__Engine__LightMapVirtualTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightMapVirtualTexture, LayerFlags, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightMapVirtualTexture, UnknownData_AFW1, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightMapVirtualTexture, 0x0068);
		}

		// class UVirtualTextureSpace : public UObject
		TEST_METHOD(Class__Engine__VirtualTextureSpace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTextureSpace, Layers, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTextureSpace, TileSize, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTextureSpace, BorderWidth, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTextureSpace, Size, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTextureSpace, Dimensions, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTextureSpace, Format, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTextureSpace, UnknownData_BJFR, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTextureSpace, PoolSize, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTextureSpace, UnknownData_IWZP, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVirtualTextureSpace, 0x0080);
		}

		// class ULightMapVirtualTextureSpace : public UVirtualTextureSpace
		TEST_METHOD(Class__Engine__LightMapVirtualTextureSpace)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightMapVirtualTextureSpace, 0x0080);
		}

		// class UVisualLoggerAutomationTests : public UObject
		TEST_METHOD(Class__Engine__VisualLoggerAutomationTests)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisualLoggerAutomationTests, 0x0030);
		}

		// class UVisualLoggerDebugSnapshotInterface : public UInterface
		TEST_METHOD(Class__Engine__VisualLoggerDebugSnapshotInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisualLoggerDebugSnapshotInterface, 0x0030);
		}

		// class UVisualLoggerKismetLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__VisualLoggerKismetLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisualLoggerKismetLibrary, 0x0030);
		}

		// class UVoiceChannel : public UChannel
		TEST_METHOD(Class__Engine__VoiceChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoiceChannel, UnknownData_IOV4, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoiceChannel, 0x0088);
		}

		// class UVOIPTalker : public UActorComponent
		TEST_METHOD(Class__Engine__VOIPTalker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVOIPTalker, Settings, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVOIPTalker, UnknownData_1XSY, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVOIPTalker, 0x0138);
		}

		// class UVOIPStatics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__VOIPStatics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVOIPStatics, 0x0030);
		}

		// class UVolumeTexture : public UTexture
		TEST_METHOD(Class__Engine__VolumeTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumeTexture, UnknownData_8NRW, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVolumeTexture, 0x0118);
		}

		// class AVolumetricLightmapDensityVolume : public AVolume
		TEST_METHOD(Class__Engine__VolumetricLightmapDensityVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AVolumetricLightmapDensityVolume, AllowedMipLevelRange, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVolumetricLightmapDensityVolume, 0x0378);
		}

		// class AWindDirectionalSource : public AInfo
		TEST_METHOD(Class__Engine__WindDirectionalSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWindDirectionalSource, Component, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWindDirectionalSource, 0x0340);
		}

		// class UWindDirectionalSourceComponent : public USceneComponent
		TEST_METHOD(Class__Engine__WindDirectionalSourceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, UnknownData_X4C7, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, Speed, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, MinGustAmount, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, MaxGustAmount, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, Radius, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, UnknownData_PNI7, 0x026D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWindDirectionalSourceComponent, 0x0280);
		}

		// class UWorldComposition : public UObject
		TEST_METHOD(Class__Engine__WorldComposition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, UnknownData_QCBF, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, TilesStreaming, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, TilesStreamingTimeThreshold, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, bLoadAllTilesDuringCinematic, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, bRebaseOriginIn3DSpace, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, UnknownData_JV0U, 0x006A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, RebaseOriginDistance, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWorldComposition, 0x0070);
		}

		// class UHierarchicalLODSetup : public UObject
		TEST_METHOD(Class__Engine__HierarchicalLODSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalLODSetup, HierarchicalLODSetup, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalLODSetup, OverrideBaseMaterial, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHierarchicalLODSetup, 0x0068);
		}

		// class AWorldSettings : public AInfo
		TEST_METHOD(Class__Engine__WorldSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_FROZ, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, VisibilityCellSize, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, VisibilityAggressiveness, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_YTL8, 0x0347);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, NavigationSystemConfig, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, NavigationSystemConfigOverride, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, WorldToMeters, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, KillZ, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, KillZDamageType, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, WorldGravityZ, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, GlobalGravityZ, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultPhysicsVolumeClass, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, PhysicsCollisionHandlerClass, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultGameMode, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, GameNetworkManagerClass, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, PackedLightAndShadowMapTextureSize, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultColorScale, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultMaxDistanceFieldOcclusionDistance, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, GlobalDistanceFieldViewDistance, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DynamicIndirectShadowsSelfShadowingIntensity, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_QHXU, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultReverbSettings, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultAmbientZoneSettings, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MonoCullingDistance, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultBaseSoundMix, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, TimeDilation, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MatineeTimeDilation, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DemoPlayTimeDilation, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MinGlobalTimeDilation, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MaxGlobalTimeDilation, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MinUndilatedFrameTime, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MaxUndilatedFrameTime, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, BroadphaseSettings, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, Pauser, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, ReplicationViewers, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, AssetUserData, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MaxNumberOfBookmarks, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_VW7T, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultBookmarkClass, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, BookmarkArray, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, LastBookmarkClass, 0x0488);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWorldSettings, 0x0490);
		}

		// class APickable_Trap_C : public APickableItemBase_C
		TEST_METHOD(BlueprintGeneratedClass__Pickable_Trap__Pickable_Trap_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APickable_Trap_C, UberGraphFrame, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::APickable_Trap_C, Sphere, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::APickable_Trap_C, Target, 0x07A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APickable_Trap_C, 0x07A8);
		}

		// class UNS_DisableMouseCamera_C : public UAnimNotifyState
		TEST_METHOD(BlueprintGeneratedClass__NS_DisableMouseCamera__NS_DisableMouseCamera_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNS_DisableMouseCamera_C, 0x0038);
		}

		// class APickable_Medkit_C : public APickableItemBase_C
		TEST_METHOD(BlueprintGeneratedClass__Pickable_Medkit__Pickable_Medkit_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APickable_Medkit_C, UberGraphFrame, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::APickable_Medkit_C, Sphere, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::APickable_Medkit_C, Target, 0x07A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APickable_Medkit_C, 0x07A8);
		}

		// class UBTDecorator_IsCanOpenDoor_C : public UBTDecorator_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTDecorator_IsCanOpenDoor__BTDecorator_IsCanOpenDoor_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_IsCanOpenDoor_C, 0x00A8);
		}

		// class ASoundControllerBase_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__SoundControllerBase__SoundControllerBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASoundControllerBase_C, UberGraphFrame, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASoundControllerBase_C, DefaultSceneRoot, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASoundControllerBase_C, 0x0350);
		}

		// class UMovieSceneMediaSection : public UMovieSceneSection
		TEST_METHOD(Class__MediaCompositing__MovieSceneMediaSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, MediaSource, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, bLooping, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, UnknownData_44AI, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, StartFrameOffset, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, MediaTexture, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, MediaSoundComponent, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, bUseExternalMediaPlayer, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, UnknownData_K669, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, ExternalMediaPlayer, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMediaSection, 0x0118);
		}

		// class UMovieSceneMediaTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MediaCompositing__MovieSceneMediaTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaTrack, MediaSections, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMediaTrack, 0x0070);
		}

		// class AZBingCat_PreviewItem_Nail_C : public AZBingCat_PreviewItemBase_C
		TEST_METHOD(BlueprintGeneratedClass__ZBingCat_PreviewItem_Nail__ZBingCat_PreviewItem_Nail_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AZBingCat_PreviewItem_Nail_C, 0x0350);
		}

		// class UMobileInstalledContent : public UObject
		TEST_METHOD(Class__MobilePatchingUtils__MobileInstalledContent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMobileInstalledContent, UnknownData_3K26, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMobileInstalledContent, 0x0050);
		}

		// class UMobilePendingContent : public UMobileInstalledContent
		TEST_METHOD(Class__MobilePatchingUtils__MobilePendingContent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMobilePendingContent, UnknownData_OFYM, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMobilePendingContent, 0x0090);
		}

		// class UMobilePatchingLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MobilePatchingUtils__MobilePatchingLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMobilePatchingLibrary, 0x0030);
		}

		// class UObject
		TEST_METHOD(Class__CoreUObject__Object)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, VfTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, Flags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, InternalIndex, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, Class, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, Name, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, Outer, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, pad_NTJBL5FZ3S, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObject, 0x0030);
		}

		// class UField : public UObject
		TEST_METHOD(Class__CoreUObject__Field)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UField, Next, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UField, 0x0038);
		}

		// class UStruct : public UField, public FStructBaseChain
		TEST_METHOD(Class__CoreUObject__Struct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, SuperField, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, Children, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, PropertySize, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, MinAlignment, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, Script, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, PropertyLink, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, RefLink, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, DestructorLink, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, PostConstructLink, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, ScriptObjectReferences, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStruct, 0x00A0);
		}

		// class UClass : public UStruct
		TEST_METHOD(Class__CoreUObject__Class)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClass, UnknownData_QHFU, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClass, 0x0218);
		}

		// class UInterface : public UObject
		TEST_METHOD(Class__CoreUObject__Interface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface, 0x0030);
		}

		// class UPackage : public UObject
		TEST_METHOD(Class__CoreUObject__Package)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPackage, UnknownData_RN5E, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPackage, 0x0098);
		}

		// class UGCObjectReferencer : public UObject
		TEST_METHOD(Class__CoreUObject__GCObjectReferencer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGCObjectReferencer, UnknownData_739W, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGCObjectReferencer, 0x0068);
		}

		// class UTextBuffer : public UObject
		TEST_METHOD(Class__CoreUObject__TextBuffer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBuffer, UnknownData_5A0Y, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextBuffer, 0x0058);
		}

		// class UScriptStruct : public UStruct
		TEST_METHOD(Class__CoreUObject__ScriptStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScriptStruct, UnknownData_GSCA, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScriptStruct, 0x00B0);
		}

		// class UFunction : public UStruct
		TEST_METHOD(Class__CoreUObject__Function)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, FunctionFlags, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, RepOffset, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, NumParms, 0x00A6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, pad_SW2M66J8I0, 0x00A7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, ParmsSize, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, ReturnValueOffset, 0x00AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, RPCId, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, RPCResponseId, 0x00AE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, FirstPropertyToInit, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, EventGraphFunction, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, EventGraphCallOffset, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, pad_8GY39FFMWH, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, Func, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFunction, 0x00D0);
		}

		// class UDelegateFunction : public UFunction
		TEST_METHOD(Class__CoreUObject__DelegateFunction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDelegateFunction, 0x00D0);
		}

		// class UDynamicClass : public UClass
		TEST_METHOD(Class__CoreUObject__DynamicClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicClass, UnknownData_RQDV, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicClass, 0x0280);
		}

		// class UPackageMap : public UObject
		TEST_METHOD(Class__CoreUObject__PackageMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPackageMap, UnknownData_V7SS, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPackageMap, 0x00E8);
		}

		// class UEnum : public UField
		TEST_METHOD(Class__CoreUObject__Enum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnum, UnknownData_ZHVP, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnum, 0x0068);
		}

		// class UProperty : public UField
		TEST_METHOD(Class__CoreUObject__Property)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProperty, UnknownData_IHJ9, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProperty, 0x0078);
		}

		// class UEnumProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__EnumProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnumProperty, UnknownData_BXKT, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnumProperty, 0x0088);
		}

		// class ULinkerPlaceholderClass : public UClass
		TEST_METHOD(Class__CoreUObject__LinkerPlaceholderClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULinkerPlaceholderClass, UnknownData_LX8R, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULinkerPlaceholderClass, 0x03D0);
		}

		// class ULinkerPlaceholderExportObject : public UObject
		TEST_METHOD(Class__CoreUObject__LinkerPlaceholderExportObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULinkerPlaceholderExportObject, UnknownData_QNGR, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULinkerPlaceholderExportObject, 0x00F8);
		}

		// class ULinkerPlaceholderFunction : public UFunction
		TEST_METHOD(Class__CoreUObject__LinkerPlaceholderFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULinkerPlaceholderFunction, UnknownData_MMR4, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULinkerPlaceholderFunction, 0x0288);
		}

		// class UMetaData : public UObject
		TEST_METHOD(Class__CoreUObject__MetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMetaData, UnknownData_RVHR, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMetaData, 0x00D0);
		}

		// class UObjectRedirector : public UObject
		TEST_METHOD(Class__CoreUObject__ObjectRedirector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectRedirector, UnknownData_04GJ, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectRedirector, 0x0038);
		}

		// class UArrayProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__ArrayProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrayProperty, UnknownData_D68Z, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UArrayProperty, 0x0080);
		}

		// class UObjectPropertyBase : public UProperty
		TEST_METHOD(Class__CoreUObject__ObjectPropertyBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectPropertyBase, UnknownData_HTNX, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectPropertyBase, 0x0080);
		}

		// class UBoolProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__BoolProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoolProperty, UnknownData_00WT, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoolProperty, 0x0080);
		}

		// class UNumericProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__NumericProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNumericProperty, 0x0078);
		}

		// class UByteProperty : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__ByteProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UByteProperty, UnknownData_HTY4, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UByteProperty, 0x0080);
		}

		// class UObjectProperty : public UObjectPropertyBase
		TEST_METHOD(Class__CoreUObject__ObjectProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectProperty, 0x0080);
		}

		// class UClassProperty : public UObjectProperty
		TEST_METHOD(Class__CoreUObject__ClassProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClassProperty, UnknownData_SVFH, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClassProperty, 0x0088);
		}

		// class UDelegateProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__DelegateProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDelegateProperty, UnknownData_0BFN, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDelegateProperty, 0x0080);
		}

		// class UDoubleProperty : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__DoubleProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDoubleProperty, 0x0078);
		}

		// class UFloatProperty : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__FloatProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFloatProperty, 0x0078);
		}

		// class UIntProperty : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__IntProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIntProperty, 0x0078);
		}

		// class UInt16Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__Int16Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInt16Property, 0x0078);
		}

		// class UInt64Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__Int64Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInt64Property, 0x0078);
		}

		// class UInt8Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__Int8Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInt8Property, 0x0078);
		}

		// class UInterfaceProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__InterfaceProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterfaceProperty, UnknownData_A2JG, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterfaceProperty, 0x0080);
		}

		// class ULazyObjectProperty : public UObjectPropertyBase
		TEST_METHOD(Class__CoreUObject__LazyObjectProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULazyObjectProperty, 0x0080);
		}

		// class UMapProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__MapProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapProperty, UnknownData_QBPO, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapProperty, 0x00A0);
		}

		// class UMulticastDelegateProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__MulticastDelegateProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMulticastDelegateProperty, UnknownData_ZIK6, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMulticastDelegateProperty, 0x0080);
		}

		// class UNameProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__NameProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNameProperty, 0x0078);
		}

		// class USetProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__SetProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USetProperty, UnknownData_9T0V, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USetProperty, 0x0098);
		}

		// class USoftObjectProperty : public UObjectPropertyBase
		TEST_METHOD(Class__CoreUObject__SoftObjectProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoftObjectProperty, 0x0080);
		}

		// class USoftClassProperty : public USoftObjectProperty
		TEST_METHOD(Class__CoreUObject__SoftClassProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoftClassProperty, UnknownData_Z7X8, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoftClassProperty, 0x0088);
		}

		// class UStrProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__StrProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStrProperty, 0x0078);
		}

		// class UStructProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__StructProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStructProperty, UnknownData_6M8F, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStructProperty, 0x0080);
		}

		// class UUInt16Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__UInt16Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUInt16Property, 0x0078);
		}

		// class UUInt32Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__UInt32Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUInt32Property, 0x0078);
		}

		// class UUInt64Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__UInt64Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUInt64Property, 0x0078);
		}

		// class UWeakObjectProperty : public UObjectPropertyBase
		TEST_METHOD(Class__CoreUObject__WeakObjectProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeakObjectProperty, 0x0080);
		}

		// class UTextProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__TextProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextProperty, 0x0078);
		}

		// class UGE_Buff_Bloodthirst_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Buff_Bloodthirst__GE_Buff_Bloodthirst_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Buff_Bloodthirst_C, 0x05F8);
		}

		// class UAssetRegistryImpl : public UObject
		TEST_METHOD(Class__AssetRegistry__AssetRegistryImpl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetRegistryImpl, UnknownData_9TYZ, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetRegistryImpl, 0x0780);
		}

		// class UAssetRegistryHelpers : public UObject
		TEST_METHOD(Class__AssetRegistry__AssetRegistryHelpers)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetRegistryHelpers, 0x0030);
		}

		// class UAssetRegistry : public UInterface
		TEST_METHOD(Class__AssetRegistry__AssetRegistry)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetRegistry, 0x0030);
		}

		// class UBTTask_SurvivorGeneral_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTTask_SurvivorGeneral__BTTask_SurvivorGeneral_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SurvivorGeneral_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SurvivorGeneral_C, WaitProgress, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_SurvivorGeneral_C, 0x00B9);
		}

		// class UHandlerComponentFactory : public UObject
		TEST_METHOD(Class__PacketHandler__HandlerComponentFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHandlerComponentFactory, 0x0030);
		}

		// class UNetAnalyticsAggregatorConfig : public UObject
		TEST_METHOD(Class__PacketHandler__NetAnalyticsAggregatorConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetAnalyticsAggregatorConfig, NetAnalyticsData, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetAnalyticsAggregatorConfig, 0x0040);
		}

		// class UPacketHandlerProfileConfig : public UObject
		TEST_METHOD(Class__PacketHandler__PacketHandlerProfileConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPacketHandlerProfileConfig, Components, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPacketHandlerProfileConfig, 0x0040);
		}

		// class UControlPointMeshComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Landscape__ControlPointMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlPointMeshComponent, UnknownData_A9S6, 0x0608);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UControlPointMeshComponent, 0x0610);
		}

		// class ALandscapeProxy : public AActor
		TEST_METHOD(Class__Landscape__LandscapeProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, SplineComponent, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeGuid, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeSectionOffset, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, MaxLODLevel, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LODDistanceFactor, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LODFalloff, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_2ERZ, 0x0361);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, ComponentScreenSizeToUseSubSections, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LOD0DistributionSetting, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LODDistributionSetting, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, TessellationComponentScreenSize, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UseTessellationComponentScreenSizeFalloff, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_M49I, 0x0375);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, TessellationComponentScreenSizeFalloff, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, OccluderGeometryLOD, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, StaticLightingLOD, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_Z3DG, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, DefaultPhysMaterial, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, StreamingDistanceMultiplier, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_8UZG, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeMaterial, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeHoleMaterial, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeMaterialsOverride, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, NegativeZBoundsExtension, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, PositiveZBoundsExtension, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeComponents, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, CollisionComponents, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, FoliageComponents, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_XSLC, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, bHasLandscapeGrass, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_52QP, 0x0455);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, StaticLightingResolution, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_KISO, 0x045D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LightingChannels, 0x0461);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_IU4W, 0x0462);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_1FMG, 0x0465);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, CustomDepthStencilValue, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LDMaxDrawDistance, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LightmassSettings, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, CollisionMipLevel, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, SimpleCollisionMipLevel, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, CollisionThickness, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_8JO9, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, BodyInstance, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_XC27, 0x05E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, ComponentSizeQuads, 0x05E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, SubsectionSizeQuads, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, NumSubsections, 0x05EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_3G79, 0x05F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, bUseDynamicMaterialInstance, 0x05F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, NavigationGeometryGatheringMode, 0x05F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, bUseLandscapeForCullingInvisibleHLODVertices, 0x05F6);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_94RT, 0x05F7);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeProxy, 0x0648);
		}

		// class UAppleImageUtilsBaseAsyncTaskBlueprintProxy : public UObject
		TEST_METHOD(Class__AppleImageUtils__AppleImageUtilsBaseAsyncTaskBlueprintProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleImageUtilsBaseAsyncTaskBlueprintProxy, UnknownData_K403, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleImageUtilsBaseAsyncTaskBlueprintProxy, OnSuccess, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleImageUtilsBaseAsyncTaskBlueprintProxy, OnFailure, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleImageUtilsBaseAsyncTaskBlueprintProxy, UnknownData_BBVK, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleImageUtilsBaseAsyncTaskBlueprintProxy, ConversionResult, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleImageUtilsBaseAsyncTaskBlueprintProxy, UnknownData_V0JE, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAppleImageUtilsBaseAsyncTaskBlueprintProxy, 0x0090);
		}

		// class UAppleImageInterface : public UInterface
		TEST_METHOD(Class__AppleImageUtils__AppleImageInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAppleImageInterface, 0x0030);
		}

		// class UIngame_WaterBinding_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Ingame_WaterBinding__Ingame_WaterBinding_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_WaterBinding_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_WaterBinding_C, Stack3, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_WaterBinding_C, Stack2, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_WaterBinding_C, Stack1, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_WaterBinding_C, Image_52, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_WaterBinding_C, Image_54, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_WaterBinding_C, Image_55, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_WaterBinding_C, Count, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_WaterBinding_C, UnknownData_GFBT, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_WaterBinding_C, Character, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_WaterBinding_C, Class, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_WaterBinding_C, Timer, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_WaterBinding_C, Speed, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_WaterBinding_C, bIsFade, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_WaterBinding_C, UnknownData_XCUZ, 0x02A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_WaterBinding_C, WidgetComponent, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIngame_WaterBinding_C, 0x02B0);
		}

		// class ALandscape : public ALandscapeProxy
		TEST_METHOD(Class__Landscape__Landscape)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscape, 0x0648);
		}

		// class ALandscapeBlueprintCustomBrush : public AActor
		TEST_METHOD(Class__Landscape__LandscapeBlueprintCustomBrush)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeBlueprintCustomBrush, AffectHeightmap, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeBlueprintCustomBrush, AffectWeightmap, 0x0339);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeBlueprintCustomBrush, UnknownData_NYKP, 0x033A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeBlueprintCustomBrush, 0x0340);
		}

		// class ALandscapeBlueprintCustomSimulationBrush : public ALandscapeBlueprintCustomBrush
		TEST_METHOD(Class__Landscape__LandscapeBlueprintCustomSimulationBrush)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeBlueprintCustomSimulationBrush, 0x0340);
		}

		// class ULandscapeComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Landscape__LandscapeComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_FDW6, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, SectionBaseY, 0x057C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, ComponentSizeQuads, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, SubsectionSizeQuads, 0x0584);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, NumSubsections, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_3J19, 0x058C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, OverrideMaterial, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, OverrideHoleMaterial, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, OverrideMaterials, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MaterialInstances, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MaterialInstancesDynamic, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, LODIndexToMaterialIndex, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MaterialIndexToDisabledTessellationMaterial, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, WeightmapLayerAllocations, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, WeightmapTextures, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, XYOffsetmapTexture, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_168X, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, WeightmapScaleBias, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, WeightmapSubsectionOffset, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_RD7C, 0x0634);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, HeightmapScaleBias, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, CachedLocalBox, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, CollisionComponent, 0x066C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, HeightmapTexture, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MapBuildDataId, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, IrrelevantLights, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, CollisionMipLevel, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, SimpleCollisionMipLevel, 0x06B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, NegativeZBoundsExtension, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, PositiveZBoundsExtension, 0x06BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, StaticLightingResolution, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, ForcedLOD, 0x06C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, LODBias, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, StateId, 0x06CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, BakedTextureMaterialGuid, 0x06DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_LQA0, 0x06EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, GIBakedBaseColorTexture, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MobileBlendableLayerMask, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_GMEI, 0x06F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MobileMaterialInterface, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MobileMaterialInterfaces, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MobileWeightmapTextures, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_TA53, 0x0728);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeComponent, 0x0770);
		}

		// class UBTTask_PerformRitual_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTTask_PerformRitual__BTTask_PerformRitual_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PerformRitual_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PerformRitual_C, TargetPointKey, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PerformRitual_C, bPerformSuccess, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PerformRitual_C, UnknownData_QISV, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PerformRitual_C, Cache, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_PerformRitual_C, 0x00F0);
		}

		// class ALandscapeGizmoActor : public AActor
		TEST_METHOD(Class__Landscape__LandscapeGizmoActor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeGizmoActor, 0x0338);
		}

		// class ALandscapeGizmoActiveActor : public ALandscapeGizmoActor
		TEST_METHOD(Class__Landscape__LandscapeGizmoActiveActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeGizmoActiveActor, UnknownData_ICN7, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeGizmoActiveActor, 0x0388);
		}

		// class ULandscapeGizmoRenderComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Landscape__LandscapeGizmoRenderComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGizmoRenderComponent, UnknownData_USLN, 0x0578);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeGizmoRenderComponent, 0x0580);
		}

		// class ULandscapeGrassType : public UObject
		TEST_METHOD(Class__Landscape__LandscapeGrassType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, GrassVarieties, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, UnknownData_WKLP, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, GrassMesh, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, GrassDensity, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, PlacementJitter, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, StartCullDistance, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, EndCullDistance, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, RandomRotation, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, AlignToSurface, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, UnknownData_UEAL, 0x0062);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeGrassType, 0x0068);
		}

		// class ULandscapeHeightfieldCollisionComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Landscape__LandscapeHeightfieldCollisionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, ComponentLayerInfos, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, SectionBaseX, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, SectionBaseY, 0x058C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CollisionSizeQuads, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CollisionScale, 0x0594);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, SimpleCollisionSizeQuads, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, UnknownData_ZHO1, 0x059C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CollisionQuadFlags, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, HeightfieldGuid, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CachedLocalBox, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, RenderComponent, 0x05DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, UnknownData_AM41, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CookedPhysicalMaterials, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, UnknownData_E7U2, 0x0618);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeHeightfieldCollisionComponent, 0x0660);
		}

		// class ULandscapeInfo : public UObject
		TEST_METHOD(Class__Landscape__LandscapeInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, LandscapeActor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, LandscapeGuid, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, ComponentSizeQuads, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, SubsectionSizeQuads, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, ComponentNumSubsections, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, DrawScale, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, UnknownData_BBJH, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, Proxies, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, UnknownData_L0LR, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeInfo, 0x0208);
		}

		// class USlateSettings : public UObject
		TEST_METHOD(Class__Slate__SlateSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateSettings, bExplicitCanvasChildZOrder, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateSettings, UnknownData_LLHR, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateSettings, 0x0038);
		}

		// class USpinBoxWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__SpinBoxWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBoxWidgetStyle, SpinBoxStyle, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpinBoxWidgetStyle, 0x0320);
		}

		// class UTextBlockWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__TextBlockWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlockWidgetStyle, TextBlockStyle, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextBlockWidgetStyle, 0x02A0);
		}

		// class UButtonWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ButtonWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonWidgetStyle, ButtonStyle, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UButtonWidgetStyle, 0x02B0);
		}

		// class UCheckBoxWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__CheckBoxWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBoxWidgetStyle, CheckBoxStyle, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheckBoxWidgetStyle, 0x05B8);
		}

		// class UComboBoxWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ComboBoxWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxWidgetStyle, ComboBoxStyle, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComboBoxWidgetStyle, 0x0410);
		}

		// class UComboButtonWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ComboButtonWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboButtonWidgetStyle, ComboButtonStyle, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComboButtonWidgetStyle, 0x03D8);
		}

		// class UEditableTextBoxWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__EditableTextBoxWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBoxWidgetStyle, EditableTextBoxStyle, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableTextBoxWidgetStyle, 0x0828);
		}

		// class UEditableTextWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__EditableTextWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextWidgetStyle, EditableTextStyle, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableTextWidgetStyle, 0x0250);
		}

		// class UProgressWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ProgressWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressWidgetStyle, ProgressBarStyle, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProgressWidgetStyle, 0x01D8);
		}

		// class UScrollBarWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ScrollBarWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBarWidgetStyle, ScrollBarStyle, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBarWidgetStyle, 0x0508);
		}

		// class ULandscapeInfoMap : public UObject
		TEST_METHOD(Class__Landscape__LandscapeInfoMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfoMap, UnknownData_0E29, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeInfoMap, 0x0088);
		}

		// class UScrollBoxWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ScrollBoxWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxWidgetStyle, ScrollBoxStyle, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBoxWidgetStyle, 0x0260);
		}

		// class ULandscapeLayerInfoObject : public UObject
		TEST_METHOD(Class__Landscape__LandscapeLayerInfoObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, LayerName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, PhysMaterial, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, Hardness, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, LayerUsageDebugColor, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, UnknownData_JVNT, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeLayerInfoObject, 0x0058);
		}

		// class ULandscapeMaterialInstanceConstant : public UMaterialInstanceConstant
		TEST_METHOD(Class__Landscape__LandscapeMaterialInstanceConstant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMaterialInstanceConstant, UnknownData_CQQL, 0x01D1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeMaterialInstanceConstant, 0x01D8);
		}

		// class ULandscapeMeshCollisionComponent : public ULandscapeHeightfieldCollisionComponent
		TEST_METHOD(Class__Landscape__LandscapeMeshCollisionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshCollisionComponent, MeshGuid, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshCollisionComponent, UnknownData_8F9P, 0x0670);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeMeshCollisionComponent, 0x0680);
		}

		// class ALandscapeMeshProxyActor : public AActor
		TEST_METHOD(Class__Landscape__LandscapeMeshProxyActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeMeshProxyActor, LandscapeMeshProxyComponent, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeMeshProxyActor, 0x0340);
		}

		// class ULandscapeMeshProxyComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Landscape__LandscapeMeshProxyComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshProxyComponent, LandscapeGuid, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshProxyComponent, ProxyComponentBases, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshProxyComponent, ProxyLOD, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshProxyComponent, UnknownData_6UPH, 0x0629);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeMeshProxyComponent, 0x0630);
		}

		// class ULandscapeSplinesComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Landscape__LandscapeSplinesComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplinesComponent, ControlPoints, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplinesComponent, Segments, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplinesComponent, CookedForeignMeshComponents, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplinesComponent, UnknownData_JIHS, 0x05A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeSplinesComponent, 0x05B0);
		}

		// class ULandscapeSplineControlPoint : public UObject
		TEST_METHOD(Class__Landscape__LandscapeSplineControlPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, Location, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, Rotation, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, Width, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, SideFalloff, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, EndFalloff, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, UnknownData_8EVN, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, ConnectedSegments, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, Points, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, Bounds, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, UnknownData_MJRQ, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, LocalMeshComponent, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeSplineControlPoint, 0x00A0);
		}

		// class ULandscapeSplineSegment : public UObject
		TEST_METHOD(Class__Landscape__LandscapeSplineSegment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, Connections, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, SplineInfo, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, Points, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, Bounds, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, UnknownData_Z6BR, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, LocalMeshComponents, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeSplineSegment, 0x00B8);
		}

		// class ALandscapeStreamingProxy : public ALandscapeProxy
		TEST_METHOD(Class__Landscape__LandscapeStreamingProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeStreamingProxy, LandscapeActor, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeStreamingProxy, UnknownData_OXNG, 0x0664);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeStreamingProxy, 0x0668);
		}

		// class UMaterialExpressionLandscapeGrassOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeGrassOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeGrassOutput, GrassTypes, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeGrassOutput, 0x0058);
		}

		// class UMaterialExpressionLandscapeLayerBlend : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeLayerBlend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerBlend, Layers, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerBlend, ExpressionGUID, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerBlend, 0x0068);
		}

		// class UMaterialExpressionLandscapeLayerCoords : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeLayerCoords)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingType, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, CustomUVType, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, UnknownData_T0NY, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingScale, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingRotation, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingPanU, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingPanV, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, UnknownData_9954, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerCoords, 0x0060);
		}

		// class UMaterialExpressionLandscapeLayerSample : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeLayerSample)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSample, ParameterName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSample, PreviewWeight, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSample, ExpressionGUID, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSample, UnknownData_K6XR, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerSample, 0x0068);
		}

		// class UMaterialExpressionLandscapeLayerSwitch : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeLayerSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, LayerUsed, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, UnknownData_4YT4, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, LayerNotUsed, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, UnknownData_BG54, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, ParameterName, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, UnknownData_T9G1, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, ExpressionGUID, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, UnknownData_583Q, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerSwitch, 0x0090);
		}

		// class UMaterialExpressionLandscapeLayerWeight : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeLayerWeight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, Base, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, UnknownData_AH12, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, Layer, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, UnknownData_RJYT, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, ParameterName, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, PreviewWeight, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, ConstBase, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, ExpressionGUID, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerWeight, 0x0098);
		}

		// class UMaterialExpressionLandscapeVisibilityMask : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeVisibilityMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeVisibilityMask, ExpressionGUID, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeVisibilityMask, 0x0058);
		}

		// class UChaosSolver : public UObject
		TEST_METHOD(Class__ChaosSolverEngine__ChaosSolver)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosSolver, 0x0030);
		}

		// class AChaosSolverActor : public AActor
		TEST_METHOD(Class__ChaosSolverEngine__ChaosSolverActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, TimeStepMultiplier, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, CollisionIterations, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, PushOutIterations, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, PushOutPairIterations, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, CollisionDataSizeMax, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, CollisionDataTimeWindow, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, DoCollisionDataSpatialHash, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, UnknownData_BM7J, 0x0351);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, CollisionDataSpatialHashRadius, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, MaxCollisionPerCell, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, BreakingDataSizeMax, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, BreakingDataTimeWindow, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, DoBreakingDataSpatialHash, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, UnknownData_B5NQ, 0x0365);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, BreakingDataSpatialHashRadius, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, MaxBreakingPerCell, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, TrailingDataSizeMax, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, TrailingDataTimeWindow, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, TrailingMinSpeedThreshold, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, TrailingMinVolumeThreshold, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, HasFloor, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, UnknownData_68CB, 0x0381);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, FloorHeight, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, SpriteComponent, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, UnknownData_665N, 0x0390);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AChaosSolverActor, 0x0398);
		}

		// class UAnimCustomInstance : public UAnimInstance
		TEST_METHOD(Class__AnimGraphRuntime__AnimCustomInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCustomInstance, UnknownData_OGLO, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCustomInstance, 0x0270);
		}

		// class UAnimSequencerInstance : public UAnimCustomInstance
		TEST_METHOD(Class__AnimGraphRuntime__AnimSequencerInstance)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSequencerInstance, 0x0270);
		}

		// class UAnimNotify_PlayMontageNotify : public UAnimNotify
		TEST_METHOD(Class__AnimGraphRuntime__AnimNotify_PlayMontageNotify)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayMontageNotify, NotifyName, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PlayMontageNotify, 0x0048);
		}

		// class UAnimNotify_PlayMontageNotifyWindow : public UAnimNotifyState
		TEST_METHOD(Class__AnimGraphRuntime__AnimNotify_PlayMontageNotifyWindow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayMontageNotifyWindow, NotifyName, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PlayMontageNotifyWindow, 0x0040);
		}

		// class UKismetAnimationLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AnimGraphRuntime__KismetAnimationLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetAnimationLibrary, 0x0030);
		}

		// class UPlayMontageCallbackProxy : public UObject
		TEST_METHOD(Class__AnimGraphRuntime__PlayMontageCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, OnCompleted, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, OnBlendOut, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, OnInterrupted, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, OnNotifyBegin, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, OnNotifyEnd, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, UnknownData_1QPM, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayMontageCallbackProxy, 0x00B0);
		}

		// class UBTDecorator_IfHaveStaminaLessThenEqual_C : public UBTDecorator_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTDecorator_IfHaveStaminaLessThenEqual__BTDecorator_IfHaveStaminaLessThenEqual_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IfHaveStaminaLessThenEqual_C, Percent, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_IfHaveStaminaLessThenEqual_C, 0x00AC);
		}

		// class UMeshDescription : public UObject
		TEST_METHOD(Class__MeshDescription__MeshDescription)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshDescription, 0x0030);
		}

		// class UAudioCaptureComponent : public USynthComponent
		TEST_METHOD(Class__AudioCapture__AudioCaptureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioCaptureComponent, JitterLatencyFrames, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioCaptureComponent, UnknownData_86JJ, 0x0674);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioCaptureComponent, 0x0720);
		}

		// class UGA_PA_HunterBellePortalNew_C : public UGA_PA_HunterBase_C
		TEST_METHOD(BlueprintGeneratedClass__GA_PA_HunterBellePortalNew__GA_PA_HunterBellePortalNew_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_PA_HunterBellePortalNew_C, UberGraphFrame, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_PA_HunterBellePortalNew_C, MontageStart, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_PA_HunterBellePortalNew_C, MontageEnd, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_PA_HunterBellePortalNew_C, hunter, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_PA_HunterBellePortalNew_C, Survivors, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_PA_HunterBellePortalNew_C, BloodPortal, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_PA_HunterBellePortalNew_C, PerkDistance, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_PA_HunterBellePortalNew_C, UnknownData_U9KF, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_PA_HunterBellePortalNew_C, DirectionCheck, 0x0498);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_PA_HunterBellePortalNew_C, 0x04A8);
		}

		// class UClothingAssetBase : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeInterface__ClothingAssetBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetBase, ImportedFilePath, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetBase, AssetGuid, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingAssetBase, 0x0050);
		}

		// class UClothingSimulationFactory : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeInterface__ClothingSimulationFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingSimulationFactory, 0x0030);
		}

		// class UClothingSimulationInteractor : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeInterface__ClothingSimulationInteractor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingSimulationInteractor, UnknownData_PH7Q, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingSimulationInteractor, 0x0038);
		}

		// class UAnimSharingStateInstance : public UAnimInstance
		TEST_METHOD(Class__AnimationSharing__AnimSharingStateInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingStateInstance, AnimationToPlay, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingStateInstance, PermutationTimeOffset, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingStateInstance, PlayRate, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingStateInstance, bStateBool, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingStateInstance, UnknownData_HVU5, 0x0279);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSharingStateInstance, 0x0290);
		}

		// class UAnimSharingTransitionInstance : public UAnimInstance
		TEST_METHOD(Class__AnimationSharing__AnimSharingTransitionInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingTransitionInstance, FromComponent, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingTransitionInstance, ToComponent, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingTransitionInstance, BlendTime, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingTransitionInstance, bBlendBool, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingTransitionInstance, UnknownData_RISP, 0x027D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSharingTransitionInstance, 0x0280);
		}

		// class UAnimSharingAdditiveInstance : public UAnimInstance
		TEST_METHOD(Class__AnimationSharing__AnimSharingAdditiveInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingAdditiveInstance, BaseComponent, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingAdditiveInstance, AdditiveAnimation, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingAdditiveInstance, Alpha, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingAdditiveInstance, bStateBool, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingAdditiveInstance, UnknownData_VUQJ, 0x027D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSharingAdditiveInstance, 0x0280);
		}

		// class UAnimSharingInstance : public UObject
		TEST_METHOD(Class__AnimationSharing__AnimSharingInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, RegisteredActors, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, UnknownData_KH2P, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, StateProcessor, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, UnknownData_TW09, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, UsedAnimationSequences, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, UnknownData_QGJ5, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, StateEnum, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, SharingActor, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, UnknownData_7YF0, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSharingInstance, 0x0140);
		}

		// class UAnimationSharingManager : public UObject
		TEST_METHOD(Class__AnimationSharing__AnimationSharingManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSharingManager, UnknownData_Q571, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSharingManager, PerSkeletonData, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSharingManager, UnknownData_W5UK, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimationSharingManager, 0x00B8);
		}

		// class UAnimationSharingSetup : public UObject
		TEST_METHOD(Class__AnimationSharing__AnimationSharingSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSharingSetup, SkeletonSetups, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSharingSetup, ScalabilitySettings, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimationSharingSetup, 0x0050);
		}

		// class UAnimationSharingStateProcessor : public UObject
		TEST_METHOD(Class__AnimationSharing__AnimationSharingStateProcessor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSharingStateProcessor, AnimationStateEnum, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimationSharingStateProcessor, 0x0058);
		}

		// class AArchVisCharacter : public ACharacter
		TEST_METHOD(Class__ArchVisCharacter__ArchVisCharacter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AArchVisCharacter, LookUpAxisName, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::AArchVisCharacter, LookUpAtRateAxisName, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::AArchVisCharacter, TurnAxisName, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::AArchVisCharacter, TurnAtRateAxisName, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::AArchVisCharacter, MoveForwardAxisName, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::AArchVisCharacter, MoveRightAxisName, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::AArchVisCharacter, MouseSensitivityScale_Pitch, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AArchVisCharacter, MouseSensitivityScale_Yaw, 0x07AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AArchVisCharacter, 0x07B0);
		}

		// class UArchVisCharMovementComponent : public UCharacterMovementComponent
		TEST_METHOD(Class__ArchVisCharacter__ArchVisCharMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, RotationalAcceleration, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, RotationalDeceleration, 0x074C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, MaxRotationalVelocity, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, MinPitch, 0x0764);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, MaxPitch, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, WalkingFriction, 0x076C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, WalkingSpeed, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, WalkingAcceleration, 0x0774);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, UnknownData_I3GT, 0x0778);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UArchVisCharMovementComponent, 0x0790);
		}

		// class UBTDecorator_IfHaveHPLessThen_C : public UBTDecorator_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTDecorator_IfHaveHPLessThen__BTDecorator_IfHaveHPLessThen_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IfHaveHPLessThen_C, Percent, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_IfHaveHPLessThen_C, 0x00AC);
		}

		// class UStoreManagerComponent_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__StoreManagerComponent__StoreManagerComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreManagerComponent_C, UberGraphFrame, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreManagerComponent_C, OnVirualGoodsResponse, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreManagerComponent_C, WidgetManager, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreManagerComponent_C, CacheProduct, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreManagerComponent_C, OnPurchaseFinish, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreManagerComponent_C, OnDirectStoreRefresh, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreManagerComponent_C, OnTokenStoreRefresh, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreManagerComponent_C, CacheQuantity, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreManagerComponent_C, CacheCurrency, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreManagerComponent_C, CacheStoreType, 0x01FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreManagerComponent_C, UnknownData_FX3I, 0x01FE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreManagerComponent_C, CacheOrderID, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreManagerComponent_C, CacheTransactionID, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreManagerComponent_C, CachePrice, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStoreManagerComponent_C, 0x0224);
		}

		// class UGE_PP_SurvivorSilverLight_C : public UGE_PP_Aurabase_C
		TEST_METHOD(BlueprintGeneratedClass__GE_PP_SurvivorSilverLight__GE_PP_SurvivorSilverLight_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_PP_SurvivorSilverLight_C, 0x0650);
		}

		// class UWheeledVehicleMovementComponent : public UPawnMovementComponent
		TEST_METHOD(Class__PhysXVehicles__WheeledVehicleMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_ER76, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_ETTM, 0x0191);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_ZAQ1, 0x0195);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, Mass, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_SXDX, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, WheelSetups, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, DragCoefficient, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, ChassisWidth, 0x01B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, ChassisHeight, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, DragArea, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, EstimatedMaxEngineSpeed, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, MaxEngineRPM, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, DebugDragMagnitude, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, InertiaTensorScale, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, MinNormalizedTireLoad, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, MinNormalizedTireLoadFiltered, 0x01DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, MaxNormalizedTireLoad, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, MaxNormalizedTireLoadFiltered, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, ThresholdLongitudinalSpeed, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, LowForwardSpeedSubStepCount, 0x01EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, HighForwardSpeedSubStepCount, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_2YV1, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, Wheels, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_LAQ0, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RVOAvoidanceRadius, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RVOAvoidanceHeight, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, AvoidanceConsiderationRadius, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RVOSteeringStep, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RVOThrottleStep, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, AvoidanceUID, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, AvoidanceGroup, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, GroupsToAvoid, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, GroupsToIgnore, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, AvoidanceWeight, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, PendingLaunchVelocity, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, ReplicatedState, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_7D7X, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RawSteeringInput, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RawThrottleInput, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RawBrakeInput, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, SteeringInput, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, ThrottleInput, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, BrakeInput, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, HandbrakeInput, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, IdleBrakeInput, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, StopThreshold, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, WrongDirectionThreshold, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, ThrottleInputRate, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, BrakeInputRate, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, HandbrakeInputRate, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, SteeringInputRate, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_PUXE, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, OverrideController, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWheeledVehicleMovementComponent, 0x02E0);
		}

		// class USimpleWheeledVehicleMovementComponent : public UWheeledVehicleMovementComponent
		TEST_METHOD(Class__PhysXVehicles__SimpleWheeledVehicleMovementComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USimpleWheeledVehicleMovementComponent, 0x02E0);
		}

		// class UTireConfig : public UDataAsset
		TEST_METHOD(Class__PhysXVehicles__TireConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireConfig, FrictionScale, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireConfig, UnknownData_Z56D, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireConfig, TireFrictionScales, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireConfig, UnknownData_AG9A, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTireConfig, 0x0058);
		}

		// class UVehicleAnimInstance : public UAnimInstance
		TEST_METHOD(Class__PhysXVehicles__VehicleAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleAnimInstance, UnknownData_3B6F, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleAnimInstance, UnknownData_W57E, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleAnimInstance, WheeledVehicleMovementComponent, 0x09A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleAnimInstance, UnknownData_NLZ5, 0x09A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVehicleAnimInstance, 0x09B0);
		}

		// class UVehicleWheel : public UObject
		TEST_METHOD(Class__PhysXVehicles__VehicleWheel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, CollisionMesh, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, bDontCreateShape, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, bAutoAdjustCollisionSize, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, UnknownData_DR20, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, Offset, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, ShapeRadius, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, ShapeWidth, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, Mass, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DampingRate, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SteerAngle, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, bAffectedByHandbrake, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, UnknownData_90XU, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, TireType, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, TireConfig, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, LatStiffMaxLoad, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, LatStiffValue, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, LongStiffValue, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SuspensionForceOffset, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SuspensionMaxRaise, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SuspensionMaxDrop, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SuspensionNaturalFrequency, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SuspensionDampingRatio, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SweepType, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, UnknownData_UGKX, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, MaxBrakeTorque, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, MaxHandBrakeTorque, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, UnknownData_YCPH, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, VehicleSim, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, WheelIndex, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugLongSlip, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugLatSlip, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugNormalizedTireLoad, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, UnknownData_0OPX, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugWheelTorque, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugLongForce, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugLatForce, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, Location, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, OldLocation, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, Velocity, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, UnknownData_X6M1, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVehicleWheel, 0x00F8);
		}

		// class AWheeledVehicle : public APawn
		TEST_METHOD(Class__PhysXVehicles__WheeledVehicle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheeledVehicle, Mesh, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheeledVehicle, VehicleMovement, 0x03A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWheeledVehicle, 0x03A8);
		}

		// class UWheeledVehicleMovementComponent4W : public UWheeledVehicleMovementComponent
		TEST_METHOD(Class__PhysXVehicles__WheeledVehicleMovementComponent4W)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent4W, EngineSetup, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent4W, DifferentialSetup, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent4W, AckermannAccuracy, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent4W, TransmissionSetup, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent4W, SteeringCurve, 0x03D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWheeledVehicleMovementComponent4W, 0x0458);
		}

		// class UOptionManagerComponent_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__OptionManagerComponent__OptionManagerComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionManagerComponent_C, UberGraphFrame, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionManagerComponent_C, SaveGameManager, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionManagerComponent_C, OnApplyGameSettings, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionManagerComponent_C, Cache, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOptionManagerComponent_C, 0x0138);
		}

		// class UWidget_StoreItem_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_StoreItem__Widget_StoreItem_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreItem_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreItem_C, Image_200, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreItem_C, Widget_ButtonChoiceTab, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreItem_C, Widget_StoreGrid_Items, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreItem_C, Widget_StoreGrid_Profiles, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreItem_C, Widget_StoreGrid_Stickers, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreItem_C, WidgetSwitcher_Panel, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreItem_C, WidgetManager, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreItem_C, OnChioce, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreItem_C, Items, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreItem_C, EndDate, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_StoreItem_C, 0x02B8);
		}

		// class UARBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AugmentedReality__ARBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARBlueprintLibrary, 0x0030);
		}

		// class UARTraceResultLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AugmentedReality__ARTraceResultLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTraceResultLibrary, 0x0030);
		}

		// class UARBaseAsyncTaskBlueprintProxy : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__AugmentedReality__ARBaseAsyncTaskBlueprintProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARBaseAsyncTaskBlueprintProxy, UnknownData_QGD0, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARBaseAsyncTaskBlueprintProxy, 0x0058);
		}

		// class UARSaveWorldAsyncTaskBlueprintProxy : public UARBaseAsyncTaskBlueprintProxy
		TEST_METHOD(Class__AugmentedReality__ARSaveWorldAsyncTaskBlueprintProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSaveWorldAsyncTaskBlueprintProxy, OnSuccess, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSaveWorldAsyncTaskBlueprintProxy, OnFailed, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSaveWorldAsyncTaskBlueprintProxy, UnknownData_R4ON, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARSaveWorldAsyncTaskBlueprintProxy, 0x0088);
		}

		// class UARGetCandidateObjectAsyncTaskBlueprintProxy : public UARBaseAsyncTaskBlueprintProxy
		TEST_METHOD(Class__AugmentedReality__ARGetCandidateObjectAsyncTaskBlueprintProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARGetCandidateObjectAsyncTaskBlueprintProxy, OnSuccess, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARGetCandidateObjectAsyncTaskBlueprintProxy, OnFailed, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARGetCandidateObjectAsyncTaskBlueprintProxy, UnknownData_N7AI, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARGetCandidateObjectAsyncTaskBlueprintProxy, 0x00A0);
		}

		// class UARLightEstimate : public UObject
		TEST_METHOD(Class__AugmentedReality__ARLightEstimate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARLightEstimate, 0x0030);
		}

		// class UARBasicLightEstimate : public UARLightEstimate
		TEST_METHOD(Class__AugmentedReality__ARBasicLightEstimate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARBasicLightEstimate, AmbientIntensityLumens, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARBasicLightEstimate, AmbientColorTemperatureKelvin, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARBasicLightEstimate, AmbientColor, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARBasicLightEstimate, 0x0048);
		}

		// class UARPin : public UObject
		TEST_METHOD(Class__AugmentedReality__ARPin)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, TrackedGeometry, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, PinnedComponent, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, LocalToTrackingTransform, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, LocalToAlignedTrackingTransform, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, TrackingState, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, UnknownData_HDOU, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, OnARTrackingStateChanged, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, OnARTransformUpdated, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, UnknownData_RYPB, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARPin, 0x00F0);
		}

		// class UARSessionConfig : public UDataAsset
		TEST_METHOD(Class__AugmentedReality__ARSessionConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, WorldAlignment, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, SessionType, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, PlaneDetectionMode, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bHorizontalPlaneDetection, 0x003B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bVerticalPlaneDetection, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bEnableAutoFocus, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, LightEstimationMode, 0x003E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, FrameSyncMode, 0x003F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bEnableAutomaticCameraOverlay, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bEnableAutomaticCameraTracking, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bResetCameraTracking, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bResetTrackedObjects, 0x0043);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, UnknownData_8TGM, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, CandidateImages, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, MaxNumSimultaneousImagesTracked, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, EnvironmentCaptureProbeType, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, UnknownData_3Z8J, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, WorldMapData, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, CandidateObjects, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, DesiredVideoFormat, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, FaceTrackingDirection, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, FaceTrackingUpdate, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, UnknownData_OU1K, 0x008E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, SerializedARCandidateImageDatabase, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARSessionConfig, 0x00A0);
		}

		// class AARSharedWorldGameMode : public AGameMode
		TEST_METHOD(Class__AugmentedReality__ARSharedWorldGameMode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameMode, BufferSizePerChunk, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameMode, UnknownData_N1RY, 0x0424);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AARSharedWorldGameMode, 0x0488);
		}

		// class AARSharedWorldGameState : public AGameState
		TEST_METHOD(Class__AugmentedReality__ARSharedWorldGameState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameState, PreviewImageData, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameState, ARWorldData, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameState, PreviewImageBytesTotal, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameState, ARWorldBytesTotal, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameState, PreviewImageBytesDelivered, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameState, ARWorldBytesDelivered, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameState, UnknownData_3G3T, 0x03C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AARSharedWorldGameState, 0x03D0);
		}

		// class AARSharedWorldPlayerController : public APlayerController
		TEST_METHOD(Class__AugmentedReality__ARSharedWorldPlayerController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldPlayerController, UnknownData_6V58, 0x0690);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AARSharedWorldPlayerController, 0x0698);
		}

		// class AARSkyLight : public ASkyLight
		TEST_METHOD(Class__AugmentedReality__ARSkyLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSkyLight, CaptureProbe, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSkyLight, UnknownData_7PWL, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AARSkyLight, 0x0358);
		}

		// class UARTexture : public UTexture
		TEST_METHOD(Class__AugmentedReality__ARTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTexture, TextureType, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTexture, UnknownData_74DX, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTexture, Timestamp, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTexture, ExternalTextureGuid, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTexture, Size, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTexture, 0x00E0);
		}

		// class UARTextureCameraImage : public UARTexture
		TEST_METHOD(Class__AugmentedReality__ARTextureCameraImage)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTextureCameraImage, 0x00E0);
		}

		// class UARTextureCameraDepth : public UARTexture
		TEST_METHOD(Class__AugmentedReality__ARTextureCameraDepth)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTextureCameraDepth, DepthQuality, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTextureCameraDepth, DepthAccuracy, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTextureCameraDepth, bIsTemporallySmoothed, 0x00E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTextureCameraDepth, UnknownData_QHF8, 0x00E3);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTextureCameraDepth, 0x00E8);
		}

		// class UAREnvironmentCaptureProbeTexture : public UTextureCube
		TEST_METHOD(Class__AugmentedReality__AREnvironmentCaptureProbeTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbeTexture, TextureType, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbeTexture, UnknownData_84TM, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbeTexture, Timestamp, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbeTexture, ExternalTextureGuid, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbeTexture, Size, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAREnvironmentCaptureProbeTexture, 0x0138);
		}

		// class UARTraceResultDummy : public UObject
		TEST_METHOD(Class__AugmentedReality__ARTraceResultDummy)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTraceResultDummy, 0x0030);
		}

		// class UARTrackedGeometry : public UObject
		TEST_METHOD(Class__AugmentedReality__ARTrackedGeometry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, LocalToTrackingTransform, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, LocalToAlignedTrackingTransform, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, TrackingState, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, UnknownData_3IVR, 0x0091);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTrackedGeometry, 0x00C8);
		}

		// class UARPlaneGeometry : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__ARPlaneGeometry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPlaneGeometry, Center, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPlaneGeometry, Extent, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPlaneGeometry, UnknownData_P03B, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPlaneGeometry, SubsumedBy, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPlaneGeometry, UnknownData_N486, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARPlaneGeometry, 0x0100);
		}

		// class UARTrackedPoint : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__ARTrackedPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedPoint, UnknownData_2O54, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTrackedPoint, 0x00D0);
		}

		// class UARTrackedImage : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__ARTrackedImage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedImage, UnknownData_TL2Q, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedImage, DetectedImage, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedImage, EstimatedSize, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTrackedImage, 0x00E0);
		}

		// class UARFaceGeometry : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__ARFaceGeometry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceGeometry, LookAtTarget, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceGeometry, bIsTracked, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceGeometry, UnknownData_014Z, 0x00D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceGeometry, BlendShapes, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceGeometry, UnknownData_ZEZN, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARFaceGeometry, 0x01C0);
		}

		// class UAREnvironmentCaptureProbe : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__AREnvironmentCaptureProbe)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbe, UnknownData_QL5V, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbe, UnknownData_EACW, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbe, EnvironmentCaptureTexture, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAREnvironmentCaptureProbe, 0x00E0);
		}

		// class UARTrackedObject : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__ARTrackedObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedObject, DetectedObject, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTrackedObject, 0x00D0);
		}

		// class UARTypesDummyClass : public UObject
		TEST_METHOD(Class__AugmentedReality__ARTypesDummyClass)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTypesDummyClass, 0x0030);
		}

		// class UARCandidateImage : public UDataAsset
		TEST_METHOD(Class__AugmentedReality__ARCandidateImage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateImage, CandidateTexture, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateImage, FriendlyName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateImage, Width, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateImage, Height, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateImage, Orientation, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateImage, UnknownData_MN67, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARCandidateImage, 0x0060);
		}

		// class UARCandidateObject : public UDataAsset
		TEST_METHOD(Class__AugmentedReality__ARCandidateObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateObject, CandidateObjectData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateObject, FriendlyName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateObject, BoundingBox, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateObject, UnknownData_TNXL, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARCandidateObject, 0x0078);
		}

		// class UWidget_MainMenuGS_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_MainMenuGS__Widget_MainMenuGS_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGS_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGS_C, Button_Create, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGS_C, Button_Join, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGS_C, Button_RemoveProfile, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGS_C, Button_Removeskin, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGS_C, Button_Removestickers, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGS_C, Button_ReportPlayer, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGS_C, CheckBox_IsLocal, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGS_C, Debug_Page, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGS_C, EditableText_2, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGS_C, EditableText_3, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGS_C, EditableText_254, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGS_C, EditableText_AccessKeyID, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGS_C, EditableText_Alias, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGS_C, EditableText_SecretID, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGS_C, EditableText_Session, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGS_C, FG, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGS_C, HorizontalBox_Local, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGS_C, HorizontalBoxDebugIPLOGIN, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGS_C, HorizontalBoxGameliftIPLOGIN, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGS_C, Image_12, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGS_C, Image_352, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGS_C, IP_EditText, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGS_C, JoinBTN, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGS_C, Panel, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGS_C, PartyPlayer, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGS_C, PartyPlayer_6, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGS_C, PartyPlayer_7, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGS_C, PartyPlayer_8, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGS_C, Port_EditText, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGS_C, QuestDebugTExt, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGS_C, Text_Join, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGS_C, TextBlock_1, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGS_C, TextBlock_2, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGS_C, TextBlock_3, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGS_C, TextBlock_4, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGS_C, TextBlock_1Join, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGS_C, UMG_DebugMainMenu, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGS_C, Widget_Button_debug_1, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGS_C, Widget_Button_debug_2, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGS_C, Widget_Button_debug_3, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGS_C, Widget_CustomizePanel, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGS_C, Widget_Debug_CustomMatch, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGS_C, Widget_LootboxPanel, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGS_C, Widget_Mainpanel, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGS_C, Widget_MenubarPanel, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGS_C, Widget_PlayerProfile, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGS_C, Widget_PlaymodePanel, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGS_C, Widget_ProfilePanel, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGS_C, Widget_RoyalPass, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGS_C, Widget_SettingPanel, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGS_C, Widget_StorePanel, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGS_C, Widget_WeeklyQuestPanel, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGS_C, WidgetSwitcher_Main, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGS_C, MainMenuGameMode_REF, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGS_C, PreviewClientActor, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGS_C, MatchMaking_REF, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGS_C, Widget_Manager, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGS_C, ButtonTextCache, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGS_C, ClickRecently, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGS_C, bBlockMoveMenu, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGS_C, UnknownData_JN15, 0x0431);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGS_C, MemberMsgDebug, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGS_C, MemberTextBox, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGS_C, IsLobbyReady, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGS_C, LobbyCreatedDelayOffset, 0x0459);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGS_C, UnknownData_3QFG, 0x045A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGS_C, LobbyID, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGS_C, CacheWidget, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGS_C, Quests, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_MainMenuGS_C, 0x0478);
		}

		// class UWidget_LootboxPanel_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_Lootboxpanel__Widget_LootboxPanel_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxPanel_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxPanel_C, ShowItemList, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxPanel_C, Begin, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxPanel_C, ShowConfirm, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxPanel_C, CanvasToggle, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxPanel_C, CanvasPanel_Debug, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxPanel_C, Image_1, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxPanel_C, LootboxItemListPanel, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxPanel_C, Overlay, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxPanel_C, Text_Setting, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxPanel_C, Widget_Button_ButLootBox, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxPanel_C, Widget_Button_GrantCurrencyCoin, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxPanel_C, Widget_Button_GrantCurrencyGem, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxPanel_C, Widget_Button_LDBack, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxPanel_C, Widget_Button_LDConfirm, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxPanel_C, Widget_Button_LootboxStore, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxPanel_C, Widget_Button_LootboxStore_C_1, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxPanel_C, Widget_ButtonChoice, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxPanel_C, Widget_LootboxItemList, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxPanel_C, Widget_LootboxOpen, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxPanel_C, Widget_TextWithInputImage_C_2, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxPanel_C, MainMenuGameMode_REF, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxPanel_C, OnBack, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxPanel_C, WidgetManager, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxPanel_C, IsLootBoxBusy, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxPanel_C, UnknownData_OF94, 0x0311);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxPanel_C, LS_Lootbox, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxPanel_C, LSP_LootBox, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxPanel_C, IsMouseDown, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxPanel_C, UnknownData_VDYB, 0x0329);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxPanel_C, LootProgress, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxPanel_C, LootBoxObject, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxPanel_C, OnFindMatch, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxPanel_C, OnItemStore, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxPanel_C, LS_BeginPanel, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxPanel_C, LSP_BeginPanel, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxPanel_C, CurrentLootbox, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxPanel_C, UnknownData_EIVT, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxPanel_C, OnProfile, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxPanel_C, bIsOnLootdropFocus, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxPanel_C, UnknownData_LH2Y, 0x0381);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxPanel_C, OnLootdropBack, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxPanel_C, bIsLootboxSuccess, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxPanel_C, UnknownData_OQ85, 0x0399);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxPanel_C, Lootbox_loop, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxPanel_C, VolumeCache, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxPanel_C, bIsPressed, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxPanel_C, bIsShowPreviewList, 0x03AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxPanel_C, UnknownData_INJQ, 0x03AE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxPanel_C, Amount, 0x03B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_LootboxPanel_C, 0x03B4);
		}

		// class UGE_Buff_SilverLight_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Buff_SilverLight__GE_Buff_SilverLight_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Buff_SilverLight_C, 0x05F8);
		}

		// class UIStoreProduct_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__IStoreProduct__IStoreProduct_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIStoreProduct_C, 0x0030);
		}

		// class UWidget_ProfilePanel_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_ProfilePanel__Widget_ProfilePanel_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ProfilePanel_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ProfilePanel_C, BeginDistortion, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ProfilePanel_C, Loop, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ProfilePanel_C, BeginPanel, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ProfilePanel_C, BG_Blur, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ProfilePanel_C, BG_Line, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ProfilePanel_C, BG_Paper, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ProfilePanel_C, FG1, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ProfilePanel_C, FG2, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ProfilePanel_C, FG3, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ProfilePanel_C, FG4, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ProfilePanel_C, FG5, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ProfilePanel_C, FG6, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ProfilePanel_C, FG7, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ProfilePanel_C, Image_606, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ProfilePanel_C, Noise, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ProfilePanel_C, ProfileCanvas, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ProfilePanel_C, RecordsCanvas, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ProfilePanel_C, RetainerBox_1, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ProfilePanel_C, StickerCanvas, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ProfilePanel_C, Text_Profile, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ProfilePanel_C, Widget_Button_Profile, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ProfilePanel_C, Widget_Button_Record, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ProfilePanel_C, Widget_Button_Sticker, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ProfilePanel_C, WidgetSwitcher, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ProfilePanel_C, OnExit, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ProfilePanel_C, WidgetManager, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ProfilePanel_C, IsWidgetActive, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ProfilePanel_C, UnknownData_7P5B, 0x0329);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ProfilePanel_C, OnFindMatch, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ProfilePanel_C, OnStore, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ProfilePanel_C, OnLootbox, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ProfilePanel_C, OnSetting, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ProfilePanel_C, MenuIndex, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_ProfilePanel_C, 0x0374);
		}

		// class UWidget_MatchFound_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_MatchFound__Widget_MatchFound_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MatchFound_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MatchFound_C, Begin, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MatchFound_C, Background, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MatchFound_C, ConfirmBox, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MatchFound_C, DetailText, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MatchFound_C, TimerText, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MatchFound_C, TitleTextBox, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MatchFound_C, Widget_Button_ConfirmOnly, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MatchFound_C, ConfirmEventDispatcher, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MatchFound_C, DefaultAcceptTimeOut, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MatchFound_C, AcceptTimeOut, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MatchFound_C, IsActive, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_MatchFound_C, 0x02A1);
		}

		// class UWidget_RoleSelector_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_RoleSelector__Widget_RoleSelector_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RoleSelector_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RoleSelector_C, BG, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RoleSelector_C, Widget_Button_ToHunter, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RoleSelector_C, Widget_Button_ToSpectator, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RoleSelector_C, Widget_Button_ToSurvivor, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RoleSelector_C, OnClickedToHunter, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RoleSelector_C, OnClickedToSurvivor, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RoleSelector_C, OnClickedToSpectator, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_RoleSelector_C, 0x02A0);
		}

		// class UClothingAssetCustomData : public UObject
		TEST_METHOD(Class__ClothingSystemRuntime__ClothingAssetCustomData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingAssetCustomData, 0x0030);
		}

		// class UClothingAsset : public UClothingAssetBase
		TEST_METHOD(Class__ClothingSystemRuntime__ClothingAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAsset, PhysicsAsset, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAsset, ClothConfig, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAsset, UnknownData_HN72, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAsset, LODData, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAsset, LodMap, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAsset, UsedBoneNames, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAsset, UsedBoneIndices, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAsset, ReferenceBoneIndex, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAsset, UnknownData_TR3C, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAsset, CustomData, 0x0178);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingAsset, 0x0180);
		}

		// class UClothingSimulationFactoryNv : public UClothingSimulationFactory
		TEST_METHOD(Class__ClothingSystemRuntime__ClothingSimulationFactoryNv)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingSimulationFactoryNv, 0x0030);
		}

		// class UClothingSimulationInteractorNv : public UClothingSimulationInteractor
		TEST_METHOD(Class__ClothingSystemRuntime__ClothingSimulationInteractorNv)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingSimulationInteractorNv, UnknownData_27XC, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingSimulationInteractorNv, 0x0048);
		}

		// class UWidget_LobbyPlayerStatusIcon_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_LobbyPlayerStatusIcon__Widget_LobbyPlayerStatusIcon_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LobbyPlayerStatusIcon_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LobbyPlayerStatusIcon_C, PlayerStatusIcon, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LobbyPlayerStatusIcon_C, Status, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LobbyPlayerStatusIcon_C, Role, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LobbyPlayerStatusIcon_C, UnknownData_HFW2, 0x025A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LobbyPlayerStatusIcon_C, SurvivorIcon, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LobbyPlayerStatusIcon_C, HunterIcon, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LobbyPlayerStatusIcon_C, SpectatorIcon, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_LobbyPlayerStatusIcon_C, 0x0278);
		}

		// class UStickerImage_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__StickerImage__StickerImage_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStickerImage_C, Image_BG, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStickerImage_C, Image_Sticker, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStickerImage_C, Img_Equipped, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStickerImage_C, DragOffset, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStickerImage_C, DraggedWidget, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStickerImage_C, InventoryData, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStickerImage_C, OnStickerRequestPurchase, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStickerImage_C, Enable, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStickerImage_C, 0x0351);
		}

		// class UWidget_ItemSlotLootbox_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_ItemSlotLootbox__Widget_ItemSlotLootbox_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemSlotLootbox_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemSlotLootbox_C, Button_Profile, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemSlotLootbox_C, HorizontalBox_2, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemSlotLootbox_C, Image_1, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemSlotLootbox_C, Image_BG, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemSlotLootbox_C, Image_Border, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemSlotLootbox_C, Image_Product, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemSlotLootbox_C, Report_Button, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemSlotLootbox_C, Text_Rate, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemSlotLootbox_C, Widget_Name, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemSlotLootbox_C, Widget_Rarity, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemSlotLootbox_C, Widget_Text_Index, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemSlotLootbox_C, Widget_Type, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemSlotLootbox_C, Widget_TypeHead, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemSlotLootbox_C, OnClick, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemSlotLootbox_C, Item, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemSlotLootbox_C, WidgetManager, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemSlotLootbox_C, SelectNull, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemSlotLootbox_C, UnknownData_BVBW, 0x03A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemSlotLootbox_C, CurrentTexture, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemSlotLootbox_C, PerkSlot, 0x03B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_ItemSlotLootbox_C, 0x03B4);
		}

		// class UGE_CooldownSetByCaller_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_CooldownSetByCaller__GE_CooldownSetByCaller_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_CooldownSetByCaller_C, 0x05F8);
		}

		// class UOptionAudioSaveGame_C : public USaveGame
		TEST_METHOD(BlueprintGeneratedClass__OptionAudioSaveGame__OptionAudioSaveGame_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionAudioSaveGame_C, UberGraphFrame, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionAudioSaveGame_C, CurrentValue, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionAudioSaveGame_C, DefualtValue, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOptionAudioSaveGame_C, 0x00B0);
		}

		// class UGameLiftServerFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__GameLiftServerSDK__GameLiftServerFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameLiftServerFunctionLibrary, 0x0030);
		}

		// class UProcessParameters : public UObject
		TEST_METHOD(Class__GameLiftServerSDK__ProcessParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProcessParameters, Port, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProcessParameters, UnknownData_U1DB, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProcessParameters, LogPaths, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProcessParameters, 0x0048);
		}

		// class UServerHelper : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__GameLiftServerSDK__ServerHelper)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UServerHelper, 0x0030);
		}

		// class UGameLibrary_C : public UBlueprintFunctionLibrary
		TEST_METHOD(BlueprintGeneratedClass__GameLibrary__GameLibrary_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameLibrary_C, 0x0030);
		}

		// class UAnnouncementSaveGame_C : public USaveGame
		TEST_METHOD(BlueprintGeneratedClass__AnnouncementSaveGame__AnnouncementSaveGame_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncementSaveGame_C, UberGraphFrame, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncementSaveGame_C, CurrentValue, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncementSaveGame_C, DefualtValue, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnnouncementSaveGame_C, 0x0070);
		}

		// class UGameAnalytics : public UObject
		TEST_METHOD(Class__GameAnalytics__GameAnalytics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameAnalytics, 0x0030);
		}

		// class UAnalyticsBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AnalyticsBlueprintLibrary__AnalyticsBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnalyticsBlueprintLibrary, 0x0030);
		}

		// class UWidget_RoyalPass_Item_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_RoyalPass_Item__Widget_RoyalPass_Item_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RoyalPass_Item_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RoyalPass_Item_C, Button_Free, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RoyalPass_Item_C, Button_Premium, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RoyalPass_Item_C, ClaimableFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RoyalPass_Item_C, Free, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RoyalPass_Item_C, Free_BG, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RoyalPass_Item_C, Free_Name, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RoyalPass_Item_C, FreeClaimedPanel, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RoyalPass_Item_C, FreeProductPanel, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RoyalPass_Item_C, Icon_Lock, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RoyalPass_Item_C, Image_Free_RarityBG, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RoyalPass_Item_C, Image_FreeClaimed, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RoyalPass_Item_C, Image_FreeClaimedBG, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RoyalPass_Item_C, Image_LebelBG, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RoyalPass_Item_C, Image_Pre_RarityBG, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RoyalPass_Item_C, Image_PreClaimed, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RoyalPass_Item_C, Image_PreClamimedBG, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RoyalPass_Item_C, Item_Free_BG, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RoyalPass_Item_C, Item_Free_Frame, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RoyalPass_Item_C, Item_Free_Product, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RoyalPass_Item_C, Item_Pre_BG, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RoyalPass_Item_C, Item_Pre_Frame, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RoyalPass_Item_C, Item_Pre_Product, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RoyalPass_Item_C, Level_text, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RoyalPass_Item_C, Pre_BG, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RoyalPass_Item_C, PreClaimedPanel, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RoyalPass_Item_C, Premium, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RoyalPass_Item_C, Premium_Name, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RoyalPass_Item_C, PremiumContent, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RoyalPass_Item_C, PreProductPanel, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RoyalPass_Item_C, Name, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RoyalPass_Item_C, bCanGetReward, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RoyalPass_Item_C, bIsPremium, 0x0349);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RoyalPass_Item_C, UnknownData_NS2F, 0x034A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RoyalPass_Item_C, Widget_ItemPreview, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RoyalPass_Item_C, WidgetManager, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_RoyalPass_Item_C, 0x0360);
		}

		// class UNS_PerkActive_C : public UAnimNotifyState
		TEST_METHOD(BlueprintGeneratedClass__NS_PerkActive__NS_PerkActive_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNS_PerkActive_C, Tag, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNS_PerkActive_C, 0x0040);
		}

		// class UWidget_Text_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_Text__Widget_Text_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Text_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Text_C, ScaleBox_1, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Text_C, TextBlock_2, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Text_C, Text, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Text_C, bUpperCase, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Text_C, UnknownData_PR5W, 0x0279);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Text_C, FontSize, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Text_C, Font, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Text_C, Justification, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Text_C, AutoWrapText, 0x02D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Text_C, Stretch, 0x02D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Text_C, StretchDirection, 0x02D3);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_Text_C, 0x02D4);
		}

		// class UCat_Lobby_ABP_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Cat_Lobby_ABP__Cat_Lobby_ABP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCat_Lobby_ABP_C, UnknownData_VNKX, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCat_Lobby_ABP_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCat_Lobby_ABP_C, AnimGraphNode_Root_FBDF7BE0412C6D9531DF75A4B81D85B9, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCat_Lobby_ABP_C, AnimGraphNode_TransitionResult_A3C0D14F48175ABC89E667ADDB7B8F9E, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCat_Lobby_ABP_C, AnimGraphNode_TransitionResult_9F7EA8B24AF5E0D0C4A552BDFF88D33A, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCat_Lobby_ABP_C, AnimGraphNode_TransitionResult_754E03A1454F97288B9C7A84F63F27AD, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCat_Lobby_ABP_C, AnimGraphNode_TransitionResult_C1E5A9BC417D7EA2E0DF55A9C70ED55D, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCat_Lobby_ABP_C, AnimGraphNode_TransitionResult_613BDF97404CCE46096D7E8004B6EA21, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCat_Lobby_ABP_C, AnimGraphNode_TransitionResult_8C167735420DE6A7379B85A788C70EF3, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCat_Lobby_ABP_C, AnimGraphNode_TransitionResult_BE61E05D4E8447049CAC2CB06E7551FE, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCat_Lobby_ABP_C, AnimGraphNode_SequencePlayer_01B27FFE49B09ADD960B168716C5C54F, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCat_Lobby_ABP_C, AnimGraphNode_StateResult_D3FD67DB4EF5EDA52C69F0A5BCA99E91, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCat_Lobby_ABP_C, AnimGraphNode_SequencePlayer_C2DF38C04CADC5891F8ABAB5E982E2D1, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCat_Lobby_ABP_C, AnimGraphNode_StateResult_BF461EA9432418954F4A11A73E30852C, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCat_Lobby_ABP_C, AnimGraphNode_StateMachine_649687AF405312D78248BD9E37274468, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCat_Lobby_ABP_C, AnimGraphNode_StateResult_3DCD75864896A8778D5E6789D2067824, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCat_Lobby_ABP_C, AnimGraphNode_SequencePlayer_3184C4F3490FC2E7547A8E9237627EBE, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCat_Lobby_ABP_C, AnimGraphNode_StateResult_FD7920A643E17A18E6D2E3B27DE26852, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCat_Lobby_ABP_C, AnimGraphNode_TransitionResult_FF4095BD436915EF9B24A5B95AA1EACE, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCat_Lobby_ABP_C, AnimGraphNode_TransitionResult_404E2C884A790E5BBE55C797993C45F1, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCat_Lobby_ABP_C, AnimGraphNode_SequencePlayer_7F8C92CD44935CC1270F65BB1326F606, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCat_Lobby_ABP_C, AnimGraphNode_StateResult_0EEB6B5E4456DDD5B0A708972B40E505, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCat_Lobby_ABP_C, AnimGraphNode_SequencePlayer_1FE5838449734523A609228B78D6663C, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCat_Lobby_ABP_C, AnimGraphNode_StateResult_8F5B6993467047C41C10E59FE66045F1, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCat_Lobby_ABP_C, AnimGraphNode_StateMachine_3036B513451B2CC85569FBAD8EEC68CA, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCat_Lobby_ABP_C, AnimGraphNode_StateResult_D72B8AA54CCD80E7FF5819A6D925CA0B, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCat_Lobby_ABP_C, AnimGraphNode_SequencePlayer_1A3E088F49655297AECD3E96A54062AE, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCat_Lobby_ABP_C, AnimGraphNode_StateResult_54570CBB4BE5FBC2B072549C9B0028AC, 0x0918);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCat_Lobby_ABP_C, AnimGraphNode_StateResult_7BBA09C9419F5D9190836AB550007D8B, 0x0938);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCat_Lobby_ABP_C, AnimGraphNode_StateMachine_8CAFBAD847FFA38EC267BFAC6B0A3BFD, 0x0958);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCat_Lobby_ABP_C, IsReady, 0x0A08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCat_Lobby_ABP_C, UnknownData_KIG4, 0x0A09);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCat_Lobby_ABP_C, LobbyActor, 0x0A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCat_Lobby_ABP_C, IsReadyDebug, 0x0A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCat_Lobby_ABP_C, ActState, 0x0A19);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCat_Lobby_ABP_C, 0x0A1A);
		}

		// class UGE_PP_SurvivorBerserker_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_PP_SurvivorBerserker__GE_PP_SurvivorBerserker_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_PP_SurvivorBerserker_C, 0x05F8);
		}

		// class UAppleVisionDetectFacesAsyncTaskBlueprintProxy : public UObject
		TEST_METHOD(Class__AppleVision__AppleVisionDetectFacesAsyncTaskBlueprintProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleVisionDetectFacesAsyncTaskBlueprintProxy, UnknownData_L9YZ, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleVisionDetectFacesAsyncTaskBlueprintProxy, OnSuccess, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleVisionDetectFacesAsyncTaskBlueprintProxy, OnFailure, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleVisionDetectFacesAsyncTaskBlueprintProxy, UnknownData_8TNI, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleVisionDetectFacesAsyncTaskBlueprintProxy, FaceDetectionResult, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleVisionDetectFacesAsyncTaskBlueprintProxy, UnknownData_IFJS, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAppleVisionDetectFacesAsyncTaskBlueprintProxy, 0x0080);
		}

		// class UAbilityBaseComponentNative : public UActorComponent
		TEST_METHOD(Class__HSHSurvivor__AbilityBaseComponentNative)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityBaseComponentNative, ContainTag, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityBaseComponentNative, OnUseAbilityComponent, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityBaseComponentNative, OnAnimNotify, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityBaseComponentNative, 0x0140);
		}

		// class UBloodSeekComponentNative : public UActorComponent
		TEST_METHOD(Class__HSHSurvivor__BloodSeekComponentNative)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodSeekComponentNative, OwnerCharacter, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodSeekComponentNative, Survivors, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodSeekComponentNative, BloodSeekStack, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodSeekComponentNative, CurrentTime, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodSeekComponentNative, bIsStop, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodSeekComponentNative, UnknownData_8YJ5, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodSeekComponentNative, MinimumTimeCount, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodSeekComponentNative, Distance, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodSeekComponentNative, UnknownData_S4ER, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodSeekComponentNative, OnBloodSeekStackChanged, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBloodSeekComponentNative, 0x0140);
		}

		// class UChaseAudioComponentNative : public UActorComponent
		TEST_METHOD(Class__HSHSurvivor__ChaseAudioComponentNative)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaseAudioComponentNative, isSoundActive, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaseAudioComponentNative, bInitialize, 0x0101);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaseAudioComponentNative, bIsChase, 0x0102);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaseAudioComponentNative, UnknownData_9JX1, 0x0103);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaseAudioComponentNative, OwnerCharacter, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaseAudioComponentNative, chaseCharacter, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaseAudioComponentNative, currentChase, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaseAudioComponentNative, maxChase, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaseAudioComponentNative, offsetChase, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaseAudioComponentNative, speedIncreaseChase, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaseAudioComponentNative, speedDecreaseChase, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaseAudioComponentNative, distanceChase, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaseAudioComponentNative, Height, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaseAudioComponentNative, UnknownData_4FSM, 0x0134);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaseAudioComponentNative, 0x0138);
		}

		// class UCheatComponent : public UActorComponent
		TEST_METHOD(Class__HSHSurvivor__CheatComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheatComponent, 0x0100);
		}

		// class UDropItemsComponentBase : public UActorComponent
		TEST_METHOD(Class__HSHSurvivor__DropItemsComponentBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDropItemsComponentBase, Character, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDropItemsComponentBase, damageReceive, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDropItemsComponentBase, damageRandomRate, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDropItemsComponentBase, spawnitems, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDropItemsComponentBase, DamageThreshold, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDropItemsComponentBase, damagevarious, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDropItemsComponentBase, heathLessthen, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDropItemsComponentBase, UnknownData_ZAG5, 0x012C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDropItemsComponentBase, 0x0130);
		}

		// class UDropMovementComponentBase : public UActorComponent
		TEST_METHOD(Class__HSHSurvivor__DropMovementComponentBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDropMovementComponentBase, RootComponent, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDropMovementComponentBase, 0x0108);
		}

		// class UHSHAbilitySystem : public UAbilitySystemComponent
		TEST_METHOD(Class__HSHSurvivor__HSHAbilitySystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHSHAbilitySystem, 0x11A8);
		}

		// class UHSHAbilitySystemComponent : public UAbilitySystemComponent
		TEST_METHOD(Class__HSHSurvivor__HSHAbilitySystemComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHAbilitySystemComponent, OnGameplayEffectApplyCallback, 0x11A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHSHAbilitySystemComponent, 0x11B8);
		}

		// class UHSHAbilityTask_PlayMontageAndWaitForEvent : public UAbilityTask
		TEST_METHOD(Class__HSHSurvivor__HSHAbilityTask_PlayMontageAndWaitForEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHAbilityTask_PlayMontageAndWaitForEvent, OnCompleted, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHAbilityTask_PlayMontageAndWaitForEvent, OnBlendOut, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHAbilityTask_PlayMontageAndWaitForEvent, OnInterrupted, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHAbilityTask_PlayMontageAndWaitForEvent, OnCancelled, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHAbilityTask_PlayMontageAndWaitForEvent, EventReceived, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHAbilityTask_PlayMontageAndWaitForEvent, MontageToPlay, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHAbilityTask_PlayMontageAndWaitForEvent, EventTags, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHAbilityTask_PlayMontageAndWaitForEvent, Rate, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHAbilityTask_PlayMontageAndWaitForEvent, StartSection, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHAbilityTask_PlayMontageAndWaitForEvent, AnimRootMotionTranslationScale, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHAbilityTask_PlayMontageAndWaitForEvent, bStopWhenAbilityEnds, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHAbilityTask_PlayMontageAndWaitForEvent, UnknownData_005F, 0x0121);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHSHAbilityTask_PlayMontageAndWaitForEvent, 0x0158);
		}

		// class UHSHAchievementComponent : public UActorComponent
		TEST_METHOD(Class__HSHSurvivor__HSHAchievementComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHSHAchievementComponent, 0x0100);
		}

		// class UHSHItem : public UPrimaryDataAsset
		TEST_METHOD(Class__HSHSurvivor__HSHItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHItem, ItemType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHItem, ItemName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHItem, ItemDescription, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHItem, ItemIconNormal, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHItem, ItemIconHover, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHItem, Price, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHItem, Rarity, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHItem, MaxCount, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHItem, MaxLevel, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHItem, GrantedAbility, 0x0190);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHSHItem, 0x0198);
		}

		// class UHSHActivePerkItem : public UHSHItem
		TEST_METHOD(Class__HSHSurvivor__HSHActivePerkItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHActivePerkItem, CharacterType, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHActivePerkItem, UnknownData_BD0I, 0x0199);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHActivePerkItem, characteritem, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHActivePerkItem, UnknownData_OSFX, 0x01AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHSHActivePerkItem, 0x01B0);
		}

		// class UHSHAssetManager : public UAssetManager
		TEST_METHOD(Class__HSHSurvivor__HSHAssetManager)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHSHAssetManager, 0x0430);
		}

		// class UHSHAttributeSet : public UAttributeSet
		TEST_METHOD(Class__HSHSurvivor__HSHAttributeSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHAttributeSet, Health, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHAttributeSet, MaxHealth, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHAttributeSet, AttackPower, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHAttributeSet, DefensePower, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHAttributeSet, AttackPoint, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHAttributeSet, DefensePoint, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHAttributeSet, AreaDistance, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHAttributeSet, MoveSpeed, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHAttributeSet, Damage, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHAttributeSet, Eyesight, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHAttributeSet, Strength, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHAttributeSet, LimitHealth, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHAttributeSet, LimitEyesight, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHAttributeSet, LimitMoveSpeed, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHAttributeSet, LimitStrength, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHAttributeSet, OnPostGameplayEffectCallBack, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHSHAttributeSet, 0x0138);
		}

		// class UHSHAttributeSetHunter : public UHSHAttributeSet
		TEST_METHOD(Class__HSHSurvivor__HSHAttributeSetHunter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHAttributeSetHunter, Reach, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHAttributeSetHunter, BloodSeekMoveSpeed, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHSHAttributeSetHunter, 0x0158);
		}

		// class UHSHAttributeSetSurvivor : public UHSHAttributeSet
		TEST_METHOD(Class__HSHSurvivor__HSHAttributeSetSurvivor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHAttributeSetSurvivor, FallenHealth, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHAttributeSetSurvivor, MaxFallenHealth, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHAttributeSetSurvivor, Stamina, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHAttributeSetSurvivor, MaxStamina, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHAttributeSetSurvivor, RegenStaminaRate, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHAttributeSetSurvivor, DrainStaminaRate, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHAttributeSetSurvivor, RegenStaminaRateCrouchBonus, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHAttributeSetSurvivor, DrainStaminaRateCrouchBonus, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHAttributeSetSurvivor, CrouchSpeedBonus, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHAttributeSetSurvivor, InjuredSpeedBonus, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHAttributeSetSurvivor, Expertise, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHAttributeSetSurvivor, LimitStamina, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHAttributeSetSurvivor, LimitExpertise, 0x01F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHSHAttributeSetSurvivor, 0x0208);
		}

		// class UHSHBackItem : public UHSHItem
		TEST_METHOD(Class__HSHSurvivor__HSHBackItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHBackItem, CharacterType, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHBackItem, UnknownData_VDUK, 0x0199);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHBackItem, BackActor, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHBackItem, BackActorFemale, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHBackItem, BackTransform, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHBackItem, PairTransform, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHBackItem, AttachSocket, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHBackItem, PreviewLootDropActor, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHSHBackItem, 0x0240);
		}

		// class UHSHBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__HSHSurvivor__HSHBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHSHBlueprintLibrary, 0x0030);
		}

		// class UHSHBundleItem : public UHSHItem
		TEST_METHOD(Class__HSHSurvivor__HSHBundleItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHBundleItem, Texture, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHBundleItem, PreviewLootDropActor, 0x01A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHSHBundleItem, 0x01A8);
		}

		// class UHSHCameraShake : public UCameraShake
		TEST_METHOD(Class__HSHSurvivor__HSHCameraShake)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHSHCameraShake, 0x0170);
		}

		// class AHSHCharacterBase : public ACharacter
		TEST_METHOD(Class__HSHSurvivor__HSHCharacterBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHCharacterBase, UnknownData_UHUC, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHCharacterBase, UnknownData_52RK, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHCharacterBase, OnInventoryItemChanged, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHCharacterBase, UnknownData_8AX4, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHCharacterBase, OnSlottedItemChanged, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHCharacterBase, UnknownData_9YCX, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHCharacterBase, CharacterLevel, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHCharacterBase, UnknownData_XSFE, 0x07AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHCharacterBase, GameplayAbilities, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHCharacterBase, DefaultSlottedAbilities, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHCharacterBase, PassiveGameplayEffects, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHCharacterBase, SpawnSlottedAbilities, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHCharacterBase, SpawnPassiveGameplayEffects, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHCharacterBase, AbilitySystemComponent, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHCharacterBase, AttributeSet, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHCharacterBase, InventorySource, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHCharacterBase, bAbilitiesInitialized, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHCharacterBase, UnknownData_1CKH, 0x08A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHCharacterBase, InventoryData, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHCharacterBase, SlottedItems, 0x08F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHCharacterBase, SlottedAbilities, 0x0948);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHCharacterBase, SkinnedMesh, 0x0998);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHCharacterBase, bRespawn, 0x09A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHCharacterBase, UnknownData_FW1I, 0x09A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHCharacterBase, HeadAssetID, 0x09A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHCharacterBase, BackAssetID, 0x09B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHCharacterBase, UnknownData_JB4B, 0x09C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHCharacterBase, InventoryAbilities, 0x09D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHSHCharacterBase, 0x0A28);
		}

		// class UNS_DisableMovement_C : public UAnimNotifyState
		TEST_METHOD(BlueprintGeneratedClass__NS_DisableMovement__NS_DisableMovement_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNS_DisableMovement_C, 0x0038);
		}

		// class AHSHCharacterHunterBase : public AHSHCharacterBase
		TEST_METHOD(Class__HSHSurvivor__HSHCharacterHunterBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHCharacterHunterBase, UnknownData_Z0K6, 0x0A28);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHSHCharacterHunterBase, 0x0A30);
		}

		// class UHSHCharacterItem : public UHSHItem
		TEST_METHOD(Class__HSHSurvivor__HSHCharacterItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHCharacterItem, CharacterClass, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHCharacterItem, CharacterSkinItemAsset, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHCharacterItem, PassivePerkAsset_2, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHCharacterItem, PassivePerkAsset_3, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHCharacterItem, PassivePerkAsset_Unique, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHCharacterItem, ActivePerkAsset, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHCharacterItem, ShowStatus, 0x01C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHSHCharacterItem, 0x01D8);
		}

		// class AHSHCharacterSurvivorBase : public AHSHCharacterBase
		TEST_METHOD(Class__HSHSurvivor__HSHCharacterSurvivorBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHCharacterSurvivorBase, AttributeSetSurvivor, 0x0A28);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHSHCharacterSurvivorBase, 0x0A30);
		}

		// class UHSHCheatManagerNative : public UCheatManager
		TEST_METHOD(Class__HSHSurvivor__HSHCheatManagerNative)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHSHCheatManagerNative, 0x0080);
		}

		// class UHSHCurrencyItem : public UHSHItem
		TEST_METHOD(Class__HSHSurvivor__HSHCurrencyItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHCurrencyItem, Texture, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHCurrencyItem, PreviewLootDropActor, 0x01A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHSHCurrencyItem, 0x01A8);
		}

		// class UHSHDamageExecution : public UGameplayEffectExecutionCalculation
		TEST_METHOD(Class__HSHSurvivor__HSHDamageExecution)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHSHDamageExecution, 0x0048);
		}

		// class UHSHDmgNoStatusExecution : public UGameplayEffectExecutionCalculation
		TEST_METHOD(Class__HSHSurvivor__HSHDmgNoStatusExecution)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHSHDmgNoStatusExecution, 0x0048);
		}

		// class UHSHGameInstanceBase : public UPlatformGameInstance
		TEST_METHOD(Class__HSHSurvivor__HSHGameInstanceBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHGameInstanceBase, bSteamInit, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHGameInstanceBase, UnknownData_8RA5, 0x0241);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHSHGameInstanceBase, 0x0248);
		}

		// class AHSHGameModeBase : public AGameMode
		TEST_METHOD(Class__HSHSurvivor__HSHGameModeBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHGameModeBase, MaxPlayer, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHGameModeBase, UnknownData_4GJC, 0x0424);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHSHGameModeBase, 0x0428);
		}

		// class UHSHGameplayAbility : public UGameplayAbility
		TEST_METHOD(Class__HSHSurvivor__HSHGameplayAbility)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHGameplayAbility, EffectContainerMap, 0x0400);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHSHGameplayAbility, 0x0450);
		}

		// class AHSHGameStateBase : public AGameState
		TEST_METHOD(Class__HSHSurvivor__HSHGameStateBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHSHGameStateBase, 0x0398);
		}

		// class UHSHHeadItem : public UHSHItem
		TEST_METHOD(Class__HSHSurvivor__HSHHeadItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHHeadItem, CharacterType, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHHeadItem, UnknownData_ABFZ, 0x0199);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHHeadItem, HeadActor, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHHeadItem, UnknownData_SJJX, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHHeadItem, HeadTransform, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHHeadItem, PairTransform, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHHeadItem, AttachSocket, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHHeadItem, PreviewLootDropActor, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHSHHeadItem, 0x0240);
		}

		// class UHSHInventoryInterface : public UInterface
		TEST_METHOD(Class__HSHSurvivor__HSHInventoryInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHSHInventoryInterface, 0x0030);
		}

		// class UHSHItemProfile : public UPrimaryDataAsset
		TEST_METHOD(Class__HSHSurvivor__HSHItemProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHItemProfile, ItemType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHItemProfile, ItemName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHItemProfile, ItemDescription, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHItemProfile, ItemImageProfile, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHItemProfile, PreviewLootDropActor, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHSHItemProfile, 0x0100);
		}

		// class UHSHObject : public UObject
		TEST_METHOD(Class__HSHSurvivor__HSHObject)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHSHObject, 0x0030);
		}

		// class UHSHPassivePerkItem : public UHSHItem
		TEST_METHOD(Class__HSHSurvivor__HSHPassivePerkItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHPassivePerkItem, CharacterType, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHPassivePerkItem, UnknownData_W6ND, 0x0199);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHPassivePerkItem, characteritem, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHPassivePerkItem, UnknownData_12U5, 0x01AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHPassivePerkItem, GrantedEffect, 0x01B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHSHPassivePerkItem, 0x01B8);
		}

		// class UHSHPickableItem : public UHSHItem
		TEST_METHOD(Class__HSHSurvivor__HSHPickableItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHPickableItem, ItemClass, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHPickableItem, PickableType, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHPickableItem, UnknownData_QBNS, 0x01A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHPickableItem, MinDurability, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHPickableItem, MaxDurability, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHPickableItem, UseTime, 0x01AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHPickableItem, PreviewLootDropItemMesh, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHPickableItem, PreviewLootDropActor, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHPickableItem, LeftHandItemMesh, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHPickableItem, UnknownData_KIDZ, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHPickableItem, LeftHandItemOffset, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHPickableItem, RightHandItemMesh, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHPickableItem, UnknownData_BW4M, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHPickableItem, RightHandItemOffset, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHPickableItem, LeftHandItemActor, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHPickableItem, RightHandItemActor, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHPickableItem, MontageProgress, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHPickableItem, MontageProgressPair, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHPickableItem, IsPlayDropAnimation, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHPickableItem, UnknownData_VYZL, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHPickableItem, GrantedEffect, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHSHPickableItem, 0x0280);
		}

		// class AHSHPlayerControllerBase : public APlayerController
		TEST_METHOD(Class__HSHSurvivor__HSHPlayerControllerBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHPlayerControllerBase, UnknownData_66FN, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHPlayerControllerBase, InventoryData, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHPlayerControllerBase, SlottedItems, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHPlayerControllerBase, OnInventoryItemChanged, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHPlayerControllerBase, UnknownData_BB5F, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHPlayerControllerBase, OnSlottedItemChanged, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHPlayerControllerBase, UnknownData_FNK1, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHPlayerControllerBase, OnInventoryLoaded, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHPlayerControllerBase, UnknownData_7PX5, 0x0798);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHSHPlayerControllerBase, 0x07B0);
		}

		// class AHSHPlayerControllerNative : public APlayerController
		TEST_METHOD(Class__HSHSurvivor__HSHPlayerControllerNative)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHPlayerControllerNative, CachePawn, 0x0690);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHSHPlayerControllerNative, 0x0698);
		}

		// class AHSHPlayerStateNative : public APlayerState
		TEST_METHOD(Class__HSHSurvivor__HSHPlayerStateNative)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHSHPlayerStateNative, 0x0460);
		}

		// class UHSHQuest : public UPrimaryDataAsset
		TEST_METHOD(Class__HSHSurvivor__HSHQuest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHQuest, QuestType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHQuest, QuestObjective, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHSHQuest, 0x0048);
		}

		// class UHSHSaveGame : public USaveGame
		TEST_METHOD(Class__HSHSurvivor__HSHSaveGame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHSaveGame, InventoryData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHSaveGame, SlottedItems, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHSaveGame, UserId, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHSaveGame, InventoryItems, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHSaveGame, SavedDataVersion, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHSaveGame, UnknownData_P7B8, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHSHSaveGame, 0x00F8);
		}

		// class UHSHSkinItem : public UHSHItem
		TEST_METHOD(Class__HSHSurvivor__HSHSkinItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHSkinItem, CharacterItemAsset, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHSkinItem, SkeletalMesh, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHSkinItem, SpawnAnimation, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHSkinItem, IdleAnimation, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHSkinItem, AnimationBlueprint, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHSkinItem, PreviewLootDropActor, 0x01C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHSHSkinItem, 0x01C8);
		}

		// class UHSHStickerItem : public UHSHItem
		TEST_METHOD(Class__HSHSurvivor__HSHStickerItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHStickerItem, Texture, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHStickerItem, PreviewLootDropActor, 0x01A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHSHStickerItem, 0x01A8);
		}

		// class UHSHSurvivorQuest : public UHSHQuest
		TEST_METHOD(Class__HSHSurvivor__HSHSurvivorQuest)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHSHSurvivorQuest, 0x0048);
		}

		// class UHSHTargetType : public UObject
		TEST_METHOD(Class__HSHSurvivor__HSHTargetType)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHSHTargetType, 0x0030);
		}

		// class UHSHTargetType_UseOwner : public UHSHTargetType
		TEST_METHOD(Class__HSHSurvivor__HSHTargetType_UseOwner)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHSHTargetType_UseOwner, 0x0030);
		}

		// class UHSHTargetType_UseEventData : public UHSHTargetType
		TEST_METHOD(Class__HSHSurvivor__HSHTargetType_UseEventData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHSHTargetType_UseEventData, 0x0030);
		}

		// class UHSHTestItem : public UHSHItem
		TEST_METHOD(Class__HSHSurvivor__HSHTestItem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHSHTestItem, 0x0198);
		}

		// class UHSHTokenItem : public UHSHItem
		TEST_METHOD(Class__HSHSurvivor__HSHTokenItem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHSHTokenItem, 0x0198);
		}

		// class UJokeAudioComponentNative : public UActorComponent
		TEST_METHOD(Class__HSHSurvivor__JokeAudioComponentNative)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UJokeAudioComponentNative, CacheSpawnSound, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJokeAudioComponentNative, SoundSource, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJokeAudioComponentNative, bIsIdle, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJokeAudioComponentNative, UnknownData_VSN7, 0x0159);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJokeAudioComponentNative, IdleCurrent, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJokeAudioComponentNative, IdleTriggerTime, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJokeAudioComponentNative, bIsNotSeeAnyone, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJokeAudioComponentNative, UnknownData_WRFV, 0x0165);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJokeAudioComponentNative, NotSeeAnyoneCurrent, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJokeAudioComponentNative, NotSeeAnyoneTriggerTime, 0x016C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UJokeAudioComponentNative, 0x0170);
		}

		// class UNoise : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__HSHSurvivor__Noise)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNoise, 0x0030);
		}

		// class UPerkHandleComponentNative : public UActorComponent
		TEST_METHOD(Class__HSHSurvivor__PerkHandleComponentNative)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkHandleComponentNative, abilitycomponent, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkHandleComponentNative, hshcharacter, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPerkHandleComponentNative, 0x0110);
		}

		// class UProgressManagerComponentNative : public UActorComponent
		TEST_METHOD(Class__HSHSurvivor__ProgressManagerComponentNative)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressManagerComponentNative, ProgressInfo, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProgressManagerComponentNative, 0x0110);
		}

		// class UProjectFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__HSHSurvivor__ProjectFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProjectFunctionLibrary, 0x0030);
		}

		// class UQuestObjectiveBase : public UObject
		TEST_METHOD(Class__HSHSurvivor__QuestObjectiveBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestObjectiveBase, QuestWidget, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQuestObjectiveBase, 0x0038);
		}

		// class URazorBladeExecution : public UGameplayEffectExecutionCalculation
		TEST_METHOD(Class__HSHSurvivor__RazorBladeExecution)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URazorBladeExecution, 0x0048);
		}

		// class USteamIAP : public UObject
		TEST_METHOD(Class__HSHSurvivor__SteamIAP)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamIAP, OnRequestPriceSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamIAP, OnRequestPriceFailed, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamIAP, OnStartPurchaseSuccess, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamIAP, OnStartPurchaseFailed, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamIAP, OnPurchaseSuccess, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamIAP, OnPurchaseFailed, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamIAP, 0x0090);
		}

		// class USteamLobby : public UObject
		TEST_METHOD(Class__HSHSurvivor__SteamLobby)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamLobby, UnknownData_GT6K, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamLobby, OnLobbyCreated, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamLobby, OnLobbyEntered, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamLobby, OnLobbyDataUpdated, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamLobby, OnLobbyChatUpdated, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamLobby, 0x0078);
		}

		// class UTestAttributeSetComponent : public UActorComponent
		TEST_METHOD(Class__HSHSurvivor__TestAttributeSetComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestAttributeSetComponent, HSHAttributeSet, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestAttributeSetComponent, 0x0108);
		}

		// class ATestGameModeBase : public AGameModeBase
		TEST_METHOD(Class__HSHSurvivor__TestGameModeBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATestGameModeBase, Str, 0x03D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATestGameModeBase, 0x03E8);
		}

		// class AVentilatorManagerNative : public AActor
		TEST_METHOD(Class__HSHSurvivor__VentilatorManagerNative)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AVentilatorManagerNative, VentilatorCooldowns, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVentilatorManagerNative, OnVentilatorCDFinish, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVentilatorManagerNative, 0x0358);
		}

		// class UWTxtFile : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__HSHSurvivor__WTxtFile)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWTxtFile, 0x0030);
		}

		// class AHSHSpectatorPawn_C : public APawn
		TEST_METHOD(BlueprintGeneratedClass__HSHSpectatorPawn__HSHSpectatorPawn_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHSpectatorPawn_C, UberGraphFrame, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHSpectatorPawn_C, Camera, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHSpectatorPawn_C, SpringArm, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHSpectatorPawn_C, FloatingPawnMovement, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHSpectatorPawn_C, Capsule, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHSpectatorPawn_C, bIsPressUp, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHSpectatorPawn_C, bIsPressDown, 0x03C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHSpectatorPawn_C, UnknownData_LESR, 0x03CA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHSpectatorPawn_C, hshcharacter, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHSpectatorPawn_C, SpectorIndex, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHSpectatorPawn_C, bIsFreeMode, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHSpectatorPawn_C, UnknownData_5P53, 0x03E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHSpectatorPawn_C, DelayOnChangeSpectator, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHSpectatorPawn_C, bLockChange, 0x03EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHSpectatorPawn_C, UnknownData_QNGK, 0x03ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHSpectatorPawn_C, WidgetSpectator, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHSpectatorPawn_C, NetUpdate, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHSpectatorPawn_C, UnknownData_8S9C, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHSpectatorPawn_C, LookPawn, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHSpectatorPawn_C, AimLocation, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHSpectatorPawn_C, AimRotation, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHSpectatorPawn_C, AlphaArmLength, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHSpectatorPawn_C, CacheArmLength, 0x0424);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHSHSpectatorPawn_C, 0x0428);
		}

		// class UWidget_Debug_CustomMatch_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_Debug_CustomMatch__Widget_Debug_CustomMatch_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Debug_CustomMatch_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Debug_CustomMatch_C, CheckBox_297, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Debug_CustomMatch_C, EditableText_1, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Debug_CustomMatch_C, EditableText_135, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Debug_CustomMatch_C, HorizontalBox_CreateMax, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Debug_CustomMatch_C, MatchIDTextbox, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Debug_CustomMatch_C, Widget_Button, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Debug_CustomMatch_C, Widget_Button_CreateRoom, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Debug_CustomMatch_C, Widget_Button_JoinByID, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Debug_CustomMatch_C, WidgetManager, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Debug_CustomMatch_C, IsCreatingRoom, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Debug_CustomMatch_C, IsJoiningMatch, 0x0299);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Debug_CustomMatch_C, IsDescribing, 0x029A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Debug_CustomMatch_C, UnknownData_ZCA9, 0x029B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Debug_CustomMatch_C, ButtonTextCache, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Debug_CustomMatch_C, IsLocal, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Debug_CustomMatch_C, UnknownData_NKWK, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Debug_CustomMatch_C, gameSessionId, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Debug_CustomMatch_C, GameLiftObjectCreate, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Debug_CustomMatch_C, GameLiftObjectJoin, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Debug_CustomMatch_C, AliasName, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Debug_CustomMatch_C, CustomMatchConfig, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Debug_CustomMatch_C, ticketId, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Debug_CustomMatch_C, CacheCreateRoomUI, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Debug_CustomMatch_C, Region_Name, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Debug_CustomMatch_C, Region_Code, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Debug_CustomMatch_C, CreateMax, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Debug_CustomMatch_C, CreateCount, 0x033C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_Debug_CustomMatch_C, 0x0340);
		}

		// class USeGuard_Lobby_ABP_C : public USurvivor_Lobby_ABP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__SeGuard_Lobby_ABP__SeGuard_Lobby_ABP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USeGuard_Lobby_ABP_C, 0x0A1A);
		}

		// class UAIAsyncTaskBlueprintProxy : public UObject
		TEST_METHOD(Class__AIModule__AIAsyncTaskBlueprintProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIAsyncTaskBlueprintProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIAsyncTaskBlueprintProxy, OnFail, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIAsyncTaskBlueprintProxy, UnknownData_D0FO, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIAsyncTaskBlueprintProxy, 0x0070);
		}

		// class UAIBlueprintHelperLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AIModule__AIBlueprintHelperLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIBlueprintHelperLibrary, 0x0030);
		}

		// class AAIController : public AController
		TEST_METHOD(Class__AIModule__AIController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, UnknownData_VK31, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, UnknownData_QHTI, 0x03E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, PathFollowingComponent, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, BrainComponent, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, PerceptionComponent, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, ActionsComp, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, Blackboard, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, CachedGameplayTasksComponent, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, DefaultNavigationFilterClass, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, ReceiveMoveCompleted, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, UnknownData_IWL9, 0x0438);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAIController, 0x0440);
		}

		// class UAIDataProvider : public UObject
		TEST_METHOD(Class__AIModule__AIDataProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIDataProvider, 0x0030);
		}

		// class UAIDataProvider_QueryParams : public UAIDataProvider
		TEST_METHOD(Class__AIModule__AIDataProvider_QueryParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_QueryParams, ParamName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_QueryParams, FloatValue, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_QueryParams, IntValue, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_QueryParams, BoolValue, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_QueryParams, UnknownData_BHH4, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIDataProvider_QueryParams, 0x0048);
		}

		// class UAIDataProvider_Random : public UAIDataProvider_QueryParams
		TEST_METHOD(Class__AIModule__AIDataProvider_Random)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_Random, Min, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_Random, Max, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_Random, UnknownData_3HHQ, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIDataProvider_Random, 0x0058);
		}

		// class UAIHotSpotManager : public UObject
		TEST_METHOD(Class__AIModule__AIHotSpotManager)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIHotSpotManager, 0x0030);
		}

		// class UAIPerceptionComponent : public UActorComponent
		TEST_METHOD(Class__AIModule__AIPerceptionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, SensesConfig, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, DominantSense, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, UnknownData_CS85, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, AIOwner, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, UnknownData_9FPN, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, OnPerceptionUpdated, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, OnTargetPerceptionUpdated, 0x01C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIPerceptionComponent, 0x01D0);
		}

		// class UAIPerceptionListenerInterface : public UInterface
		TEST_METHOD(Class__AIModule__AIPerceptionListenerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIPerceptionListenerInterface, 0x0030);
		}

		// class UAIPerceptionStimuliSourceComponent : public UActorComponent
		TEST_METHOD(Class__AIModule__AIPerceptionStimuliSourceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionStimuliSourceComponent, UnknownData_VDS6, 0x0101);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionStimuliSourceComponent, RegisterAsSourceForSenses, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIPerceptionStimuliSourceComponent, 0x0118);
		}

		// class UAISubsystem : public UObject
		TEST_METHOD(Class__AIModule__AISubsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISubsystem, UnknownData_TLVX, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISubsystem, AISystem, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISubsystem, 0x0040);
		}

		// class UAIPerceptionSystem : public UAISubsystem
		TEST_METHOD(Class__AIModule__AIPerceptionSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionSystem, UnknownData_V4EL, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionSystem, Senses, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionSystem, PerceptionAgingRate, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionSystem, UnknownData_XK68, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIPerceptionSystem, 0x0140);
		}

		// class UAIResourceInterface : public UInterface
		TEST_METHOD(Class__AIModule__AIResourceInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIResourceInterface, 0x0030);
		}

		// class UAIResource_Movement : public UGameplayTaskResource
		TEST_METHOD(Class__AIModule__AIResource_Movement)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIResource_Movement, 0x0040);
		}

		// class UAIResource_Logic : public UGameplayTaskResource
		TEST_METHOD(Class__AIModule__AIResource_Logic)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIResource_Logic, 0x0040);
		}

		// class UAISense : public UObject
		TEST_METHOD(Class__AIModule__AISense)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, DefaultExpirationAge, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, NotifyType, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, UnknownData_DJET, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, UnknownData_FK61, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, PerceptionSystemInstance, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, UnknownData_092K, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense, 0x0088);
		}

		// class UAISense_Blueprint : public UAISense
		TEST_METHOD(Class__AIModule__AISense_Blueprint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Blueprint, ListenerDataType, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Blueprint, ListenerContainer, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Blueprint, UnprocessedEvents, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Blueprint, 0x00B0);
		}

		// class UAISense_Damage : public UAISense
		TEST_METHOD(Class__AIModule__AISense_Damage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Damage, RegisteredEvents, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Damage, 0x0098);
		}

		// class UAISense_Hearing : public UAISense
		TEST_METHOD(Class__AIModule__AISense_Hearing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Hearing, NoiseEvents, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Hearing, SpeedOfSoundSq, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Hearing, UnknownData_GFU1, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Hearing, 0x00F0);
		}

		// class UAISense_Prediction : public UAISense
		TEST_METHOD(Class__AIModule__AISense_Prediction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Prediction, RegisteredEvents, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Prediction, 0x0098);
		}

		// class UAISense_Sight : public UAISense
		TEST_METHOD(Class__AIModule__AISense_Sight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, UnknownData_ND85, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, MaxTracesPerTick, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, MinQueriesPerTimeSliceCheck, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, MaxTimeSlicePerTick, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, HighImportanceQueryDistanceThreshold, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, UnknownData_RKPL, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, MaxQueryImportance, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, SightLimitQueryImportance, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, UnknownData_5YVV, 0x0158);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Sight, 0x0160);
		}

		// class UAISense_Team : public UAISense
		TEST_METHOD(Class__AIModule__AISense_Team)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Team, RegisteredEvents, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Team, 0x0098);
		}

		// class UAISense_Touch : public UAISense
		TEST_METHOD(Class__AIModule__AISense_Touch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Touch, RegisteredEvents, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Touch, 0x0098);
		}

		// class UAISenseBlueprintListener : public UUserDefinedStruct
		TEST_METHOD(Class__AIModule__AISenseBlueprintListener)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseBlueprintListener, 0x00F8);
		}

		// class UAISenseConfig : public UObject
		TEST_METHOD(Class__AIModule__AISenseConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig, DebugColor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig, MaxAge, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig, UnknownData_XFOS, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig, 0x0050);
		}

		// class UAISenseConfig_Blueprint : public UAISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig_Blueprint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Blueprint, Implementation, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Blueprint, 0x0058);
		}

		// class UAISenseConfig_Damage : public UAISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig_Damage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Damage, Implementation, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Damage, 0x0058);
		}

		// class UAISenseConfig_Hearing : public UAISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig_Hearing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Hearing, Implementation, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Hearing, HearingRange, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Hearing, LoSHearingRange, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Hearing, UnknownData_3UO0, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Hearing, DetectionByAffiliation, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Hearing, 0x0068);
		}

		// class UAISenseConfig_Prediction : public UAISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig_Prediction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Prediction, 0x0050);
		}

		// class UAISenseConfig_Sight : public UAISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig_Sight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, Implementation, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, SightRadius, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, LoseSightRadius, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, PeripheralVisionAngleDegrees, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, DetectionByAffiliation, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, AutoSuccessRangeFromLastSeenLocation, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, UnknownData_SY4J, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Sight, 0x0070);
		}

		// class UAISenseConfig_Team : public UAISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig_Team)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Team, 0x0050);
		}

		// class UAISenseConfig_Touch : public UAISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig_Touch)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Touch, 0x0050);
		}

		// class UAISenseEvent : public UObject
		TEST_METHOD(Class__AIModule__AISenseEvent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseEvent, 0x0030);
		}

		// class UAISenseEvent_Damage : public UAISenseEvent
		TEST_METHOD(Class__AIModule__AISenseEvent_Damage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseEvent_Damage, Event, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseEvent_Damage, 0x0060);
		}

		// class UAISenseEvent_Hearing : public UAISenseEvent
		TEST_METHOD(Class__AIModule__AISenseEvent_Hearing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseEvent_Hearing, Event, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseEvent_Hearing, 0x0060);
		}

		// class UAISightTargetInterface : public UInterface
		TEST_METHOD(Class__AIModule__AISightTargetInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISightTargetInterface, 0x0030);
		}

		// class UAISystem : public UAISystemBase
		TEST_METHOD(Class__AIModule__AISystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, PerceptionSystemClassName, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, HotSpotManagerClassName, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, AcceptanceRadius, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, PathfollowingRegularPathPointAcceptanceRadius, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, PathfollowingNavLinkAcceptanceRadius, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bFinishMoveOnGoalOverlap, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bAcceptPartialPaths, 0x009D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bAllowStrafing, 0x009E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bEnableBTAITasks, 0x009F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bAllowControllersAsEQSQuerier, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bEnableDebuggerPlugin, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, DefaultSightCollisionChannel, 0x00A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, UnknownData_AX5Z, 0x00A3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, BehaviorTreeManager, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, EnvironmentQueryManager, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, PerceptionSystem, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, AllProxyObjects, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, HotSpotManager, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, NavLocalGrids, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, UnknownData_358K, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISystem, 0x0138);
		}

		// class UAITask : public UGameplayTask
		TEST_METHOD(Class__AIModule__AITask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask, OwnerController, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAITask, 0x0088);
		}

		// class UAITask_LockLogic : public UAITask
		TEST_METHOD(Class__AIModule__AITask_LockLogic)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAITask_LockLogic, 0x0088);
		}

		// class UAITask_MoveTo : public UAITask
		TEST_METHOD(Class__AIModule__AITask_MoveTo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask_MoveTo, OnRequestFailed, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask_MoveTo, OnMoveFinished, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask_MoveTo, MoveRequest, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask_MoveTo, UnknownData_F1EJ, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAITask_MoveTo, 0x0128);
		}

		// class UAITask_RunEQS : public UAITask
		TEST_METHOD(Class__AIModule__AITask_RunEQS)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask_RunEQS, UnknownData_B9Z3, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAITask_RunEQS, 0x0100);
		}

		// class UBehaviorTree : public UObject
		TEST_METHOD(Class__AIModule__BehaviorTree)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, RootNode, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, BlackboardAsset, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, RootDecorators, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, RootDecoratorOps, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, UnknownData_TVIU, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBehaviorTree, 0x0068);
		}

		// class UBrainComponent : public UActorComponent
		TEST_METHOD(Class__AIModule__BrainComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrainComponent, UnknownData_96U9, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrainComponent, BlackboardComp, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrainComponent, AIOwner, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrainComponent, UnknownData_D2WS, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrainComponent, 0x0160);
		}

		// class UBehaviorTreeComponent : public UBrainComponent
		TEST_METHOD(Class__AIModule__BehaviorTreeComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeComponent, UnknownData_FXBQ, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeComponent, NodeInstances, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeComponent, UnknownData_P45M, 0x0190);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBehaviorTreeComponent, 0x02B0);
		}

		// class UBehaviorTreeManager : public UObject
		TEST_METHOD(Class__AIModule__BehaviorTreeManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeManager, MaxDebuggerSteps, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeManager, UnknownData_6UJP, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeManager, LoadedTemplates, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeManager, ActiveComponents, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBehaviorTreeManager, 0x0058);
		}

		// class UBehaviorTreeTypes : public UObject
		TEST_METHOD(Class__AIModule__BehaviorTreeTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBehaviorTreeTypes, 0x0030);
		}

		// class UBlackboardComponent : public UActorComponent
		TEST_METHOD(Class__AIModule__BlackboardComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardComponent, BrainComp, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardComponent, BlackboardAsset, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardComponent, UnknownData_E87P, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardComponent, KeyInstances, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardComponent, UnknownData_DW2Y, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardComponent, 0x01F8);
		}

		// class UBlackboardData : public UDataAsset
		TEST_METHOD(Class__AIModule__BlackboardData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardData, Parent, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardData, Keys, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardData, UnknownData_SDJZ, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardData, 0x0058);
		}

		// class UBlackboardKeyType : public UObject
		TEST_METHOD(Class__AIModule__BlackboardKeyType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType, UnknownData_I6PI, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType, 0x0038);
		}

		// class UBlackboardKeyType_Bool : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Bool)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Bool, 0x0038);
		}

		// class UBlackboardKeyType_Class : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Class)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_Class, BaseClass, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Class, 0x0040);
		}

		// class UBlackboardKeyType_Enum : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Enum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_Enum, EnumType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_Enum, EnumName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_Enum, UnknownData_OV2Q, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Enum, 0x0058);
		}

		// class UBlackboardKeyType_Float : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Float)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Float, 0x0038);
		}

		// class UBlackboardKeyType_Int : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Int)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Int, 0x0038);
		}

		// class UBlackboardKeyType_Name : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Name)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Name, 0x0038);
		}

		// class UBlackboardKeyType_NativeEnum : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_NativeEnum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_NativeEnum, EnumName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_NativeEnum, EnumType, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_NativeEnum, 0x0050);
		}

		// class UBlackboardKeyType_Object : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Object)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_Object, BaseClass, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Object, 0x0040);
		}

		// class UBlackboardKeyType_Rotator : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Rotator)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Rotator, 0x0038);
		}

		// class UBlackboardKeyType_String : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_String)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_String, StringValue, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_String, 0x0048);
		}

		// class UBlackboardKeyType_Vector : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Vector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Vector, 0x0038);
		}

		// class UBTNode : public UObject
		TEST_METHOD(Class__AIModule__BTNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTNode, UnknownData_JD7Z, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTNode, NodeName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTNode, TreeAsset, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTNode, ParentNode, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTNode, UnknownData_R0M9, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTNode, 0x0060);
		}

		// class UBTAuxiliaryNode : public UBTNode
		TEST_METHOD(Class__AIModule__BTAuxiliaryNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTAuxiliaryNode, UnknownData_L2QB, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTAuxiliaryNode, 0x0068);
		}

		// class UBTCompositeNode : public UBTNode
		TEST_METHOD(Class__AIModule__BTCompositeNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTCompositeNode, Children, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTCompositeNode, Services, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTCompositeNode, UnknownData_8E5Q, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTCompositeNode, UnknownData_97WY, 0x0091);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTCompositeNode, 0x0098);
		}

		// class UBTComposite_Selector : public UBTCompositeNode
		TEST_METHOD(Class__AIModule__BTComposite_Selector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTComposite_Selector, 0x0098);
		}

		// class UBTComposite_Sequence : public UBTCompositeNode
		TEST_METHOD(Class__AIModule__BTComposite_Sequence)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTComposite_Sequence, 0x0098);
		}

		// class UBTComposite_SimpleParallel : public UBTCompositeNode
		TEST_METHOD(Class__AIModule__BTComposite_SimpleParallel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTComposite_SimpleParallel, FinishMode, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTComposite_SimpleParallel, UnknownData_OV7M, 0x0099);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTComposite_SimpleParallel, 0x00A0);
		}

		// class UBTDecorator : public UBTAuxiliaryNode
		TEST_METHOD(Class__AIModule__BTDecorator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator, UnknownData_FBAS, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator, FlowAbortMode, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator, UnknownData_YDHE, 0x006D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator, 0x0070);
		}

		// class UBTDecorator_BlackboardBase : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_BlackboardBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlackboardBase, BlackboardKey, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_BlackboardBase, 0x0098);
		}

		// class UBTDecorator_Blackboard : public UBTDecorator_BlackboardBase
		TEST_METHOD(Class__AIModule__BTDecorator_Blackboard)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, IntValue, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, FloatValue, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, StringValue, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, CachedDescription, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, OperationType, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, NotifyObserver, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, UnknownData_XI1D, 0x00C2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_Blackboard, 0x00C8);
		}

		// class UBTDecorator_BlueprintBase : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_BlueprintBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlueprintBase, AIOwner, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlueprintBase, ActorOwner, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlueprintBase, ObservedKeyNames, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlueprintBase, UnknownData_A8JR, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlueprintBase, UnknownData_9DCX, 0x00A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_BlueprintBase, 0x00A8);
		}

		// class UBTDecorator_CheckGameplayTagsOnActor : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_CheckGameplayTagsOnActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CheckGameplayTagsOnActor, ActorToCheck, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CheckGameplayTagsOnActor, TagsToMatch, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CheckGameplayTagsOnActor, UnknownData_WM3K, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CheckGameplayTagsOnActor, GameplayTags, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CheckGameplayTagsOnActor, CachedDescription, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_CheckGameplayTagsOnActor, 0x00D0);
		}

		// class UBTDecorator_CompareBBEntries : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_CompareBBEntries)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CompareBBEntries, Operator, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CompareBBEntries, UnknownData_RHZM, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CompareBBEntries, BlackboardKeyA, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CompareBBEntries, BlackboardKeyB, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_CompareBBEntries, 0x00C8);
		}

		// class UBTDecorator_ConditionalLoop : public UBTDecorator_Blackboard
		TEST_METHOD(Class__AIModule__BTDecorator_ConditionalLoop)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_ConditionalLoop, 0x00C8);
		}

		// class UBTDecorator_ConeCheck : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_ConeCheck)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, ConeHalfAngle, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, UnknownData_NB9G, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, ConeOrigin, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, ConeDirection, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, Observed, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, UnknownData_2TTC, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_ConeCheck, 0x00F8);
		}

		// class UBTDecorator_Cooldown : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_Cooldown)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Cooldown, CoolDownTime, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Cooldown, UnknownData_OS3D, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_Cooldown, 0x0078);
		}

		// class UBTDecorator_DoesPathExist : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_DoesPathExist)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, BlackboardKeyA, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, BlackboardKeyB, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, UnknownData_528U, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, PathQueryType, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, UnknownData_MXSI, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, FilterClass, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_DoesPathExist, 0x00D0);
		}

		// class UBTDecorator_ForceSuccess : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_ForceSuccess)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_ForceSuccess, 0x0070);
		}

		// class UBTDecorator_IsAtLocation : public UBTDecorator_BlackboardBase
		TEST_METHOD(Class__AIModule__BTDecorator_IsAtLocation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, AcceptableRadius, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, UnknownData_DY75, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, ParametrizedAcceptableRadius, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, GeometricDistanceType, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, UnknownData_82XX, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, UnknownData_J99C, 0x00D5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_IsAtLocation, 0x00D8);
		}

		// class UBTDecorator_IsBBEntryOfClass : public UBTDecorator_BlackboardBase
		TEST_METHOD(Class__AIModule__BTDecorator_IsBBEntryOfClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsBBEntryOfClass, TestClass, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_IsBBEntryOfClass, 0x00A0);
		}

		// class UBTDecorator_KeepInCone : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_KeepInCone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_KeepInCone, ConeHalfAngle, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_KeepInCone, UnknownData_659O, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_KeepInCone, ConeOrigin, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_KeepInCone, Observed, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_KeepInCone, UnknownData_2BTP, 0x00C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_KeepInCone, 0x00D0);
		}

		// class UBTDecorator_Loop : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_Loop)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Loop, NumLoops, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Loop, bInfiniteLoop, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Loop, UnknownData_L4HG, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Loop, InfiniteLoopTimeoutTime, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Loop, UnknownData_68O2, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_Loop, 0x0080);
		}

		// class UBTDecorator_ReachedMoveGoal : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_ReachedMoveGoal)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_ReachedMoveGoal, 0x0070);
		}

		// class UBTDecorator_SetTagCooldown : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_SetTagCooldown)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_SetTagCooldown, CooldownTag, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_SetTagCooldown, CooldownDuration, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_SetTagCooldown, bAddToExistingDuration, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_SetTagCooldown, UnknownData_K0LU, 0x007D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_SetTagCooldown, 0x0080);
		}

		// class UBTDecorator_TagCooldown : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_TagCooldown)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TagCooldown, CooldownTag, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TagCooldown, CooldownDuration, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TagCooldown, bAddToExistingDuration, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TagCooldown, bActivatesCooldown, 0x007D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TagCooldown, UnknownData_KTZ5, 0x007E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_TagCooldown, 0x0080);
		}

		// class UBTDecorator_TimeLimit : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_TimeLimit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TimeLimit, TimeLimit, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TimeLimit, UnknownData_25XQ, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_TimeLimit, 0x0078);
		}

		// class UBTFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AIModule__BTFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTFunctionLibrary, 0x0030);
		}

		// class UBTService : public UBTAuxiliaryNode
		TEST_METHOD(Class__AIModule__BTService)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService, Interval, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService, RandomDeviation, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService, UnknownData_K8EG, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService, 0x0078);
		}

		// class UBTService_BlackboardBase : public UBTService
		TEST_METHOD(Class__AIModule__BTService_BlackboardBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_BlackboardBase, BlackboardKey, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_BlackboardBase, 0x00A0);
		}

		// class UBTService_BlueprintBase : public UBTService
		TEST_METHOD(Class__AIModule__BTService_BlueprintBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_BlueprintBase, AIOwner, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_BlueprintBase, ActorOwner, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_BlueprintBase, UnknownData_J9LW, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_BlueprintBase, UnknownData_U0BY, 0x0099);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_BlueprintBase, 0x00A0);
		}

		// class UBTService_DefaultFocus : public UBTService_BlackboardBase
		TEST_METHOD(Class__AIModule__BTService_DefaultFocus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_DefaultFocus, FocusPriority, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_DefaultFocus, UnknownData_6SMQ, 0x00A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_DefaultFocus, 0x00A8);
		}

		// class UBTService_RunEQS : public UBTService_BlackboardBase
		TEST_METHOD(Class__AIModule__BTService_RunEQS)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_RunEQS, EQSRequest, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_RunEQS, UnknownData_GGHN, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_RunEQS, 0x00F8);
		}

		// class UBTTaskNode : public UBTNode
		TEST_METHOD(Class__AIModule__BTTaskNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTaskNode, Services, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTaskNode, UnknownData_BPUG, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTaskNode, 0x0078);
		}

		// class UBTTask_BlackboardBase : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_BlackboardBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BlackboardBase, BlackboardKey, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_BlackboardBase, 0x00A0);
		}

		// class UBTTask_BlueprintBase : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_BlueprintBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BlueprintBase, AIOwner, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BlueprintBase, ActorOwner, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BlueprintBase, UnknownData_RLEE, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BlueprintBase, UnknownData_N90P, 0x00A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_BlueprintBase, 0x00A8);
		}

		// class UBTTask_FinishWithResult : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_FinishWithResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_FinishWithResult, Result, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_FinishWithResult, UnknownData_CIXF, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_FinishWithResult, 0x0080);
		}

		// class UBTTask_GameplayTaskBase : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_GameplayTaskBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_GameplayTaskBase, UnknownData_PLAA, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_GameplayTaskBase, 0x0080);
		}

		// class UBTTask_MakeNoise : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_MakeNoise)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MakeNoise, Loudnes, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MakeNoise, UnknownData_QYW7, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_MakeNoise, 0x0080);
		}

		// class UBTTask_MoveTo : public UBTTask_BlackboardBase
		TEST_METHOD(Class__AIModule__BTTask_MoveTo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveTo, AcceptableRadius, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveTo, UnknownData_E984, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveTo, FilterClass, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveTo, ObservedBlackboardValueTolerance, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveTo, UnknownData_N8CZ, 0x00B6);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_MoveTo, 0x00B8);
		}

		// class UBTTask_MoveDirectlyToward : public UBTTask_MoveTo
		TEST_METHOD(Class__AIModule__BTTask_MoveDirectlyToward)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveDirectlyToward, UnknownData_G6EI, 0x00B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_MoveDirectlyToward, 0x00C0);
		}

		// class UBTTask_PawnActionBase : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_PawnActionBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_PawnActionBase, 0x0078);
		}

		// class UBTTask_PlayAnimation : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_PlayAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlayAnimation, AnimationToPlay, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlayAnimation, UnknownData_V7K7, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlayAnimation, MyOwnerComp, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlayAnimation, CachedSkelMesh, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlayAnimation, UnknownData_270A, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_PlayAnimation, 0x00B8);
		}

		// class UBTTask_PlaySound : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_PlaySound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlaySound, SoundToPlay, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_PlaySound, 0x0080);
		}

		// class UBTTask_PushPawnAction : public UBTTask_PawnActionBase
		TEST_METHOD(Class__AIModule__BTTask_PushPawnAction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PushPawnAction, Action, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_PushPawnAction, 0x0080);
		}

		// class UN_PhrayBeginActivePerk_C : public UAnimNotify
		TEST_METHOD(BlueprintGeneratedClass__N_PhrayBeginActivePerk__N_PhrayBeginActivePerk_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UN_PhrayBeginActivePerk_C, 0x0040);
		}

		// class UBTTask_RotateToFaceBBEntry : public UBTTask_BlackboardBase
		TEST_METHOD(Class__AIModule__BTTask_RotateToFaceBBEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RotateToFaceBBEntry, Precision, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RotateToFaceBBEntry, UnknownData_7TK3, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_RotateToFaceBBEntry, 0x00A8);
		}

		// class UBTTask_RunBehavior : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_RunBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunBehavior, BehaviorAsset, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_RunBehavior, 0x0080);
		}

		// class UBTTask_RunBehaviorDynamic : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_RunBehaviorDynamic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunBehaviorDynamic, InjectionTag, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunBehaviorDynamic, DefaultBehaviorAsset, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunBehaviorDynamic, BehaviorAsset, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_RunBehaviorDynamic, 0x0090);
		}

		// class UBTTask_RunEQSQuery : public UBTTask_BlackboardBase
		TEST_METHOD(Class__AIModule__BTTask_RunEQSQuery)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, QueryTemplate, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, QueryParams, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, QueryConfig, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, RunMode, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, UnknownData_ZH9N, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, EQSQueryBlackboardKey, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, bUseBBKey, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, UnknownData_A5C1, 0x00F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, EQSRequest, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, UnknownData_DTRG, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_RunEQSQuery, 0x0158);
		}

		// class UBTTask_SetTagCooldown : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_SetTagCooldown)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetTagCooldown, CooldownTag, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetTagCooldown, bAddToExistingDuration, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetTagCooldown, UnknownData_DPTR, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetTagCooldown, CooldownDuration, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_SetTagCooldown, 0x0088);
		}

		// class UBTTask_Wait : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_Wait)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Wait, WaitTime, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Wait, RandomDeviation, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_Wait, 0x0080);
		}

		// class UBTTask_WaitBlackboardTime : public UBTTask_Wait
		TEST_METHOD(Class__AIModule__BTTask_WaitBlackboardTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_WaitBlackboardTime, BlackboardKey, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_WaitBlackboardTime, 0x00A8);
		}

		// class UCrowdAgentInterface : public UInterface
		TEST_METHOD(Class__AIModule__CrowdAgentInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCrowdAgentInterface, 0x0030);
		}

		// class UPathFollowingComponent : public UActorComponent
		TEST_METHOD(Class__AIModule__PathFollowingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathFollowingComponent, UnknownData_ACIT, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathFollowingComponent, MovementComp, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathFollowingComponent, UnknownData_8V9U, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathFollowingComponent, MyNavData, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathFollowingComponent, UnknownData_ZFD7, 0x0150);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPathFollowingComponent, 0x02B0);
		}

		// class UCrowdFollowingComponent : public UPathFollowingComponent
		TEST_METHOD(Class__AIModule__CrowdFollowingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdFollowingComponent, UnknownData_HJGO, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdFollowingComponent, CharacterMovement, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdFollowingComponent, CrowdAgentMoveDirection, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdFollowingComponent, UnknownData_7777, 0x02CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCrowdFollowingComponent, 0x02F0);
		}

		// class UCrowdManager : public UCrowdManagerBase
		TEST_METHOD(Class__AIModule__CrowdManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, MyNavData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, AvoidanceConfig, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, SamplingPatterns, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, MaxAgents, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, MaxAgentRadius, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, MaxAvoidedAgents, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, MaxAvoidedWalls, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, NavmeshCheckInterval, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, PathOptimizationInterval, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, SeparationDirClamp, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, PathOffsetRadiusMultiplier, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, UnknownData_BEZM, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCrowdManager, 0x00F8);
		}

		// class ADetourCrowdAIController : public AAIController
		TEST_METHOD(Class__AIModule__DetourCrowdAIController)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADetourCrowdAIController, 0x0440);
		}

		// class UEnvQuery : public UDataAsset
		TEST_METHOD(Class__AIModule__EnvQuery)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQuery, QueryName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQuery, Options, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQuery, 0x0050);
		}

		// class UEnvQueryContext : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryContext)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryContext, 0x0030);
		}

		// class UEnvQueryContext_BlueprintBase : public UEnvQueryContext
		TEST_METHOD(Class__AIModule__EnvQueryContext_BlueprintBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryContext_BlueprintBase, UnknownData_6J3Q, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryContext_BlueprintBase, 0x0038);
		}

		// class UEnvQueryContext_Item : public UEnvQueryContext
		TEST_METHOD(Class__AIModule__EnvQueryContext_Item)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryContext_Item, 0x0030);
		}

		// class UEnvQueryContext_Querier : public UEnvQueryContext
		TEST_METHOD(Class__AIModule__EnvQueryContext_Querier)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryContext_Querier, 0x0030);
		}

		// class UEnvQueryDebugHelpers : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryDebugHelpers)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryDebugHelpers, 0x0030);
		}

		// class UEnvQueryNode : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryNode, VerNum, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryNode, UnknownData_TP3D, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryNode, 0x0038);
		}

		// class UEnvQueryGenerator : public UEnvQueryNode
		TEST_METHOD(Class__AIModule__EnvQueryGenerator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator, OptionName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator, ItemType, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator, UnknownData_HPY4, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator, 0x0058);
		}

		// class UEnvQueryGenerator_ActorsOfClass : public UEnvQueryGenerator
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_ActorsOfClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ActorsOfClass, SearchedActorClass, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ActorsOfClass, GenerateOnlyActorsInRadius, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ActorsOfClass, SearchRadius, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ActorsOfClass, SearchCenter, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_ActorsOfClass, 0x00C8);
		}

		// class UEnvQueryGenerator_BlueprintBase : public UEnvQueryGenerator
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_BlueprintBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_BlueprintBase, GeneratorsActionDescription, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_BlueprintBase, Context, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_BlueprintBase, GeneratedItemType, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_BlueprintBase, UnknownData_1EU4, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_BlueprintBase, 0x0088);
		}

		// class UEnvQueryGenerator_Composite : public UEnvQueryGenerator
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_Composite)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Composite, Generators, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Composite, UnknownData_MDI1, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Composite, ForcedItemType, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_Composite, 0x0078);
		}

		// class UEnvQueryGenerator_ProjectedPoints : public UEnvQueryGenerator
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_ProjectedPoints)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ProjectedPoints, ProjectionData, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_ProjectedPoints, 0x0088);
		}

		// class UEnvQueryGenerator_Cone : public UEnvQueryGenerator_ProjectedPoints
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_Cone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, AlignedPointsDistance, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, ConeDegrees, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, AngleStep, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, Range, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, CenterActor, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, UnknownData_6FTD, 0x0151);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_Cone, 0x0158);
		}

		// class UEnvQueryGenerator_CurrentLocation : public UEnvQueryGenerator
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_CurrentLocation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_CurrentLocation, QueryContext, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_CurrentLocation, 0x0060);
		}

		// class UEnvQueryGenerator_Donut : public UEnvQueryGenerator_ProjectedPoints
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_Donut)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, InnerRadius, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, OuterRadius, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, NumberOfRings, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, PointsPerRing, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, ArcDirection, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, ArcAngle, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, bUseSpiralPattern, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, UnknownData_FLYA, 0x0199);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, Center, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, UnknownData_YVSU, 0x01A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_Donut, 0x01B0);
		}

		// class UEnvQueryGenerator_OnCircle : public UEnvQueryGenerator_ProjectedPoints
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_OnCircle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, CircleRadius, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, SpaceBetween, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, NumberOfPoints, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, PointOnCircleSpacingMethod, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, UnknownData_Q1B7, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, ArcDirection, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, ArcAngle, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, AngleRadians, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, UnknownData_PZ4S, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, CircleCenter, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, bIgnoreAnyContextActorsWhenGeneratingCircle, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, UnknownData_SOHS, 0x0181);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, CircleCenterZOffset, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, TraceData, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, UnknownData_IDFZ, 0x01E9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_OnCircle, 0x01F0);
		}

		// class UEnvQueryGenerator_SimpleGrid : public UEnvQueryGenerator_ProjectedPoints
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_SimpleGrid)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_SimpleGrid, GridSize, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_SimpleGrid, SpaceBetween, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_SimpleGrid, GenerateAround, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_SimpleGrid, 0x00F0);
		}

		// class UEnvQueryGenerator_PathingGrid : public UEnvQueryGenerator_SimpleGrid
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_PathingGrid)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_PathingGrid, PathToItem, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_PathingGrid, NavigationFilter, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_PathingGrid, ScanRangeMultiplier, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_PathingGrid, 0x0158);
		}

		// class UEnvQueryInstanceBlueprintWrapper : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryInstanceBlueprintWrapper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, UnknownData_ODB8, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, QueryID, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, UnknownData_58P1, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, ItemType, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, OptionIndex, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, UnknownData_Z0LI, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, OnQueryFinishedEvent, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, UnknownData_13PW, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryInstanceBlueprintWrapper, 0x0088);
		}

		// class UEnvQueryItemType : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryItemType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryItemType, UnknownData_6DNA, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType, 0x0038);
		}

		// class UEnvQueryItemType_VectorBase : public UEnvQueryItemType
		TEST_METHOD(Class__AIModule__EnvQueryItemType_VectorBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType_VectorBase, 0x0038);
		}

		// class UEnvQueryItemType_ActorBase : public UEnvQueryItemType_VectorBase
		TEST_METHOD(Class__AIModule__EnvQueryItemType_ActorBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType_ActorBase, 0x0038);
		}

		// class UEnvQueryItemType_Actor : public UEnvQueryItemType_ActorBase
		TEST_METHOD(Class__AIModule__EnvQueryItemType_Actor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType_Actor, 0x0038);
		}

		// class UEnvQueryItemType_Direction : public UEnvQueryItemType_VectorBase
		TEST_METHOD(Class__AIModule__EnvQueryItemType_Direction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType_Direction, 0x0038);
		}

		// class UEnvQueryItemType_Point : public UEnvQueryItemType_VectorBase
		TEST_METHOD(Class__AIModule__EnvQueryItemType_Point)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType_Point, 0x0038);
		}

		// class UEnvQueryManager : public UAISubsystem
		TEST_METHOD(Class__AIModule__EnvQueryManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, UnknownData_DWOX, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, InstanceCache, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, LocalContexts, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, GCShieldedWrappers, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, UnknownData_I0IR, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, MaxAllowedTestingTime, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, bTestQueriesUsingBreadth, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, UnknownData_8B4C, 0x01D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, QueryCountWarningThreshold, 0x01DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, QueryCountWarningInterval, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, UnknownData_G8VV, 0x01E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryManager, 0x01F0);
		}

		// class UEnvQueryOption : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryOption)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryOption, Generator, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryOption, Tests, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryOption, 0x0048);
		}

		// class UEnvQueryTest : public UEnvQueryNode
		TEST_METHOD(Class__AIModule__EnvQueryTest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, TestOrder, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, TestPurpose, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_TUZS, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, TestComment, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, MultipleContextFilterOp, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, MultipleContextScoreOp, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, FilterType, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_LKIZ, 0x0053);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, BoolValue, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, FloatValueMin, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, FloatValueMax, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_NW1Z, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ScoringEquation, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ClampMinType, 0x00EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ClampMaxType, 0x00EB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, NormalizationType, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_9UWF, 0x00ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ScoreClampMin, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ScoreClampMax, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ScoringFactor, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ReferenceValue, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, bDefineReferenceValue, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_ZEW2, 0x01B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_YN0E, 0x01C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest, 0x01C8);
		}

		// class UEnvQueryTest_Distance : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Distance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Distance, TestMode, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Distance, UnknownData_Z83Y, 0x01C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Distance, DistanceTo, 0x01D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Distance, 0x01D8);
		}

		// class UEnvQueryTest_Dot : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Dot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Dot, LineA, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Dot, LineB, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Dot, TestMode, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Dot, bAbsoluteValue, 0x0209);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Dot, UnknownData_5IB2, 0x020A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Dot, 0x0210);
		}

		// class UEnvQueryTest_GameplayTags : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_GameplayTags)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_GameplayTags, TagQueryToMatch, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_GameplayTags, bUpdatedToUseQuery, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_GameplayTags, TagsToMatch, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_GameplayTags, UnknownData_H4CL, 0x0212);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_GameplayTags, GameplayTags, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_GameplayTags, 0x0238);
		}

		// class UEnvQueryTest_Overlap : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Overlap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Overlap, OverlapData, 0x01C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Overlap, 0x01E8);
		}

		// class UEnvQueryTest_Pathfinding : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Pathfinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, TestMode, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, UnknownData_O5Z3, 0x01C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, Context, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, PathFromContext, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, SkipUnreachable, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, FilterClass, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Pathfinding, 0x0240);
		}

		// class UEnvQueryTest_PathfindingBatch : public UEnvQueryTest_Pathfinding
		TEST_METHOD(Class__AIModule__EnvQueryTest_PathfindingBatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_PathfindingBatch, ScanRangeMultiplier, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_PathfindingBatch, 0x0270);
		}

		// class UEnvQueryTest_Project : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Project)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Project, ProjectionData, 0x01C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Project, 0x01F8);
		}

		// class UEnvQueryTest_Random : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Random)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Random, 0x01C8);
		}

		// class UEnvQueryTest_Trace : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Trace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Trace, TraceData, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Trace, TraceFromContext, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Trace, ItemHeightOffset, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Trace, ContextHeightOffset, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Trace, Context, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Trace, 0x0290);
		}

		// class UEnvQueryTypes : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTypes, 0x0030);
		}

		// class UEQSQueryResultSourceInterface : public UInterface
		TEST_METHOD(Class__AIModule__EQSQueryResultSourceInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEQSQueryResultSourceInterface, 0x0030);
		}

		// class UEQSRenderingComponent : public UPrimitiveComponent
		TEST_METHOD(Class__AIModule__EQSRenderingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEQSRenderingComponent, UnknownData_II0L, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEQSRenderingComponent, UnknownData_NYJV, 0x0580);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEQSRenderingComponent, 0x0620);
		}

		// class AEQSTestingPawn : public ACharacter
		TEST_METHOD(Class__AIModule__EQSTestingPawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, UnknownData_3D2O, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, QueryTemplate, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, QueryParams, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, QueryConfig, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, TimeLimitPerStep, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, StepToDebugDraw, 0x077C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, HighlightMode, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, UnknownData_3U2N, 0x0781);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, UnknownData_RU4E, 0x0785);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, QueryingMode, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, UnknownData_U8RE, 0x0789);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, NavAgentProperties, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, UnknownData_SK14, 0x07C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AEQSTestingPawn, 0x07E0);
		}

		// class UGenericTeamAgentInterface : public UInterface
		TEST_METHOD(Class__AIModule__GenericTeamAgentInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGenericTeamAgentInterface, 0x0030);
		}

		// class AGridPathAIController : public AAIController
		TEST_METHOD(Class__AIModule__GridPathAIController)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGridPathAIController, 0x0440);
		}

		// class UGridPathFollowingComponent : public UPathFollowingComponent
		TEST_METHOD(Class__AIModule__GridPathFollowingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridPathFollowingComponent, GridManager, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridPathFollowingComponent, UnknownData_P2OA, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGridPathFollowingComponent, 0x02E0);
		}

		// class UNavFilter_AIControllerDefault : public UNavigationQueryFilter
		TEST_METHOD(Class__AIModule__NavFilter_AIControllerDefault)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavFilter_AIControllerDefault, 0x0050);
		}

		// class ANavLinkProxy : public AActor
		TEST_METHOD(Class__AIModule__NavLinkProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, UnknownData_DEFG, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, PointLinks, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, SegmentLinks, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, SmartLinkComp, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, bSmartLinkIsRelevant, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, UnknownData_PPIG, 0x0371);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, OnSmartLinkReached, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavLinkProxy, 0x0388);
		}

		// class UNavLocalGridManager : public UObject
		TEST_METHOD(Class__AIModule__NavLocalGridManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLocalGridManager, UnknownData_6AQO, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLocalGridManager, 0x0060);
		}

		// class UPathFollowingManager : public UObject
		TEST_METHOD(Class__AIModule__PathFollowingManager)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPathFollowingManager, 0x0030);
		}

		// class UPawnAction : public UObject
		TEST_METHOD(Class__AIModule__PawnAction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, ChildAction, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, ParentAction, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, OwnerComponent, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, Instigator, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, BrainComp, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, UnknownData_CMM3, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, UnknownData_4FBA, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction, 0x00A0);
		}

		// class UPawnAction_BlueprintBase : public UPawnAction
		TEST_METHOD(Class__AIModule__PawnAction_BlueprintBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction_BlueprintBase, 0x00A0);
		}

		// class UPawnAction_Move : public UPawnAction
		TEST_METHOD(Class__AIModule__PawnAction_Move)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Move, GoalActor, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Move, GoalLocation, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Move, AcceptableRadius, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Move, FilterClass, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Move, UnknownData_BN4E, 0x00C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction_Move, 0x00F0);
		}

		// class UIngame_ChatTextbox_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Ingame_ChatTextbox__Ingame_ChatTextbox_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_ChatTextbox_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_ChatTextbox_C, FadeOut, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_ChatTextbox_C, TextBlock_Chat, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_ChatTextbox_C, ChatType, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_ChatTextbox_C, Timeout, 0x0261);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_ChatTextbox_C, UnknownData_D2U4, 0x0262);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_ChatTextbox_C, Ingame_ChatBox, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIngame_ChatTextbox_C, 0x0270);
		}

		// class UPawnAction_Repeat : public UPawnAction
		TEST_METHOD(Class__AIModule__PawnAction_Repeat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Repeat, ActionToRepeat, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Repeat, RecentActionCopy, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Repeat, ChildFailureHandlingMode, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Repeat, UnknownData_8SWT, 0x00B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction_Repeat, 0x00C0);
		}

		// class UPawnAction_Sequence : public UPawnAction
		TEST_METHOD(Class__AIModule__PawnAction_Sequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Sequence, ActionSequence, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Sequence, ChildFailureHandlingMode, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Sequence, UnknownData_SCGV, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Sequence, RecentActionCopy, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Sequence, UnknownData_272C, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction_Sequence, 0x00C8);
		}

		// class UPawnAction_Wait : public UPawnAction
		TEST_METHOD(Class__AIModule__PawnAction_Wait)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Wait, TimeToWait, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Wait, UnknownData_QVF8, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction_Wait, 0x00B0);
		}

		// class UPawnActionsComponent : public UActorComponent
		TEST_METHOD(Class__AIModule__PawnActionsComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnActionsComponent, ControlledPawn, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnActionsComponent, ActionStacks, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnActionsComponent, ActionEvents, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnActionsComponent, CurrentAction, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnActionsComponent, UnknownData_6QS8, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnActionsComponent, 0x0138);
		}

		// class UPawnSensingComponent : public UActorComponent
		TEST_METHOD(Class__AIModule__PawnSensingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, HearingThreshold, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, LOSHearingThreshold, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, SightRadius, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, SensingInterval, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, HearingMaxSoundAge, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, UnknownData_SMXF, 0x0115);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, OnSeePawn, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, OnHearNoise, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, PeripheralVisionAngle, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, PeripheralVisionCosine, 0x0144);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnSensingComponent, 0x0148);
		}

		// class UVisualLoggerExtension : public UObject
		TEST_METHOD(Class__AIModule__VisualLoggerExtension)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisualLoggerExtension, 0x0030);
		}

		// class UIngame_Sticker_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Ingame_Sticker__Ingame_Sticker_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Sticker_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Sticker_C, Begin, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Sticker_C, Selector, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Sticker_C, Sticker, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Sticker_C, CurrentSelect, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Sticker_C, UnknownData_OT12, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Sticker_C, ImageList, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Sticker_C, LightImageList, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIngame_Sticker_C, 0x0290);
		}

		// class UFixedFrameRateCustomTimeStep : public UEngineCustomTimeStep
		TEST_METHOD(Class__TimeManagement__FixedFrameRateCustomTimeStep)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFixedFrameRateCustomTimeStep, FixedFrameRate, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFixedFrameRateCustomTimeStep, 0x0038);
		}

		// class UTimeManagementBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__TimeManagement__TimeManagementBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimeManagementBlueprintLibrary, 0x0030);
		}

		// class UTimeSynchronizationSource : public UObject
		TEST_METHOD(Class__TimeManagement__TimeSynchronizationSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizationSource, bUseForSynchronization, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizationSource, UnknownData_UV8W, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizationSource, FrameOffset, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimeSynchronizationSource, 0x0038);
		}

		// class ALD_Back_Base_C : public ALD_Base_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Back_Base__LD_Back_Base_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALD_Back_Base_C, UnknownData_3NE3, 0x0501);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALD_Back_Base_C, UberGraphFrame, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALD_Back_Base_C, ChildActorAcc, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALD_Back_Base_C, SkeletalMeshAcc, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALD_Back_Base_C, StaticMeshAcc, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALD_Back_Base_C, SkeletalMeshCharacter, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALD_Back_Base_C, bUseMasterPose, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALD_Back_Base_C, UnknownData_VWFW, 0x0539);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALD_Back_Base_C, SkinMesh, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALD_Back_Base_C, AnimationPreview, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALD_Back_Base_C, OnClickMesh, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALD_Back_Base_C, bIsOnFocus, 0x0551);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALD_Back_Base_C, UnknownData_U31K, 0x0552);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALD_Back_Base_C, Socket, 0x0554);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Back_Base_C, 0x055C);
		}

		// class UEditorStyleSettings : public UObject
		TEST_METHOD(Class__EditorStyle__EditorStyleSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditorStyleSettings, bEnableHighDPIAwareness, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditorStyleSettings, ColorVisionDeficiencyPreviewType, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditorStyleSettings, UnknownData_8OKY, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditorStyleSettings, ColorVisionDeficiencySeverity, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditorStyleSettings, bColorVisionDeficiencyCorrection, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditorStyleSettings, bColorVisionDeficiencyCorrectionPreviewWithDeficiency, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditorStyleSettings, UnknownData_Y8QB, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditorStyleSettings, SelectionColor, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditorStyleSettings, PressedSelectionColor, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditorStyleSettings, InactiveSelectionColor, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditorStyleSettings, KeyboardFocusColor, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditorStyleSettings, EditorWindowBackgroundColor, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditorStyleSettings, UnknownData_9J38, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditorStyleSettings, EditorMainWindowBackgroundOverride, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditorStyleSettings, EditorChildWindowBackgroundOverride, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditorStyleSettings, bResetEditorWindowBackgroundSettings, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditorStyleSettings, UnknownData_BLCV, 0x01A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditorStyleSettings, UnknownData_ZEZH, 0x01A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditorStyleSettings, RegularColor, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditorStyleSettings, RuleColor, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditorStyleSettings, CenterColor, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditorStyleSettings, GridSnapSize, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditorStyleSettings, UnknownData_BJUM, 0x01DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditorStyleSettings, LogBackgroundColor, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditorStyleSettings, LogSelectionBackgroundColor, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditorStyleSettings, LogNormalColor, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditorStyleSettings, LogCommandColor, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditorStyleSettings, LogWarningColor, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditorStyleSettings, LogErrorColor, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditorStyleSettings, UnknownData_SD2X, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditorStyleSettings, LogFontSize, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditorStyleSettings, LogTimestampMode, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditorStyleSettings, bPromoteOutputLogWarningsDuringPIE, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditorStyleSettings, AssetEditorOpenLocation, 0x024A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditorStyleSettings, UnknownData_7902, 0x024B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditorStyleSettings, UnknownData_PLJ9, 0x024D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditorStyleSettings, 0x0268);
		}

		// class UBTTask_HunterAttack_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTTask_HunterAttack__BTTask_HunterAttack_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_HunterAttack_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_HunterAttack_C, survivor, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_HunterAttack_C, 0x00E0);
		}

		// class UWidget_WeeklyQuest_Item_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_WeeklyQuest_Item__Widget_WeeklyQuest_Item_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_WeeklyQuest_Item_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_WeeklyQuest_Item_C, ClaimPanel, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_WeeklyQuest_Item_C, Image_92, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_WeeklyQuest_Item_C, Image_BG, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_WeeklyQuest_Item_C, Image_Blackfill, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_WeeklyQuest_Item_C, Image_Claimed, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_WeeklyQuest_Item_C, QuestIcon, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_WeeklyQuest_Item_C, Text_Description, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_WeeklyQuest_Item_C, Text_Name, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_WeeklyQuest_Item_C, Text_Value, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_WeeklyQuest_Item_C, 0x0298);
		}

		// class USourceControlHelpers : public UObject
		TEST_METHOD(Class__SourceControl__SourceControlHelpers)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceControlHelpers, 0x0030);
		}

		// class AInteractControlCamera_C : public APawn
		TEST_METHOD(BlueprintGeneratedClass__InteractControlCamera__InteractControlCamera_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractControlCamera_C, UberGraphFrame, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractControlCamera_C, Camera, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractControlCamera_C, SpringArm, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractControlCamera_C, Scene, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractControlCamera_C, Yaw, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractControlCamera_C, Pitch, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractControlCamera_C, PitchClampMin, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractControlCamera_C, PitchClampMax, 0x03CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInteractControlCamera_C, 0x03D0);
		}

		// class UMoviePlayerSettings : public UObject
		TEST_METHOD(Class__MoviePlayer__MoviePlayerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoviePlayerSettings, bWaitForMoviesToComplete, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoviePlayerSettings, bMoviesAreSkippable, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoviePlayerSettings, UnknownData_37FV, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoviePlayerSettings, StartupMovies, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMoviePlayerSettings, 0x0048);
		}

		// class ACameraBase_C : public APawn
		TEST_METHOD(BlueprintGeneratedClass__CameraBase__CameraBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraBase_C, Camera, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraBase_C, Scene, 0x03A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACameraBase_C, 0x03A8);
		}

		// class UzBingz_Lobby_ABP_C : public USurvivor_Lobby_ABP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__zBingz_Lobby_ABP__zBingz_Lobby_ABP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UzBingz_Lobby_ABP_C, 0x0A1A);
		}

		// class UWidget_RP_RewardPanel_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_RP_RewardPanel__Widget_RP_RewardPanel_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RP_RewardPanel_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RP_RewardPanel_C, Button_Back, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RP_RewardPanel_C, Button_Next, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RP_RewardPanel_C, Image_116, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RP_RewardPanel_C, ItemPanel, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RP_RewardPanel_C, ScrollBox_164, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RP_RewardPanel_C, Widget_RoyalPass_Header, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RP_RewardPanel_C, Widget_RoyalPass_Item, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RP_RewardPanel_C, Widget_RoyalPass_Item_C_2, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RP_RewardPanel_C, Widget_RoyalPass_Item_C_3, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RP_RewardPanel_C, Widget_RoyalPass_Item_C_4, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RP_RewardPanel_C, Widget_RoyalPass_Item_C_5, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RP_RewardPanel_C, Widget_RoyalPass_Item_C_6, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RP_RewardPanel_C, Widget_RoyalPass_Item_C_7, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RP_RewardPanel_C, Widget_RoyalPass_Item_C_8, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RP_RewardPanel_C, Widget_RoyalPass_Item_C_9, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RP_RewardPanel_C, Widget_RoyalPass_Item_C_10, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RP_RewardPanel_C, Widget_RoyalPass_Item_C_11, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RP_RewardPanel_C, Direction, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_RP_RewardPanel_C, 0x02DC);
		}

		// class UPrimaryAssetsFunctionLibrary_C : public UBlueprintFunctionLibrary
		TEST_METHOD(BlueprintGeneratedClass__PrimaryAssetsFunctionLibrary__PrimaryAssetsFunctionLibrary_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimaryAssetsFunctionLibrary_C, 0x0030);
		}

		// class UAIFunctionLibrary_C : public UBlueprintFunctionLibrary
		TEST_METHOD(BlueprintGeneratedClass__AIFunctionLibrary__AIFunctionLibrary_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIFunctionLibrary_C, 0x0030);
		}

		// class UGE_Buff_SharpEye_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Buff_SharpEye__GE_Buff_SharpEye_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Buff_SharpEye_C, 0x05F8);
		}

		// class UWidget_WeeklyQuestPanel_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_WeeklyQuestPanel__Widget_WeeklyQuestPanel_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_WeeklyQuestPanel_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_WeeklyQuestPanel_C, End, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_WeeklyQuestPanel_C, Begin, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_WeeklyQuestPanel_C, BG, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_WeeklyQuestPanel_C, ContentBG, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_WeeklyQuestPanel_C, HorizontalBox_173, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_WeeklyQuestPanel_C, Image_Bottom, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_WeeklyQuestPanel_C, Image_Fog, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_WeeklyQuestPanel_C, Image_glow, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_WeeklyQuestPanel_C, Image_Icon, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_WeeklyQuestPanel_C, Image_Upper, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_WeeklyQuestPanel_C, Text_dayremains, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_WeeklyQuestPanel_C, Text_Hoursremains, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_WeeklyQuestPanel_C, Widget_Button_Exit, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_WeeklyQuestPanel_C, Widget_Text, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_WeeklyQuestPanel_C, Widget_WeeklyQuest_Item, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_WeeklyQuestPanel_C, Widget_WeeklyQuest_Item_C_1, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_WeeklyQuestPanel_C, Widget_WeeklyQuest_Item_C_2, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_WeeklyQuestPanel_C, Widget_WeeklyQuest_Item_C_3, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_WeeklyQuestPanel_C, Widget_WeeklyQuest_Item_C_4, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_WeeklyQuestPanel_C, Widget_WeeklyQuest_Item_C_5, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_WeeklyQuestPanel_C, OnExit, 0x02F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_WeeklyQuestPanel_C, 0x0300);
		}

		// class UGE_ApplicationRequirement_Bloodthirst_C : public UGameplayEffectCustomApplicationRequirement
		TEST_METHOD(BlueprintGeneratedClass__GE_ApplicationRequirement_Bloodthirst__GE_ApplicationRequirement_Bloodthirst_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_ApplicationRequirement_Bloodthirst_C, 0x0030);
		}

		// class UWidget_MenuBar_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_MenuBar__Widget_MenuBar_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MenuBar_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MenuBar_C, BG, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MenuBar_C, HorizontalBox_3, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MenuBar_C, Slash, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MenuBar_C, Slash2, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MenuBar_C, Slash3, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MenuBar_C, Slash4, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MenuBar_C, Widget_Button_Customize, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MenuBar_C, Widget_Button_Lootbox, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MenuBar_C, Widget_Button_Profile, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MenuBar_C, Widget_Button_Store, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MenuBar_C, Widget_Button_Switchrole, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MenuBar_C, MenuList, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MenuBar_C, MenuActive, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MenuBar_C, ChildPadding, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MenuBar_C, OnCustomize, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MenuBar_C, OnSwitchRole, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MenuBar_C, OnLootbox, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MenuBar_C, OnProfile, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MenuBar_C, OnStore, 0x0398);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_MenuBar_C, 0x03A8);
		}

		// class UGE_CooldownBellePortal_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_CooldownBellePortal__GE_CooldownBellePortal_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_CooldownBellePortal_C, 0x05F8);
		}

		// class UBTTask_SurvivorAttackHunter_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTTask_SurvivorAttackHunter__BTTask_SurvivorAttackHunter_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SurvivorAttackHunter_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SurvivorAttackHunter_C, AcceptanceRadius, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SurvivorAttackHunter_C, bIsMelee, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SurvivorAttackHunter_C, UnknownData_QXL5, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SurvivorAttackHunter_C, CacheHunter, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_SurvivorAttackHunter_C, 0x00C8);
		}

		// class UBTTask_FindRespawnPlace_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTTask_FindRespawnPlace__BTTask_FindRespawnPlace_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_FindRespawnPlace_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_FindRespawnPlace_C, TargetPointKey, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_FindRespawnPlace_C, TargetLocationKey, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_FindRespawnPlace_C, FindSuccess, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_FindRespawnPlace_C, 0x0109);
		}

		// class UGE_Debuff_Poltergeist_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Debuff_Poltergeist__GE_Debuff_Poltergeist_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Debuff_Poltergeist_C, 0x05F8);
		}

		// class UWidget_BuyLevelSelection_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_BuyLevelSelection__Widget_BuyLevelSelection_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_BuyLevelSelection_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_BuyLevelSelection_C, BG, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_BuyLevelSelection_C, BG_Header, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_BuyLevelSelection_C, Text_Description, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_BuyLevelSelection_C, Widget_Button_Buy, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_BuyLevelSelection_C, Widget_BuyLevel_Multi, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_BuyLevelSelection_C, Widget_BuyLevel_Single, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_BuyLevelSelection_C, Widget_Text_Header, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_BuyLevelSelection_C, WidgetSwitcher_BuyLevelType, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_BuyLevelSelection_C, ActiveIndex, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_BuyLevelSelection_C, UnknownData_D6KE, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_BuyLevelSelection_C, HeaderText, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_BuyLevelSelection_C, DescriptionText, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_BuyLevelSelection_C, MainBackground, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_BuyLevelSelection_C, 0x02D0);
		}

		// class UBTService_CheckingNearHunter_C : public UBTService_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTService_CheckingNearHunter__BTService_CheckingNearHunter_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_CheckingNearHunter_C, UberGraphFrame, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_CheckingNearHunter_C, RunModeKey, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_CheckingNearHunter_C, SeenAlpha, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_CheckingNearHunter_C, DecreaseAlphaRate, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_CheckingNearHunter_C, HeightOffset, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_CheckingNearHunter_C, NearOffsetEnter, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_CheckingNearHunter_C, NearOffsetExit, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_CheckingNearHunter_C, 0x00EC);
		}

		// class UOptionSystemSaveGame_C : public USaveGame
		TEST_METHOD(BlueprintGeneratedClass__OptionSystemSaveGame__OptionSystemSaveGame_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionSystemSaveGame_C, UberGraphFrame, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionSystemSaveGame_C, CurrentValue, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionSystemSaveGame_C, DefualtValue, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOptionSystemSaveGame_C, 0x00D0);
		}

		// class APickable_MagicRice_C : public APickable_WeaponBase_C
		TEST_METHOD(BlueprintGeneratedClass__Pickable_MagicRice__Pickable_MagicRice_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APickable_MagicRice_C, UberGraphFrame, 0x07A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APickable_MagicRice_C, 0x07B0);
		}

		// class UGE_StatusHunterBelle_C : public UGE_StatusHunterBase_C
		TEST_METHOD(BlueprintGeneratedClass__GE_StatusHunterBelle__GE_StatusHunterBelle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_StatusHunterBelle_C, 0x05F8);
		}

		// class AProjectileBase_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__ProjectileBase__ProjectileBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectileBase_C, UberGraphFrame, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectileBase_C, Projectiles, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectileBase_C, Arrow, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectileBase_C, Capsule, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectileBase_C, ProjectileMovement, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectileBase_C, EffectContainerSpec, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectileBase_C, HitActors, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectileBase_C, AssetID, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectileBase_C, AutoDestroy, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectileBase_C, AutoDestroyDistance, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectileBase_C, StartLocation, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectileBase_C, PreviousLocation, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectileBase_C, bIsHit, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectileBase_C, bDestroyImmediately, 0x03D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectileBase_C, UnknownData_B83Y, 0x03DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectileBase_C, SoundOnHit, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectileBase_C, bIsHitWall, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectileBase_C, UnknownData_UHXE, 0x03E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectileBase_C, FXProjectile, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectileBase_C, FXHit, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectileBase_C, SoundFXOnHit, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectileBase_C, HitType, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectileBase_C, bShouldDestroyByDistance, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectileBase_C, UnknownData_XE0O, 0x0419);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectileBase_C, HitTypeRadius, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectileBase_C, HitWallFloorRadius, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectileBase_C, DebugTrace, 0x0424);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AProjectileBase_C, 0x0425);
		}

		// class UGA_PA_HunterPrisonerPrisonerChain_C : public UGA_PA_HunterBase_C
		TEST_METHOD(BlueprintGeneratedClass__GA_PA_HunterPrisonerPrisonerChain__GA_PA_HunterPrisonerPrisonerChain_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_PA_HunterPrisonerPrisonerChain_C, UberGraphFrame, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_PA_HunterPrisonerPrisonerChain_C, Montage, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_PA_HunterPrisonerPrisonerChain_C, RefSurvivor, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_PA_HunterPrisonerPrisonerChain_C, Hook_Duration, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_PA_HunterPrisonerPrisonerChain_C, Hook_Speed, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_PA_HunterPrisonerPrisonerChain_C, Hook_WaitDuration, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_PA_HunterPrisonerPrisonerChain_C, Hook_DelaySurvivorAfterHook, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_PA_HunterPrisonerPrisonerChain_C, TraceLength, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_PA_HunterPrisonerPrisonerChain_C, CooldownHookMiss, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_PA_HunterPrisonerPrisonerChain_C, bHookSuccess, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_PA_HunterPrisonerPrisonerChain_C, UnknownData_GHBX, 0x0489);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_PA_HunterPrisonerPrisonerChain_C, HookBound, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_PA_HunterPrisonerPrisonerChain_C, CameraLocation, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_PA_HunterPrisonerPrisonerChain_C, CameraForward, 0x04A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_PA_HunterPrisonerPrisonerChain_C, 0x04B0);
		}

		// class UWidget_Announcement_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_Announcement__Widget_Announcement_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Announcement_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Announcement_C, CheckBox_192, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Announcement_C, Image_109, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Announcement_C, WebBrowser_71, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Announcement_C, Widget_Button, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Announcement_C, Widget_Button_C_2, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Announcement_C, WidgetSwitcher_336, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Announcement_C, bCanSetNotShowAgain, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Announcement_C, UnknownData_JL9G, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Announcement_C, OnConfirm, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Announcement_C, URL, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_Announcement_C, 0x02A8);
		}

		// class AStudentFSurvivor_C : public ASurvivorBase_C
		TEST_METHOD(BlueprintGeneratedClass__StudentFSurvivor__StudentFSurvivor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AStudentFSurvivor_C, UberGraphFrame, 0x0F80);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStudentFSurvivor_C, Box, 0x0F90);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStudentFSurvivor_C, Attacking, 0x0F98);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AStudentFSurvivor_C, 0x0FA8);
		}

		// class UGE_CooldownWeaknessDetector_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_CooldownWeaknessDetector__GE_CooldownWeaknessDetector_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_CooldownWeaknessDetector_C, 0x05F8);
		}

		// class UWidget_LoginSteam_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_LoginSteam__Widget_LoginSteam_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LoginSteam_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LoginSteam_C, CircularThrobber_Loading, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LoginSteam_C, TextBlock_Status, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LoginSteam_C, Widget_Button, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LoginSteam_C, LoginObject, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LoginSteam_C, CacheRequest, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LoginSteam_C, AnnouncementVersion, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LoginSteam_C, AnnouncementOnline, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LoginSteam_C, AnnouncementOffline, 0x03C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_LoginSteam_C, 0x03D0);
		}

		// class UNS_Weapon_C : public UAnimNotifyState
		TEST_METHOD(BlueprintGeneratedClass__NS_Weapon__NS_Weapon_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNS_Weapon_C, Tag, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNS_Weapon_C, 0x0040);
		}

		// class UIngame_NotifyExecution_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Ingame_NotifyExecution__Ingame_NotifyExecution_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_NotifyExecution_C, Begin, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_NotifyExecution_C, Image_183, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_NotifyExecution_C, Image_185, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_NotifyExecution_C, Widget_TextWithInputImage, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_NotifyExecution_C, Widget_TextWithInputImage_184, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIngame_NotifyExecution_C, 0x0268);
		}

		// class UNS_PickupNailOnSkull_C : public UAnimNotifyState
		TEST_METHOD(BlueprintGeneratedClass__NS_PickupNailOnSkull__NS_PickupNailOnSkull_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNS_PickupNailOnSkull_C, Tag, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNS_PickupNailOnSkull_C, 0x0040);
		}

		// class UWidget_RP_RewardHeader_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_RP_RewardHeader__Widget_RP_RewardHeader_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RP_RewardHeader_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RP_RewardHeader_C, Blackfill, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RP_RewardHeader_C, Free, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RP_RewardHeader_C, Free_BG, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RP_RewardHeader_C, Icon_Lock, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RP_RewardHeader_C, Image_115, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RP_RewardHeader_C, Image_393, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RP_RewardHeader_C, IsClaimedPremium, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RP_RewardHeader_C, Pre_BG, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RP_RewardHeader_C, Pre_Icon, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RP_RewardHeader_C, Premium, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RP_RewardHeader_C, Premium_Content, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RP_RewardHeader_C, Widget_Text, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RP_RewardHeader_C, Widget_Text_C_2, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RP_RewardHeader_C, Widget_Text_C_3, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RP_RewardHeader_C, Widget_Text_C_4, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RP_RewardHeader_C, Name, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_RP_RewardHeader_C, 0x02D8);
		}

		// class UWidget_ShowStatus3D_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_ShowStatus3D__Widget_ShowStatus3D_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ShowStatus3D_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ShowStatus3D_C, HorizontalBox_1, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ShowStatus3D_C, TextBlock_Status, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ShowStatus3D_C, Text, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ShowStatus3D_C, CacheIcons, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ShowStatus3D_C, CacheModes, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ShowStatus3D_C, CacheData, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_ShowStatus3D_C, 0x02A8);
		}

		// class UGE_CooldownPrisonerChain_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_CooldownPrisonerChain__GE_CooldownPrisonerChain_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_CooldownPrisonerChain_C, 0x05F8);
		}

		// class UIUIPingable_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__IUIPingable__IUIPingable_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIUIPingable_C, 0x0030);
		}

		// class ABP_GS_PlayerState_C : public APlayerState
		TEST_METHOD(BlueprintGeneratedClass__BP_GS_PlayerState__BP_GS_PlayerState_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GS_PlayerState_C, PlayerInfoComponent, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GS_PlayerState_C, DefaultSceneRoot, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_GS_PlayerState_C, 0x0470);
		}

		// class UWidget_MenubarPanel_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_MenubarPanel__Widget_MenubarPanel_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MenubarPanel_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MenubarPanel_C, Begin, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MenubarPanel_C, Refresh, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MenubarPanel_C, BG_Glowing, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MenubarPanel_C, ExtrasPanel, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MenubarPanel_C, Image_188, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MenubarPanel_C, PlayPanel, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MenubarPanel_C, Widget_Button_Exit, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MenubarPanel_C, Widget_Button_Play, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MenubarPanel_C, Widget_Button_Playmode, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MenubarPanel_C, Widget_Button_RoyalPass, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MenubarPanel_C, Widget_Button_Setting, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MenubarPanel_C, Widget_Button_Weekly, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MenubarPanel_C, Widget_MenuBar, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MenubarPanel_C, Widget_Text, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MenubarPanel_C, Widget_Text_C_2, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MenubarPanel_C, OnCustomize, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MenubarPanel_C, OnSwitchRole, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MenubarPanel_C, OnLootbox, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MenubarPanel_C, OnProfile, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MenubarPanel_C, OnPlay, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MenubarPanel_C, OnRecently, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MenubarPanel_C, OnExit, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MenubarPanel_C, OnSetting, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MenubarPanel_C, WidgetManager, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MenubarPanel_C, RecentMode, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MenubarPanel_C, DistortionValue, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MenubarPanel_C, IsEnable, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MenubarPanel_C, UnknownData_QM9Z, 0x0359);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MenubarPanel_C, OnStore, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MenubarPanel_C, OnRoyalPass, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MenubarPanel_C, OnWeekly, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_MenubarPanel_C, 0x0390);
		}

		// class AHiddenEffect_C : public ARitualEffectBase_C
		TEST_METHOD(BlueprintGeneratedClass__HiddenEffect__HiddenEffect_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHiddenEffect_C, UberGraphFrame, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHiddenEffect_C, Sphere1, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHiddenEffect_C, Timeline_0_IncScale_996C861B4C7ABB1ECD39A48797411384, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHiddenEffect_C, Timeline_0_FadeOutBlendWeight_996C861B4C7ABB1ECD39A48797411384, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHiddenEffect_C, Timeline_0__Direction_996C861B4C7ABB1ECD39A48797411384, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHiddenEffect_C, UnknownData_J6IK, 0x0399);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHiddenEffect_C, Timeline_1, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHiddenEffect_C, M_BoundEffect, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHiddenEffect_C, SurvivorList, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHiddenEffect_C, Height, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHiddenEffect_C, UnknownData_614Y, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHiddenEffect_C, PPI_HunterScanFX, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHiddenEffect_C, Color, 0x03D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHiddenEffect_C, 0x03E0);
		}

		// class UWidget_RoyalPass_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_RoyalPass__Widget_RoyalPass_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RoyalPass_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RoyalPass_C, Begin, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RoyalPass_C, BG, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RoyalPass_C, ContentBG, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RoyalPass_C, GAINEXP, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RoyalPass_C, Image_1, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RoyalPass_C, Image_188, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RoyalPass_C, ProgressBar_148, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RoyalPass_C, RESET_SEASON, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RoyalPass_C, ResetLevel, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RoyalPass_C, REVOKEPREMIUM, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RoyalPass_C, Text_dayremains, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RoyalPass_C, Text_Exp, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RoyalPass_C, Text_Hoursremains, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RoyalPass_C, Text_Level, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RoyalPass_C, Text_Premium, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RoyalPass_C, Text_SeasonName, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RoyalPass_C, TextBlock_5, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RoyalPass_C, Widget_Button_Exit, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RoyalPass_C, Widget_RoyalPassRewardPanel, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RoyalPass_C, Widgett_Button_PurchaseLevel, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RoyalPass_C, Widgett_Button_PurchasePremium, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RoyalPass_C, RoyalPassItem, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RoyalPass_C, OnExit, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RoyalPass_C, PurchaseLevelPanel, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RoyalPass_C, WidgetManager, 0x0320);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_RoyalPass_C, 0x0328);
		}

		// class ADestructibleBase_C : public AInteractionBase_C
		TEST_METHOD(BlueprintGeneratedClass__DestructibleBase__DestructibleBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADestructibleBase_C, UnknownData_1CQM, 0x06C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADestructibleBase_C, UberGraphFrame, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADestructibleBase_C, LookAtLocation, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADestructibleBase_C, SnapInvertLocation, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADestructibleBase_C, SnapLocation, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADestructibleBase_C, DestructableMesh, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADestructibleBase_C, InteractBox, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADestructibleBase_C, Destructible, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADestructibleBase_C, UnknownData_57HQ, 0x0709);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADestructibleBase_C, TransInteracterBox, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADestructibleBase_C, HalfHeight, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADestructibleBase_C, Radius, 0x0744);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADestructibleBase_C, BreakSound, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADestructibleBase_C, OnDestruct, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADestructibleBase_C, bIsHiddenState, 0x0760);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADestructibleBase_C, 0x0761);
		}

		// class UIngame_SkillcheckProgressComponent_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Ingame_SkillcheckProgressComponent__Ingame_SkillcheckProgressComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckProgressComponent_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckProgressComponent_C, ShowResult, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckProgressComponent_C, MissAnimation, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckProgressComponent_C, GreatAnimation, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckProgressComponent_C, PerfectAnimation, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckProgressComponent_C, StartAnimation, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckProgressComponent_C, EndAnimation, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckProgressComponent_C, Arrow, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckProgressComponent_C, SkillCheckFadeIn, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckProgressComponent_C, SkillCheckAnim, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckProgressComponent_C, SliderAnimation, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckProgressComponent_C, Great, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckProgressComponent_C, GridPanel_Parent, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckProgressComponent_C, Image_1, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckProgressComponent_C, Image_3, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckProgressComponent_C, Image_93, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckProgressComponent_C, Image_ArrowSkillcheck, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckProgressComponent_C, Image_EffectGlow, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckProgressComponent_C, Image_Main, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckProgressComponent_C, Image_NewArrow, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckProgressComponent_C, Image_NewBase, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckProgressComponent_C, Image_NewNormal, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckProgressComponent_C, Image_NewPerfect, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckProgressComponent_C, Image_Normal, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckProgressComponent_C, Image_Perfect, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckProgressComponent_C, Image_Shadow, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckProgressComponent_C, Panel_Normal, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckProgressComponent_C, Panel_Perfect, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckProgressComponent_C, Perfect, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckProgressComponent_C, Skillcheckbar_BG, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckProgressComponent_C, SkillCheckSlider, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckProgressComponent_C, SliderPanel, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckProgressComponent_C, TextBlock_Result, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckProgressComponent_C, VariantPosition, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckProgressComponent_C, VariantWidth, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckProgressComponent_C, VariantPositionPerfect, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckProgressComponent_C, SizeWidthPercentPerfect, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckProgressComponent_C, SizeWidth, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckProgressComponent_C, SliderOffetX, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckProgressComponent_C, MinWidth, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckProgressComponent_C, MaxWidth, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckProgressComponent_C, Expertise, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckProgressComponent_C, Speed, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckProgressComponent_C, MinPerfectWidth, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckProgressComponent_C, MaxPerfectWidth, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckProgressComponent_C, CacheAnimation, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckProgressComponent_C, bIsCommit, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckProgressComponent_C, UnknownData_UGZY, 0x0389);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckProgressComponent_C, NormalSize, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckProgressComponent_C, PerfectSize, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckProgressComponent_C, NormalPosition, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckProgressComponent_C, PerfectPosition, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckProgressComponent_C, UnknownData_MSXI, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckProgressComponent_C, SkillCheckKeys, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckProgressComponent_C, Index, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckProgressComponent_C, PerfectCount, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckProgressComponent_C, bIsReceiveSkillCheck, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckProgressComponent_C, UnknownData_G0GF, 0x03B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckProgressComponent_C, SkillButtonNum, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckProgressComponent_C, Mode, 0x03C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIngame_SkillcheckProgressComponent_C, 0x03C1);
		}

		// class UUMG_DebugMainMenu_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UMG_DebugMainMenu__UMG_DebugMainMenu_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMG_DebugMainMenu_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMG_DebugMainMenu_C, HorizontalBox_173, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMG_DebugMainMenu_C, Image_189, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMG_DebugMainMenu_C, 0x0260);
		}

		// class UGE_State_OnlyOnePerk_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_State_OnlyOnePerk__GE_State_OnlyOnePerk_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_State_OnlyOnePerk_C, 0x05F8);
		}

		// class UNS_CameraShake_C : public UAnimNotifyState
		TEST_METHOD(BlueprintGeneratedClass__NS_CameraShake__NS_CameraShake_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNS_CameraShake_C, 0x0038);
		}

		// class UWidget_Lobby_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_Lobby__Widget_Lobby_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Lobby_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Lobby_C, BG, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Lobby_C, Bottom_Shadow, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Lobby_C, HorizontalBox_1, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Lobby_C, MatchIDTextbox, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Lobby_C, PlayerStatusHorizonBox, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Lobby_C, Slash, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Lobby_C, SwitchRoleMenu, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Lobby_C, Text_Countdown, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Lobby_C, Text_MatchId, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Lobby_C, TextBlock_109, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Lobby_C, Top_shadow, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Lobby_C, Widget_Button, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Lobby_C, Widget_Button_Back, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Lobby_C, Widget_Button_Customize, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Lobby_C, Widget_Button_Exit, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Lobby_C, Widget_Button_LobbyPlayerRole, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Lobby_C, Widget_Button_Ready, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Lobby_C, Widget_Button_Setting, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Lobby_C, Widget_Button_Switchrole, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Lobby_C, WidgetSwitcher_1, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Lobby_C, LobbyPC, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Lobby_C, LobbyPS, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Lobby_C, ReadyStatus, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Lobby_C, UnknownData_I52D, 0x0301);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Lobby_C, LobbyPreviewCharacterManager, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Lobby_C, RoleString, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Lobby_C, ServerName, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Lobby_C, MapImage, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Lobby_C, MatchId, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Lobby_C, IsReady, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Lobby_C, IsOnCharacterSetting_, 0x0359);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Lobby_C, UnknownData_Q7SM, 0x035A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Lobby_C, Sorted_Player_Info, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Lobby_C, WidgetCharacterSetting, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Lobby_C, SurvivorRoleIcon, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Lobby_C, HunterRoleIcon, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Lobby_C, SpectatorRoleIcon, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Lobby_C, IsReadyAvailable, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Lobby_C, UnknownData_IE0M, 0x0391);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Lobby_C, LobbyPSList, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Lobby_C, Ping, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Lobby_C, UnknownData_I4DL, 0x03A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Lobby_C, Timer, 0x03B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_Lobby_C, 0x03B8);
		}

		// class UIngame_Emote_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Ingame_Emote__Ingame_Emote_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Emote_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Emote_C, Begin, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Emote_C, emote, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Emote_C, Selector, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Emote_C, CurrentSelect, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Emote_C, UnknownData_BO6K, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Emote_C, ImageList, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Emote_C, LightImageList, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIngame_Emote_C, 0x0290);
		}

		// class UGE_PP_SurvivorSilverLightNew_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_PP_SurvivorSilverLightNew__GE_PP_SurvivorSilverLightNew_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_PP_SurvivorSilverLightNew_C, 0x05F8);
		}

		// class APickable_Nail_C : public APickableItemBase_C
		TEST_METHOD(BlueprintGeneratedClass__Pickable_Nail__Pickable_Nail_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APickable_Nail_C, UberGraphFrame, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::APickable_Nail_C, Sphere, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::APickable_Nail_C, Target, 0x07A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APickable_Nail_C, 0x07A8);
		}

		// class AZBingCat_PreviewItem_Drinks_C : public AZBingCat_PreviewItemBase_C
		TEST_METHOD(BlueprintGeneratedClass__ZBingCat_PreviewItem_Drinks__ZBingCat_PreviewItem_Drinks_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AZBingCat_PreviewItem_Drinks_C, 0x0350);
		}

		// class UGE_Hunter_SpecterCooldown_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Hunter_SpecterCooldown__GE_Hunter_SpecterCooldown_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Hunter_SpecterCooldown_C, 0x05F8);
		}

		// class UUMG_Debug_LobbyMap_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UMG_Debug_LobbyMap__UMG_Debug_LobbyMap_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMG_Debug_LobbyMap_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMG_Debug_LobbyMap_C, Button_AddBelle, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMG_Debug_LobbyMap_C, Button_AddPrisoner, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMG_Debug_LobbyMap_C, Button_AddSurvivor, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMG_Debug_LobbyMap_C, Button_Graveyard, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMG_Debug_LobbyMap_C, Button_Hospital, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMG_Debug_LobbyMap_C, Button_Junkyard, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMG_Debug_LobbyMap_C, Button_Swamp, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMG_Debug_LobbyMap_C, Button_TestingMap, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMG_Debug_LobbyMap_C, CanvasPanel_3, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMG_Debug_LobbyMap_C, TextBlock_1, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMG_Debug_LobbyMap_C, TextBlock_202, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMG_Debug_LobbyMap_C, VerticalBox_3, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMG_Debug_LobbyMap_C, SurvivorRandom, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMG_Debug_LobbyMap_C, MatchedSurvivor, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMG_Debug_LobbyMap_C, 0x02C4);
		}

		// class AA_StickerWidget_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__A_StickerWidget__A_StickerWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_StickerWidget_C, UberGraphFrame, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_StickerWidget_C, Widget, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_StickerWidget_C, Scene, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_StickerWidget_C, CurrentParticle, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_StickerWidget_C, ViewTarget, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_StickerWidget_C, IsBusy, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_StickerWidget_C, UnknownData_2R4V, 0x0369);
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_StickerWidget_C, IngameSticker_Char, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AA_StickerWidget_C, 0x0378);
		}

		// class ULogsComponent_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__LogsComponent__LogsComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULogsComponent_C, UberGraphFrame, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULogsComponent_C, DefualtFileName, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULogsComponent_C, StartNumber, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULogsComponent_C, UnknownData_7F6F, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULogsComponent_C, LogsData, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULogsComponent_C, Directory, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULogsComponent_C, Format, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULogsComponent_C, LogsData_Activity, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULogsComponent_C, CachePlayerUsePotion, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULogsComponent_C, LogsMatchMakeData, 0x0178);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULogsComponent_C, 0x0188);
		}

		// class UWidget_Endgame_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_Endgame__Widget_Endgame_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Endgame_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Endgame_C, BGPingpong, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Endgame_C, Begin, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Endgame_C, Blood_frame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Endgame_C, FG, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Endgame_C, Image_116, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Endgame_C, Textคุณน่ะได้ตาย, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Endgame_C, Text, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_Endgame_C, 0x0298);
		}

		// class UWidget_StoreToken_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_StoreToken__Widget_StoreToken_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreToken_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreToken_C, Image_97, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreToken_C, Widget_ButtonChoiceTab, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreToken_C, Widget_ButtonChoiceTab_3, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreToken_C, Widget_StoreGrid_Hunter, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreToken_C, Widget_StoreGrid_Hunter_Panel, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreToken_C, Widget_StoreGrid_Survivor, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreToken_C, Widget_StoreGrid_Survivor_Panel, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreToken_C, WidgetSwitcher_Panel, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreToken_C, WidgetManager, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreToken_C, OnChioce, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreToken_C, OnChoice2, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreToken_C, CacheIsError, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreToken_C, UnknownData_OQRK, 0x02B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreToken_C, CacheResponse, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_StoreToken_C, 0x02C8);
		}

		// class UWDG_ActivityItem_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WDG_ActivityItem__WDG_ActivityItem_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWDG_ActivityItem_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWDG_ActivityItem_C, Old, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWDG_ActivityItem_C, Begin, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWDG_ActivityItem_C, Anim_1, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWDG_ActivityItem_C, BG, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWDG_ActivityItem_C, EventName, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWDG_ActivityItem_C, Text_Coins, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWDG_ActivityItem_C, Text_Score, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWDG_ActivityItem_C, Score, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWDG_ActivityItem_C, Coin, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWDG_ActivityItem_C, Event, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWDG_ActivityItem_C, 0x02A8);
		}

		// class APrayHunter_C : public AHunterBase_C
		TEST_METHOD(BlueprintGeneratedClass__PrayHunter__PrayHunter_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APrayHunter_C, UnknownData_2BJ9, 0x0E1C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrayHunter_C, UberGraphFrame, 0x0E20);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrayHunter_C, P_WaterVomit, 0x0E30);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrayHunter_C, P_WaterBall, 0x0E38);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrayHunter_C, P_PA, 0x0E40);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrayHunter_C, WaterVomit, 0x0E48);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrayHunter_C, ActivePerkLoop, 0x0E50);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrayHunter_C, A_BelleIdle01_EN_Cue, 0x0E58);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrayHunter_C, Box, 0x0E60);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrayHunter_C, BlendCamera_Alpha2_0DDA543B4318B41B28192D985B9D52A4, 0x0E68);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrayHunter_C, BlendCamera_Alpha_0DDA543B4318B41B28192D985B9D52A4, 0x0E6C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrayHunter_C, BlendCamera__Direction_0DDA543B4318B41B28192D985B9D52A4, 0x0E70);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrayHunter_C, UnknownData_3CNO, 0x0E71);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrayHunter_C, BlendCamera, 0x0E78);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrayHunter_C, bOnStateChanged, 0x0E80);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrayHunter_C, UnknownData_TP0P, 0x0E81);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrayHunter_C, BondName, 0x0E88);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrayHunter_C, ActivePerkAtkHitMontage, 0x0E98);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrayHunter_C, bIsTransform, 0x0EA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrayHunter_C, UnknownData_OBNO, 0x0EA1);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrayHunter_C, ActivePerkHitReactAnimMontage, 0x0EA8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrayHunter_C, 0x0EB0);
		}

		// class ALobbyPreviewCharacterManagerActor_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__LobbyPreviewCharacterManagerActor__LobbyPreviewCharacterManagerActor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALobbyPreviewCharacterManagerActor_C, UberGraphFrame, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALobbyPreviewCharacterManagerActor_C, HSURLobbyCameraManagerComponent, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALobbyPreviewCharacterManagerActor_C, DefaultSceneRoot, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALobbyPreviewCharacterManagerActor_C, OnInitializePreviewCamera, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALobbyPreviewCharacterManagerActor_C, LobbyInfo, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALobbyPreviewCharacterManagerActor_C, LobbyActorHunterList, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALobbyPreviewCharacterManagerActor_C, LobbyActorSurvivorList, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALobbyPreviewCharacterManagerActor_C, PlayerStateList, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALobbyPreviewCharacterManagerActor_C, ShowPreview, 0x03A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALobbyPreviewCharacterManagerActor_C, 0x03A9);
		}

		// class UIngame_VoteContinue_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Ingame_VoteContinue__Ingame_VoteContinue_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_VoteContinue_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_VoteContinue_C, Begin, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_VoteContinue_C, CircularThrobber_191, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_VoteContinue_C, HorizontalBox_PlayerIcon, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_VoteContinue_C, Image_206, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_VoteContinue_C, Image_360, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_VoteContinue_C, Image_507, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_VoteContinue_C, TextBlock_360, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_VoteContinue_C, Widget_Button_Continue, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_VoteContinue_C, Widget_Button_Leave, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_VoteContinue_C, WidgetSwitcher_98, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_VoteContinue_C, PlayerIcon, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_VoteContinue_C, OnContinue, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_VoteContinue_C, OnLeave, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_VoteContinue_C, bIsVote, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_VoteContinue_C, UnknownData_06S2, 0x0349);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_VoteContinue_C, CacheNumber, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_VoteContinue_C, CacheIsContinue, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_VoteContinue_C, OnRemoveWidget, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_VoteContinue_C, CacheVoteCounting, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIngame_VoteContinue_C, 0x0374);
		}

		// class AHSURLobbyGS_C : public AGameState
		TEST_METHOD(BlueprintGeneratedClass__HSURLobbyGS__HSURLobbyGS_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURLobbyGS_C, UberGraphFrame, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURLobbyGS_C, DefaultSceneRoot, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURLobbyGS_C, IsHunterSelected, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURLobbyGS_C, UnknownData_8YIA, 0x03B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURLobbyGS_C, HunterParticle, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURLobbyGS_C, LobbyPreviewCharacterManager, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURLobbyGS_C, IsSurvivorFull, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURLobbyGS_C, IsCustomMatch, 0x03C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURLobbyGS_C, UnknownData_TBAJ, 0x03CA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURLobbyGS_C, MatchId, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURLobbyGS_C, UnloadMapName, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURLobbyGS_C, LoadMapName, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURLobbyGS_C, TimerCheckingPlayer, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURLobbyGS_C, TimerCheckingNonPlayer, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURLobbyGS_C, MaxPlayers, 0x03F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHSURLobbyGS_C, 0x03FC);
		}

		// class AHSURPlayerController_C : public AHSHPlayerControllerNative
		TEST_METHOD(BlueprintGeneratedClass__HSURPlayerController__HSURPlayerController_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURPlayerController_C, UberGraphFrame, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURPlayerController_C, OptionManagerComponent, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURPlayerController_C, SteamAchievement, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURPlayerController_C, AchievementComponent, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURPlayerController_C, PlayerSettingsSave, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURPlayerController_C, PlayerInfo, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURPlayerController_C, bBlockAction, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURPlayerController_C, UnknownData_M7CM, 0x07E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURPlayerController_C, ResultUI, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURPlayerController_C, SummaryResultList, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURPlayerController_C, Spectator, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURPlayerController_C, EndgameCamera, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURPlayerController_C, DebugWindow, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURPlayerController_C, bBlockCamera, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURPlayerController_C, bIsSturdyUsed, 0x0819);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURPlayerController_C, UnknownData_GW8M, 0x081A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURPlayerController_C, BlockKeys, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURPlayerController_C, SettingUI, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURPlayerController_C, bIsInitUI, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURPlayerController_C, bIsInitSettings, 0x0839);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURPlayerController_C, UnknownData_WUO8, 0x083A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURPlayerController_C, InfoUI, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURPlayerController_C, FadeUI, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURPlayerController_C, bIsInitInfo, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURPlayerController_C, bIsMetHunter, 0x0851);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURPlayerController_C, UnknownData_WD7P, 0x0852);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURPlayerController_C, WidgetChatBox, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURPlayerController_C, bChatboxOpened, 0x0860);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHSURPlayerController_C, 0x0861);
		}

		// class UIngame_NotifyTextPortal_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Ingame_NotifyTextPortal__Ingame_NotifyTextPortal_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_NotifyTextPortal_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_NotifyTextPortal_C, StartAnimation, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_NotifyTextPortal_C, Image_100, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_NotifyTextPortal_C, TextBlock_Notify, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_NotifyTextPortal_C, bIsDestroy, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIngame_NotifyTextPortal_C, 0x0269);
		}

		// class UGE_PP_HunterBloodTrail_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_PP_HunterBloodTrail__GE_PP_HunterBloodTrail_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_PP_HunterBloodTrail_C, 0x05F8);
		}

		// class UHSURLobbyCameraManagerComponent_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__HSURLobbyCameraManagerComponent__HSURLobbyCameraManagerComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURLobbyCameraManagerComponent_C, UberGraphFrame, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURLobbyCameraManagerComponent_C, Camera_Survivor, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURLobbyCameraManagerComponent_C, Camera_Survivor_CharacterSetting, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURLobbyCameraManagerComponent_C, Camera_Hunter_CharacterSetting, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURLobbyCameraManagerComponent_C, Camera_Hunter, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURLobbyCameraManagerComponent_C, Camera_Current, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURLobbyCameraManagerComponent_C, Camera_Spectator, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHSURLobbyCameraManagerComponent_C, 0x0140);
		}

		// class UGE_State_Injured_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_State_Injured__GE_State_Injured_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_State_Injured_C, 0x05F8);
		}

		// class UWidget_CharacterStatus_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_CharacterStatus__Widget_CharacterStatus_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterStatus_C, VerticalBox_Status, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterStatus_C, Widget_StatusStar, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterStatus_C, Widget_StatusStar_C_2, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterStatus_C, Widget_StatusStar_C_3, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_CharacterStatus_C, 0x0260);
		}

		// class UGE_CooldownSuperheroLanding_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_CooldownSuperheroLanding__GE_CooldownSuperheroLanding_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_CooldownSuperheroLanding_C, 0x05F8);
		}

		// class ASoundControllerAmbient_C : public ASoundControllerBase_C
		TEST_METHOD(BlueprintGeneratedClass__SoundControllerAmbient__SoundControllerAmbient_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASoundControllerAmbient_C, UberGraphFrame, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASoundControllerAmbient_C, AmbientSounds, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASoundControllerAmbient_C, AttenuationSetting, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASoundControllerAmbient_C, MainAmbientSounds, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASoundControllerAmbient_C, SeletedAmbientSound, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASoundControllerAmbient_C, bActive, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASoundControllerAmbient_C, UnknownData_OUYN, 0x0385);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASoundControllerAmbient_C, MinDelayVariant, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASoundControllerAmbient_C, MaxDelayVariant, 0x038C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASoundControllerAmbient_C, 0x0390);
		}

		// class UGameLift_MatchMakingComponent_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__GameLift_MatchMakingComponent__GameLift_MatchMakingComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameLift_MatchMakingComponent_C, UberGraphFrame, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameLift_MatchMakingComponent_C, GameLiftObject_Ref, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameLift_MatchMakingComponent_C, LobbyID, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameLift_MatchMakingComponent_C, ticketId, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameLift_MatchMakingComponent_C, PlayerId, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameLift_MatchMakingComponent_C, IsDescribing, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameLift_MatchMakingComponent_C, UnknownData_CNB4, 0x0149);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameLift_MatchMakingComponent_C, WDG_Playmode, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameLift_MatchMakingComponent_C, IsSearching, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameLift_MatchMakingComponent_C, UnknownData_HPH1, 0x0159);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameLift_MatchMakingComponent_C, playerIds, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameLift_MatchMakingComponent_C, playerSession, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameLift_MatchMakingComponent_C, AWSPlayer, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameLift_MatchMakingComponent_C, DisplayName, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameLift_MatchMakingComponent_C, Survivorskill, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameLift_MatchMakingComponent_C, WidgetManager, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameLift_MatchMakingComponent_C, isDebug, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameLift_MatchMakingComponent_C, UnknownData_XOAU, 0x01B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameLift_MatchMakingComponent_C, AcceptMatchPopup, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameLift_MatchMakingComponent_C, MessagePopup, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameLift_MatchMakingComponent_C, Status, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameLift_MatchMakingComponent_C, IsInitialize, 0x01D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameLift_MatchMakingComponent_C, UnknownData_PKSF, 0x01D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameLift_MatchMakingComponent_C, GameSessionInfo, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameLift_MatchMakingComponent_C, CacheGamesession, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameLift_MatchMakingComponent_C, 0x0230);
		}

		// class UBTTask_RunAwayLoop_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTTask_RunAwayLoop__BTTask_RunAwayLoop_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunAwayLoop_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunAwayLoop_C, HunterCache, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunAwayLoop_C, TargetPointKey, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunAwayLoop_C, TargetLocationKey, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunAwayLoop_C, AcceptanceRadius, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunAwayLoop_C, UnknownData_0Z2X, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunAwayLoop_C, RunAwayModeKey, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunAwayLoop_C, TickTimer, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_RunAwayLoop_C, 0x014C);
		}

		// class UGE_Buff_ImmuneBelle_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Buff_ImmuneBelle__GE_Buff_ImmuneBelle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Buff_ImmuneBelle_C, 0x05F8);
		}

		// class UWidget_RP_BuyLevelPanel_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_RP_BuyLevelPanel__Widget_RP_BuyLevelPanel_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RP_BuyLevelPanel_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RP_BuyLevelPanel_C, Begin, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RP_BuyLevelPanel_C, BG_Black, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RP_BuyLevelPanel_C, BG_Glowing, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RP_BuyLevelPanel_C, BG_Header, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RP_BuyLevelPanel_C, Image_235, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RP_BuyLevelPanel_C, Widget_Button_Exit, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RP_BuyLevelPanel_C, Widget_BuyLevel_10Levels, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RP_BuyLevelPanel_C, Widget_BuyLevel_MaxLevels, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RP_BuyLevelPanel_C, Widget_BuyLevel_Single, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RP_BuyLevelPanel_C, Widget_Text_Header, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_RP_BuyLevelPanel_C, Widget_Text_subHeader, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_RP_BuyLevelPanel_C, 0x02A8);
		}

		// class UBTDecorator_IfHaveItemInHand_C : public UBTDecorator_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTDecorator_IfHaveItemInHand__BTDecorator_IfHaveItemInHand_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_IfHaveItemInHand_C, 0x00A8);
		}

		// class UFading_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Fading__Fading_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFading_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFading_C, Fade, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFading_C, Image_1, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFading_C, 0x0260);
		}

		// class UGE_State_FullHP_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_State_FullHP__GE_State_FullHP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_State_FullHP_C, 0x05F8);
		}

		// class UGE_GeneralFallingDamage_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_GeneralFallingDamage__GE_GeneralFallingDamage_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_GeneralFallingDamage_C, 0x05F8);
		}

		// class UGE_Debuff_WaterBinding_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Debuff_WaterBinding__GE_Debuff_WaterBinding_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Debuff_WaterBinding_C, 0x05F8);
		}

		// class UGE_Buff_CanSpawn_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Buff_CanSpawn__GE_Buff_CanSpawn_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Buff_CanSpawn_C, 0x05F8);
		}

		// class UWidget_OptionSound_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_OptionSound__Widget_OptionSound_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionSound_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionSound_C, Widget_Button_Active, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionSound_C, Widget_Button_Default, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionSound_C, Widget_ButtonSlider_BGM, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionSound_C, Widget_ButtonSlider_Master, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionSound_C, Widget_ButtonSlider_SFX, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionSound_C, Widget_ButtonSlider_Voice, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionSound_C, OptionManager, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_OptionSound_C, 0x0288);
		}

		// class UBTDecorator_IfCanPlaceTrap_C : public UBTDecorator_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTDecorator_IfCanPlaceTrap__BTDecorator_IfCanPlaceTrap_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IfCanPlaceTrap_C, Distance, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_IfCanPlaceTrap_C, 0x00AC);
		}

		// class UBTTask_SelectTarget_Belle_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTTask_SelectTarget_Belle__BTTask_SelectTarget_Belle_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SelectTarget_Belle_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SelectTarget_Belle_C, SelfActor, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SelectTarget_Belle_C, TargetLocation, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SelectTarget_Belle_C, CurrentTarget, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SelectTarget_Belle_C, PreviousTarget, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SelectTarget_Belle_C, Distance, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SelectTarget_Belle_C, IsTargetSurvivor, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SelectTarget_Belle_C, ChaseTime, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SelectTarget_Belle_C, DistanceToChaseSurvivor, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SelectTarget_Belle_C, SecondToDropChase, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SelectTarget_Belle_C, DistanceToChasePreviousSurvivor, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SelectTarget_Belle_C, DistanceToDetectHiding, 0x01DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_SelectTarget_Belle_C, 0x01E0);
		}

		// class UIngame_SurvivorStatus_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Ingame_SurvivorStatus__Ingame_SurvivorStatus_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SurvivorStatus_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SurvivorStatus_C, Alert, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SurvivorStatus_C, Dead, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SurvivorStatus_C, IMG_Character, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SurvivorStatus_C, Img_DeadIcon, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SurvivorStatus_C, Img_Frame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SurvivorStatus_C, Img_StatusFrame, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SurvivorStatus_C, StickerImg, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SurvivorStatus_C, TextBlock_Time, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SurvivorStatus_C, PlayerIndex, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SurvivorStatus_C, StickerDisplayTime, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SurvivorStatus_C, bIsDead, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SurvivorStatus_C, UnknownData_NWBW, 0x0299);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SurvivorStatus_C, MinimunAlert, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SurvivorStatus_C, bIsEndGame, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIngame_SurvivorStatus_C, 0x02A1);
		}

		// class UGE_Debuff_DaubingAsh_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Debuff_DaubingAsh__GE_Debuff_DaubingAsh_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Debuff_DaubingAsh_C, 0x05F8);
		}

		// class UGE_Buff_SuperHeroLanding_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Buff_SuperHeroLanding__GE_Buff_SuperHeroLanding_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Buff_SuperHeroLanding_C, 0x05F8);
		}

		// class UGE_Buff_StaminaInfinite_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Buff_StaminaInfinite__GE_Buff_StaminaInfinite_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Buff_StaminaInfinite_C, 0x05F8);
		}

		// class ALD_Skin_Prisoner_D_Default_C : public ALD_Skin_Base_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Prisoner_D_Default__LD_Skin_Prisoner_D_Default_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Prisoner_D_Default_C, 0x0532);
		}

		// class UGE_RitualState_03_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_RitualState_03__GE_RitualState_03_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_RitualState_03_C, 0x05F8);
		}

		// class ALD_Skin_Vanz_D_Default_C : public ALD_Skin_Base_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Vanz_D_Default__LD_Skin_Vanz_D_Default_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Vanz_D_Default_C, 0x0532);
		}

		// class ABackSKActorBase_C : public ABackActorBase_C
		TEST_METHOD(BlueprintGeneratedClass__BackSKActorBase__BackSKActorBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABackSKActorBase_C, SkeletalMesh, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABackSKActorBase_C, 0x0348);
		}

		// class UGE_Buff_Dodge_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Buff_Dodge__GE_Buff_Dodge_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Buff_Dodge_C, 0x05F8);
		}

		// class UGE_PP_SurvivorSpawnDagger_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_PP_SurvivorSpawnDagger__GE_PP_SurvivorSpawnDagger_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_PP_SurvivorSpawnDagger_C, 0x05F8);
		}

		// class UGE_Buff_SuddenDeathHunter_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Buff_SuddenDeathHunter__GE_Buff_SuddenDeathHunter_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Buff_SuddenDeathHunter_C, 0x05F8);
		}

		// class UGE_Buff_LetsFightGhost_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Buff_LetsFightGhost__GE_Buff_LetsFightGhost_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Buff_LetsFightGhost_C, 0x05F8);
		}

		// class AHSURGameMode_C : public AHSHGameModeBase
		TEST_METHOD(BlueprintGeneratedClass__HSURGameMode__HSURGameMode_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameMode_C, UberGraphFrame, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameMode_C, DefaultSceneRoot, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameMode_C, CurrentSurvivor, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameMode_C, CurrentHunter, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameMode_C, AllPlayableController, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameMode_C, StartPoint, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameMode_C, AllSpectatorController, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameMode_C, SummaryResultList, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameMode_C, bStartGame, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameMode_C, UnknownData_SFQ7, 0x0481);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameMode_C, OnPlayerDisconnected, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameMode_C, bIsGetPlayerStart, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameMode_C, UnknownData_0MWP, 0x0499);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameMode_C, SpawnCounting, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameMode_C, SurvivorPlayerStarts, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameMode_C, HunterPlayerStarts, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameMode_C, SpectatorPlayerStarts, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameMode_C, StartPointsTransform, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameMode_C, bIsHunterLeave, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameMode_C, UnknownData_LJVG, 0x0501);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameMode_C, CheckingPlayerTimer, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameMode_C, LeavePlayers, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameMode_C, SurvivorLeave, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameMode_C, MaxPlayerInGame, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameMode_C, bCanCloseServerAfterSave, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameMode_C, UnknownData_R89V, 0x0521);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameMode_C, SafeLeaves, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameMode_C, bDontSaveGame, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameMode_C, UnknownData_US24, 0x0539);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameMode_C, BelleInfo, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameMode_C, AllController, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameMode_C, LeaveGameCacheID, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameMode_C, SafeLeavesPC, 0x0670);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHSURGameMode_C, 0x0680);
		}

		// class UIngame_QuestObjective_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Ingame_QuestObjective__Ingame_QuestObjective_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_QuestObjective_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_QuestObjective_C, UpdateAnim, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_QuestObjective_C, StartAnim, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_QuestObjective_C, Image_Animation, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_QuestObjective_C, Image_Base, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_QuestObjective_C, TextBlock_Detail, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_QuestObjective_C, bIsCacheResult, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_QuestObjective_C, UnknownData_2XYI, 0x0279);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_QuestObjective_C, BrushNotComplete, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_QuestObjective_C, BrushComplete, 0x0308);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIngame_QuestObjective_C, 0x0390);
		}

		// class UGE_Buff_ThreadExpert_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Buff_ThreadExpert__GE_Buff_ThreadExpert_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Buff_ThreadExpert_C, 0x05F8);
		}

		// class UWidget_ImagePerk_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_ImagePerk__Widget_ImagePerk_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImagePerk_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImagePerk_C, PerkApply, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImagePerk_C, PerkReady, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImagePerk_C, FinishedCooldown, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImagePerk_C, Image_BG, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImagePerk_C, Image_Block, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImagePerk_C, Image_Border, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImagePerk_C, Image_CooldownEffect, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImagePerk_C, Image_Skill, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImagePerk_C, Panel_Charge, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImagePerk_C, PerkPanel, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImagePerk_C, ProgressBar_Cooldown, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImagePerk_C, TextBlock_92, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImagePerk_C, TextBlock_Charge, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImagePerk_C, Skill_Offset, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImagePerk_C, Skill_Brush, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImagePerk_C, Input_Offset, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImagePerk_C, Input_Brush, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImagePerk_C, bIsBlock, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImagePerk_C, UnknownData_RKUE, 0x03E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImagePerk_C, Cooldown_Style, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImagePerk_C, Cooldown, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImagePerk_C, Cooldown_FillColor, 0x0594);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImagePerk_C, bEnableCharge, 0x05A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImagePerk_C, UnknownData_UFGW, 0x05A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImagePerk_C, Charge, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImagePerk_C, Charge_Position, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImagePerk_C, Charge_Font, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImagePerk_C, bIsCooldown, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImagePerk_C, UnknownData_677M, 0x0619);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImagePerk_C, ActionName, 0x061C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImagePerk_C, TimeRemaining, 0x0624);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_ImagePerk_C, 0x0628);
		}

		// class UNS_HideItemInHand_C : public UAnimNotifyState
		TEST_METHOD(BlueprintGeneratedClass__NS_HideItemInHand__NS_HideItemInHand_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNS_HideItemInHand_C, 0x0038);
		}

		// class UPrisoner_Hunter_AnimBP_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Prisoner_Hunter_AnimBP__Prisoner_Hunter_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, UnknownData_DLXH, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, AnimGraphNode_LayeredBoneBlend_0C7B68904B3009D45693B2A85C942130, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, AnimGraphNode_UseCachedPose_168C5B3F4E91266F61145BBEB90A5CA3, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, AnimGraphNode_UseCachedPose_63BDCDBD441AAB806AFCD2995C8F5E46, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, AnimGraphNode_BlendListByBool_D2011A024BFA3BE8FF7B69A726C43C6B, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, AnimGraphNode_UseCachedPose_457B2BAD40BFFE01DEDB1E9BD224BD49, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, AnimGraphNode_SaveCachedPose_C968ACB24AD0604A73F0F5B06573B1BA, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, AnimGraphNode_LocalToComponentSpace_687081644B29DCABFF605183757DE253, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, AnimGraphNode_ComponentToLocalSpace_902A9D994A2496B3C2C346A97A51433A, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, AnimGraphNode_SaveCachedPose_493BCB6D4D64F281784EBFAA5EA2B6E9, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, AnimGraphNode_UseCachedPose_42F8B65844692D34EBF2D3BD21C12A5A, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, AnimGraphNode_Slot_6AB310DB4439980986BB6D92DE56169E, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, AnimGraphNode_SaveCachedPose_78CDC91E4D4BF5935121939491ED63B8, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, AnimGraphNode_Root_4CB1D2304043470DEFA7A3BD9D7ED415, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, AnimGraphNode_SaveCachedPose_47D56B96453621B5AC5ECAA2B3404156, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, AnimGraphNode_UseCachedPose_8B5045BA46D2DD491A22D992D30D1A80, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, AnimGraphNode_UseCachedPose_E5A1AF6149B7A1CC537B94BEDB5AFEAF, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, AnimGraphNode_TwoBoneIK_1A60F74D431628432B813A94E712BD27, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, AnimGraphNode_TwoBoneIK_0844211D4645836C883970AC31AE42EB, 0x0A30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, AnimGraphNode_UseCachedPose_50D290A74FF699F27E63C9819F7C358C, 0x0C10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, AnimGraphNode_BlendListByBool_B1CEB21446C3FDC1AD1A7D889EB2999A, 0x0C38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, AnimGraphNode_TransitionResult_5FE160624DBE8FF0C18E9FB3C9D12468, 0x0CD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, AnimGraphNode_SequencePlayer_51AAA6BB42B3FC129D38F189D6B68336, 0x0D00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, AnimGraphNode_StateResult_62CBAC6C43F8981E691DAC97F3844097, 0x0D78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, AnimGraphNode_TransitionResult_70AFEAF24F5B158CFA7EE3B9F10407B3, 0x0D98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, AnimGraphNode_TransitionResult_C1C9DF8B4C8D25C5821FAA8BE5961A80, 0x0DC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, AnimGraphNode_BlendSpacePlayer_095CCDC2499CC5F819012A979708E579, 0x0DE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, AnimGraphNode_BlendSpacePlayer_A670F8D84BA4FF82B291A6B6B9E3BEFF, 0x0EC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, AnimGraphNode_ApplyAdditive_1B3A370649842AE33FE88BB93403D96D, 0x0FA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, AnimGraphNode_StateResult_31B933F3418C40343308A9A403126240, 0x1070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, AnimGraphNode_RandomPlayer_E28F63444B8EE4B384B93EBBFCE06CAB, 0x1090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, AnimGraphNode_StateResult_E8B2E1F744CA82A21DC02F8502268115, 0x10F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, AnimGraphNode_StateMachine_3F7BB2B940FF0467D9819FB51FB82655, 0x1118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, AnimGraphNode_StateResult_1BBF9D634AF650D3BD440BAADC96009D, 0x11C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, AnimGraphNode_StateMachine_D2131C134AE9DA588A5C3CBC76F50627, 0x11E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, AnimGraphNode_StateResult_CAA6EA9F49BDD379CFC1EC9A681F5B10, 0x1298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, AnimGraphNode_StateMachine_FCA9A1E042310E9FA56F2FB0581AC764, 0x12B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, AnimGraphNode_RotationOffsetBlendSpace_C98250954D4542FBBBC06694FEEB4892, 0x1368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, AnimGraphNode_Slot_C5DC8F044226AFEC04BCDE85F229C218, 0x14F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, AnimGraphNode_LocalToComponentSpace_C4A1F0AB4CDB088EB0FB969BBD67C6DF, 0x1538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, AnimGraphNode_UseCachedPose_6E74A19C4990E63209BC7E9645BF36CA, 0x1558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, AnimGraphNode_LayeredBoneBlend_F8BEFA894E65336EC5FA53936BAD6E08, 0x1580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, AnimGraphNode_ComponentToLocalSpace_3875F2E649AE24650EAA798EC205CE17, 0x1638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, AnimGraphNode_SaveCachedPose_6CA34D6348A194E655E35C8E07DE983D, 0x1658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, AnimGraphNode_LayeredBoneBlend_5BCDF0AB4E98FA14B175188205702A97, 0x1710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, AnimGraphNode_UseCachedPose_6541543F4CE772C98FFFEC8F72C74247, 0x17C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, AnimGraphNode_UseCachedPose_F1C0A1864E5E5F913F2858A80667B990, 0x17F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, MoveForward, 0x1818);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, MoveRight, 0x181C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, Pitch, 0x1820);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, Roll, 0x1824);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, Yaw, 0x1828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, RotationLastTick, 0x182C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, YawDelta, 0x1838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, IsAccelerating, 0x183C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, FullBody, 0x183D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, IsAttackHit, 0x183E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, IsDie, 0x183F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, IsSearch, 0x1840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, UnknownData_5T9U, 0x1841);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, Hunter_Ref, 0x1848);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, FootLeftJointLoc, 0x1850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, FootRightJointLoc, 0x185C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, IK_LeftFoot_Alpha, 0x1868);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, IK_RightFoot_Alpha, 0x186C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, RightFootEffectorLoc, 0x1870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, LeftFootEffectorLoc, 0x1874);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, IKAdjustOffset, 0x1878);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, RightFootRotation, 0x187C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, LeftFootRotation, 0x1888);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, IKTraceDistance, 0x1894);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, IKFeetInterpSpeed, 0x1898);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, DeltaSeconds, 0x189C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, HipsOffest, 0x18A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, IKHipsInterpSpeed, 0x18A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, IKCapsuleHalfHeight, 0x18A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, HandRightEffectorLoc, 0x18AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, HandLeftEffectorLoc, 0x18B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, IKLeftHand_Alpha, 0x18C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, IKRightHand_Alpha, 0x18C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, bIsEnableIK, 0x18CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, UnknownData_Y14P, 0x18CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, Speed, 0x18D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, HandLeftJointLoc, 0x18D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, HandRightJointLoc, 0x18E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, EnableRightHandIK, 0x18EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, EnableLeftHandIK, 0x18ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, IKInteractType, 0x18EE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, UnknownData_E3WS, 0x18EF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisoner_Hunter_AnimBP_C, SnapSocket, 0x18F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisoner_Hunter_AnimBP_C, 0x18F8);
		}

		// class UWidget_ProjectVersion_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_ProjectVersion__Widget_ProjectVersion_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ProjectVersion_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ProjectVersion_C, TextBlock_Version, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_ProjectVersion_C, 0x0258);
		}

		// class UBTTask_Prisoner_ActivePerk_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTTask_Prisoner_ActivePerk__BTTask_Prisoner_ActivePerk_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Prisoner_ActivePerk_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Prisoner_ActivePerk_C, CurrentTarget, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Prisoner_ActivePerk_C, SelfActor, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Prisoner_ActivePerk_C, CanSeeSurvivor, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Prisoner_ActivePerk_C, Distance, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Prisoner_ActivePerk_C, DistanceToUse, 0x0158);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_Prisoner_ActivePerk_C, 0x015C);
		}

		// class UIngame_SkillcheckKey_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Ingame_SkillcheckKey__Ingame_SkillcheckKey_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckKey_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckKey_C, EndAnimation, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckKey_C, OnPerfect3, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckKey_C, OnPerfect2, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckKey_C, OnPerfect, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckKey_C, OnGreat, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckKey_C, OnMiss, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckKey_C, FadeTo, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckKey_C, BeginAnimation, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckKey_C, BG, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckKey_C, CanvasPanel, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckKey_C, Image_Base, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckKey_C, Image_EffectGlowSphere, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckKey_C, Image_EffectGlowSphere1, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckKey_C, Image_Line, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckKey_C, Image_PerfectBar, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckKey_C, Image_Spark, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckKey_C, Image_SparkMax, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckKey_C, RetainerBox_BG, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckKey_C, RetainerBox_Skillcheck, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckKey_C, Widget_TextWithInputImage_C_1, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckKey_C, BaseEffect, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckKey_C, Key, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckKey_C, IsStartCounting, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckKey_C, UnknownData_I5KX, 0x0321);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckKey_C, PerfectEffect, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckKey_C, TimeCounting, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckKey_C, PerfectPostion, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckKey_C, PerfectSize, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckKey_C, UnknownData_MGRA, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckKey_C, OnFinishCheck, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckKey_C, OnReceiveKey, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckKey_C, TimerCount, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SkillcheckKey_C, AlphaScale, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIngame_SkillcheckKey_C, 0x036C);
		}

		// class ADoorBase_C : public AInteractionBase_C
		TEST_METHOD(BlueprintGeneratedClass__DoorBase__DoorBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorBase_C, UnknownData_SDXJ, 0x06C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorBase_C, UberGraphFrame, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorBase_C, BoxCheckOverlap, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorBase_C, ChildActorNavModify, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorBase_C, SnapInvertLocation, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorBase_C, LookAtLocation, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorBase_C, SnapLocation, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorBase_C, Audio, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorBase_C, Box, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorBase_C, Arrow, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorBase_C, Dooractor, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorBase_C, SetterDoor, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorBase_C, State, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorBase_C, UnknownData_CWU2, 0x0731);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorBase_C, CacheIndicatorCharacter, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorBase_C, CacheCharacter, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorBase_C, Alpha, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorBase_C, RotationClose, 0x074C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorBase_C, RotationOpen, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorBase_C, IsReverse, 0x0764);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorBase_C, UnknownData_RVJJ, 0x0765);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorBase_C, CacheAlpha, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorBase_C, CacheIndicatorLocation, 0x076C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorBase_C, DoorSpeed, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorBase_C, IsOpen_, 0x077C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorBase_C, IsRevert_, 0x077D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorBase_C, UnknownData_TJHG, 0x077E);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorBase_C, AudioOpening, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorBase_C, AudioOpenSuccess, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorBase_C, AudioClosing, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorBase_C, AudioCloseSuccess, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorBase_C, Indicator_Open, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorBase_C, Indicator_Close, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorBase_C, DestruchMesh, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorBase_C, SpawnedDestruct, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorBase_C, MaxDamageStrength, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorBase_C, MinDamageStrength, 0x07C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorBase_C, Radius, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorBase_C, bCanSuvivorInteract, 0x07CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorBase_C, UnknownData_YVH4, 0x07CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorBase_C, Switch, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorBase_C, OnDestroy, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorBase_C, OnCloseDoor, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorBase_C, OnOpenDoor, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorBase_C, bCanHunterInteract, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorBase_C, UnknownData_QYXO, 0x0811);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorBase_C, AudioBreak, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorBase_C, DestructionAnimation, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorBase_C, bIsDoorCanAtk, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorBase_C, bIsCollisionEnable, 0x0831);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorBase_C, bIsHiddenState, 0x0832);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorBase_C, UnknownData_MUJG, 0x0833);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorBase_C, OnHunterDoorStun, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorBase_C, OnSurvivorDoorStun, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorBase_C, TimerCollision, 0x0858);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADoorBase_C, 0x0860);
		}

		// class UGA_ImmuneHunterPray_C : public UGA_ImmuneHunterBase_C
		TEST_METHOD(BlueprintGeneratedClass__GA_ImmuneHunterPray__GA_ImmuneHunterPray_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_ImmuneHunterPray_C, 0x0490);
		}

		// class UDragWidget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__DragWidget__DragWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragWidget_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragWidget_C, Image_51, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragWidget_C, WidgetSize, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragWidget_C, WidgetReference, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDragWidget_C, 0x0268);
		}

		// class UJokeAudioComponent_C : public UJokeAudioComponentNative
		TEST_METHOD(BlueprintGeneratedClass__JokeAudioComponent__JokeAudioComponent_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UJokeAudioComponent_C, 0x0170);
		}

		// class UWidget_StoreProduct_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_StoreProduct__Widget_StoreProduct_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreProduct_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreProduct_C, CanvasPanel_SoldOut, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreProduct_C, EndDatePanel, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreProduct_C, Image_1, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreProduct_C, Image_141, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreProduct_C, Image_143, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreProduct_C, Image_364, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreProduct_C, Image_BG, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreProduct_C, Image_BundleBG, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreProduct_C, Image_BundleProduct, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreProduct_C, Image_Character, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreProduct_C, Image_Product, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreProduct_C, Image_ProductBG, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreProduct_C, Image_Select, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreProduct_C, InspectIcon, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreProduct_C, Owned, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreProduct_C, PreviewButton, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreProduct_C, Redrope, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreProduct_C, Redrope1, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreProduct_C, Redrope2, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreProduct_C, RequirePanel, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreProduct_C, ScaleBox_2, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreProduct_C, TextBlock_263, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreProduct_C, TextBlock_ProductName, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreProduct_C, VerticalBox_2, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreProduct_C, Widget_ButtonBuying_C_1, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreProduct_C, Widget_ButtonBuying_C_4, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreProduct_C, Widget_Text, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreProduct_C, Widget_Text_EndDate, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreProduct_C, Widget_Text_ReqLv, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreProduct_C, Product, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreProduct_C, ImageProduct, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreProduct_C, CacheCurrency, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreProduct_C, UnknownData_8HAT, 0x03E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreProduct_C, Header, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreProduct_C, Description, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreProduct_C, bShowTooltip, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreProduct_C, UnknownData_RE3A, 0x0419);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreProduct_C, WidgetManager, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreProduct_C, isDebug, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreProduct_C, UnknownData_2B4N, 0x0429);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreProduct_C, EndDate, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreProduct_C, CurrentTexture, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreProduct_C, bIsAvailable, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreProduct_C, UnknownData_2B2P, 0x0441);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreProduct_C, OnPurchaseClick, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreProduct_C, OnPreviewClick, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreProduct_C, StoreGrid, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreProduct_C, IsPreviewable, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreProduct_C, CacheStoreType, 0x0471);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreProduct_C, UnknownData_V6UG, 0x0472);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreProduct_C, CachePrice, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreProduct_C, bIsCharacter, 0x0478);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_StoreProduct_C, 0x0479);
		}

		// class UWidget_SettingPanelInGame_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_SettingPanelInGame__Widget_SettingPanelInGame_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanelInGame_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanelInGame_C, Loop, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanelInGame_C, BeginPanel, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanelInGame_C, CanvasPanel_SubContent, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanelInGame_C, FG, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanelInGame_C, FG1, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanelInGame_C, FG2, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanelInGame_C, FG3, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanelInGame_C, Image_606, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanelInGame_C, Image_BG, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanelInGame_C, PingInms, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanelInGame_C, Text_Setting, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanelInGame_C, Widget_Button_Back, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanelInGame_C, Widget_Button_Control, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanelInGame_C, Widget_Button_Display, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanelInGame_C, Widget_Button_Graphics, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanelInGame_C, Widget_Button_Quit, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanelInGame_C, Widget_Button_Sound, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanelInGame_C, Widget_Button_System, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanelInGame_C, Widget_OptionControl, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanelInGame_C, Widget_OptionDisplay, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanelInGame_C, Widget_OptionGraphics, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanelInGame_C, Widget_OptionSound, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanelInGame_C, Widget_OptionSystem, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanelInGame_C, WidgetSwitcher_SubMenu, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanelInGame_C, OnFindMatch, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanelInGame_C, OnLootbox, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanelInGame_C, OnItemStore, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanelInGame_C, OnExit, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanelInGame_C, OptionManager, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanelInGame_C, Ping, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanelInGame_C, UnknownData_F5FJ, 0x0359);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanelInGame_C, Timer, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_SettingPanelInGame_C, 0x0368);
		}

		// class AItemChest_C : public AInteractionBase_C
		TEST_METHOD(BlueprintGeneratedClass__ItemChest__ItemChest_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemChest_C, UnknownData_CBP6, 0x06C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemChest_C, UberGraphFrame, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemChest_C, SetterDropPoint, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemChest_C, ParticlPoint, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemChest_C, ParticleSystem, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemChest_C, Audio, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemChest_C, LookAt, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemChest_C, Arrow, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemChest_C, SetterSpawnPoint, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemChest_C, Hover, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemChest_C, Box, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemChest_C, SearchItemTime, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemChest_C, UnknownData_6TBE, 0x072C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemChest_C, ChestName, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemChest_C, MaxSearchItemTime, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemChest_C, bChestOpen, 0x074C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemChest_C, UnknownData_S36L, 0x074D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemChest_C, ChestOpenMaterial, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemChest_C, ChestOpenMesh, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemChest_C, ItemDrop, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemChest_C, MinRespawnTime, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemChest_C, MaxRespawnTime, 0x076C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemChest_C, bLockChest, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemChest_C, IsHavePeakTreasureHunter, 0x0771);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemChest_C, bCanRespawn, 0x0772);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemChest_C, bRandomSpawn, 0x0773);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemChest_C, bIsCanSkillCheck, 0x0774);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemChest_C, UnknownData_Q7P3, 0x0775);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemChest_C, FixedSpawnItem, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemChest_C, TestTeam, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemChest_C, UnknownData_QJ7R, 0x0789);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemChest_C, Redrope, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemChest_C, OnChestOpen, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemChest_C, bIsProgressSoundPlayed, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemChest_C, UnknownData_NO4F, 0x07B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemChest_C, AutoDropTimer, 0x07B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AItemChest_C, 0x07B8);
		}

		// class AHSHSpectator_C : public ACharacter
		TEST_METHOD(BlueprintGeneratedClass__HSHSpectator__HSHSpectator_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHSpectator_C, UnknownData_I3XP, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHSpectator_C, UberGraphFrame, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHSpectator_C, SpectatorCamera, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHSpectator_C, SpringArm, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHSpectator_C, HSHController, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHSpectator_C, LookActor, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHSpectator_C, Team, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHSpectator_C, UnknownData_X5OV, 0x0781);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHSpectator_C, SurvivorList, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHSpectator_C, Index, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHSpectator_C, bCanSpawnByOwner, 0x079C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHSpectator_C, bPauseCount, 0x079D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHSpectator_C, bSpawning, 0x079E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHSpectator_C, UnknownData_MRNI, 0x079F);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHSpectator_C, PlayerId, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHSpectator_C, Timer, 0x07A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHSpectator_C, MaxTime, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHSpectator_C, Timer_Jane, 0x07AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHSpectator_C, IngameUI, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHSpectator_C, MaxTime_Jane, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHSpectator_C, UnknownData_AK26, 0x07BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHSpectator_C, HUD, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHSpectator_C, DeathCount, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHSpectator_C, bReadyInput, 0x07CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHSpectator_C, bTriggerRemoveSoul, 0x07CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHSpectator_C, UnknownData_D1C6, 0x07CE);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHSpectator_C, InterpSpeed, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHSpectator_C, UnknownData_JQBZ, 0x07D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHSpectator_C, LookTransfrom, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHSpectator_C, ResetTransfrom, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHSpectator_C, NetUpdate, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHSpectator_C, bIsPossessed, 0x0844);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHSpectator_C, UnknownData_K10Y, 0x0845);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHSpectator_C, AimRotation, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHSpectator_C, AimLocation, 0x0854);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHSpectator_C, bIsGameInProgress, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHSpectator_C, bIsAI, 0x0861);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHSpectator_C, UnknownData_A3CL, 0x0862);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHSpectator_C, AlphaArmLength, 0x0864);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHSpectator_C, CacheArmLength, 0x0868);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHSHSpectator_C, 0x086C);
		}

		// class AHSURNewLobbyGM_C : public AGameMode
		TEST_METHOD(BlueprintGeneratedClass__HSURNewLobbyGM__HSURNewLobbyGM_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURNewLobbyGM_C, UberGraphFrame, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURNewLobbyGM_C, DefaultSceneRoot, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURNewLobbyGM_C, AllPlayerController, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURNewLobbyGM_C, MaxPlayer, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURNewLobbyGM_C, CurrentPlayer, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURNewLobbyGM_C, CanWeStart, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURNewLobbyGM_C, UnknownData_XV6S, 0x0451);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURNewLobbyGM_C, CurrentSurvivorA, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURNewLobbyGM_C, MaxSurvivorA, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURNewLobbyGM_C, CurrentHunterA, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURNewLobbyGM_C, MaxHunterA, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURNewLobbyGM_C, LaunchDelay, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURNewLobbyGM_C, LaunchDelayQuickMatch, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURNewLobbyGM_C, MapRowName, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURNewLobbyGM_C, UnknownData_JS9P, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURNewLobbyGM_C, MapName, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURNewLobbyGM_C, MapSubLevel, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURNewLobbyGM_C, MapImage, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURNewLobbyGM_C, AllReady, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURNewLobbyGM_C, UnknownData_S43I, 0x04A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURNewLobbyGM_C, AllPlayerCharacter, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURNewLobbyGM_C, IsGSTestSuccess, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURNewLobbyGM_C, UnknownData_Y06X, 0x04B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURNewLobbyGM_C, CurrentAutoEnd, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURNewLobbyGM_C, MaxAutoEnd, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURNewLobbyGM_C, IsGSConnect, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURNewLobbyGM_C, UnknownData_EQDX, 0x04C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURNewLobbyGM_C, ProcessParameter, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURNewLobbyGM_C, DebugText, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURNewLobbyGM_C, bTryStartGame, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURNewLobbyGM_C, UnknownData_S1YX, 0x04E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURNewLobbyGM_C, PlayerCount, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURNewLobbyGM_C, AutoDestroy, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURNewLobbyGM_C, bAutoPlay, 0x04EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURNewLobbyGM_C, UnknownData_46ON, 0x04ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURNewLobbyGM_C, AllController, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURNewLobbyGM_C, GameSessionDetail, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURNewLobbyGM_C, MatchedHunter, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURNewLobbyGM_C, MatchedSurvivor, 0x0594);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURNewLobbyGM_C, SurvivorRandom, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURNewLobbyGM_C, SendLog, 0x05A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHSURNewLobbyGM_C, 0x05A9);
		}

		// class UWidget_SettingGame_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_SettingGame__Widget_SettingGame_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingGame_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingGame_C, Widget_SettingPanelInGame, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingGame_C, OnExitWidget, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_SettingGame_C, 0x0268);
		}

		// class ACatSurvivorMinion_C : public ASurvivorMinionBase_C
		TEST_METHOD(BlueprintGeneratedClass__CatSurvivorMinion__CatSurvivorMinion_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACatSurvivorMinion_C, UberGraphFrame, 0x0A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACatSurvivorMinion_C, PostProcess, 0x0A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACatSurvivorMinion_C, PingSurvivorComponent, 0x0A78);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACatSurvivorMinion_C, ProgressClientComponent, 0x0A80);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACatSurvivorMinion_C, OutlineRadius, 0x0A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACatSurvivorMinion_C, OutlineComponent, 0x0A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACatSurvivorMinion_C, InteractComponent, 0x0A98);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACatSurvivorMinion_C, StaticMesh4, 0x0AA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACatSurvivorMinion_C, StaticMesh3, 0x0AA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACatSurvivorMinion_C, StaticMesh2, 0x0AB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACatSurvivorMinion_C, StaticMesh1, 0x0AB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACatSurvivorMinion_C, StaticMesh5, 0x0AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACatSurvivorMinion_C, StaticMesh, 0x0AC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACatSurvivorMinion_C, CharacterOwner, 0x0AD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACatSurvivorMinion_C, bFlagPendingDestroy, 0x0AD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACatSurvivorMinion_C, UnknownData_4ISZ, 0x0AD9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACatSurvivorMinion_C, CurrentItem, 0x0AE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACatSurvivorMinion_C, PPI_Blur, 0x0B08);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACatSurvivorMinion_C, LifeTime, 0x0B10);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACatSurvivorMinion_C, UnknownData_F0R6, 0x0B14);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACatSurvivorMinion_C, WidgetCatLifeTime, 0x0B18);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACatSurvivorMinion_C, bMovingHoldForward, 0x0B20);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACatSurvivorMinion_C, bMovingHoldRight, 0x0B21);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACatSurvivorMinion_C, UnknownData_5U85, 0x0B22);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACatSurvivorMinion_C, TimerFootStep, 0x0B28);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACatSurvivorMinion_C, 0x0B30);
		}

		// class AItemChest_Objective1_C : public AItemChest_C
		TEST_METHOD(BlueprintGeneratedClass__ItemChest_Objective1__ItemChest_Objective1_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemChest_Objective1_C, UberGraphFrame, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemChest_Objective1_C, Plane, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemChest_Objective1_C, Cube, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemChest_Objective1_C, Plane2, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemChest_Objective1_C, Plane1, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemChest_Objective1_C, Aura, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemChest_Objective1_C, SM_MERGED_HolyRopeCustom, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemChest_Objective1_C, Decal, 0x07F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AItemChest_Objective1_C, 0x0800);
		}

		// class UInteractFunctionLibrary_C : public UBlueprintFunctionLibrary
		TEST_METHOD(BlueprintGeneratedClass__InteractFunctionLibrary__InteractFunctionLibrary_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractFunctionLibrary_C, 0x0030);
		}

		// class UWidget_ImageItem_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_ImageItem__Widget_ImageItem_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImageItem_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImageItem_C, DropItem, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImageItem_C, GetItem, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImageItem_C, LowDurability, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImageItem_C, FinishedCooldown, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImageItem_C, Image_1, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImageItem_C, Image_BG, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImageItem_C, Image_Border, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImageItem_C, Image_CooldownEffect, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImageItem_C, Image_DurabilityBG, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImageItem_C, Image_input, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImageItem_C, Image_Item, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImageItem_C, KeybindPanel, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImageItem_C, Panel_Durability, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImageItem_C, ProgressBar_Cooldown, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImageItem_C, Text_Cooldown, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImageItem_C, Text_Name, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImageItem_C, TextBlock_Durability, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImageItem_C, Item_Offset, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImageItem_C, Item_Brush, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImageItem_C, Input_Offset, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImageItem_C, Input_Brush, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImageItem_C, Cooldown_Style, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImageItem_C, Cooldown, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImageItem_C, Cooldown_FillColor, 0x05AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImageItem_C, UnknownData_6TJ7, 0x05BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImageItem_C, Duralibity, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImageItem_C, Duralibity_Position, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImageItem_C, Duralibity_Font, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImageItem_C, bIsCooldown, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImageItem_C, UnknownData_Y3KA, 0x0631);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImageItem_C, SpawnCooldown, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImageItem_C, TimeRemaining, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImageItem_C, bHaveItem, 0x0654);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_ImageItem_C, 0x0655);
		}

		// class UIngame_NotifyText_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Ingame_NotifyText__Ingame_NotifyText_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_NotifyText_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_NotifyText_C, StartAnimation, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_NotifyText_C, Image_100, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_NotifyText_C, TextBlock_Notify, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIngame_NotifyText_C, 0x0268);
		}

		// class AInteractTrap_C : public AInteractionBase_C
		TEST_METHOD(BlueprintGeneratedClass__InteractTrap__InteractTrap_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractTrap_C, UnknownData_7OIB, 0x06C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractTrap_C, UberGraphFrame, 0x06D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInteractTrap_C, 0x06E0);
		}

		// class UGE_Buff_SixthSense_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Buff_SixthSense__GE_Buff_SixthSense_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Buff_SixthSense_C, 0x05F8);
		}

		// class UWidget_ProgressPortal_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_ProgressPortal__Widget_ProgressPortal_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ProgressPortal_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ProgressPortal_C, OnFilled, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ProgressPortal_C, Image_BG, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ProgressPortal_C, Image_Border, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ProgressPortal_C, Image_Dissolve, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ProgressPortal_C, Image_Inside, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ProgressPortal_C, Image_Smoke, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ProgressPortal_C, ProgressBar_112, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ProgressPortal_C, CachePercent, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_ProgressPortal_C, 0x028C);
		}

		// class AInteractionBase_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__InteractionBase__InteractionBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractionBase_C, UberGraphFrame, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractionBase_C, ItemDecriptionComponent, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractionBase_C, Indicator, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractionBase_C, Scene, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractionBase_C, StaticMesh, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractionBase_C, InteractionType, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractionBase_C, UnknownData_9Z3W, 0x0369);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractionBase_C, SlateBrushNormal, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractionBase_C, SlateBrushHover, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractionBase_C, MaleMontage, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractionBase_C, FemaleMontage, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractionBase_C, PairAnimation, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractionBase_C, IsShowOutline_, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractionBase_C, IsShowIndicator_, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractionBase_C, UIEnable_, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractionBase_C, SlateBrushInteract, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractionBase_C, SlateText, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractionBase_C, SurvivorUseCustomIndicator, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractionBase_C, UnknownData_4HJY, 0x0631);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractionBase_C, SurvivorIndicator, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractionBase_C, SurvivorUseCustomStencil, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractionBase_C, UnknownData_8RS1, 0x0641);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractionBase_C, SurvivorStencilValue, 0x0644);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractionBase_C, HunterUseCustomIndicator, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractionBase_C, UnknownData_MEQV, 0x0649);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractionBase_C, HunterIndicator, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractionBase_C, HunterUseCustomStencil, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractionBase_C, UnknownData_KJ17, 0x0659);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractionBase_C, HunterStencilValue, 0x065C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractionBase_C, SurvivorShowOnHide, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractionBase_C, UnknownData_TX9P, 0x0661);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractionBase_C, SurvivorStencilValueOnHide, 0x0664);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractionBase_C, HunterShowOnHide, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractionBase_C, UnknownData_7NUC, 0x0669);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractionBase_C, HunterStencilValueOnHide, 0x066C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractionBase_C, bIsOutlineShow, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractionBase_C, bIsIndicatorShow, 0x0671);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractionBase_C, CurrentResult, 0x0672);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractionBase_C, UnknownData_ZZGP, 0x0673);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractionBase_C, SkilcheckPerfectSection, 0x0674);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractionBase_C, SkilcheckGreatSection, 0x067C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractionBase_C, SkilcheckFailedSection, 0x0684);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractionBase_C, EndAnimation, 0x068C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractionBase_C, UnknownData_6D5A, 0x0694);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractionBase_C, ReasonFinish, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractionBase_C, ReasonStop, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractionBase_C, UsedByAI, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractionBase_C, IsInteracted_, 0x06C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInteractionBase_C, 0x06C9);
		}

		// class UGameplayAbilityLibrary_C : public UBlueprintFunctionLibrary
		TEST_METHOD(BlueprintGeneratedClass__GameplayAbilityLibrary__GameplayAbilityLibrary_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayAbilityLibrary_C, 0x0030);
		}

		// class ASpawnItemActor_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__SpawnItemActor__SpawnItemActor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpawnItemActor_C, UberGraphFrame, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpawnItemActor_C, TextRender, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpawnItemActor_C, Scene, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpawnItemActor_C, SpawnClass, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpawnItemActor_C, bIsDone, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpawnItemActor_C, UnknownData_ZCRT, 0x0361);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpawnItemActor_C, Text, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpawnItemActor_C, SpawnType, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASpawnItemActor_C, 0x0381);
		}

		// class UGA_PA_HunterWithCharge_C : public UHSHGameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_PA_HunterWithCharge__GA_PA_HunterWithCharge_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_PA_HunterWithCharge_C, UberGraphFrame, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_PA_HunterWithCharge_C, Montage, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_PA_HunterWithCharge_C, MaxCharge, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_PA_HunterWithCharge_C, Charge, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_PA_HunterWithCharge_C, bInitialize, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_PA_HunterWithCharge_C, UnknownData_UBUJ, 0x0471);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_PA_HunterWithCharge_C, CurruntTime, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_PA_HunterWithCharge_C, Duration, 0x0478);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_PA_HunterWithCharge_C, 0x047C);
		}

		// class UGE_Hunter_APStartGameCooldown_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Hunter_APStartGameCooldown__GE_Hunter_APStartGameCooldown_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Hunter_APStartGameCooldown_C, 0x05F8);
		}

		// class ACraneBase_C : public AInteractionBase_C
		TEST_METHOD(BlueprintGeneratedClass__CraneBase__CraneBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACraneBase_C, UnknownData_P5U5, 0x06C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACraneBase_C, UberGraphFrame, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACraneBase_C, Box, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACraneBase_C, CacheCharacter, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACraneBase_C, CacheSprite, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACraneBase_C, bIsOn, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACraneBase_C, bIsCooldown, 0x06F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACraneBase_C, UnknownData_OFE6, 0x06FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACraneBase_C, Cooldown, 0x06FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACraneBase_C, CraneObject, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACraneBase_C, bIsCraneBusy, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACraneBase_C, UnknownData_0ISL, 0x0709);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACraneBase_C, LevelSequence, 0x0710);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACraneBase_C, 0x0718);
		}

		// class UIHSHController_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__IHSHController__IHSHController_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIHSHController_C, 0x0030);
		}

		// class UGE_Buff_LuckyShot_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Buff_LuckyShot__GE_Buff_LuckyShot_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Buff_LuckyShot_C, 0x05F8);
		}

		// class UBTDecorator_IfHaveSurvivorLessThenEqual_C : public UBTDecorator_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTDecorator_IfHaveSurvivorLessThenEqual__BTDecorator_IfHaveSurvivorLessThenEqual_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IfHaveSurvivorLessThenEqual_C, Count, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_IfHaveSurvivorLessThenEqual_C, 0x00AC);
		}

		// class ATelephone_C : public AInteractionBase_C
		TEST_METHOD(BlueprintGeneratedClass__Telephone__Telephone_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATelephone_C, UnknownData_H0YK, 0x06C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATelephone_C, UberGraphFrame, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATelephone_C, Box, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATelephone_C, Audio, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATelephone_C, bIsCanInteract, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATelephone_C, UnknownData_BNAC, 0x06F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATelephone_C, TimerOnEnd, 0x06F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATelephone_C, 0x0700);
		}

		// class AHSURHUD_C : public AHUD
		TEST_METHOD(BlueprintGeneratedClass__HSURHUD__HSURHUD_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURHUD_C, UberGraphFrame, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURHUD_C, DefaultSceneRoot, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURHUD_C, Widget_Survivor, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURHUD_C, Widget_Hunter, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURHUD_C, General, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURHUD_C, IngameSpectatorUI, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURHUD_C, IngameSpectatorUI_Role, 0x0460);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHSURHUD_C, 0x0468);
		}

		// class UIHunterScan_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__IHunterScan__IHunterScan_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIHunterScan_C, 0x0030);
		}

		// class UBTDecorator_IfHaveObjectiveItemInScene_C : public UBTDecorator_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTDecorator_IfHaveObjectiveItemInScene__BTDecorator_IfHaveObjectiveItemInScene_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IfHaveObjectiveItemInScene_C, TargetPointKey, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_IfHaveObjectiveItemInScene_C, 0x00D0);
		}

		// class UActivityManagerComponent_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__ActivityManagerComponent__ActivityManagerComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActivityManagerComponent_C, playerData, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActivityManagerComponent_C, DT_PlayerActivities, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActivityManagerComponent_C, IsInitialize, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActivityManagerComponent_C, 0x0121);
		}

		// class UPerkHandleHunterComponent_C : public UPerkHandleComponent_C
		TEST_METHOD(BlueprintGeneratedClass__PerkHandleHunterComponent__PerkHandleHunterComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkHandleHunterComponent_C, UberGraphFrame, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkHandleHunterComponent_C, bInitiliaze, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkHandleHunterComponent_C, UnknownData_UYUR, 0x01A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkHandleHunterComponent_C, RefGameplayAbilityWithCharge, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkHandleHunterComponent_C, CurrentCharge, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkHandleHunterComponent_C, MaxCharge, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkHandleHunterComponent_C, OnPrisonerChainEnd, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkHandleHunterComponent_C, bPrisonerChainEnable, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkHandleHunterComponent_C, UnknownData_ZJZO, 0x01D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkHandleHunterComponent_C, SurvivorChain, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkHandleHunterComponent_C, ChainActor, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkHandleHunterComponent_C, DurationPrisoner, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkHandleHunterComponent_C, SpeedPrisoner, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkHandleHunterComponent_C, TimerPrisoner, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkHandleHunterComponent_C, DelayPrisoner, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkHandleHunterComponent_C, WaitDurationPrisoner, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkHandleHunterComponent_C, TimerWaitPrisoner, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkHandleHunterComponent_C, StartLocation, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkHandleHunterComponent_C, TargetLocation, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkHandleHunterComponent_C, HookLocation, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkHandleHunterComponent_C, CameraLocation, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkHandleHunterComponent_C, HitActors, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkHandleHunterComponent_C, ChainState, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkHandleHunterComponent_C, UnknownData_SRS9, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkHandleHunterComponent_C, SurAnimHooked, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkHandleHunterComponent_C, TremorSmashDistance, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkHandleHunterComponent_C, bIsShowBody, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkHandleHunterComponent_C, UnknownData_R21C, 0x026D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkHandleHunterComponent_C, HookBound, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkHandleHunterComponent_C, bIsHookSuccess, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkHandleHunterComponent_C, UnknownData_XPBL, 0x027D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkHandleHunterComponent_C, SectionHookSuccess, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkHandleHunterComponent_C, SectionHookFailure, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkHandleHunterComponent_C, OnPrisonerHookSuccess, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkHandleHunterComponent_C, MoveSurvivorTimer, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPerkHandleHunterComponent_C, 0x02A8);
		}

		// class UGE_Buff_Stockpile_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Buff_Stockpile__GE_Buff_Stockpile_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Buff_Stockpile_C, 0x05F8);
		}

		// class AAIController_Hunter_C : public AAIController
		TEST_METHOD(BlueprintGeneratedClass__AIController_Hunter__AIController_Hunter_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController_Hunter_C, UberGraphFrame, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController_Hunter_C, AIPerception, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController_Hunter_C, OnFinishDuty, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController_Hunter_C, hunter, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController_Hunter_C, PlayerInfo, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController_Hunter_C, bBlockAction, 0x0580);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAIController_Hunter_C, 0x0581);
		}

		// class AHunterBase_C : public AHSHCharacterHunterBase
		TEST_METHOD(BlueprintGeneratedClass__HunterBase__HunterBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, UberGraphFrame, 0x0A30);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, P_DeadSmoke, 0x0A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, AudioChase, 0x0A48);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, JokeAudioHunterComponent, 0x0A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, ExecutionSpecterComponent, 0x0A58);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, AudioState, 0x0A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, AudioHiddenLoop, 0x0A68);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, ActivityComponent, 0x0A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, P_Bloodseek_R, 0x0A78);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, P_Bloodseek_L, 0x0A80);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, PerkHandleHunterComponent, 0x0A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, BloodSeekComponent, 0x0A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, TextRender, 0x0A98);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, OutlineCollision, 0x0AA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, OutlineComponent, 0x0AA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, StatusWidgetComponent, 0x0AB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, PingHunterComponent, 0x0AB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, CharacterPhysicComponent, 0x0AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, InteractComponent, 0x0AC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, Camera, 0x0AD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, SpringArm, 0x0AD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, LookAtCrosshairTimeline__Direction_4E7E0F87463D7EFA39C80686BA9F690C, 0x0AE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, UnknownData_3A9J, 0x0AE1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, LookAtCrosshairTimeline, 0x0AE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, Timeline_Bodyfade_Alpha_0B09ED2041B4907FE5FDC5BBFEF99802, 0x0AF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, Timeline_Bodyfade__Direction_0B09ED2041B4907FE5FDC5BBFEF99802, 0x0AF4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, UnknownData_6EH8, 0x0AF5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, Timeline_Bodyfade, 0x0AF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, Timeline_SlowAnimation_Rate_B173232F48C17151A9696CB94F389941, 0x0B00);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, Timeline_SlowAnimation__Direction_B173232F48C17151A9696CB94F389941, 0x0B04);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, UnknownData_BJ02, 0x0B05);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, Timeline_SlowAnimation, 0x0B08);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, Timeline_Camera_Alpha_044DCB924515FD9D34D51387A7A46A49, 0x0B10);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, Timeline_Camera__Direction_044DCB924515FD9D34D51387A7A46A49, 0x0B14);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, UnknownData_LP16, 0x0B15);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, Timeline_Camera, 0x0B18);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, Timeline_0_ColorAlpha_1ED7B53C4DBEF3A011661188980F1AEF, 0x0B20);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, Timeline_0_RadiusAlpha_1ED7B53C4DBEF3A011661188980F1AEF, 0x0B24);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, Timeline_0_Alpha_1ED7B53C4DBEF3A011661188980F1AEF, 0x0B28);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, Timeline_0__Direction_1ED7B53C4DBEF3A011661188980F1AEF, 0x0B2C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, UnknownData_8TZ1, 0x0B2D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, Timeline_1, 0x0B30);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, OuterShield_RadiusAlpha_6E05719C4F09A33877AC589288D81418, 0x0B38);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, OuterShield_Alpha_6E05719C4F09A33877AC589288D81418, 0x0B3C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, OuterShield__Direction_6E05719C4F09A33877AC589288D81418, 0x0B40);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, UnknownData_S1YI, 0x0B41);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, OuterShield, 0x0B48);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, Timeline_FOV_Alpha_85995D9B4525B2D3A62EF6BCFA5DDD60, 0x0B50);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, Timeline_FOV_FOV_85995D9B4525B2D3A62EF6BCFA5DDD60, 0x0B54);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, Timeline_FOV__Direction_85995D9B4525B2D3A62EF6BCFA5DDD60, 0x0B58);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, UnknownData_706Q, 0x0B59);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, Timeline_FOV, 0x0B60);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, BaseTurnRate, 0x0B68);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, BaseLookUpRate, 0x0B6C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, MaxShowScannedTime, 0x0B70);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, UnknownData_VWWO, 0x0B74);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, HitParticle, 0x0B78);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, CacheTouchLocation2D, 0x0B80);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, CacheTouchLocation, 0x0B88);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, BaseLookUpRate_Moblie, 0x0B94);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, BaseTurnRate_Mobile, 0x0B98);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, CacheFingerIndex, 0x0B9C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, IsTouch, 0x0B9D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, UnknownData_GVOL, 0x0B9E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, DelayWhenDestroyItem, 0x0BA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, CameraMode, 0x0BA4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, OnDeath, 0x0BA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, TempTag, 0x0BB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, IsAttacking, 0x0BC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, IsDie, 0x0BC1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, IsAtkHit, 0x0BC2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, IsTraped, 0x0BC3);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, IsPerkActive, 0x0BC4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, UnknownData_T5YB, 0x0BC5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, AtkHitMontage, 0x0BC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, TestInventory, 0x0BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, HitReactAnimMontage, 0x0C20);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, ActivePerk, 0x0C28);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, CacheDestroyObject, 0x0C38);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, OnTakeDamage, 0x0C40);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, bIsCanExecution, 0x0C50);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, UnknownData_2WXS, 0x0C51);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, FootStepDistance, 0x0C54);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, FootStepChannal, 0x0C58);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, UnknownData_OG6L, 0x0C59);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, DataTableFootStep, 0x0C60);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, HiddenEffect, 0x0C68);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, Widget_HiddenNotify, 0x0C70);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, Actor_HiddenNotify, 0x0C78);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, PPI_Blur, 0x0C80);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, TimerScaned, 0x0C88);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, HunterRitualState, 0x0C90);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, SocketOffsetCache, 0x0C94);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, TargetArmLenght, 0x0CA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, bLockHidden, 0x0CA4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, UnknownData_82FB, 0x0CA5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, LockHiddenTimer, 0x0CA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, CharacterID, 0x0CB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, CounterCheckAtk, 0x0CC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, bHiddenWorking, 0x0CC4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, UnknownData_81YB, 0x0CC5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, HiddenCounter, 0x0CC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, UnknownData_M1MF, 0x0CCC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, OnReciveDamaged, 0x0CD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, OnActionAttack, 0x0CE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, OnAttackSuccess, 0x0CF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, OnEnterInvisible, 0x0D00);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, OnExitInvisible, 0x0D10);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, OnScaned, 0x0D20);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, OnActionActivePerk, 0x0D30);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, OnActionInteraction, 0x0D40);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, OnActionImmuntity, 0x0D50);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, OnRitualDone, 0x0D60);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, SeeAnyOnes, 0x0D70);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, UnknownData_H1MO, 0x0D74);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, OnSeeAnyOneChanged, 0x0D78);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, bIsAttackLocking, 0x0D88);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, UnknownData_WLVZ, 0x0D89);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, ChaseFX, 0x0D90);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, OnTraped, 0x0D98);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, OnShowTextDmg, 0x0DA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, MoveSpeed, 0x0DB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, TimeAFK, 0x0DBC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, bIsGameStarted, 0x0DC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, UnknownData_AQNC, 0x0DC1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, TimerUpdateAimTransform, 0x0DC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, CollisionMovement, 0x0DD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, UnknownData_4X95, 0x0DD2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, AimTransformInt, 0x0DD4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, DelayInput, 0x0DEC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, UnknownData_DG31, 0x0DED);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, ExitSpecterHidden, 0x0DF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, IsHiddenCountdown, 0x0DF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, UnknownData_3VS3, 0x0DF9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, Accessory_Head, 0x0E00);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, Accessory_Back, 0x0E08);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, FOV, 0x0E10);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, CacheLookAtCrosshair, 0x0E14);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHunterBase_C, CrosshairTraceLength, 0x0E18);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHunterBase_C, 0x0E1C);
		}

		// class ASurvivorMinionBase_C : public AHSHCharacterSurvivorBase
		TEST_METHOD(BlueprintGeneratedClass__SurvivorMinionBase__SurvivorMinionBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorMinionBase_C, UberGraphFrame, 0x0A30);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorMinionBase_C, Camera, 0x0A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorMinionBase_C, SpringArm, 0x0A48);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorMinionBase_C, DataTableFootStep, 0x0A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorMinionBase_C, FootStepChannal, 0x0A58);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorMinionBase_C, UnknownData_VJ0Q, 0x0A59);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorMinionBase_C, FootStepDistance, 0x0A5C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASurvivorMinionBase_C, 0x0A60);
		}

		// class ASecretPortal_C : public ASecretPortalTeamBase_C
		TEST_METHOD(BlueprintGeneratedClass__SecretPortal__SecretPortal_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecretPortal_C, UberGraphFrame, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecretPortal_C, Audio, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecretPortal_C, IK_Right, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecretPortal_C, IK_Left, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecretPortal_C, DoorEdgeMesh, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecretPortal_C, BlackPlane, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecretPortal_C, ParticleSystem3, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecretPortal_C, LeftGate, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecretPortal_C, RightGate, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecretPortal_C, Plane, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecretPortal_C, Scene1, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecretPortal_C, Box, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecretPortal_C, Timeline_1_Alpha_31AE402F4E75A528F59E6D88F1AF2370, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecretPortal_C, Timeline_1__Direction_31AE402F4E75A528F59E6D88F1AF2370, 0x07C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecretPortal_C, UnknownData_ZFET, 0x07C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecretPortal_C, Timeline_2, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecretPortal_C, CloseGate_Alpha_1BD3B90D434DB90FB83B5B8ACCDB864F, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecretPortal_C, CloseGate__Direction_1BD3B90D434DB90FB83B5B8ACCDB864F, 0x07D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecretPortal_C, UnknownData_UQ0W, 0x07D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecretPortal_C, CloseGate, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecretPortal_C, ShowGate_Alpha_10A7113F4754B055413E349C72C33722, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecretPortal_C, ShowGate__Direction_10A7113F4754B055413E349C72C33722, 0x07E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecretPortal_C, UnknownData_W4ZQ, 0x07E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecretPortal_C, ShowGate, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecretPortal_C, Timeline_0_Alpha_0B912A02443DFBCB5EF5F2ACDFC48DD4, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecretPortal_C, Timeline_0__Direction_0B912A02443DFBCB5EF5F2ACDFC48DD4, 0x07F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecretPortal_C, UnknownData_KICG, 0x07F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecretPortal_C, Timeline_1, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecretPortal_C, Sound, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecretPortal_C, DimensionSFX, 0x0808);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASecretPortal_C, 0x0810);
		}

		// class UIngame_Soundicon_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Ingame_Soundicon__Ingame_Soundicon_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Soundicon_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Soundicon_C, Pingpong, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Soundicon_C, CanvasPanel_Arrow, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Soundicon_C, IconPanel, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Soundicon_C, Image_Arrow, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Soundicon_C, SoundIcon, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Soundicon_C, SoundIconWave, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIngame_Soundicon_C, 0x0280);
		}

		// class UNavArea_Trap_C : public UNavArea
		TEST_METHOD(BlueprintGeneratedClass__NavArea_Trap__NavArea_Trap_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea_Trap_C, 0x0050);
		}

		// class UAbilityTrapComponent_C : public UAbilityBaseComponentNative
		TEST_METHOD(BlueprintGeneratedClass__AbilityTrapComponent__AbilityTrapComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTrapComponent_C, UberGraphFrame, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTrapComponent_C, MaxTime, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTrapComponent_C, MaxCount, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTrapComponent_C, CurrentCount, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTrapComponent_C, UnknownData_KYAU, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTrapComponent_C, PreviewMesh, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTrapComponent_C, SectionStep1, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTrapComponent_C, SectionStep2, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTrapComponent_C, DistanceFirst, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTrapComponent_C, DistanceSecond, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTrapComponent_C, CancelDistance, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTrapComponent_C, OffsetForward, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTrapComponent_C, TagetClass, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTrapComponent_C, CameraCache, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTrapComponent_C, Owner, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTrapComponent_C, PreviewSelectTargetPlace, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTrapComponent_C, TraceHit, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTrapComponent_C, IsHit, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTrapComponent_C, UnknownData_QLZL, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTrapComponent_C, PreviewMeshActorCache, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTrapComponent_C, IsPlacing, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTrapComponent_C, UnknownData_OV18, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTrapComponent_C, CachePlaceLocation, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTrapComponent_C, IsCasting, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTrapComponent_C, UnknownData_XCAL, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTrapComponent_C, OnProgressFinish, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTrapComponent_C, PreviewCompleteMesh, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTrapComponent_C, PreviewCompleteMeshActorCache, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTrapComponent_C, PreviewMeshActorOffset, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTrapComponent_C, PreviewMeshCompleteActorOffset, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTrapComponent_C, IsFinish, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTrapComponent_C, UnknownData_T087, 0x0299);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTrapComponent_C, PlayerController, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTrapComponent_C, ProgressManagerCache, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTrapComponent_C, CacheTargetActor, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTrapComponent_C, TraceTargetActor, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTrapComponent_C, bTwoStep, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTrapComponent_C, bOneStepWithProgress, 0x02C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTrapComponent_C, bIsSnapHeightScale, 0x02CA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTrapComponent_C, bHideOtherTargetTrap, 0x02CB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTrapComponent_C, UnknownData_KQMP, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTrapComponent_C, CacheAllTrapTarget, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTrapComponent_C, OnTrapTargetUpdateList, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTrapComponent_C, IsCanSkillCheck, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTrapComponent_C, CacheResult, 0x02F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTrapComponent_C, UnknownData_TXNZ, 0x02F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTrapComponent_C, OnMontageSkillFailed, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTrapComponent_C, OnMontageSkillPerfect, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTrapComponent_C, bIsActivate, 0x0304);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTrapComponent_C, 0x0305);
		}

		// class UGE_State_HiddenStateRemaining_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_State_HiddenStateRemaining__GE_State_HiddenStateRemaining_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_State_HiddenStateRemaining_C, 0x05F8);
		}

		// class UIngame_Ping_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Ingame_Ping__Ingame_Ping_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Ping_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Ping_C, BeginItem, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Ping_C, LoopTrans, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Ping_C, Begin, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Ping_C, BG_Glowing, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Ping_C, CanvasPanel_1, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Ping_C, CanvasPanel_Arrow, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Ping_C, DataTextBlock, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Ping_C, Headline, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Ping_C, IconPanel, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Ping_C, Image_1, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Ping_C, Image_2, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Ping_C, Image_Arrow, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Ping_C, Image_Dot, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Ping_C, ImageIconPanel, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Ping_C, Img_BG, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Ping_C, Img_Border, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Ping_C, Img_Item, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Ping_C, Item, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Ping_C, Location, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Ping_C, OffScreenDataTextBlock, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Ping_C, OffScreenTextDataPanel, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Ping_C, OnScreenTextDataPanel, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Ping_C, Pivot, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Ping_C, SoulPanel, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Ping_C, SoundIcon, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Ping_C, SoundIconWave, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Ping_C, WidgetSwitcher_2, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Ping_C, bIsLocationIcon, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Ping_C, UnknownData_UPEZ, 0x0329);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Ping_C, CachePingPair, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Ping_C, Distance, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Ping_C, DistanceTo, 0x03B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIngame_Ping_C, 0x03B8);
		}

		// class AHSURLobbyPS_C : public AHSHPlayerStateNative
		TEST_METHOD(BlueprintGeneratedClass__HSURLobbyPS__HSURLobbyPS_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURLobbyPS_C, UberGraphFrame, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURLobbyPS_C, PlayerInfoComponent, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURLobbyPS_C, DefaultSceneRoot, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURLobbyPS_C, DebugPlayerInfo, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURLobbyPS_C, IsBusy, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURLobbyPS_C, UnknownData_RUQP, 0x0491);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURLobbyPS_C, OnReceiveNotifyPlayerInfo, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURLobbyPS_C, OnReceiveNotifyPlayerItems, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURLobbyPS_C, LobbyPreviewManager, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURLobbyPS_C, bIsCanRefresh, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURLobbyPS_C, bIsReady, 0x04C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURLobbyPS_C, UnknownData_7M92, 0x04C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURLobbyPS_C, Player_Session_ID, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURLobbyPS_C, ticketId, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURLobbyPS_C, PlayerSessionFound, 0x04E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHSURLobbyPS_C, 0x04E9);
		}

		// class AJapanTouristFSurvivor_C : public ASurvivorBase_C
		TEST_METHOD(BlueprintGeneratedClass__JapanTouristFSurvivor__JapanTouristFSurvivor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AJapanTouristFSurvivor_C, UberGraphFrame, 0x0F80);
			CHEAT_GEAR_CHECK_OFFSET(CG::AJapanTouristFSurvivor_C, Box1, 0x0F90);
			CHEAT_GEAR_CHECK_OFFSET(CG::AJapanTouristFSurvivor_C, Box, 0x0F98);
			CHEAT_GEAR_CHECK_OFFSET(CG::AJapanTouristFSurvivor_C, Attacking, 0x0FA0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AJapanTouristFSurvivor_C, 0x0FB0);
		}

		// class UBTService_CheckingCanOpen_C : public UBTService_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTService_CheckingCanOpen__BTService_CheckingCanOpen_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_CheckingCanOpen_C, UberGraphFrame, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_CheckingCanOpen_C, 0x00B0);
		}

		// class UWidget_CharacterSettingNewV2_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_CharacterSettingNewV2__Widget_CharacterSettingNewV2_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSettingNewV2_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSettingNewV2_C, ShowPerkContent, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSettingNewV2_C, ShowContent, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSettingNewV2_C, Loop, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSettingNewV2_C, Begin, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSettingNewV2_C, _1, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSettingNewV2_C, _2, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSettingNewV2_C, _3, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSettingNewV2_C, AccPanel, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSettingNewV2_C, BlackFade, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSettingNewV2_C, CharactersSelect, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSettingNewV2_C, FG, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSettingNewV2_C, Image_1, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSettingNewV2_C, Image_606, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSettingNewV2_C, InventoryPanel, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSettingNewV2_C, Line, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSettingNewV2_C, Line1, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSettingNewV2_C, Line2, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSettingNewV2_C, PassiveUniquePanel, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSettingNewV2_C, PerkPanel, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSettingNewV2_C, Redrope, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSettingNewV2_C, Text_Cuztomize, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSettingNewV2_C, Widget_Button_Back, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSettingNewV2_C, Widget_Button_Head, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSettingNewV2_C, Widget_Button_MainPerk, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSettingNewV2_C, Widget_Button_Perk1, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSettingNewV2_C, Widget_Button_Perk2, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSettingNewV2_C, Widget_Button_PPUnique, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSettingNewV2_C, Widget_Button_StatusInfo, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSettingNewV2_C, Widget_CharacterInfoPanel, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSettingNewV2_C, Widget_CharacterSelector, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSettingNewV2_C, Widget_CustomizeList, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSettingNewV2_C, Widget_ItemInventory, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSettingNewV2_C, Widget_Text_Back, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSettingNewV2_C, Widget_Text_C_1, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSettingNewV2_C, Widget_Text_ContentHeader, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSettingNewV2_C, Widget_Text_Head, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSettingNewV2_C, Widget_Text_MainPerk, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSettingNewV2_C, Widget_Text_Perk1, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSettingNewV2_C, Widget_Text_Perk2, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSettingNewV2_C, WidgetSwitcher_Selected, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSettingNewV2_C, WidgetSwitcherContentPanel, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSettingNewV2_C, DebugAssets, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSettingNewV2_C, DebugSet, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSettingNewV2_C, UnknownData_TT3B, 0x03A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSettingNewV2_C, WidgetManager, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSettingNewV2_C, bIsSettingChanged, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSettingNewV2_C, UnknownData_JJ5D, 0x03B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSettingNewV2_C, ChangeTimer, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSettingNewV2_C, SaveInTime, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSettingNewV2_C, UnknownData_UHKR, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSettingNewV2_C, Timer, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSettingNewV2_C, OnClickSuccess, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSettingNewV2_C, OnClickColor, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSettingNewV2_C, PlayerInfo, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSettingNewV2_C, PlayerItems, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSettingNewV2_C, Number, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSettingNewV2_C, PlayerPerks, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSettingNewV2_C, PlayerSkins, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSettingNewV2_C, EnumCustomizeList, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSettingNewV2_C, UnknownData_OCHK, 0x0541);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSettingNewV2_C, SelectedColor, 0x0544);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSettingNewV2_C, UnSelectColor, 0x0554);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSettingNewV2_C, UnknownData_237G, 0x0564);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSettingNewV2_C, Tooltip, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSettingNewV2_C, ItemInventory, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSettingNewV2_C, PlayerHeads, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSettingNewV2_C, PlayerBacks, 0x0590);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_CharacterSettingNewV2_C, 0x05A0);
		}

		// class UGA_WeaponPrayProjectile_C : public UGA_ProjectileBase_C
		TEST_METHOD(BlueprintGeneratedClass__GA_WeaponPrayProjectile__GA_WeaponPrayProjectile_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_WeaponPrayProjectile_C, UnknownData_KWPD, 0x04D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_WeaponPrayProjectile_C, UberGraphFrame, 0x04D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_WeaponPrayProjectile_C, 0x04E8);
		}

		// class ATrapTargetActor_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__TrapTargetActor__TrapTargetActor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapTargetActor_C, UberGraphFrame, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapTargetActor_C, ChildActor, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapTargetActor_C, Arrow, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapTargetActor_C, Placeable, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapTargetActor_C, StaticMesh, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapTargetActor_C, Scene, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapTargetActor_C, PairTarget, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATrapTargetActor_C, 0x0378);
		}

		// class UGE_StatusSurvivalBase_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_StatusSurvivalBase__GE_StatusSurvivalBase_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_StatusSurvivalBase_C, 0x05F8);
		}

		// class UBTService_CheckingItemAround_C : public UBTService_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTService_CheckingItemAround__BTService_CheckingItemAround_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_CheckingItemAround_C, UberGraphFrame, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_CheckingItemAround_C, PickItemOnCarry, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_CheckingItemAround_C, RestartOnPick, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_CheckingItemAround_C, UnknownData_QQ7G, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_CheckingItemAround_C, Radius, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_CheckingItemAround_C, PriorityItems, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_CheckingItemAround_C, 0x0108);
		}

		// class UGE_Debuff_StaminaDrain_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Debuff_StaminaDrain__GE_Debuff_StaminaDrain_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Debuff_StaminaDrain_C, 0x05F8);
		}

		// class UWidget_PartyDropdownlist_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_PartyDropdownlist__Widget_PartyDropdownlist_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PartyDropdownlist_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PartyDropdownlist_C, BG, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PartyDropdownlist_C, CanvasPanel_1, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PartyDropdownlist_C, Widget_Button_Kick, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PartyDropdownlist_C, Widget_Button_Leave, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PartyDropdownlist_C, Widget_Button_Promote, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PartyDropdownlist_C, Widget_Button_ViewProfile, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PartyDropdownlist_C, MemberCount, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PartyDropdownlist_C, IsSelfPartyLeader, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PartyDropdownlist_C, IsMemberLeader, 0x0285);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PartyDropdownlist_C, IsMemberSelf, 0x0286);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PartyDropdownlist_C, UnknownData_VF4P, 0x0287);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PartyDropdownlist_C, OnAnyButtonClick, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PartyDropdownlist_C, OnKickMemberClick, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PartyDropdownlist_C, OnPromoteLeaderClick, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PartyDropdownlist_C, OnLeavePartyClick, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PartyDropdownlist_C, OnViewProfileClick, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PartyDropdownlist_C, FontSize, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_PartyDropdownlist_C, 0x02DC);
		}

		// class AHiddingPlace_C : public AInteractionBase_C
		TEST_METHOD(BlueprintGeneratedClass__HiddingPlace__HiddingPlace_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHiddingPlace_C, UnknownData_M5KC, 0x06C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHiddingPlace_C, UberGraphFrame, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHiddingPlace_C, ChildActor, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHiddingPlace_C, LookAtLocationSur, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHiddingPlace_C, SnapLocationSur, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHiddingPlace_C, LookAtLocation, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHiddingPlace_C, SnapLocation, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHiddingPlace_C, Arrow, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHiddingPlace_C, LocationCamera, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHiddingPlace_C, BoxTutorial, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHiddingPlace_C, AudioSurvivor, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHiddingPlace_C, OutLocation, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHiddingPlace_C, Outer, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHiddingPlace_C, InLocation, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHiddingPlace_C, Inner, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHiddingPlace_C, Box, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHiddingPlace_C, Timeline_AudioVolume_Volume_5CADEE744FC57E3F761066A537FEEFB7, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHiddingPlace_C, Timeline_AudioVolume__Direction_5CADEE744FC57E3F761066A537FEEFB7, 0x0754);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHiddingPlace_C, UnknownData_7VW2, 0x0755);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHiddingPlace_C, Timeline_AudioVolume, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHiddingPlace_C, Destructible, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHiddingPlace_C, bIsHaveSkillCheck, 0x0761);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHiddingPlace_C, HiddingType, 0x0762);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHiddingPlace_C, UnknownData_27ID, 0x0763);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHiddingPlace_C, HiddenSurvivor, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHiddingPlace_C, OnInnerAnimationFinish, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHiddingPlace_C, OnOuterAnimationFinish, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHiddingPlace_C, BreakSound, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHiddingPlace_C, Sound, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHiddingPlace_C, PairSounds, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHiddingPlace_C, ShowTutorialList, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHiddingPlace_C, TimerTutorial, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHiddingPlace_C, bIsDestroyPending, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHiddingPlace_C, UnknownData_5G22, 0x07C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHiddingPlace_C, DestruchMesh, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHiddingPlace_C, SpawnedDestruct, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHiddingPlace_C, MinDamageStrength, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHiddingPlace_C, MaxDamageStrength, 0x07E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHiddingPlace_C, MinSkillCheckTime, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHiddingPlace_C, MaxSkillCheckTime, 0x07EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHiddingPlace_C, Radius, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHiddingPlace_C, CurrentSkillCheckTime, 0x07F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHiddingPlace_C, RandomSkillCheckTime, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHiddingPlace_C, UnknownData_8YNK, 0x07FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHiddingPlace_C, DestructionAnimation, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHiddingPlace_C, CooldownTimer, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHiddingPlace_C, CooldownMax, 0x0814);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHiddingPlace_C, bIsCooldown, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHiddingPlace_C, UnknownData_A2IA, 0x0819);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHiddingPlace_C, MontageExit, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHiddingPlace_C, bIsDestroy, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHiddingPlace_C, UnknownData_8B7P, 0x0839);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHiddingPlace_C, MaleMontageExit, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHiddingPlace_C, FemaleMontageExit, 0x0848);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHiddingPlace_C, 0x0850);
		}

		// class ALeverBase_C : public AInteractionBase_C
		TEST_METHOD(BlueprintGeneratedClass__LeverBAse__LeverBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALeverBase_C, UnknownData_LH79, 0x06C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALeverBase_C, UberGraphFrame, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALeverBase_C, Box, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALeverBase_C, CacheCharacter, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALeverBase_C, CacheSprite, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALeverBase_C, bIsOn, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALeverBase_C, bIsCooldown, 0x06F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALeverBase_C, UnknownData_PHHS, 0x06FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALeverBase_C, Cooldown, 0x06FC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALeverBase_C, 0x0700);
		}

		// class UBTTask_ChaseSurvivor_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTTask_ChaseSurvivor__BTTask_ChaseSurvivor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_ChaseSurvivor_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_ChaseSurvivor_C, survivor, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_ChaseSurvivor_C, Distance, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_ChaseSurvivor_C, CanSeeSurvivor, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_ChaseSurvivor_C, DistanceToSpecter, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_ChaseSurvivor_C, DistanceToTeleport, 0x0134);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_ChaseSurvivor_C, 0x0138);
		}

		// class UGE_StatusSurvivalzBing_C : public UGE_StatusSurvivalBase_C
		TEST_METHOD(BlueprintGeneratedClass__GE_StatusSurvivalzBing__GE_StatusSurvivalzBing_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_StatusSurvivalzBing_C, 0x05F8);
		}

		// class UWidget_OptionStickerMobile_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_OptionStickerMobile__Widget_OptionStickerMobile_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionStickerMobile_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionStickerMobile_C, Widget_Button_Active, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionStickerMobile_C, Widget_Button_Default, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionStickerMobile_C, Widget_ButtonChoiceDropdown_Slot1, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionStickerMobile_C, Widget_ButtonChoiceDropdown_Slot2, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionStickerMobile_C, Widget_ButtonChoiceDropdown_Slot3, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionStickerMobile_C, Widget_ButtonChoiceDropdown_Slot4, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionStickerMobile_C, Widget_ButtonChoiceDropdown_Slot5, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionStickerMobile_C, Widget_ButtonChoiceDropdown_Slot6, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionStickerMobile_C, Widget_ButtonChoiceDropdown_Slot7, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionStickerMobile_C, Widget_ButtonChoiceDropdown_Slot8, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionStickerMobile_C, OptionManager, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_OptionStickerMobile_C, 0x02A8);
		}

		// class UNavFilter_Survivor_C : public UNavigationQueryFilter
		TEST_METHOD(BlueprintGeneratedClass__NavFilter_Survivor__NavFilter_Survivor_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavFilter_Survivor_C, 0x0050);
		}

		// class ASecuritySurvivor_C : public ASurvivorBase_C
		TEST_METHOD(BlueprintGeneratedClass__SecuritySurvivor__SecuritySurvivor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecuritySurvivor_C, UberGraphFrame, 0x0F80);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecuritySurvivor_C, Box, 0x0F90);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecuritySurvivor_C, Attacking, 0x0F98);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASecuritySurvivor_C, 0x0FA8);
		}

		// class UWidget_FindMatchPanel_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_FindMatchPanel__Widget_FindMatchPanel_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_FindMatchPanel_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_FindMatchPanel_C, Widget_CharacterSetting, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_FindMatchPanel_C, OnBack, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_FindMatchPanel_C, OnSetting, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_FindMatchPanel_C, OnSwitchRole, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_FindMatchPanel_C, OnPlayNow, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_FindMatchPanel_C, OnLootbox, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_FindMatchPanel_C, OnShowTutorial, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_FindMatchPanel_C, OnStore, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_FindMatchPanel_C, OnProfile, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_FindMatchPanel_C, 0x02D8);
		}

		// class UGE_CooldownPondTrap_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_CooldownPondTrap__GE_CooldownPondTrap_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_CooldownPondTrap_C, 0x05F8);
		}

		// class UWidget_CustomizeHeaderButtonActive_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_CustomizeHeaderButtonActive__Widget_CustomizeHeaderButtonActive_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CustomizeHeaderButtonActive_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CustomizeHeaderButtonActive_C, Begin, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CustomizeHeaderButtonActive_C, ActiveAnimation, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CustomizeHeaderButtonActive_C, HoverAnimation, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CustomizeHeaderButtonActive_C, Button_This, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CustomizeHeaderButtonActive_C, TextBlock_2, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CustomizeHeaderButtonActive_C, Text, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CustomizeHeaderButtonActive_C, AutoSize, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CustomizeHeaderButtonActive_C, bUpperCase, 0x0291);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CustomizeHeaderButtonActive_C, UnknownData_L6M6, 0x0292);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CustomizeHeaderButtonActive_C, Size, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CustomizeHeaderButtonActive_C, UnknownData_O9OJ, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CustomizeHeaderButtonActive_C, OnClicked, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CustomizeHeaderButtonActive_C, FontSize, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CustomizeHeaderButtonActive_C, UnHoverAlpha, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CustomizeHeaderButtonActive_C, HoverAlpha, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CustomizeHeaderButtonActive_C, UnknownData_9X0V, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CustomizeHeaderButtonActive_C, Style, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CustomizeHeaderButtonActive_C, TextTransfom, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CustomizeHeaderButtonActive_C, TextJustify, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CustomizeHeaderButtonActive_C, UnknownData_0QA1, 0x0541);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CustomizeHeaderButtonActive_C, Font, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CustomizeHeaderButtonActive_C, OnActive, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CustomizeHeaderButtonActive_C, bIsActive, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CustomizeHeaderButtonActive_C, UnknownData_8RC5, 0x05A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CustomizeHeaderButtonActive_C, ActiveAlpha, 0x05AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CustomizeHeaderButtonActive_C, HorizontalAlignment, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CustomizeHeaderButtonActive_C, VerticalAlignment, 0x05B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CustomizeHeaderButtonActive_C, UnknownData_A4SQ, 0x05B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CustomizeHeaderButtonActive_C, TextPadding, 0x05B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CustomizeHeaderButtonActive_C, TextShadow, 0x05C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CustomizeHeaderButtonActive_C, BeginActive, 0x05D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_CustomizeHeaderButtonActive_C, 0x05D5);
		}

		// class ABelleHunter_C : public AHunterBase_C
		TEST_METHOD(BlueprintGeneratedClass__BelleHunter__BelleHunter_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABelleHunter_C, UnknownData_7ULW, 0x0E1C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABelleHunter_C, UberGraphFrame, 0x0E20);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABelleHunter_C, SM_Cutter01A, 0x0E30);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABelleHunter_C, A_BelleIdle01_EN_Cue, 0x0E38);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABelleHunter_C, A_Belle_Cutter_SlidingLoop_Cue, 0x0E40);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABelleHunter_C, StaticMesh, 0x0E48);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABelleHunter_C, Box, 0x0E50);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABelleHunter_C, BaseTurnRate_1, 0x0E58);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABelleHunter_C, BaseLookUpRate_1, 0x0E5C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABelleHunter_C, Attacking, 0x0E60);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABelleHunter_C, SaveAttack, 0x0E70);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABelleHunter_C, UnknownData_IT7C, 0x0E71);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABelleHunter_C, AttackCount, 0x0E74);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABelleHunter_C, AttackDelay, 0x0E78);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABelleHunter_C, 0x0E7C);
		}

		// class UBTService_CheckingShouldCrouch_C : public UBTService_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTService_CheckingShouldCrouch__BTService_CheckingShouldCrouch_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_CheckingShouldCrouch_C, UberGraphFrame, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_CheckingShouldCrouch_C, RunAwayKey, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_CheckingShouldCrouch_C, 0x00D8);
		}

		// class UGE_StatusSurvivalJane_C : public UGE_StatusSurvivalBase_C
		TEST_METHOD(BlueprintGeneratedClass__GE_StatusSurvivalJane__GE_StatusSurvivalJane_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_StatusSurvivalJane_C, 0x05F8);
		}

		// class UWidget_PlaymodeSelection_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_PlaymodeSelection__Widget_PlaymodeSelection_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlaymodeSelection_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlaymodeSelection_C, BeginSub, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlaymodeSelection_C, Begin, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlaymodeSelection_C, CircularThrobber_1, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlaymodeSelection_C, CircularThrobber_5, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlaymodeSelection_C, CustomMatchPanel, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlaymodeSelection_C, Image_7, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlaymodeSelection_C, Image_8, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlaymodeSelection_C, Image_606, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlaymodeSelection_C, IMG_Paper, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlaymodeSelection_C, LocalMatch, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlaymodeSelection_C, Mat_Blood, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlaymodeSelection_C, Mat_Glow, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlaymodeSelection_C, ProgressionSwitcher, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlaymodeSelection_C, RetainerBox_1, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlaymodeSelection_C, SubPanel, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlaymodeSelection_C, Widget_Button_C_3, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlaymodeSelection_C, Widget_Button_Cancel, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlaymodeSelection_C, Widget_Button_CustomMatch, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlaymodeSelection_C, Widget_Button_Guide, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlaymodeSelection_C, Widget_Button_Local, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlaymodeSelection_C, Widget_Button_QuickPlay, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlaymodeSelection_C, Widget_Button_Tutotial, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlaymodeSelection_C, Widget_MainMenu_CustomMatch, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlaymodeSelection_C, Widget_MainMenu_LocalMatch, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlaymodeSelection_C, Widget_Text_C_1, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlaymodeSelection_C, Widget_Text_Findmatch, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlaymodeSelection_C, Widget_Text_Process, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlaymodeSelection_C, OnFindMatchClicked, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlaymodeSelection_C, OnCancelMatchClicked, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlaymodeSelection_C, OnShowTutorial, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlaymodeSelection_C, OnShowGuide, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlaymodeSelection_C, WidgetManager, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlaymodeSelection_C, ProcessingTime, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlaymodeSelection_C, ProcessingTimeOut, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlaymodeSelection_C, IsProcessing, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlaymodeSelection_C, IsPendingSearch, 0x0379);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlaymodeSelection_C, bIsSubPanelOpen, 0x037A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlaymodeSelection_C, Status, 0x037B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_PlaymodeSelection_C, 0x037C);
		}

		// class UGE_StatusHunterBase_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_StatusHunterBase__GE_StatusHunterBase_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_StatusHunterBase_C, 0x05F8);
		}

		// class UNS_PlaceNail_C : public UAnimNotifyState
		TEST_METHOD(BlueprintGeneratedClass__NS_PlaceNail__NS_PlaceNail_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNS_PlaceNail_C, Tag, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNS_PlaceNail_C, 0x0040);
		}

		// class UGE_Debuff_TremorSmash_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Debuff_TremorSmash__GE_Debuff_TremorSmash_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Debuff_TremorSmash_C, 0x05F8);
		}

		// class UStudent_Lobby_ABP_C : public USurvivor_Lobby_ABP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__Student_Lobby_ABP__Student_Lobby_ABP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStudent_Lobby_ABP_C, 0x0A1A);
		}

		// class UWidget_MainMenu_CustomMatch_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_MainMenu_CustomMatch__Widget_MainMenu_CustomMatch_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenu_CustomMatch_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenu_CustomMatch_C, Image_92, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenu_CustomMatch_C, MatchIDTextbox, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenu_CustomMatch_C, Widget_Button, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenu_CustomMatch_C, Widget_Button_Cancel, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenu_CustomMatch_C, Widget_Button_CreateRoom, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenu_CustomMatch_C, Widget_Button_JoinByID, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenu_CustomMatch_C, Widget_Text, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenu_CustomMatch_C, WidgetManager, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenu_CustomMatch_C, IsCreatingRoom, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenu_CustomMatch_C, IsJoiningMatch, 0x0291);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenu_CustomMatch_C, IsDescribing, 0x0292);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenu_CustomMatch_C, UnknownData_0YKP, 0x0293);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenu_CustomMatch_C, ButtonTextCache, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenu_CustomMatch_C, IsLocal, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenu_CustomMatch_C, UnknownData_L8L7, 0x02A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenu_CustomMatch_C, gameSessionId, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenu_CustomMatch_C, GameLiftObjectCreate, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenu_CustomMatch_C, GameLiftObjectJoin, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenu_CustomMatch_C, AliasName, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenu_CustomMatch_C, CustomMatchConfig, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenu_CustomMatch_C, ticketId, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenu_CustomMatch_C, CacheCreateRoomUI, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenu_CustomMatch_C, Region_Name, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenu_CustomMatch_C, Region_Code, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenu_CustomMatch_C, OnCancel, 0x0330);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_MainMenu_CustomMatch_C, 0x0340);
		}

		// class UPlayerInfoComponent_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__PlayerInfoComponent__PlayerInfoComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInfoComponent_C, UberGraphFrame, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInfoComponent_C, Subscribers, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInfoComponent_C, PlayerInfo, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInfoComponent_C, bIsInitialize, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInfoComponent_C, UnknownData_5G2X, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInfoComponent_C, Characters, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInfoComponent_C, Items, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInfoComponent_C, Count, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInfoComponent_C, Skins, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInfoComponent_C, Perks, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInfoComponent_C, Profiles, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInfoComponent_C, Stickers, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInfoComponent_C, Heads, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInfoComponent_C, Backs, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerInfoComponent_C, 0x02C8);
		}

		// class ATrapActorBase_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__TrapActorBase__TrapActorBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapActorBase_C, UberGraphFrame, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapActorBase_C, NavModifier, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapActorBase_C, Audio, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapActorBase_C, StaticMesh_OnlySurvivorSee_, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapActorBase_C, Box, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapActorBase_C, StaticMesh, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapActorBase_C, Scene, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapActorBase_C, GameplayEffect, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapActorBase_C, isInit, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapActorBase_C, UnknownData_SMAW, 0x03A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapActorBase_C, Mesh, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapActorBase_C, HitActors, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapActorBase_C, IsShowMainMesh_, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapActorBase_C, IsShowTargetMesh_, 0x03C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapActorBase_C, IsShowCollision_, 0x03CA);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapActorBase_C, UnknownData_HUOQ, 0x03CB);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapActorBase_C, CacheTrapTarget, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapActorBase_C, TimeDuration, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapActorBase_C, IsTimeOut, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapActorBase_C, UnknownData_UW2G, 0x03E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapActorBase_C, AssetID, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapActorBase_C, ParticleOnHit, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapActorBase_C, OnApplyEffect, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapActorBase_C, DataFromSpawn, 0x0410);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATrapActorBase_C, 0x0438);
		}

		// class UIObjectActiveAbility_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__IObjectActiveAbility__IObjectActiveAbility_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIObjectActiveAbility_C, 0x0030);
		}

		// class UStatusWidgetComponent_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__StatusWidgetComponent__StatusWidgetComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusWidgetComponent_C, UberGraphFrame, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusWidgetComponent_C, OwnerCharacter, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusWidgetComponent_C, bIsShowText, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusWidgetComponent_C, UnknownData_7L30, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusWidgetComponent_C, OffsetWidget, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusWidgetComponent_C, Tag, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusWidgetComponent_C, _3DWidget, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusWidgetComponent_C, Widget_WaterBinding, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusWidgetComponent_C, ActiveParticles, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusWidgetComponent_C, CacheTag, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusWidgetComponent_C, CacheParticle, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusWidgetComponent_C, CacheSocket, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusWidgetComponent_C, CacheSoundEffect, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusWidgetComponent_C, ActiveSFX, 0x0198);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusWidgetComponent_C, 0x01A8);
		}

		// class APickable_SigilScroll_C : public APickableItemBase_C
		TEST_METHOD(BlueprintGeneratedClass__Pickable_SigilScroll__Pickable_SigilScroll_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APickable_SigilScroll_C, UberGraphFrame, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::APickable_SigilScroll_C, Sphere, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::APickable_SigilScroll_C, Target, 0x07A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APickable_SigilScroll_C, 0x07A8);
		}

		// class UWidget_SettingPanel_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_SettingPanel__Widget_SettingPanel_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanel_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanel_C, ShowCreditsAnimation, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanel_C, ShowContent, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanel_C, Loop, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanel_C, BeginPanel, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanel_C, CanvasPanel_SubContent, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanel_C, CredisPanel, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanel_C, FG1, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanel_C, FG2, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanel_C, FG3, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanel_C, Image_1, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanel_C, Image_122, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanel_C, Image_BG, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanel_C, RichTextBlock_1, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanel_C, Text_Profile, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanel_C, Widget_Button_Control, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanel_C, Widget_Button_Credits, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanel_C, Widget_Button_Display, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanel_C, Widget_Button_Graphics, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanel_C, Widget_Button_Sound, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanel_C, Widget_Button_System, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanel_C, Widget_OptionControl, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanel_C, Widget_OptionDisplay, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanel_C, Widget_OptionGraphics, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanel_C, Widget_OptionSound, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanel_C, Widget_OptionSystem, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanel_C, WidgetSwitcher_SubMenu, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanel_C, OnFindMatch, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanel_C, OnLootbox, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanel_C, OnItemStore, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanel_C, OnExit, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanel_C, OptionManager, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanel_C, OnProfile, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_SettingPanel_C, 0x0378);
		}

		// class UTestCameraShake_C : public UCameraShake
		TEST_METHOD(BlueprintGeneratedClass__TestCameraShake__TestCameraShake_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestCameraShake_C, NewVar_1, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestCameraShake_C, 0x0171);
		}

		// class UGameStatisticComponent_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__GameStatisticComponent__GameStatisticComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameStatisticComponent_C, UberGraphFrame, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameStatisticComponent_C, ControllerStatistic, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameStatisticComponent_C, bInitialize, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameStatisticComponent_C, UnknownData_J8PU, 0x0161);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameStatisticComponent_C, OnStatisticUpdate, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameStatisticComponent_C, ControllerHealthFull, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameStatisticComponent_C, PlayerControllerCloseEnemy, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameStatisticComponent_C, SurvivorRef, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameStatisticComponent_C, CloseDistance, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameStatisticComponent_C, UnknownData_HK9T, 0x01AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameStatisticComponent_C, HunterRef, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameStatisticComponent_C, GlobalStatistic, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameStatisticComponent_C, CeremonyActors, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameStatisticComponent_C, PlayerState, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameStatisticComponent_C, TotalHP, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameStatisticComponent_C, UnknownData_TRLJ, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameStatisticComponent_C, HSURGameState, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameStatisticComponent_C, ReplicateStatistic, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameStatisticComponent_C, Controllers, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameStatisticComponent_C, LogsComponent, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameStatisticComponent_C, 0x0270);
		}

		// class UNS_DisableSimulateBone_C : public UAnimNotifyState
		TEST_METHOD(BlueprintGeneratedClass__NS_DisableSimulateBone__NS_DisableSimulateBone_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNS_DisableSimulateBone_C, SimulateAfterEndNotify, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNS_DisableSimulateBone_C, UseBelowBoneSimulate, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNS_DisableSimulateBone_C, UnknownData_L0GW, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNS_DisableSimulateBone_C, BoneName, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNS_DisableSimulateBone_C, 0x0050);
		}

		// class UUMGLibrary_C : public UBlueprintFunctionLibrary
		TEST_METHOD(BlueprintGeneratedClass__UMGLibrary__UMGLibrary_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGLibrary_C, 0x0030);
		}

		// class ULimitItemsTypeComponent_C : public ULimitItemsBaseComponent_C
		TEST_METHOD(BlueprintGeneratedClass__LimitItemsTypeComponent__LimitItemsTypeComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULimitItemsTypeComponent_C, UberGraphFrame, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULimitItemsTypeComponent_C, Types, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULimitItemsTypeComponent_C, GeneralType, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULimitItemsTypeComponent_C, MeleeType, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULimitItemsTypeComponent_C, RangeType, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULimitItemsTypeComponent_C, TrapType, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULimitItemsTypeComponent_C, Fixed_Spawn, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULimitItemsTypeComponent_C, 0x0180);
		}

		// class UGA_WeaponBase_C : public UHSHGameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_WeaponBase__GA_WeaponBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_WeaponBase_C, UberGraphFrame, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_WeaponBase_C, Montage, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_WeaponBase_C, Cost, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_WeaponBase_C, bIsRandom, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_WeaponBase_C, UnknownData_KAOO, 0x0475);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_WeaponBase_C, RandomMontage, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_WeaponBase_C, PairAnimation, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_WeaponBase_C, RandomAnimation, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_WeaponBase_C, LightATKSound, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_WeaponBase_C, HeavyATKSound, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_WeaponBase_C, Seed, 0x04B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_WeaponBase_C, 0x04BC);
		}

		// class APickable_HolyWater_C : public APickable_WeaponBase_C
		TEST_METHOD(BlueprintGeneratedClass__Pickable_HolyWater__Pickable_HolyWater_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APickable_HolyWater_C, UberGraphFrame, 0x07A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APickable_HolyWater_C, 0x07B0);
		}

		// class ASpawnTargetActor_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__SpawnTargetActor__SpawnTargetActor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpawnTargetActor_C, TextRender, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpawnTargetActor_C, Billboard, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpawnTargetActor_C, Capsule, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASpawnTargetActor_C, 0x0350);
		}

		// class UUniversalPopup_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UniversalPopup__UniversalPopup_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniversalPopup_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniversalPopup_C, Background, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniversalPopup_C, ButtonBox, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniversalPopup_C, ConfirmBox, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniversalPopup_C, HorizontalBox_Time, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniversalPopup_C, Image_109, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniversalPopup_C, MessageMultilineTextBox, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniversalPopup_C, TextBlock_Time, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniversalPopup_C, Widget_Button_Cancel, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniversalPopup_C, Widget_Button_Confirm, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniversalPopup_C, Widget_Button_ConfirmOnly, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniversalPopup_C, Widget_Text_Head, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniversalPopup_C, WidgetSwitcher_Button, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniversalPopup_C, Title, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniversalPopup_C, Message, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniversalPopup_C, ConfirmEventDispatcher, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniversalPopup_C, CancelEventDispatcher, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniversalPopup_C, confirm, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniversalPopup_C, Cancel, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniversalPopup_C, popupType, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniversalPopup_C, UnknownData_QB6T, 0x0311);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniversalPopup_C, Timer, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniversalPopup_C, bIsCounting, 0x0318);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUniversalPopup_C, 0x0319);
		}

		// class UBTTask_OpenDoor_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTTask_OpenDoor__BTTask_OpenDoor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_OpenDoor_C, UberGraphFrame, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_OpenDoor_C, 0x00B8);
		}

		// class UGA_WeaponBelle_C : public UGA_WeaponHunterBase_C
		TEST_METHOD(BlueprintGeneratedClass__GA_WeaponBelle__GA_WeaponBelle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_WeaponBelle_C, 0x04E0);
		}

		// class UProgressManagerComponent_C : public UProgressManagerComponentNative
		TEST_METHOD(BlueprintGeneratedClass__ProgressManagerComponent__ProgressManagerComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressManagerComponent_C, UberGraphFrame, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressManagerComponent_C, bInitiailize, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressManagerComponent_C, UnknownData_H4YC, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressManagerComponent_C, EveryTimeCheck, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressManagerComponent_C, bCacheSkillCheck, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProgressManagerComponent_C, 0x0129);
		}

		// class UNS_Immune_C : public UAnimNotifyState
		TEST_METHOD(BlueprintGeneratedClass__NS_Immune__NS_Immune_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNS_Immune_C, 0x0038);
		}

		// class APickable_Soul_C : public APickableItemBase_C
		TEST_METHOD(BlueprintGeneratedClass__Pickable_Soul__Pickable_Soul_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APickable_Soul_C, UberGraphFrame, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::APickable_Soul_C, P_Soul, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::APickable_Soul_C, Sphere, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APickable_Soul_C, Target, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APickable_Soul_C, ShowTutorialList, 0x07B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APickable_Soul_C, 0x07C0);
		}

		// class ALD_Base_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__LD_Base__LD_Base_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALD_Base_C, UberGraphFrame, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALD_Base_C, WidgetEquip, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALD_Base_C, SpotLight, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALD_Base_C, CameraActor, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALD_Base_C, LightBeam, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALD_Base_C, WidgetLabel, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALD_Base_C, P_LootdropBase, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALD_Base_C, Scene, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALD_Base_C, RarityColor, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALD_Base_C, OnClick, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALD_Base_C, WidgetManager, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALD_Base_C, LootDropData, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALD_Base_C, PlayerInfo, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALD_Base_C, bCanFocus, 0x0500);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Base_C, 0x0501);
		}

		// class UPingSurvivorComponent_C : public UPingComponent_C
		TEST_METHOD(BlueprintGeneratedClass__PingSurvivorComponent__PingSurvivorComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPingSurvivorComponent_C, UberGraphFrame, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPingSurvivorComponent_C, hshcharacter, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPingSurvivorComponent_C, OnSoundIcon, 0x0180);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPingSurvivorComponent_C, 0x0190);
		}

		// class UHSURGameInstance_C : public UPlatformGameInstance
		TEST_METHOD(BlueprintGeneratedClass__HSURGameInstance__HSURGameInstance_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURGameInstance_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURGameInstance_C, MaxPlayers, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURGameInstance_C, UnknownData_Z5PQ, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURGameInstance_C, LoadingScreen, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURGameInstance_C, LoginMenu, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURGameInstance_C, GSObject, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURGameInstance_C, GSListenerObject, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURGameInstance_C, UniversalPopup, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURGameInstance_C, LoadingWidget, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURGameInstance_C, LocalPlayerInfo, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURGameInstance_C, LocalCharacter, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURGameInstance_C, LocalItems, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURGameInstance_C, LocalItemsCount, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURGameInstance_C, LocalSkins, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURGameInstance_C, LocalPerks, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURGameInstance_C, LocalProfiles, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURGameInstance_C, LocalStickers, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURGameInstance_C, LocalHeads, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURGameInstance_C, LocalBacks, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURGameInstance_C, SummaryResultList, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURGameInstance_C, E_MenuState, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURGameInstance_C, UnknownData_BCWI, 0x0439);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURGameInstance_C, Fading, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURGameInstance_C, StateTeleport, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURGameInstance_C, UnknownData_GIIK, 0x0449);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURGameInstance_C, TutorialSurvivorWidget, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURGameInstance_C, TutorialHunterWidget, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURGameInstance_C, EndGameResult, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURGameInstance_C, bIsInit, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURGameInstance_C, UnknownData_FKS9, 0x0481);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURGameInstance_C, SaveGameManager, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURGameInstance_C, OnSaveGameInitialize, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURGameInstance_C, bIsCustomMatch, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURGameInstance_C, UnknownData_U714, 0x04A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURGameInstance_C, StorePopUp, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURGameInstance_C, isDebug, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURGameInstance_C, UnknownData_OQSC, 0x04B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURGameInstance_C, AWS_Ref, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURGameInstance_C, VirtualGoods, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURGameInstance_C, Perks, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURGameInstance_C, Items, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURGameInstance_C, Skins, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURGameInstance_C, Stickers, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURGameInstance_C, Profiles, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURGameInstance_C, Emotes, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURGameInstance_C, SteamLobby, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURGameInstance_C, SteamIAP, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURGameInstance_C, SteamAchievement, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURGameInstance_C, InitGameAnalytics, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURGameInstance_C, UnknownData_4TLS, 0x0549);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURGameInstance_C, Info_AIBelle, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURGameInstance_C, VirtualGoodsShortCode, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURGameInstance_C, Info_AIPrisoner, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURGameInstance_C, Info_SpawnAI, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURGameInstance_C, MatchMakeData, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURGameInstance_C, OnItemsRefreshed, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURGameInstance_C, Backs, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURGameInstance_C, Heads, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURGameInstance_C, CacheTicketID, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURGameInstance_C, Latency, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURGameInstance_C, GameliftRegion, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURGameInstance_C, CacheDateTime, 0x0840);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHSURGameInstance_C, 0x0848);
		}

		// class ULimitItemsTypeChestComponent_C : public ULimitItemsTypeComponent_C
		TEST_METHOD(BlueprintGeneratedClass__LimitItemsTypeChestComponent__LimitItemsTypeChestComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULimitItemsTypeChestComponent_C, UberGraphFrame, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULimitItemsTypeChestComponent_C, IsReach_, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULimitItemsTypeChestComponent_C, UnknownData_R5YM, 0x0191);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULimitItemsTypeChestComponent_C, DataDynamic, 0x0198);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULimitItemsTypeChestComponent_C, 0x01A0);
		}

		// class UIngame_Main_Widget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Ingame_Main_Widget__Ingame_Main_Widget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Main_Widget_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Main_Widget_C, Background, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Main_Widget_C, CanvasPanel_Main, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Main_Widget_C, S1, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Main_Widget_C, S2, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Main_Widget_C, S3, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Main_Widget_C, S4, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Main_Widget_C, SurvivorStatus, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Main_Widget_C, TextBlock_432, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Main_Widget_C, Time, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Main_Widget_C, PlayerRef, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Main_Widget_C, HSURGameState, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Main_Widget_C, SurvivalStatusRef, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIngame_Main_Widget_C, 0x02B8);
		}

		// class ALootDropPreviewItem_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__LootDropPreviewItem__LootDropPreviewItem_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALootDropPreviewItem_C, UberGraphFrame, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALootDropPreviewItem_C, SpotLight, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALootDropPreviewItem_C, CurrencyText, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALootDropPreviewItem_C, Arrow, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALootDropPreviewItem_C, Box, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALootDropPreviewItem_C, ItemAmountText, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALootDropPreviewItem_C, ItemNameText, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALootDropPreviewItem_C, StaticMesh, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALootDropPreviewItem_C, DefaultSceneRoot, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALootDropPreviewItem_C, RarityColor, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALootDropPreviewItem_C, bIsEnabled, 0x0398);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALootDropPreviewItem_C, 0x0399);
		}

		// class UProgressClientComponent_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__ProgressClientComponent__ProgressClientComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressClientComponent_C, UberGraphFrame, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressClientComponent_C, PlayerController, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressClientComponent_C, bInitialize, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressClientComponent_C, UnknownData_76XA, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressClientComponent_C, ProgressManager, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressClientComponent_C, ProgessWidget, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressClientComponent_C, SkillCheckWidget, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressClientComponent_C, OnFinishProgress, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressClientComponent_C, OnCancelProgress, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressClientComponent_C, OnUpdateProgress, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressClientComponent_C, OnPerfectResult, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressClientComponent_C, OnGreatResult, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressClientComponent_C, OnFailResult, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressClientComponent_C, OnFinishOrCancelProgress, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressClientComponent_C, bShowTutorialFailed, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressClientComponent_C, UnknownData_9MPD, 0x01A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressClientComponent_C, LastProgress, 0x01AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressClientComponent_C, bIsSkillCheck, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressClientComponent_C, UnknownData_6BC8, 0x01B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressClientComponent_C, CacheTarget, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressClientComponent_C, OnRequestProgress, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressClientComponent_C, S_IsProgress, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressClientComponent_C, OnCommitSkillCheck, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressClientComponent_C, OnTriggerRitualActivity, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressClientComponent_C, progressTime, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressClientComponent_C, UnknownData_O7NE, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressClientComponent_C, ProgressActor, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressClientComponent_C, OnStopProgress, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProgressClientComponent_C, 0x0250);
		}

		// class UICharacter_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__ICharacter__ICharacter_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UICharacter_C, 0x0030);
		}

		// class UGE_RitualState_01_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_RitualState_01__GE_RitualState_01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_RitualState_01_C, 0x05F8);
		}

		// class UQuestManagerComponent_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__QuestManagerComponent__QuestManagerComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestManagerComponent_C, UberGraphFrame, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestManagerComponent_C, MaxQuestNumber, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestManagerComponent_C, bInitialize, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestManagerComponent_C, UnknownData_8YCB, 0x0115);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestManagerComponent_C, GameStatisticComponent, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestManagerComponent_C, PlayerController, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestManagerComponent_C, QuestAssetList, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestManagerComponent_C, Portal, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestManagerComponent_C, QuestList, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestManagerComponent_C, PlayersQuests, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestManagerComponent_C, CacheSendQuestNumber, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestManagerComponent_C, UnknownData_HE6H, 0x01B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestManagerComponent_C, IsPlayersOpenPortal, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestManagerComponent_C, questsuccess, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestManagerComponent_C, PortalTeam, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestManagerComponent_C, PortalTeam_Opened, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestManagerComponent_C, TimerQuestOpenPortal, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestManagerComponent_C, CacheQuestClass, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestManagerComponent_C, DelayOpenPortal, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestManagerComponent_C, UnknownData_8SCU, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestManagerComponent_C, OnQuestSuccess, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestManagerComponent_C, MaxDoorOpen, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestManagerComponent_C, PortalDetail, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestManagerComponent_C, bIsAutoCountingDoor, 0x0234);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQuestManagerComponent_C, 0x0235);
		}

		// class UIngamePlayerDataHunter_C : public UIngamePlayerDataBase_C
		TEST_METHOD(BlueprintGeneratedClass__IngamePlayerDataHunter__IngamePlayerDataHunter_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngamePlayerDataHunter_C, UberGraphFrame, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngamePlayerDataHunter_C, hunter, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngamePlayerDataHunter_C, Opacity, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngamePlayerDataHunter_C, ScreenFX_Delay, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngamePlayerDataHunter_C, bScreenFX, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngamePlayerDataHunter_C, UnknownData_FWWT, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngamePlayerDataHunter_C, OnTakeDamage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngamePlayerDataHunter_C, TimeRemainingPerk, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngamePlayerDataHunter_C, Cooldown_DurationPerk, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngamePlayerDataHunter_C, IsPerkCooldown, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngamePlayerDataHunter_C, UnknownData_0LYQ, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngamePlayerDataHunter_C, TimeRemainingTeleport, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngamePlayerDataHunter_C, Cooldown_DurationTeleport, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngamePlayerDataHunter_C, IsTeleportCooldown, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngamePlayerDataHunter_C, UnknownData_PY3N, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngamePlayerDataHunter_C, TimeRemaining_Immunity, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngamePlayerDataHunter_C, Cooldown_Duration_Immunity, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngamePlayerDataHunter_C, IsImmuneCooldown, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngamePlayerDataHunter_C, UnknownData_S7HO, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngamePlayerDataHunter_C, Max_Show_Scanned_Time, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngamePlayerDataHunter_C, ChargeValue, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngamePlayerDataHunter_C, DecreaseAlphaTime, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngamePlayerDataHunter_C, UnknownData_S66D, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngamePlayerDataHunter_C, OnDecreaseScreenOpacity, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngamePlayerDataHunter_C, OnPerkApply, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngamePlayerDataHunter_C, HunterPerkApply, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngamePlayerDataHunter_C, SpecterTimeRemain, 0x0158);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIngamePlayerDataHunter_C, 0x015C);
		}

		// class UWidget_OptionSystem_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_OptionSystem__Widget_OptionSystem_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionSystem_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionSystem_C, Widget_Button_Active, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionSystem_C, Widget_Button_Default, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionSystem_C, Widget_ButtonChoiceArrow_Chatbox, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionSystem_C, Widget_ButtonChoiceArrow_culture, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionSystem_C, Widget_ButtonChoiceArrow_Region, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionSystem_C, OptionManager, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_OptionSystem_C, 0x0280);
		}

		// class UWidget_StatusStar_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_StatusStar__Widget_StatusStar_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StatusStar_C, HorizontalBox_Star, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StatusStar_C, Image_111, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StatusStar_C, Image_113, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StatusStar_C, Image_114, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StatusStar_C, Image_115, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StatusStar_C, Widget_Text_Name, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StatusStar_C, Count, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StatusStar_C, UnknownData_NGWE, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StatusStar_C, Timer, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StatusStar_C, CacheCount, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_StatusStar_C, 0x0284);
		}

		// class AzBingSurvivor_C : public ASurvivorBase_C
		TEST_METHOD(BlueprintGeneratedClass__zBingSurvivor__zBingSurvivor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AzBingSurvivor_C, UberGraphFrame, 0x0F80);
			CHEAT_GEAR_CHECK_OFFSET(CG::AzBingSurvivor_C, _Setter_CatLocation, 0x0F90);
			CHEAT_GEAR_CHECK_OFFSET(CG::AzBingSurvivor_C, SpringArm_Cat, 0x0F98);
			CHEAT_GEAR_CHECK_OFFSET(CG::AzBingSurvivor_C, Capsule, 0x0FA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AzBingSurvivor_C, Box2, 0x0FA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AzBingSurvivor_C, Box, 0x0FB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AzBingSurvivor_C, RefCat, 0x0FB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AzBingSurvivor_C, IsReady, 0x0FC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AzBingSurvivor_C, UnknownData_9G5F, 0x0FC1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AzBingSurvivor_C, CacheCurrentItem, 0x0FC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AzBingSurvivor_C, NewVar_1, 0x0FF0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AzBingSurvivor_C, 0x0FF1);
		}

		// class UInteractComponent_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__InteractComponent__InteractComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractComponent_C, UberGraphFrame, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractComponent_C, DistanceMobile, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractComponent_C, DotValueRange, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractComponent_C, HalfSize, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractComponent_C, TraceChannel, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractComponent_C, DrawDebugType, 0x0125);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractComponent_C, UnknownData_17WB, 0x0126);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractComponent_C, DrawTime, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractComponent_C, UnknownData_F50U, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractComponent_C, RootComponent, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractComponent_C, CameraComponent, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractComponent_C, IsCanInteract_, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractComponent_C, UnknownData_UQCH, 0x0141);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractComponent_C, InteractionActor, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractComponent_C, DistancePC, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractComponent_C, State, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractComponent_C, UnknownData_QUVV, 0x0155);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractComponent_C, OnStateChanged, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractComponent_C, Role, 0x0168);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractComponent_C, 0x0169);
		}

		// class UMale_Survivor_ABP_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Male_Survivor_ABP__Male_Survivor_ABP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, UnknownData_QBNL, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, AnimGraphNode_Root_39D0E1F6441DEBFF31320F911088CE96, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, AnimGraphNode_SaveCachedPose_079113594F2E9C0C6B91BBAE185D8354, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, AnimGraphNode_LayeredBoneBlend_1003331C417405F946B8FA9752BA4533, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, AnimGraphNode_BlendListByBool_2A5391D944071F3EC39CB2952A39EE4D, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, AnimGraphNode_LocalToComponentSpace_6AECB70A48ABF9B6536522BF6C2A35B2, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, AnimGraphNode_ComponentToLocalSpace_03FF911A49A1F388215AE5AAE1D4782B, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, AnimGraphNode_ModifyBone_9D5D2CE24D2773A456221287AB087CF3, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, UnknownData_Y86Y, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, AnimGraphNode_TwoBoneIK_409A31AB44B4A9F6E1DD32BBE6F29140, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, AnimGraphNode_TwoBoneIK_B532961C4D9D313A4DFE15BD98BC7CE3, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, AnimGraphNode_ModifyBone_02D9BDA04E7826521F00E483986C014F, 0x09C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, AnimGraphNode_ModifyBone_6DB561C846D608A22C09E7990F0BF49F, 0x0AC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, AnimGraphNode_BlendListByBool_13C6E5794CC08152B813EA8750438E72, 0x0BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, AnimGraphNode_TransitionResult_2E6AB3F74A4A90E3205D5B91226EA831, 0x0C70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, AnimGraphNode_TransitionResult_55A03C224BC438A679FA30AFB630AC11, 0x0C98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, AnimGraphNode_TransitionResult_EEFD47E1424AE55BA6819FAAD8F8D775, 0x0CC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, AnimGraphNode_SequencePlayer_D958AED9464B1A1D531231A43FE585B7, 0x0CE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, AnimGraphNode_StateResult_4D1B10AB40934FCF1C993C80460F2876, 0x0D60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, AnimGraphNode_SequencePlayer_C574186E4682F2CDE7D0D7A8107F244D, 0x0D80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, AnimGraphNode_StateResult_C08CFCF442E0FE2F979E85860CC7CBA1, 0x0DF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, AnimGraphNode_TransitionResult_92C10DF447D3D4A983626C846A58DFD8, 0x0E18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, AnimGraphNode_TransitionResult_8B751D594B9E8309096E9C87C2FE650E, 0x0E40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, AnimGraphNode_SequencePlayer_85123CF146040BA214D532A7226117EB, 0x0E68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, AnimGraphNode_LayeredBoneBlend_899408164B3518F53932F7BB2272BC24, 0x0EE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, AnimGraphNode_BlendSpacePlayer_7435B02A42CF6D688AEFD2AB53FF1D13, 0x0F98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, AnimGraphNode_BlendListByBool_AAA79B054017378FADF35FBBDC1E643F, 0x1078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, AnimGraphNode_BlendSpacePlayer_9312DC5C4C2D2683D7EEEC88148F7427, 0x1118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, AnimGraphNode_BlendListByBool_0D80214C4A5FAA61D3FF2BA7E2DFF836, 0x11F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, AnimGraphNode_BlendSpacePlayer_97765D0545888AA65C144E991BA45AB5, 0x1298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, AnimGraphNode_BlendSpacePlayer_617C49EA4DB477629326E28AAE6F87EB, 0x1378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, AnimGraphNode_BlendSpacePlayer_184381064F43BDE34005BFB17CAFD08A, 0x1458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, AnimGraphNode_BlendSpacePlayer_081FCB23467CEE5852DE1A8B21EC0484, 0x1538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, AnimGraphNode_BlendListByBool_621D6EE2457253EC41E647917D52C0B6, 0x1618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, AnimGraphNode_BlendListByBool_50961AFC48E83509B99B4FA148AC1179, 0x16B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, AnimGraphNode_BlendListByBool_26FD41C64DED5653F90179BBC211C6F0, 0x1758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, AnimGraphNode_BlendSpacePlayer_E6A071734EC14CBFE80A128CA3CC1962, 0x17F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, AnimGraphNode_ApplyAdditive_934117D6458C52E5F4E9A99C53E8D19A, 0x18D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, AnimGraphNode_StateResult_7A87FB3948B1C9022E6E9ABA99B8CC96, 0x19A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, AnimGraphNode_BlendListByBool_1D9B94984B5D66441623B4A56E4B7B13, 0x19C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, AnimGraphNode_SequencePlayer_3395A39C4E3C9B33DA8369AC6D38B734, 0x1A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, AnimGraphNode_SequencePlayer_958190F94D73AA04239F01968CF33947, 0x1AD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, AnimGraphNode_SequencePlayer_F484C64F4756D32FD69133ABF05CD56B, 0x1B50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, AnimGraphNode_BlendListByBool_9B625A3144FD154F685B0AB6BB791B87, 0x1BC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, AnimGraphNode_BlendListByBool_0493421F4A9AAD608C8093A1A4CB7D40, 0x1C68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, AnimGraphNode_SequencePlayer_D8EA94B8488AFD8A6E88689A93408D8E, 0x1D08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, AnimGraphNode_StateResult_67393C8040E78B8071FCCE868A7F098E, 0x1D80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, AnimGraphNode_StateMachine_E7874362454A00265249E8A027399803, 0x1DA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, AnimGraphNode_StateResult_A554668B4706006755A74FA702B7B6EA, 0x1E50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, AnimGraphNode_StateMachine_BF4220314E7CD0F1BBB004B689142EBA, 0x1E70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, AnimGraphNode_BlendListByBool_7116814942BB11E16A8CB4AB0DF1CCC6, 0x1F20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, AnimGraphNode_SaveCachedPose_CA9E77814ADFB52FE24DC0BAD9108BB2, 0x1FC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, AnimGraphNode_UseCachedPose_547DAA684EE4766FEA6A4380D996266C, 0x2078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, AnimGraphNode_UseCachedPose_E0390DF042B87CBA6DD4179C3DCC2422, 0x20A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, AnimGraphNode_UseCachedPose_D86968C7487D81229A0C5C8D8A8F351E, 0x20C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, AnimGraphNode_SaveCachedPose_B832C8B34B731743B825F68C3EEA89F7, 0x20F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, AnimGraphNode_UseCachedPose_AF597E384BE212914994058CCA83E731, 0x21A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, AnimGraphNode_Slot_68E4D2094ECB319AECE8768795952BBD, 0x21D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, UnknownData_NL8H, 0x2218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, AnimGraphNode_TwoBoneIK_4707252D464B072D4580F1B89E72D17C, 0x2220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, AnimGraphNode_TwoBoneIK_D0D2B31B436645F5ABD2FBA0F668F279, 0x2400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, AnimGraphNode_UseCachedPose_C5087B1D4D02FA036EF67294F0BCBA18, 0x25E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, AnimGraphNode_RotationOffsetBlendSpace_8AA4E6104117388B6CA3B68DADFC226C, 0x2608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, AnimGraphNode_Slot_5A24351D4107EDD23C9F25A681AB55DC, 0x2790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, AnimGraphNode_UseCachedPose_9933D25E4F75EEFB37882C8199D4B240, 0x27D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, AnimGraphNode_SaveCachedPose_FCD9900846F5C1443E37EC942AC417F3, 0x2800);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, AnimGraphNode_UseCachedPose_EA27B92F47BF58DC33030188AFE41C32, 0x28B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, AnimGraphNode_UseCachedPose_40C94F224AA10A3D3CEE979281B77CC1, 0x28E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, AnimGraphNode_ComponentToLocalSpace_D8B47C4E48B76A851A43DEA0D49EAF7A, 0x2908);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, AnimGraphNode_LocalToComponentSpace_8E5249CB4DDC3369599D5FB66401B50D, 0x2928);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, AnimGraphNode_UseCachedPose_F2C1407A41DA32063D809B8905163AA9, 0x2948);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, AnimGraphNode_LayeredBoneBlend_BA818BFB49179B63D54E06AB7FC9DCC1, 0x2970);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, AnimGraphNode_SaveCachedPose_FB43DB084B03A7AA1E1B44BC28314A6E, 0x2A28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, AnimGraphNode_UseCachedPose_CDCAACE04541A567AB075493A9FFCBC6, 0x2AE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, AnimGraphNode_LayeredBoneBlend_6BB257DD4C4B43223367D8BA632B1736, 0x2B08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, AnimGraphNode_UseCachedPose_1424BFEA4D0168A4CE06578462DF2D82, 0x2BC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, AnimGraphNode_BlendListByBool_57BEEB624D98F0226604ACA821EAEE8A, 0x2BE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, AnimGraphNode_UseCachedPose_B27084FE4D3A998196F1F388FA568FF4, 0x2C88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, MoveForward, 0x2CB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, MoveRight, 0x2CB4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, IsInAir, 0x2CB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, UnknownData_SPIM, 0x2CB9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, Pitch, 0x2CBC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, Roll, 0x2CC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, Yaw, 0x2CC4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, RotationLastTick, 0x2CC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, YawDelta, 0x2CD4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, IsAccelerating, 0x2CD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, FullBody, 0x2CD9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, IsCrouch, 0x2CDA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, IsKnockdown, 0x2CDB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, IsInjured, 0x2CDC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, IsSearch, 0x2CDD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, UnknownData_T8C8, 0x2CDE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, Survivor_Ref, 0x2CE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, FootLeftJointLoc, 0x2CE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, FootRightJointLoc, 0x2CF4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, IK_LeftFoot_Alpha, 0x2D00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, IK_RightFoot_Alpha, 0x2D04);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, RightFootEffectorLoc, 0x2D08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, LeftFootEffectorLoc, 0x2D0C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, IKAdjustOffset, 0x2D10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, RightFootRotation, 0x2D14);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, LeftFootRotation, 0x2D20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, IKTraceDistance, 0x2D2C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, IKFeetInterpSpeed, 0x2D30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, DeltaSeconds, 0x2D34);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, HipsOffest, 0x2D38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, IKHipsInterpSpeed, 0x2D3C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, IKCapsuleHalfHeight, 0x2D40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, HandRightEffectorLoc, 0x2D44);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, HandLeftEffectorLoc, 0x2D50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, IKLeftHand_Alpha, 0x2D5C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, IKRightHand_Alpha, 0x2D60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, bIsEnableIK, 0x2D64);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, EnableRightHandIK, 0x2D65);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, EnableLeftHandIK, 0x2D66);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, IsGrab, 0x2D67);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, bIKIgnore, 0x2D68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, bIsForceUpper, 0x2D69);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, IKInteractType, 0x2D6A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, UnknownData_ZLU1, 0x2D6B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, SnapSocket, 0x2D6C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, bIsLookBack, 0x2D74);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, UnknownData_KZBS, 0x2D75);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, Speed, 0x2D78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, bIsAiming, 0x2D7C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, UnknownData_5LEM, 0x2D7D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_Survivor_ABP_C, MaxLeanForward, 0x2D80);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMale_Survivor_ABP_C, 0x2D84);
		}

		// class UWidget_Lootbox_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_Lootbox__Widget_Lootbox_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Lootbox_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Lootbox_C, Widget_Button_Back, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Lootbox_C, Widget_Button_ButLootBox, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Lootbox_C, Widget_Button_FindMatch, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Lootbox_C, Widget_Button_GrantCurrencyCoin, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Lootbox_C, Widget_Button_GrantCurrencyGem, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Lootbox_C, Widget_Button_OpenLootbox, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Lootbox_C, Widget_Button_Setting, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Lootbox_C, MainMenuGameMode_REF, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Lootbox_C, OnBack, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Lootbox_C, OnFindMatch, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Lootbox_C, OnSetting, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Lootbox_C, WidgetManager, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Lootbox_C, LS_Lootbox, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Lootbox_C, LS_Player, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Lootbox_C, IsLootBoxBusy, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_Lootbox_C, 0x02D9);
		}

		// class UWidget_TooltipCharacterInfo_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_TooltipCharacterInfo__Widget_TooltipCharacterInfo_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TooltipCharacterInfo_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TooltipCharacterInfo_C, ShowUp, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TooltipCharacterInfo_C, BG, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TooltipCharacterInfo_C, Image_93, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TooltipCharacterInfo_C, TextBlock_364, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TooltipCharacterInfo_C, Widget_Button_MainPerk, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TooltipCharacterInfo_C, Widget_CharacterStatus, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TooltipCharacterInfo_C, Widget_Text_CharacterName, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TooltipCharacterInfo_C, Widget_Text_Status, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TooltipCharacterInfo_C, Widget_Text_UniquePerk, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TooltipCharacterInfo_C, Cache, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_TooltipCharacterInfo_C, 0x02A0);
		}

		// class ULoginBase_C : public UObject
		TEST_METHOD(BlueprintGeneratedClass__LoginBase__LoginBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoginBase_C, WidgetClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoginBase_C, OnLoginResponse, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULoginBase_C, 0x0048);
		}

		// class UGE_Buff_LastDance_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Buff_LastDance__GE_Buff_LastDance_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Buff_LastDance_C, 0x05F8);
		}

		// class ASurvivorBase_C : public AHSHCharacterSurvivorBase
		TEST_METHOD(BlueprintGeneratedClass__SurvivorBase__SurvivorBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, UberGraphFrame, 0x0A30);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, AIPerceptionStimuliSource, 0x0A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, AudioInjured, 0x0A48);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, AudioExhausted, 0x0A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, ProgressClientComponent, 0x0A58);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, JokeAudioSurvivorComponent, 0x0A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, Camera1, 0x0A68);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, SpringArm1, 0x0A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, ExecutionSurvivorComponent, 0x0A78);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, AudioChaseHeart, 0x0A80);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, ActivityComponent, 0x0A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, CommunicationWheelComponent, 0x0A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, StatusWidgetComponent, 0x0A98);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, PerkHandleSurvivorComponent, 0x0AA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, ChaseAudioComponent, 0x0AA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, AudioChaseLoop, 0x0AB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, AudioChaseBegin, 0x0AB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, PingSurvivorComponent, 0x0AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, QuestComponent, 0x0AC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, AbilityTrapComponent, 0x0AD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, InteractComponent, 0x0AD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, OutlineComponent, 0x0AE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, OutlineRadius, 0x0AE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, Camera, 0x0AF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, SpringArm, 0x0AF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, RotateMeshToDefaultTimeline_Alpha_719A16234C2CA735CCB22A9CF1E94765, 0x0B00);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, RotateMeshToDefaultTimeline__Direction_719A16234C2CA735CCB22A9CF1E94765, 0x0B04);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, UnknownData_17XZ, 0x0B05);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, RotateMeshToDefaultTimeline, 0x0B08);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, LookAtCrosshairTimeline__Direction_93213575475BC288C54B70BAEF202EE6, 0x0B10);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, UnknownData_UBND, 0x0B11);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, LookAtCrosshairTimeline, 0x0B18);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, Dissolve_Alpha_E9E032D74B98C26C2D48DDAA8E1E74C6, 0x0B20);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, Dissolve__Direction_E9E032D74B98C26C2D48DDAA8E1E74C6, 0x0B24);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, UnknownData_0ZKX, 0x0B25);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, Dissolve, 0x0B28);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, Timeline_0_Alpha_E2DA146C4A239839D05F8489E6DBF005, 0x0B30);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, Timeline_0__Direction_E2DA146C4A239839D05F8489E6DBF005, 0x0B34);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, UnknownData_65MD, 0x0B35);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, Timeline_1, 0x0B38);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, Delay_Alpha_FCBC07E64022BCD3D36968B02BCF27D3, 0x0B40);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, Delay__Direction_FCBC07E64022BCD3D36968B02BCF27D3, 0x0B44);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, UnknownData_VC7U, 0x0B45);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, Delay, 0x0B48);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, FadeControl_Alpha_1167A1C0459A9B058BC495948E989F02, 0x0B50);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, FadeControl__Direction_1167A1C0459A9B058BC495948E989F02, 0x0B54);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, UnknownData_6SMN, 0x0B55);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, FadeControl, 0x0B58);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, IsWalking, 0x0B60);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, IsCrouch, 0x0B61);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, IsSprint, 0x0B62);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, UnknownData_SFZO, 0x0B63);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, BaseLookUpRate, 0x0B64);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, BaseTurnRate, 0x0B68);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, IsKnockdown, 0x0B6C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, IsInjure, 0x0B6D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, IsHiding, 0x0B6E);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, IsUsingItem, 0x0B6F);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, IsSearchingItem, 0x0B70);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, UnknownData_13OI, 0x0B71);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, CacheTouchLocation2D, 0x0B74);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, CacheFingerIndex, 0x0B7C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, IsTouch, 0x0B7D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, UnknownData_BG3O, 0x0B7E);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, CrouchSpeed, 0x0B80);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, WalkSpeedPercent, 0x0B84);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, BackwardSpeedPercent, 0x0B88);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, InjuredSprintAffectSpeed, 0x0B8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, IsForward_, 0x0B90);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, UnknownData_2JFX, 0x0B91);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, InjuredWalkAffectSpeed, 0x0B94);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, OnMoveToCompleted, 0x0B98);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, CurrentPickItem, 0x0BA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, TempTag, 0x0BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, HitParticle, 0x0BD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, IsAttacking, 0x0BE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, UnknownData_9BRC, 0x0BE1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, AttackType, 0x0BE4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, HSHInventory, 0x0BE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, CacheAbilityComponent, 0x0C38);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, HunterRef, 0x0C48);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, RightPreviewMesh, 0x0C50);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, LeftPreviewMesh, 0x0C58);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, HitAnimMontage, 0x0C60);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, InteractionCache, 0x0C68);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, PingHunterCache, 0x0C70);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, FallingDistance, 0x0C78);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, UnknownData_KA4E, 0x0C7C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, FallingMontage, 0x0C80);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, bIsFirstTouchGround, 0x0C88);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, UnknownData_8XPI, 0x0C89);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, OnTakeDamage, 0x0C90);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, IsHideMesh, 0x0CA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, UnknownData_VJGP, 0x0CA1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, DataTableFootStep, 0x0CA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, FootStepChannal, 0x0CB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, UnknownData_LBW0, 0x0CB1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, FootStepDistance, 0x0CB4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, bCheckStartSprint, 0x0CB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, bIsAiming, 0x0CB9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, UnknownData_B8LL, 0x0CBA);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, Widget_HiddenNotify, 0x0CC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, HunterHitActor, 0x0CC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, IsLockingItem, 0x0CD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, IsOnLockingItem, 0x0CD9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, UnknownData_7KV4, 0x0CDA);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, CheckLockingLockItem, 0x0CDC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, CameraShakeMagnitude, 0x0CE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, bMovingHoldForward, 0x0CE4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, bMovingHoldRight, 0x0CE5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, UnknownData_BJCS, 0x0CE6);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, CacheFallingLocation, 0x0CE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, bIsLookBack_, 0x0CF4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, bIsExitPortal, 0x0CF5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, UnknownData_LVYC, 0x0CF6);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, DefualtSpringSocketY, 0x0CF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, DefualtHalfHeight, 0x0CFC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, PPI_Blur, 0x0D00);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, OnUseItem, 0x0D08);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, OnDropItem, 0x0D18);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, CharacterID, 0x0D28);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, DropMontage, 0x0D38);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, bIsSnapLocation, 0x0D40);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, bIsSnapRotation, 0x0D41);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, UnknownData_S8KN, 0x0D42);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, OnActionAttack, 0x0D48);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, OnActionUseItem, 0x0D58);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, OnChasing, 0x0D68);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, OnScaned, 0x0D78);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, OnRitualDone, 0x0D88);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, SeeAnyOnes, 0x0D98);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, UnknownData_0U3S, 0x0D9C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, OnAttackSuccess, 0x0DA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, OnSeeAnyOneChanged, 0x0DB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, OnInteractionDone, 0x0DC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, OnInteractionStart, 0x0DD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, InjuredSound, 0x0DE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, ExhaustedSound, 0x0DF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, IsExhausted, 0x0E00);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, UnknownData_DZLA, 0x0E01);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, CameraMode, 0x0E04);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, OnSnapLocationSuccess, 0x0E08);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, HSURPlayerController, 0x0E18);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, MinionCache, 0x0E20);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, OnClientTakeDamage, 0x0E28);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, OnCharacterFall, 0x0E38);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, MoveSpeed, 0x0E48);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, UnknownData_0T1J, 0x0E4C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, OnFinishedVent, 0x0E50);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, OnStopInteraction, 0x0E60);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, OnFinishInteraction, 0x0E70);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, OnStopUseItem, 0x0E80);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, OnActionUseItemFinish, 0x0E90);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, TimeAFK, 0x0EA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, UnknownData_NEC1, 0x0EA4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, OnCharacterDie, 0x0EA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, bIsGameStarted, 0x0EB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, UnknownData_M9SX, 0x0EB9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, CacheVentilator, 0x0EC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, OnSurvivorDoorStun, 0x0F00);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, BreakMontage, 0x0F10);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, TremorReactionMontage, 0x0F18);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, IsOnVent, 0x0F20);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, UnknownData_BUGL, 0x0F21);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, UpdateTransformTimer, 0x0F28);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, CollisionMovement, 0x0F30);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, UnknownData_GXD0, 0x0F32);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, AimTransformInt, 0x0F34);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, LockTickTimer, 0x0F4C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, DelayInput, 0x0F50);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, Gender, 0x0F51);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, PendingHide, 0x0F52);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, UnknownData_KIPM, 0x0F53);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, CacheLookAtCrosshair, 0x0F54);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, CacheSocketOffset, 0x0F58);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, CrosshairTraceLength, 0x0F64);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, CurrentItemType, 0x0F68);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, UnknownData_0I9Q, 0x0F69);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivorBase_C, OnHiddenSurvivor, 0x0F70);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASurvivorBase_C, 0x0F80);
		}

		// class UBTTask_TryOpenChest_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTTask_TryOpenChest__BTTask_TryOpenChest_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_TryOpenChest_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_TryOpenChest_C, bDoSomething, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_TryOpenChest_C, UnknownData_H55P, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_TryOpenChest_C, CacheInteractItem, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_TryOpenChest_C, 0x00C8);
		}

		// class UWidget_SettingPanelMobile_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_SettingPanelMobile__Widget_SettingPanelMobile_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanelMobile_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanelMobile_C, BeginPanel, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanelMobile_C, CanvasPanel_SubContent, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanelMobile_C, Image_283, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanelMobile_C, Image_606, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanelMobile_C, Image_BG, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanelMobile_C, Widget_Button_Back, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanelMobile_C, Widget_Button_Control, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanelMobile_C, Widget_Button_Display, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanelMobile_C, Widget_Button_FindMatch, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanelMobile_C, Widget_Button_ItemStore, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanelMobile_C, Widget_Button_Lootbox, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanelMobile_C, Widget_Button_Sound, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanelMobile_C, Widget_Button_Sticker, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanelMobile_C, Widget_Button_System, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanelMobile_C, Widget_OptionControl, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanelMobile_C, Widget_OptionDisplayMobile, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanelMobile_C, Widget_OptionSoundMobile, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanelMobile_C, Widget_OptionStickerMobile, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanelMobile_C, Widget_OptionSystem, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanelMobile_C, WidgetSwitcher_SubMenu, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanelMobile_C, OnFindMatch, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanelMobile_C, OnLootbox, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanelMobile_C, OnItemStore, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanelMobile_C, OnExit, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_SettingPanelMobile_C, OptionManager, 0x0330);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_SettingPanelMobile_C, 0x0338);
		}

		// class UWidget_LobbyCheckingPlayers_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_LobbyCheckingPlayers__Widget_LobbyCheckingPlayers_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LobbyCheckingPlayers_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LobbyCheckingPlayers_C, Bottom_Shadow, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LobbyCheckingPlayers_C, CircularThrobber_121, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LobbyCheckingPlayers_C, Image_2, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LobbyCheckingPlayers_C, Image_3, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LobbyCheckingPlayers_C, Image_4, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LobbyCheckingPlayers_C, Image_5, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LobbyCheckingPlayers_C, Image_6, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LobbyCheckingPlayers_C, Image_293, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LobbyCheckingPlayers_C, TextBlock_1, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LobbyCheckingPlayers_C, TextBlock_Timer, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LobbyCheckingPlayers_C, Top_shadow, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LobbyCheckingPlayers_C, Widget_Button_Cancel, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LobbyCheckingPlayers_C, bTryCloseChecking, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LobbyCheckingPlayers_C, UnknownData_IWUS, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LobbyCheckingPlayers_C, CacheMaxPlayer, 0x02B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_LobbyCheckingPlayers_C, 0x02B8);
		}

		// class UExecutionSpecterComponent_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__ExecutionSpecterComponent__ExecutionSpecterComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UExecutionSpecterComponent_C, UberGraphFrame, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExecutionSpecterComponent_C, hunter, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExecutionSpecterComponent_C, SurvivorTarget, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExecutionSpecterComponent_C, CacheCamera, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExecutionSpecterComponent_C, GE_Weapon, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExecutionSpecterComponent_C, ATKDmg, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExecutionSpecterComponent_C, IsAttach, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExecutionSpecterComponent_C, UnknownData_3UXE, 0x013D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExecutionSpecterComponent_C, OnCameraSuccess, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExecutionSpecterComponent_C, RandomSet, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExecutionSpecterComponent_C, UnknownData_O1BN, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExecutionSpecterComponent_C, MontageSets, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExecutionSpecterComponent_C, BlendInTime, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExecutionSpecterComponent_C, BlendOutTime, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExecutionSpecterComponent_C, State, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExecutionSpecterComponent_C, UnknownData_LV0S, 0x0171);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExecutionSpecterComponent_C, Widget, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExecutionSpecterComponent_C, bIsDebug, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExecutionSpecterComponent_C, UnknownData_T3QM, 0x0181);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExecutionSpecterComponent_C, DebugMontageIndex, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExecutionSpecterComponent_C, bIsChecking, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExecutionSpecterComponent_C, bIsHoldForwardBeforeCheck, 0x0189);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExecutionSpecterComponent_C, bIsHoldRightBeforeCheck, 0x018A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExecutionSpecterComponent_C, UnknownData_090Z, 0x018B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExecutionSpecterComponent_C, CancelChecking, 0x018C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExecutionSpecterComponent_C, 0x0190);
		}

		// class UIWidgetLogin_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__IWidgetLogin__IWidgetLogin_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIWidgetLogin_C, 0x0030);
		}

		// class UWidget_OptionGraphics_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_OptionGraphics__Widget_OptionGraphics_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionGraphics_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionGraphics_C, Widget_Button_Active, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionGraphics_C, Widget_Button_Default, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionGraphics_C, Widget_ButtonChoiceArrow_AA, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionGraphics_C, Widget_ButtonChoiceArrow_Effect, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionGraphics_C, Widget_ButtonChoiceArrow_Postprocess, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionGraphics_C, Widget_ButtonChoiceArrow_Quality, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionGraphics_C, Widget_ButtonChoiceArrow_Shadow, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionGraphics_C, Widget_ButtonChoiceArrow_Texture, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionGraphics_C, OptionManager, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_OptionGraphics_C, 0x0298);
		}

		// class AHSURGameState_C : public AGameState
		TEST_METHOD(BlueprintGeneratedClass__HSURGameState__HSURGameState_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameState_C, UberGraphFrame, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameState_C, ChatComponent, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameState_C, DetectValueComponent, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameState_C, ActivityManagerComponent, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameState_C, RandomObjectiveComponent, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameState_C, LogsComponent, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameState_C, OutlineManagerComponent, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameState_C, SD_ManagerComponent, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameState_C, LimitItemsTypeChestComponent, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameState_C, LimitItemsTypeComponent, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameState_C, RandomSpawnItemsComponent, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameState_C, ProgressManagerComponent, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameState_C, BGMManagerComponent, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameState_C, GameStatisticComponent, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameState_C, QuestManagerComponent, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameState_C, PingManagerComponent, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameState_C, PickableItemComponent, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameState_C, DefaultSceneRoot, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameState_C, AllPlayerInfo, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameState_C, SurvivorArray, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameState_C, HunterArray, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameState_C, TrapTargetUsed, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameState_C, TimeCountingHandle, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameState_C, MaxTimer, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameState_C, UnknownData_GL1R, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameState_C, SurvivorExitPortalArray, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameState_C, SurvivorStateStatus, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameState_C, SoulArray, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameState_C, SoulDisappearArray, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameState_C, Timer, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameState_C, SurvivorDeathCount, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameState_C, TotalTime, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameState_C, bAllSurvivorDead, 0x04CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameState_C, IsCustomMatch, 0x04CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameState_C, UnknownData_7IHD, 0x04CE);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameState_C, OnCharacterCountChange, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameState_C, bEndByPortal, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameState_C, bHunterDead, 0x04E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameState_C, UnknownData_L8BN, 0x04E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameState_C, OnHunterDie, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameState_C, OnSurvivorDie, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameState_C, OnUpdateTrapTargetList, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameState_C, SpawnPlayerList, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameState_C, bIsTutorial, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameState_C, UnknownData_V4WR, 0x0529);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameState_C, LastedPlayerKilled_ID, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameState_C, LastedPlayerExitPortal_ID, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameState_C, PlayerExitPortals, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameState_C, bIsContinues, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameState_C, PlayerCount, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameState_C, VoteCounting, 0x0574);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameState_C, bIsVoting, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameState_C, UnknownData_HDS3, 0x0579);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURGameState_C, AllPlayerInfo_New, 0x0580);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHSURGameState_C, 0x0590);
		}

		// class UOutlineComponent_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__OutlineComponent__OutlineComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOutlineComponent_C, UberGraphFrame, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOutlineComponent_C, actorslist, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOutlineComponent_C, Camera, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOutlineComponent_C, FillterListClass, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOutlineComponent_C, Distance, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOutlineComponent_C, isInit, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOutlineComponent_C, UnknownData_WZTL, 0x013D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOutlineComponent_C, pointRoot, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOutlineComponent_C, degree, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOutlineComponent_C, HalfHeight, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOutlineComponent_C, InteractComponent, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOutlineComponent_C, InteractionActor, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOutlineComponent_C, bIsUseOutlineForInteraction_, 0x0160);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOutlineComponent_C, 0x0161);
		}

		// class UWidget_BuyLevel_Single_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_BuyLevel_Single__Widget_BuyLevel_Single_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_BuyLevel_Single_C, BG, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_BuyLevel_Single_C, Widget_ButtonTextNumberInput, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_BuyLevel_Single_C, Widget_Text, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_BuyLevel_Single_C, 0x0258);
		}

		// class AJaneSurvivor_C : public ASurvivorBase_C
		TEST_METHOD(BlueprintGeneratedClass__JaneSurvivor__JaneSurvivor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AJaneSurvivor_C, UberGraphFrame, 0x0F80);
			CHEAT_GEAR_CHECK_OFFSET(CG::AJaneSurvivor_C, Capsule, 0x0F90);
			CHEAT_GEAR_CHECK_OFFSET(CG::AJaneSurvivor_C, Box2, 0x0F98);
			CHEAT_GEAR_CHECK_OFFSET(CG::AJaneSurvivor_C, Box, 0x0FA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AJaneSurvivor_C, Attacking, 0x0FA8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AJaneSurvivor_C, 0x0FB8);
		}

		// class AZBingCat_PreviewItem_WoodStick_C : public AZBingCat_PreviewItemBase_C
		TEST_METHOD(BlueprintGeneratedClass__ZBingCat_PreviewItem_WoodStick__ZBingCat_PreviewItem_WoodStick_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AZBingCat_PreviewItem_WoodStick_C, 0x0350);
		}

		// class UWidget_ItemSlot_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_ItemSlot__Widget_ItemSlot_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemSlot_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemSlot_C, OnEquip, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemSlot_C, Button_1, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemSlot_C, CanvasPanel_167, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemSlot_C, EquipFrame, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemSlot_C, EquipPanel, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemSlot_C, Image_141, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemSlot_C, Image_143, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemSlot_C, Image_144, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemSlot_C, Image_BG, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemSlot_C, Image_Product, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemSlot_C, Image_ProductBG, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemSlot_C, InspectIcon, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemSlot_C, Overlay_2, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemSlot_C, Owner0, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemSlot_C, Redrope1, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemSlot_C, Redrope2, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemSlot_C, RequirePanel, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemSlot_C, TextBlock_110, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemSlot_C, TextBlock_Number, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemSlot_C, VerticalBox_Number, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemSlot_C, Widget_Button, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemSlot_C, Widget_Text, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemSlot_C, Widget_Text_Discount, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemSlot_C, Widget_Text_Name, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemSlot_C, Widget_Text_PerkSlot, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemSlot_C, Widget_Text_Rarity, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemSlot_C, Widget_Text_ReqLv, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemSlot_C, OnClick, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemSlot_C, Item, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemSlot_C, WidgetManager, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemSlot_C, SelectNull, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemSlot_C, UnknownData_I3F1, 0x0419);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemSlot_C, CurrentTexture, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemSlot_C, PerkSlot, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemSlot_C, UnknownData_XBI7, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemSlot_C, OnPerkSelect, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemSlot_C, OnPreviewClick, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemSlot_C, Rarity, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemSlot_C, bIsValid, 0x0454);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_ItemSlot_C, 0x0455);
		}

		// class UJokeAudioSurvivorComponent_C : public UJokeAudioComponent_C
		TEST_METHOD(BlueprintGeneratedClass__JokeAudioSurvivorComponent__JokeAudioSurvivorComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UJokeAudioSurvivorComponent_C, UberGraphFrame, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UJokeAudioSurvivorComponent_C, 0x0180);
		}

		// class UWidget_TextDmg_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_TextDmg__Widget_TextDmg_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TextDmg_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TextDmg_C, Play, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TextDmg_C, TextBlock_Dmg, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TextDmg_C, Location, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TextDmg_C, UnknownData_EN91, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TextDmg_C, Text, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TextDmg_C, Offset, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_TextDmg_C, 0x0290);
		}

		// class UWidget_Surivor_Tutorial_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_Surivor_Tutorial__Widget_Surivor_Tutorial_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Surivor_Tutorial_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Surivor_Tutorial_C, BeginAnimation, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Surivor_Tutorial_C, BG, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Surivor_Tutorial_C, Effect, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Surivor_Tutorial_C, ForegroundBottom, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Surivor_Tutorial_C, ForegroundTop, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Surivor_Tutorial_C, Image_53, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Surivor_Tutorial_C, Image_197, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Surivor_Tutorial_C, Image_335, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Surivor_Tutorial_C, Image_Button_BG01, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Surivor_Tutorial_C, Image_Button_BG02, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Surivor_Tutorial_C, Image_Button_BG03, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Surivor_Tutorial_C, Image_Button_BG04, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Surivor_Tutorial_C, Img_2, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Surivor_Tutorial_C, Img_3, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Surivor_Tutorial_C, Img_4, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Surivor_Tutorial_C, Img_5, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Surivor_Tutorial_C, Widget_Text_2, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Surivor_Tutorial_C, Widget_Text_3, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Surivor_Tutorial_C, Widget_Text_4, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Surivor_Tutorial_C, Widget_Text_5, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Surivor_Tutorial_C, Widget_Text_Mission, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Surivor_Tutorial_C, Widget_Text_Or, 0x02F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_Surivor_Tutorial_C, 0x0300);
		}

		// class ALootBoxObject_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__LootBoxObject__LootBoxObject_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALootBoxObject_C, UberGraphFrame, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALootBoxObject_C, Billboard, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALootBoxObject_C, SkeletalMesh, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALootBoxObject_C, DefaultSceneRoot, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALootBoxObject_C, LootBoxMesh, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALootBoxObject_C, Rand, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALootBoxObject_C, UnknownData_T9ZB, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALootBoxObject_C, MID_Jar, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALootBoxObject_C, Alpha, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALootBoxObject_C, UnknownData_TKEJ, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALootBoxObject_C, Rarity, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALootBoxObject_C, RarityColor, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALootBoxObject_C, Amount, 0x03A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALootBoxObject_C, 0x03AC);
		}

		// class ABGMStateController_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BGMStateController__BGMStateController_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABGMStateController_C, UberGraphFrame, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABGMStateController_C, DefaultSceneRoot, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABGMStateController_C, BGMState, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABGMStateController_C, SoundControllerMusic, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABGMStateController_C, FadeOutDuration, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABGMStateController_C, FadeInDuration, 0x036C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABGMStateController_C, 0x0370);
		}

		// class UWidget_QuestImage_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_QuestImage__Widget_QuestImage_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_QuestImage_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_QuestImage_C, OnStateChanging, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_QuestImage_C, Image_BG, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_QuestImage_C, Image_Border, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_QuestImage_C, Image_Dissolve, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_QuestImage_C, Image_Inside, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_QuestImage_C, Image_Smoke, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_QuestImage_C, StartIndex, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_QuestImage_C, CacheIndex, 0x0284);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_QuestImage_C, 0x0288);
		}

		// class ASwitchActorBase_C : public AInteractionBase_C
		TEST_METHOD(BlueprintGeneratedClass__SwitchActorBase__SwitchActorBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASwitchActorBase_C, UnknownData_P258, 0x06C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASwitchActorBase_C, UberGraphFrame, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASwitchActorBase_C, Box, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASwitchActorBase_C, Door, 0x06E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASwitchActorBase_C, 0x06F0);
		}

		// class UWidget_ButtonChoiceTab_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_ButtonChoiceTab__Widget_ButtonChoiceTab_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoiceTab_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoiceTab_C, HorizontalBox_Choice, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoiceTab_C, Text, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoiceTab_C, AutoSize, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoiceTab_C, bUpperCase, 0x0271);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoiceTab_C, UnknownData_77IK, 0x0272);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoiceTab_C, OnClicked, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoiceTab_C, FontSize, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoiceTab_C, UnknownData_ZWOC, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoiceTab_C, Choice, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoiceTab_C, LeftOffset, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoiceTab_C, Size_Choice, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoiceTab_C, Padding_Choice, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoiceTab_C, Active_Choice, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoiceTab_C, Style_ActiveButton, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoiceTab_C, Style_DeactiveButton, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoiceTab_C, Color_ActiveText, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoiceTab_C, Color_DeactiveText, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoiceTab_C, ButtonHorizontalAlignment, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoiceTab_C, ButtonVerticalAlignment, 0x0801);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoiceTab_C, UnknownData_38TQ, 0x0802);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoiceTab_C, bIsEnable, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoiceTab_C, PaddingText, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoiceTab_C, HorizontalAlimentText, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoiceTab_C, VerticalAlimentText, 0x0829);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoiceTab_C, UnknownData_15TK, 0x082A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoiceTab_C, InSize, 0x082C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoiceTab_C, UnknownData_YJ2R, 0x0834);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoiceTab_C, Brush, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoiceTab_C, Size, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoiceTab_C, PaddingImage, 0x08C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoiceTab_C, bIsCollaspe, 0x08D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_ButtonChoiceTab_C, 0x08E8);
		}

		// class UWidget_ItemInventory_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_ItemInventory__Widget_ItemInventory_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemInventory_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemInventory_C, ItemsSlotPanel, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemInventory_C, ScrollBox_1, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemInventory_C, SortComboBoxString, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemInventory_C, Widget_ItemSlot, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemInventory_C, Widget_ItemSlot_C_2, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemInventory_C, Widget_ItemSlot_C_3, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemInventory_C, Widget_ItemSlot_C_4, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemInventory_C, Widget_ItemSlot_C_6, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemInventory_C, Widget_ItemSlot_C_7, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemInventory_C, Widget_ItemSlot_C_8, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemInventory_C, Widget_ItemSlot_C_11, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemInventory_C, Widget_ItemSlot_C_12, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemInventory_C, Items, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemInventory_C, InventoryData, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemInventory_C, SlotNum, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemInventory_C, UnknownData_AR6U, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemInventory_C, OnSummit, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemInventory_C, SelectNull, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemInventory_C, UnknownData_OJHX, 0x02E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemInventory_C, MaxColumn, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemInventory_C, CurrentOwned, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemInventory_C, CurrentNotOwned, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemInventory_C, Text, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemInventory_C, OnPreview, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemInventory_C, MaxNum, 0x0320);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_ItemInventory_C, 0x0324);
		}

		// class UIngame_QuestReleaseGhost_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Ingame_QuestReleaseGhost__Ingame_QuestReleaseGhost_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_QuestReleaseGhost_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_QuestReleaseGhost_C, ShowPortal, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_QuestReleaseGhost_C, HorizontalBox_119, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_QuestReleaseGhost_C, Widget_ProgressPortal_C_1, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_QuestReleaseGhost_C, Widget_ProgressPortal_C_2, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_QuestReleaseGhost_C, Widget_ProgressPortal_C_3, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_QuestReleaseGhost_C, Widget_ProgressPortal_C_4, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_QuestReleaseGhost_C, Widget_ProgressPortal_C_5, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_QuestReleaseGhost_C, Widget_QuestImage_C_1, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_QuestReleaseGhost_C, Widget_QuestImage_C_2, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_QuestReleaseGhost_C, Widget_QuestImage_C_3, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_QuestReleaseGhost_C, Widget_QuestImage_C_4, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_QuestReleaseGhost_C, WidgetSwitcher_Detail, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_QuestReleaseGhost_C, SDManager, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_QuestReleaseGhost_C, Init, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIngame_QuestReleaseGhost_C, 0x02B9);
		}

		// class UProfileCanvas_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__ProfileCanvas__ProfileCanvas_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProfileCanvas_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProfileCanvas_C, GridPanel_974, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProfileCanvas_C, OverlayBlock, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProfileCanvas_C, Profile_Gem, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProfileCanvas_C, Profile_Gold, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProfileCanvas_C, Profile_Level, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProfileCanvas_C, Profile_Name1, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProfileCanvas_C, ProfileBackground, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProfileCanvas_C, ProfileImage, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProfileCanvas_C, ProfileImage_C_1, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProfileCanvas_C, ProfileImage_C_2, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProfileCanvas_C, ProfileImage_C_3, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProfileCanvas_C, ProfileImage_C_4, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProfileCanvas_C, ProfileImage_C_5, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProfileCanvas_C, ProfileImage_C_6, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProfileCanvas_C, ProfileImage_C_7, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProfileCanvas_C, ProfileImage_C_8, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProfileCanvas_C, ProfileImage_C_9, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProfileCanvas_C, ProfileImage_C_10, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProfileCanvas_C, ProfileImage_C_556, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProfileCanvas_C, ProfileImageList, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProfileCanvas_C, WidgetManager, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProfileCanvas_C, IsBusy, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProfileCanvas_C, UnknownData_GNEY, 0x0301);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProfileCanvas_C, ProfilePadding, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProfileCanvas_C, UnknownData_F8S5, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProfileCanvas_C, OwnedProfiles, 0x0318);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProfileCanvas_C, 0x0328);
		}

		// class ACraneObject_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__CraneObject__CraneObject_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACraneObject_C, UberGraphFrame, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACraneObject_C, Mesh, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACraneObject_C, DefaultSceneRoot, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACraneObject_C, BoxTraceSize, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACraneObject_C, 0x0364);
		}

		// class URecordsCanvas_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__RecordsCanvas__RecordsCanvas_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URecordsCanvas_C, Image_170, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::URecordsCanvas_C, Image_173, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::URecordsCanvas_C, Image_453, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::URecordsCanvas_C, Image_551, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::URecordsCanvas_C, Image_553, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::URecordsCanvas_C, Image_689, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::URecordsCanvas_C, Profile_Gem, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::URecordsCanvas_C, Profile_Gold, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::URecordsCanvas_C, Profile_Level, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::URecordsCanvas_C, Profile_Name1, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::URecordsCanvas_C, ProfileBackground, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::URecordsCanvas_C, ProfileImage, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::URecordsCanvas_C, TextBlock_MMR_Hunter, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URecordsCanvas_C, TextBlock_MMR_Survivor, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URecordsCanvas_C, Value_Specter_AVGPoints, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URecordsCanvas_C, Value_Specter_Eliminate, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URecordsCanvas_C, Value_Specter_Match, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URecordsCanvas_C, Value_Specter_Performance, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URecordsCanvas_C, Value_Specter_Points, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URecordsCanvas_C, Value_Specter_Souls, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URecordsCanvas_C, Value_Survivor_AVGPoints, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URecordsCanvas_C, Value_Survivor_Eliminate, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URecordsCanvas_C, Value_Survivor_Eliminate_Percentage, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URecordsCanvas_C, Value_Survivor_Escape, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URecordsCanvas_C, Value_Survivor_Escape_Percentage, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::URecordsCanvas_C, Value_Survivor_Match, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::URecordsCanvas_C, Value_Survivor_Points, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::URecordsCanvas_C, Widget_Text_Specter, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::URecordsCanvas_C, Widget_Text_Survivor, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::URecordsCanvas_C, WidgetManager, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URecordsCanvas_C, 0x0330);
		}

		// class ABP_GS_PlayerController_C : public APlayerController
		TEST_METHOD(BlueprintGeneratedClass__BP_GS_PlayerController__BP_GS_PlayerController_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GS_PlayerController_C, UberGraphFrame, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GS_PlayerController_C, HSURGameInstance_REF, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GS_PlayerController_C, bIsSend, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GS_PlayerController_C, UnknownData_IH30, 0x06A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GS_PlayerController_C, MatchMaker, 0x06B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_GS_PlayerController_C, 0x06C0);
		}

		// class UWidget_TutorialsMainMenu_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_TutorialsMainMenu__Widget_TutorialsMainMenu_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TutorialsMainMenu_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TutorialsMainMenu_C, NewAnimation, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TutorialsMainMenu_C, CheckBox_DontShowAgain, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TutorialsMainMenu_C, Image_2, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TutorialsMainMenu_C, Image_114, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TutorialsMainMenu_C, Image_182, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TutorialsMainMenu_C, Image_837, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TutorialsMainMenu_C, Specter_Header, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TutorialsMainMenu_C, Sur_Header, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TutorialsMainMenu_C, TextBlock_Debug, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TutorialsMainMenu_C, TextBlock_Description, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TutorialsMainMenu_C, TextBlock_Header, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TutorialsMainMenu_C, TextBlock_Role, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TutorialsMainMenu_C, VerticalBox_Text, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TutorialsMainMenu_C, Widget_Button_Back, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TutorialsMainMenu_C, Widget_Button_Basic, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TutorialsMainMenu_C, Widget_Button_Close, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TutorialsMainMenu_C, Widget_Button_Endgame, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TutorialsMainMenu_C, Widget_Button_Invisble, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TutorialsMainMenu_C, Widget_Button_Item, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TutorialsMainMenu_C, Widget_Button_Next, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TutorialsMainMenu_C, Widget_Button_Ritual, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TutorialsMainMenu_C, Widget_Button_RitualSur, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TutorialsMainMenu_C, Widget_Button_SurBasic, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TutorialsMainMenu_C, Widget_TextWithInputImage, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TutorialsMainMenu_C, Widget_TextWithInputImage_175, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TutorialsMainMenu_C, WidgetSwitcher_1, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TutorialsMainMenu_C, Role, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TutorialsMainMenu_C, UnknownData_NNWS, 0x0321);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TutorialsMainMenu_C, DataTable, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TutorialsMainMenu_C, TutorialArray, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TutorialsMainMenu_C, Index, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TutorialsMainMenu_C, bIsFristTime, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TutorialsMainMenu_C, UnknownData_0DWE, 0x0345);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TutorialsMainMenu_C, MediaPlayer, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_TutorialsMainMenu_C, 0x0350);
		}

		// class UCommunicationWheelComponent_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__CommunicationWheelComponent__CommunicationWheelComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommunicationWheelComponent_C, UberGraphFrame, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommunicationWheelComponent_C, StickerWidget, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommunicationWheelComponent_C, StickerCharacterWidget, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommunicationWheelComponent_C, IsStickerActive, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommunicationWheelComponent_C, UnknownData_T28O, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommunicationWheelComponent_C, OwningController, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommunicationWheelComponent_C, StickerIsInitialize, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommunicationWheelComponent_C, UnknownData_1GS5, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommunicationWheelComponent_C, WDG_HeightOffset, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommunicationWheelComponent_C, CurrentSelected, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommunicationWheelComponent_C, UnknownData_APSV, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommunicationWheelComponent_C, StickerList, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommunicationWheelComponent_C, EmoteList, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommunicationWheelComponent_C, EmoteWidget, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommunicationWheelComponent_C, EmoteIsInitialize, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommunicationWheelComponent_C, IsEmoteActive, 0x0169);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCommunicationWheelComponent_C, 0x016A);
		}

		// class UGA_ImmuneHunterBase_C : public UHSHGameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_ImmuneHunterBase__GA_ImmuneHunterBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_ImmuneHunterBase_C, UberGraphFrame, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_ImmuneHunterBase_C, Montage, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_ImmuneHunterBase_C, PairAnimation, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_ImmuneHunterBase_C, ImmuneSound, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_ImmuneHunterBase_C, PairSounds, 0x0480);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_ImmuneHunterBase_C, 0x0490);
		}

		// class USaveLoadFunctionLibrary_C : public UBlueprintFunctionLibrary
		TEST_METHOD(BlueprintGeneratedClass__SaveLoadFunctionLibrary__SaveLoadFunctionLibrary_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USaveLoadFunctionLibrary_C, 0x0030);
		}

		// class UMale_Lobby_ABP_C : public USurvivor_Lobby_ABP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__Male_Lobby_ABP__Male_Lobby_ABP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMale_Lobby_ABP_C, 0x0A1A);
		}

		// class UStickerCanvas_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__StickerCanvas__StickerCanvas_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStickerCanvas_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStickerCanvas_C, BG, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStickerCanvas_C, OverlayBlock, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStickerCanvas_C, StickerGridPanel, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStickerCanvas_C, StickerSlotCanvas, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStickerCanvas_C, Widget_ButtonChoice_C_2, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStickerCanvas_C, Widget_Text, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStickerCanvas_C, Widget_Text_C_1, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStickerCanvas_C, WidgetManager, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStickerCanvas_C, StickerImageList, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStickerCanvas_C, StickerSlotList, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStickerCanvas_C, StickerAssets, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStickerCanvas_C, IsBusy, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStickerCanvas_C, UnknownData_L2HN, 0x02C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStickerCanvas_C, StickerIndex, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStickerCanvas_C, OwnedStickers, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStickerCanvas_C, 0x02D8);
		}

		// class AHSURLobbyActor_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__HSURLobbyActor__HSURLobbyActor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURLobbyActor_C, UberGraphFrame, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURLobbyActor_C, SkeletalMeshCat, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURLobbyActor_C, Arrow, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURLobbyActor_C, SkeletalMesh, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURLobbyActor_C, DefaultSceneRoot, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURLobbyActor_C, CharacterTransform_LightAlpha_81FB908D4263C2F94476C18F4FD6D6DC, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURLobbyActor_C, CharacterTransform_Alpha_81FB908D4263C2F94476C18F4FD6D6DC, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURLobbyActor_C, CharacterTransform__Direction_81FB908D4263C2F94476C18F4FD6D6DC, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURLobbyActor_C, UnknownData_EEPH, 0x0371);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURLobbyActor_C, CharacterTransform, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURLobbyActor_C, IsHasPlayer, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURLobbyActor_C, IsPlayerOwning, 0x0381);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURLobbyActor_C, UnknownData_NKB7, 0x0382);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURLobbyActor_C, PlayerOwnerId, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURLobbyActor_C, PairAnimation, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURLobbyActor_C, IsReady, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURLobbyActor_C, LobbyPose, 0x0399);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURLobbyActor_C, UnknownData_RAIJ, 0x039A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURLobbyActor_C, Scale, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURLobbyActor_C, OnUpdate, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURLobbyActor_C, WidgetLobbyPreview, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURLobbyActor_C, OnClear, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURLobbyActor_C, PreviewBack, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURLobbyActor_C, PreviewHead, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURLobbyActor_C, PlayerOwnerInfo, 0x03D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHSURLobbyActor_C, 0x04E8);
		}

		// class UWidget_PlaymodePanel_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_PlaymodePanel__Widget_PlaymodePanel_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlaymodePanel_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlaymodePanel_C, Loop, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlaymodePanel_C, End, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlaymodePanel_C, Begin, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlaymodePanel_C, Black, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlaymodePanel_C, Blood, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlaymodePanel_C, Image_1, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlaymodePanel_C, Image_164, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlaymodePanel_C, Image_182, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlaymodePanel_C, Image_240, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlaymodePanel_C, Line, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlaymodePanel_C, Line1, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlaymodePanel_C, Redrope, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlaymodePanel_C, Widget_Playmode, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlaymodePanel_C, WidgetManager, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlaymodePanel_C, bOnQuickMatch, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlaymodePanel_C, UnknownData_T5E9, 0x02C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlaymodePanel_C, OnBack, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_PlaymodePanel_C, 0x02D8);
		}

		// class UWidget_MainMenuGSMobile_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_MainMenuGSMobile__Widget_MainMenuGSMobile_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGSMobile_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGSMobile_C, Background, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGSMobile_C, Button_2, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGSMobile_C, Button_Create, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGSMobile_C, Button_Join, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGSMobile_C, CheckBox_IsLocal, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGSMobile_C, EditableText_1, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGSMobile_C, EditableText_2, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGSMobile_C, EditableText_3, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGSMobile_C, EditableText_4, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGSMobile_C, EditableText_AccessKeyID, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGSMobile_C, EditableText_Alias, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGSMobile_C, EditableText_SecretID, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGSMobile_C, EditableText_Session, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGSMobile_C, HorizontalBox_1, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGSMobile_C, HorizontalBox_Local, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGSMobile_C, HorizontalBoxGameliftIPLOGIN, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGSMobile_C, Image_12, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGSMobile_C, Panel, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGSMobile_C, PartyPlayer, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGSMobile_C, PartyPlayer_6, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGSMobile_C, PartyPlayer_7, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGSMobile_C, PartyPlayer_8, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGSMobile_C, TextBlock_2, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGSMobile_C, TextBlock_3, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGSMobile_C, TextBlock_1Join, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGSMobile_C, Widget_Button, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGSMobile_C, Widget_FindMatchPanel_C_1, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGSMobile_C, Widget_Lootbox, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGSMobile_C, Widget_MainpanelMobile_191, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGSMobile_C, Widget_PlayerProfile, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGSMobile_C, Widget_PlaymodePanel, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGSMobile_C, Widget_SettingPanelMobile, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGSMobile_C, WidgetSwitcher_Main, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGSMobile_C, MainMenuGameMode_REF, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGSMobile_C, PreviewClientActor, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGSMobile_C, MatchMaking_REF, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGSMobile_C, Widget_Manager, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGSMobile_C, ButtonTextCache, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGSMobile_C, ClickRecently, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenuGSMobile_C, bBlockMoveMenu, 0x0390);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_MainMenuGSMobile_C, 0x0391);
		}

		// class UWidget_ButtonImage_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_ButtonImage__Widget_ButtonImage_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonImage_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonImage_C, Begin, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonImage_C, UnHoverAnimation_Setting, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonImage_C, HoverAnimation_Setting, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonImage_C, UnHoverAnimation, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonImage_C, HoverAnimation, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonImage_C, Button_This, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonImage_C, HorizontalBox_155, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonImage_C, IMG_End, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonImage_C, IMG_Front, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonImage_C, TextBlock_2, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonImage_C, Text, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonImage_C, AutoSize, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonImage_C, bUpperCase, 0x02B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonImage_C, UnknownData_IT43, 0x02BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonImage_C, Size, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonImage_C, UnknownData_MR3M, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonImage_C, OnClicked, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonImage_C, FontSize, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonImage_C, UnHoverAlpha, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonImage_C, HoverAlpha, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonImage_C, IsHaveFrontImg, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonImage_C, IsHaveEndImg, 0x02E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonImage_C, UnknownData_8Z6T, 0x02E6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonImage_C, ImageFrontBrush, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonImage_C, ImageEndBrush, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonImage_C, PaddingFront, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonImage_C, PaddingEnd, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonImage_C, Style, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonImage_C, Font, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonImage_C, AnimationType, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonImage_C, UnknownData_W4YU, 0x06E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonImage_C, ImageEndTransform, 0x06E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonImage_C, ImageFrontTransform, 0x0700);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_ButtonImage_C, 0x071C);
		}

		// class APickable_Water_C : public APickableItemBase_C
		TEST_METHOD(BlueprintGeneratedClass__Pickable_Water__Pickable_Water_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APickable_Water_C, UberGraphFrame, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::APickable_Water_C, Sphere, 0x0798);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APickable_Water_C, 0x07A0);
		}

		// class APickable_WoodStick_C : public APickable_WeaponBase_C
		TEST_METHOD(BlueprintGeneratedClass__Pickable_WoodStick__Pickable_WoodStick_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APickable_WoodStick_C, UberGraphFrame, 0x07A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APickable_WoodStick_C, 0x07B0);
		}

		// class UWidget_OptionDisplay_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_OptionDisplay__Widget_OptionDisplay_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionDisplay_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionDisplay_C, Widget_Button_Active, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionDisplay_C, Widget_Button_Default, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionDisplay_C, Widget_ButtonSlider_Gamma, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionDisplay_C, Widget_ButtonSlider_ResScale, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionDisplay_C, Widget_DisplayMode, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionDisplay_C, Widget_DynamicScale, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionDisplay_C, Widget_FPSLImit, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionDisplay_C, Widget_Resolution, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionDisplay_C, Widget_VSync, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionDisplay_C, OptionManager, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_OptionDisplay_C, 0x02A0);
		}

		// class AWidgetMainMenuManager_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__WidgetMainMenuManager__WidgetMainMenuManager_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWidgetMainMenuManager_C, UberGraphFrame, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWidgetMainMenuManager_C, StoreManagerComponent, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWidgetMainMenuManager_C, GameLift_MatchMakingComponent, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWidgetMainMenuManager_C, HSURMenuCameraManagerComponent, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWidgetMainMenuManager_C, OptionManagerComponent, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWidgetMainMenuManager_C, DefaultSceneRoot, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWidgetMainMenuManager_C, LoadingScreen, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWidgetMainMenuManager_C, Fading, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWidgetMainMenuManager_C, LoginMenu, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWidgetMainMenuManager_C, MainMenuGS_Mobile, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWidgetMainMenuManager_C, MainMenuGS, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWidgetMainMenuManager_C, CustomMatch, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWidgetMainMenuManager_C, QuitGame, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWidgetMainMenuManager_C, MainMenuGameMode_REF, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWidgetMainMenuManager_C, ButtonTextCache, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWidgetMainMenuManager_C, PlayerInfo, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWidgetMainMenuManager_C, OnReceiveNotifyPlayerInfo, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWidgetMainMenuManager_C, BP_CharacterSetting, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWidgetMainMenuManager_C, bPressAnyKeys, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWidgetMainMenuManager_C, UnknownData_VQT9, 0x04E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWidgetMainMenuManager_C, OnReceiveNotifyPlayerItems, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWidgetMainMenuManager_C, TesterGuide, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWidgetMainMenuManager_C, OnReceiveNotifyPlayerPerks, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWidgetMainMenuManager_C, OnReceiveNotifyPlayerProfiles, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWidgetMainMenuManager_C, OnReceiveNotifyPlayerSkins, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWidgetMainMenuManager_C, OnReceiveNotifyPlayerStickers, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWidgetMainMenuManager_C, AutoLogin, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWidgetMainMenuManager_C, UnknownData_DMKY, 0x0549);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWidgetMainMenuManager_C, User, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWidgetMainMenuManager_C, Pass, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWidgetMainMenuManager_C, OnReceiveNotifyPlayerHeads, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWidgetMainMenuManager_C, OnReceiveNotifyPlayerBacks, 0x0590);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWidgetMainMenuManager_C, 0x05A0);
		}

		// class UHSHTargetTypePhaseShift_C : public UHSHTargetTypeSphereTrace_C
		TEST_METHOD(BlueprintGeneratedClass__HSHTargetTypePhaseShift__HSHTargetTypePhaseShift_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHSHTargetTypePhaseShift_C, 0x0060);
		}

		// class UPickableItemComponent_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__PickableItemComponent__PickableItemComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPickableItemComponent_C, UberGraphFrame, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPickableItemComponent_C, 0x0110);
		}

		// class APickable_CameraPerk_C : public APickable_WeaponBase_C
		TEST_METHOD(BlueprintGeneratedClass__Pickable_CameraPerk__Pickable_CameraPerk_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APickable_CameraPerk_C, UberGraphFrame, 0x07A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APickable_CameraPerk_C, 0x07B0);
		}

		// class UIngame_ChatBox_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Ingame_ChatBox__Ingame_ChatBox_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_ChatBox_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_ChatBox_C, CanvasPanel_Main, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_ChatBox_C, ChatScrollBox, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_ChatBox_C, EditableTextBox_221, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_ChatBox_C, HorizontalBox_TextBox, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_ChatBox_C, Image_91, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_ChatBox_C, ScrollBox_All, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_ChatBox_C, ScrollBox_Team, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_ChatBox_C, TextBlock_All, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_ChatBox_C, TextBlock_Team, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_ChatBox_C, Widget_Button_Channel, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_ChatBox_C, WidgetSwitcher_126, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_ChatBox_C, IsTextActive, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_ChatBox_C, ChatType, 0x02A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_ChatBox_C, UnknownData_76X1, 0x02AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_ChatBox_C, spam, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_ChatBox_C, TimerHandle_Spam, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_ChatBox_C, bIsBanned, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_ChatBox_C, UnknownData_SAPP, 0x02B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_ChatBox_C, TimerHandle_BannedRemain, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIngame_ChatBox_C, 0x02C8);
		}

		// class APickable_BareHand_C : public APickable_WeaponBase_C
		TEST_METHOD(BlueprintGeneratedClass__Pickable_BareHand__Pickable_BareHand_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APickable_BareHand_C, UberGraphFrame, 0x07A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APickable_BareHand_C, 0x07B0);
		}

		// class UGE_AttackMoveSpeedDecrease_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_AttackMoveSpeedDecrease__GE_AttackMoveSpeedDecrease_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_AttackMoveSpeedDecrease_C, 0x05F8);
		}

		// class UBGMManagerComponent_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__BGMManagerComponent__BGMManagerComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBGMManagerComponent_C, UberGraphFrame, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBGMManagerComponent_C, bInitailize, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBGMManagerComponent_C, UnknownData_TPWC, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBGMManagerComponent_C, AmbientController, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBGMManagerComponent_C, MusicController, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBGMManagerComponent_C, 0x0128);
		}

		// class UIngame_Spectator_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Ingame_Spectator__Ingame_Spectator_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Spectator_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Spectator_C, TextBlock_Header, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Spectator_C, Widget_TextWithInputImage, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Spectator_C, Widget_TextWithInputImage_C_1, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Spectator_C, Widget_TextWithInputImage_C_2, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Spectator_C, Widget_TextWithInputImage_C_3, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Spectator_C, WidgetSwitcher_148, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Spectator_C, bIsGameOver, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIngame_Spectator_C, 0x0281);
		}

		// class AProjectileHrkActive_C : public AProjectileBase_C
		TEST_METHOD(BlueprintGeneratedClass__ProjectileHrkActive__ProjectileHrkActive_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectileHrkActive_C, UnknownData_9P38, 0x0425);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectileHrkActive_C, UberGraphFrame, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectileHrkActive_C, Timer, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectileHrkActive_C, bDebug, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectileHrkActive_C, UnknownData_Z8GN, 0x0441);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectileHrkActive_C, Radius_CheckDestroy, 0x0444);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AProjectileHrkActive_C, 0x0448);
		}

		// class UActivityComponent_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__ActivityComponent__ActivityComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActivityComponent_C, UberGraphFrame, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActivityComponent_C, WDG_Activity, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActivityComponent_C, IsInitialized, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActivityComponent_C, UnknownData_OWA4, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActivityComponent_C, HSURPlayerController, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActivityComponent_C, 0x0128);
		}

		// class APickable_Match_C : public APickableItemBase_C
		TEST_METHOD(BlueprintGeneratedClass__Pickable_Match__Pickable_Match_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APickable_Match_C, UberGraphFrame, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::APickable_Match_C, Incense, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::APickable_Match_C, Sphere, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APickable_Match_C, Target, 0x07A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APickable_Match_C, 0x07B0);
		}

		// class UOptionControlSaveGame_C : public USaveGame
		TEST_METHOD(BlueprintGeneratedClass__OptionControlSaveGame__OptionControlSaveGame_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionControlSaveGame_C, UberGraphFrame, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionControlSaveGame_C, CurrentValue, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionControlSaveGame_C, DefualtValue, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOptionControlSaveGame_C, 0x00A0);
		}

		// class AVanzSurvivor_C : public ASurvivorBase_C
		TEST_METHOD(BlueprintGeneratedClass__VanzSurvivor__VanzSurvivor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AVanzSurvivor_C, UberGraphFrame, 0x0F80);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVanzSurvivor_C, Box, 0x0F90);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVanzSurvivor_C, Attacking, 0x0F98);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVanzSurvivor_C, 0x0FA8);
		}

		// class ALD_Skin_SeGuard_A_SuitOrange_C : public ALD_Skin_SeGuard_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_SeGuard_A_SuitOrange__LD_Skin_SeGuard_A_SuitOrange_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_SeGuard_A_SuitOrange_C, 0x0532);
		}

		// class ABP_CharacterSetting_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BP_CharacterSetting__BP_CharacterSetting_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_CharacterSetting_C, UberGraphFrame, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_CharacterSetting_C, PointLight, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_CharacterSetting_C, Widget, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_CharacterSetting_C, Arrow, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_CharacterSetting_C, SkeletalMesh, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_CharacterSetting_C, DefaultSceneRoot, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_CharacterSetting_C, EndTransfomr_LightAlpha_889803D04E2CEECC5BF25FAC416D19D6, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_CharacterSetting_C, EndTransfomr_Alpha_889803D04E2CEECC5BF25FAC416D19D6, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_CharacterSetting_C, EndTransfomr__Direction_889803D04E2CEECC5BF25FAC416D19D6, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_CharacterSetting_C, UnknownData_LDZM, 0x0379);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_CharacterSetting_C, EndTransfomr, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_CharacterSetting_C, OnClick, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_CharacterSetting_C, UnknownData_FE3N, 0x0389);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_CharacterSetting_C, Delta, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_CharacterSetting_C, Scale, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_CharacterSetting_C, UnknownData_LFUW, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_CharacterSetting_C, RightPreviewMesh, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_CharacterSetting_C, LeftPreviewMesh, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_CharacterSetting_C, PreviewBack, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_CharacterSetting_C, PreviewHead, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_CharacterSetting_C, Info, 0x03B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_CharacterSetting_C, 0x04C8);
		}

		// class UWidget_LootboxStore_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_LootboxStore__Widget_LootboxStore_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxStore_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxStore_C, Begin, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxStore_C, Image_73, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxStore_C, Image_166, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxStore_C, Widget_Button_Back, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxStore_C, Widget_LootboxProduct_C_2, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxStore_C, Widget_Text, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxStore_C, WidgetManager, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_LootboxStore_C, 0x0288);
		}

		// class UGA_PA_HunterBase_C : public UHSHGameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_PA_HunterBase__GA_PA_HunterBase_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_PA_HunterBase_C, 0x0450);
		}

		// class UGA_PA_HunterHrkConfusion_C : public UGA_ProjectileBase_C
		TEST_METHOD(BlueprintGeneratedClass__GA_PA_HunterHrkConfusion__GA_PA_HunterHrkConfusion_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_PA_HunterHrkConfusion_C, UnknownData_92W8, 0x04D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_PA_HunterHrkConfusion_C, UberGraphFrame, 0x04D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_PA_HunterHrkConfusion_C, 0x04E8);
		}

		// class UGE_Debuff_Confusion_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Debuff_Confusion__GE_Debuff_Confusion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Debuff_Confusion_C, 0x05F8);
		}

		// class UWidget_CharacterInfoPanel_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_CharacterInfoPanel__Widget_CharacterInfoPanel_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterInfoPanel_C, OnHover, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterInfoPanel_C, BG, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterInfoPanel_C, Image_93, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterInfoPanel_C, Text_PerkDetail, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterInfoPanel_C, Widget_Button_MainPerk, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterInfoPanel_C, Widget_CharacterStatus, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterInfoPanel_C, Widget_Text_CharacterName, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterInfoPanel_C, Widget_Text_Status, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterInfoPanel_C, Widget_Text_UniquePerk, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_CharacterInfoPanel_C, 0x0288);
		}

		// class UWidget_LootboxItemList_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_LootboxItemList__Widget_LootboxItemList_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxItemList_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxItemList_C, Begin, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxItemList_C, BackgroundBlur_300, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxItemList_C, BG_Paper, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxItemList_C, CanvasPanel_Loadding, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxItemList_C, Image_76, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxItemList_C, LoadingScreen, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxItemList_C, Overlay_64, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxItemList_C, ScrollBox_1, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxItemList_C, VerticalBox_82, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxItemList_C, Widget_Button_LDBack, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxItemList_C, Widget_Rare_2, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxItemList_C, Widget_Rare_3, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxItemList_C, Widget_Rare_4, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxItemList_C, Widget_Rare_5, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxItemList_C, Widget_Rare_6, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxItemList_C, Widget_Text, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxItemList_C, Widget_Text_C_1, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxItemList_C, Widget_Text_C_2, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxItemList_C, Widget_Text_C_3, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxItemList_C, Widget_Text_C_4, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxItemList_C, Widget_Text_C_5, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxItemList_C, Widget_Text_C_6, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxItemList_C, Widget_Text_C_7, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxItemList_C, Widget_Text_C_8, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxItemList_C, Widget_Text_C_9, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxItemList_C, Widget_Text_C_10, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxItemList_C, Widget_Text_C_11, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxItemList_C, Widget_Text_C_12, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxItemList_C, Widget_Text_C_13, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxItemList_C, Widget_Text_C_14, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxItemList_C, Widget_Text_C_15, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxItemList_C, Widget_Type_AccSkin, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxItemList_C, Widget_Type_Profile, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxItemList_C, Widget_Type_Sticker, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxItemList_C, WidgetSwitcher_1, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxItemList_C, WidgetManager, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxItemList_C, InventoryData, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxItemList_C, Items, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxItemList_C, MaxNum, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxItemList_C, MaxColumn, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxItemList_C, SlotNum, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxItemList_C, UnknownData_K15C, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxItemList_C, NewVar_1, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxItemList_C, lootDropItem, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxItemList_C, bIsShowPreview, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxItemList_C, UnknownData_7DY5, 0x03B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxItemList_C, LootDropTarget, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxItemList_C, bIsRefreshed, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxItemList_C, UnknownData_EZXG, 0x03C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxItemList_C, OnBack, 0x03D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_LootboxItemList_C, 0x03E0);
		}

		// class UGE_PP_SurvivorSpawnCamera_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_PP_SurvivorSpawnCamera__GE_PP_SurvivorSpawnCamera_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_PP_SurvivorSpawnCamera_C, 0x05F8);
		}

		// class ALD_Skin_Prisoner_S_Macho_C : public ALD_Skin_Prisoner_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Prisoner_S_Macho__LD_Skin_Prisoner_S_Macho_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Prisoner_S_Macho_C, 0x0532);
		}

		// class ALD_Skin_Vanz_B_Heart_C : public ALD_Skin_Vanz_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Vanz_B_Heart__LD_Skin_Vanz_B_Heart_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Vanz_B_Heart_C, 0x0532);
		}

		// class ALD_Head_Base_C : public ALD_Base_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Head_Base__LD_Head_Base_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALD_Head_Base_C, UnknownData_MDM9, 0x0501);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALD_Head_Base_C, UberGraphFrame, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALD_Head_Base_C, ChildActor, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALD_Head_Base_C, SkeletalMeshAcc, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALD_Head_Base_C, StaticMeshAcc, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALD_Head_Base_C, SkeletalMeshCharacter, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALD_Head_Base_C, bUseMasterPose, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALD_Head_Base_C, UnknownData_VNJ2, 0x0539);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALD_Head_Base_C, SkinMesh, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALD_Head_Base_C, AnimationPreview, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALD_Head_Base_C, OnClickMesh, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALD_Head_Base_C, bIsOnFocus, 0x0551);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALD_Head_Base_C, UnknownData_0B0N, 0x0552);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALD_Head_Base_C, Socket, 0x0554);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALD_Head_Base_C, bGetPrimaryTransform, 0x055C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALD_Head_Base_C, UnknownData_1AY5, 0x055D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALD_Head_Base_C, PrimaryAssetName, 0x0560);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Head_Base_C, 0x0568);
		}

		// class UGA_Camera_C : public UHSHGameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Camera__GA_Camera_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_Camera_C, UberGraphFrame, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_Camera_C, Montage, 0x0460);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Camera_C, 0x0468);
		}

		// class UWidget_ItemPreviewPanel_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_ItemPreviewPanel__Widget_ItemPreviewPanel_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemPreviewPanel_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemPreviewPanel_C, Begin, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemPreviewPanel_C, Background, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemPreviewPanel_C, Button_1, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemPreviewPanel_C, Image_109, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemPreviewPanel_C, Item_BG, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemPreviewPanel_C, Item_Product, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemPreviewPanel_C, Widget_Button_Close, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemPreviewPanel_C, Widget_Text, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemPreviewPanel_C, Widget_Text_Head, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemPreviewPanel_C, Widget_Text_ItemName, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ItemPreviewPanel_C, OnClick, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_ItemPreviewPanel_C, 0x02B0);
		}

		// class ALD_Skin_Base_C : public ALD_Base_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Base__LD_Skin_Base_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALD_Skin_Base_C, UnknownData_WC4O, 0x0501);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALD_Skin_Base_C, UberGraphFrame, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALD_Skin_Base_C, SkeletalMesh, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALD_Skin_Base_C, SkinMesh, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALD_Skin_Base_C, AnimationPreview, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALD_Skin_Base_C, OnClickMesh, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALD_Skin_Base_C, bIsOnFocus, 0x0531);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Base_C, 0x0532);
		}

		// class ALD_Skin_Prisoner_A_GreenBird_C : public ALD_Skin_Prisoner_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Prisoner_A_GreenBird__LD_Skin_Prisoner_A_GreenBird_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Prisoner_A_GreenBird_C, 0x0532);
		}

		// class UWidget_Button_Switchrole_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_Button_Switchrole__Widget_Button_Switchrole_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_Switchrole_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_Switchrole_C, Click, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_Switchrole_C, UnHover, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_Switchrole_C, Hover, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_Switchrole_C, Button_This, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_Switchrole_C, HorizontalBox_155, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_Switchrole_C, IMG_End, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_Switchrole_C, TextBlock_2, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_Switchrole_C, Text, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_Switchrole_C, Text_Hunter, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_Switchrole_C, AutoSize, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_Switchrole_C, bUpperCase, 0x02B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_Switchrole_C, UnknownData_QJR7, 0x02BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_Switchrole_C, Size, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_Switchrole_C, UnknownData_0942, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_Switchrole_C, OnClicked, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_Switchrole_C, FontSize, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_Switchrole_C, UnHoverAlpha, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_Switchrole_C, HoverAlpha, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_Switchrole_C, UnknownData_Z5PZ, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_Switchrole_C, ImageEndBrush, 0x02E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_Button_Switchrole_C, 0x0370);
		}

		// class ALD_Skin_Vanz_C_Green_C : public ALD_Skin_Vanz_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Vanz_C_Green__LD_Skin_Vanz_C_Green_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Vanz_C_Green_C, 0x0532);
		}

		// class ALD_Skin_SeGuard_B_PoliceBlack_C : public ALD_Skin_SeGuard_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_SeGuard_B_PoliceBlack__LD_Skin_SeGuard_B_PoliceBlack_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_SeGuard_B_PoliceBlack_C, 0x0532);
		}

		// class UWidget_StoreDirect_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_StoreDirect__Widget_StoreDirect_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreDirect_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreDirect_C, Image_97, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreDirect_C, Widget_ButtonChoiceAccPart, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreDirect_C, Widget_ButtonChoiceType, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreDirect_C, Widget_StoreGrid_All, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreDirect_C, Widget_StoreGrid_AllPanel, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreDirect_C, Widget_StoreGrid_Hunter, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreDirect_C, Widget_StoreGrid_Hunter_Panel, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreDirect_C, Widget_StoreGrid_Survivor, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreDirect_C, Widget_StoreGrid_Survivor_Panel, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreDirect_C, WidgetSwitcher_Panel, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreDirect_C, WidgetManager, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreDirect_C, CacheIsError, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreDirect_C, UnknownData_KIN1, 0x02A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreDirect_C, CacheResponse, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreDirect_C, OnChioce, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreDirect_C, OnChoice2, 0x02D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_StoreDirect_C, 0x02E0);
		}

		// class UBTDecorator_HavePortalInScene_C : public UBTDecorator_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTDecorator_HavePortalInScene__BTDecorator_HavePortalInScene_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_HavePortalInScene_C, NewVar_1, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_HavePortalInScene_C, UnknownData_TTSC, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_HavePortalInScene_C, TargetPointKey, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_HavePortalInScene_C, 0x00D8);
		}

		// class UIngame_Sticker_Character_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Ingame_Sticker_Character__Ingame_Sticker_Character_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Sticker_Character_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Sticker_Character_C, Image_81, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Sticker_Character_C, IsBusy, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIngame_Sticker_Character_C, 0x0259);
		}

		// class UIQuestWidget_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__IQuestWidget__IQuestWidget_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIQuestWidget_C, 0x0030);
		}

		// class ALD_Skin_Tim_A_MultiColourB_C : public ALD_Skin_Tim_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Tim_A_MultiColourB__LD_Skin_Tim_A_MultiColourB_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Tim_A_MultiColourB_C, 0x0532);
		}

		// class UGA_Non_C : public UHSHGameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Non__GA_Non_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_Non_C, UberGraphFrame, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_Non_C, Montage, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_Non_C, PairAnimation, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_Non_C, Cost, 0x0478);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Non_C, 0x047C);
		}

		// class ALD_Skin_SeGuard_A_FarmerNavy_C : public ALD_Skin_SeGuard_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_SeGuard_A_FarmerNavy__LD_Skin_SeGuard_A_FarmerNavy_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_SeGuard_A_FarmerNavy_C, 0x0532);
		}

		// class AZBingCat_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__ZBingCat__ZBingCat_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AZBingCat_C, UberGraphFrame, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZBingCat_C, Arrow, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZBingCat_C, PreviewLight, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZBingCat_C, SkeletalMesh_Cat, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZBingCat_C, Root, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZBingCat_C, BlendIdlePostTimeline_Alpha_30D3F53941C2176539189287DCA01B78, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZBingCat_C, BlendIdlePostTimeline__Direction_30D3F53941C2176539189287DCA01B78, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZBingCat_C, UnknownData_WRCL, 0x036D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZBingCat_C, BlendIdlePostTimeline, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZBingCat_C, CachePickable, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZBingCat_C, IsCatReady, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZBingCat_C, UnknownData_DG31, 0x03A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZBingCat_C, refCatItem, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZBingCat_C, BlendIdleAlpha, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZBingCat_C, UnknownData_K48W, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZBingCat_C, OnBlendForwardFinishe, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZBingCat_C, OnBlendBackwardFinishe, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZBingCat_C, TakeItem, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZBingCat_C, GiveItem, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZBingCat_C, CatRot, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZBingCat_C, Speed, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZBingCat_C, IsAiming, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZBingCat_C, IsFalling, 0x03F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZBingCat_C, UnknownData_6NCO, 0x03FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZBingCat_C, CatDisappear, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZBingCat_C, CatAppear, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZBingCat_C, IsInProgress, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZBingCat_C, UnknownData_8XWM, 0x0411);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZBingCat_C, ZbingzRef, 0x0418);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AZBingCat_C, 0x0420);
		}

		// class UIngame_QuestPanel_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Ingame_QuestPanel__Ingame_QuestPanel_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_QuestPanel_C, CanvasPanel_NewQuestDetail, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_QuestPanel_C, CanvasPanel_OldQuestDetail, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_QuestPanel_C, TextBlock_Quest, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_QuestPanel_C, VerticalBox_NewQuestDetail, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_QuestPanel_C, WidgetSwitcher_76, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_QuestPanel_C, QuestText, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_QuestPanel_C, QuestWidget, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIngame_QuestPanel_C, 0x0280);
		}

		// class UBTTask_SurvivorTraped_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTTask_SurvivorTraped__BTTask_SurvivorTraped_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SurvivorTraped_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SurvivorTraped_C, AcceptanceRadius, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SurvivorTraped_C, Distance, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SurvivorTraped_C, bIsMelee, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SurvivorTraped_C, UnknownData_3IXH, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SurvivorTraped_C, CacheTrapTarget, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_SurvivorTraped_C, 0x00D0);
		}

		// class UWidget_OptionDisplayMobile_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_OptionDisplayMobile__Widget_OptionDisplayMobile_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionDisplayMobile_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionDisplayMobile_C, Widget_Button_Active, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionDisplayMobile_C, Widget_Button_Default, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionDisplayMobile_C, Widget_ButtonChoice_AimAssist, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionDisplayMobile_C, Widget_ButtonChoice_DisplayQuality, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionDisplayMobile_C, Widget_ButtonChoice_HighFPS, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionDisplayMobile_C, Widget_ButtonChoiceDropdown, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionDisplayMobile_C, Widget_ButtonSlider_CameraSensitivity, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionDisplayMobile_C, Widget_ButtonSlider_ParticleQuality, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionDisplayMobile_C, OptionManager, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_OptionDisplayMobile_C, 0x0298);
		}

		// class ALD_Skin_Prisoner_B_Highschool_C : public ALD_Skin_Prisoner_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Prisoner_B_Highschool__LD_Skin_Prisoner_B_Highschool_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Prisoner_B_Highschool_C, 0x0532);
		}

		// class ABloodOrbActor_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BloodOrbActor__BloodOrbActor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABloodOrbActor_C, StaticMesh, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABloodOrbActor_C, Scene, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABloodOrbActor_C, ParticleSystem, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABloodOrbActor_C, 0x0350);
		}

		// class ABP_MainMenuGameMode_C : public AGameMode
		TEST_METHOD(BlueprintGeneratedClass__BP_MainMenuGameMode__BP_MainMenuGameMode_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MainMenuGameMode_C, UberGraphFrame, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MainMenuGameMode_C, HSURMenuCameraManagerComponent, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MainMenuGameMode_C, LootBoxPreviewManagerComponent, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MainMenuGameMode_C, LootBoxManagerComponent, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MainMenuGameMode_C, DefaultSceneRoot, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MainMenuGameMode_C, bIsDebuging, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MainMenuGameMode_C, bBypassVersionCheck, 0x0451);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_MainMenuGameMode_C, 0x0452);
		}

		// class ALD_Skin_SeGuard_B_PoliceWhite_C : public ALD_Skin_SeGuard_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_SeGuard_B_PoliceWhite__LD_Skin_SeGuard_B_PoliceWhite_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_SeGuard_B_PoliceWhite_C, 0x0532);
		}

		// class ALD_Skin_Tim_A_LeatherRed_C : public ALD_Skin_Tim_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Tim_A_LeatherRed__LD_Skin_Tim_A_LeatherRed_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Tim_A_LeatherRed_C, 0x0532);
		}

		// class UHSHTargetTypeSphereTrace_C : public UHSHTargetType
		TEST_METHOD(BlueprintGeneratedClass__HSHTargetTypeSphereTrace__HSHTargetTypeSphereTrace_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHTargetTypeSphereTrace_C, OffsetFromActor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHTargetTypeSphereTrace_C, SphereRadius, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHTargetTypeSphereTrace_C, TraceLength, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHTargetTypeSphereTrace_C, UnknownData_4NCL, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHTargetTypeSphereTrace_C, ObjectTypes, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHTargetTypeSphereTrace_C, CheckZOffset, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHTargetTypeSphereTrace_C, UnknownData_CULA, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHTargetTypeSphereTrace_C, IgnoreActorZoffset, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHSHTargetTypeSphereTrace_C, 0x0060);
		}

		// class UISaveGame_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__ISaveGame__ISaveGame_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UISaveGame_C, 0x0030);
		}

		// class AHrkHunter_C : public AHunterBase_C
		TEST_METHOD(BlueprintGeneratedClass__HrkHunter__HrkHunter_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHrkHunter_C, UnknownData_L3M1, 0x0E1C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHrkHunter_C, UberGraphFrame, 0x0E20);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHrkHunter_C, WaterVomit, 0x0E30);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHrkHunter_C, ActivePerkLoop, 0x0E38);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHrkHunter_C, A_BelleIdle01_EN_Cue, 0x0E40);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHrkHunter_C, P_WaterVomit, 0x0E48);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHrkHunter_C, P_WaterBall, 0x0E50);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHrkHunter_C, P_PA, 0x0E58);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHrkHunter_C, Box, 0x0E60);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHrkHunter_C, Timeline_1_Alpha_83A642FA409C7AA0170C1FB439A55FD7, 0x0E68);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHrkHunter_C, Timeline_1__Direction_83A642FA409C7AA0170C1FB439A55FD7, 0x0E6C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHrkHunter_C, UnknownData_7VZN, 0x0E6D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHrkHunter_C, Timeline_2, 0x0E70);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHrkHunter_C, bOnStateChanged, 0x0E78);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHrkHunter_C, UnknownData_X6AJ, 0x0E79);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHrkHunter_C, ActivePerkAtkHitMontage, 0x0E80);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHrkHunter_C, ActivePerkHitReactAnimMontage, 0x0E88);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHrkHunter_C, bIsTransform, 0x0E90);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHrkHunter_C, UnknownData_RZS1, 0x0E91);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHrkHunter_C, BondName, 0x0E98);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHrkHunter_C, 0x0EA8);
		}

		// class ALD_Skin_Nymph_S_Kappa_C : public ALD_Skin_Nymph_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Nymph_S_Kappa__LD_Skin_Nymph_S_Kappa_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Nymph_S_Kappa_C, 0x0532);
		}

		// class UGE_StatusSurvivalMechanic_C : public UGE_StatusSurvivalBase_C
		TEST_METHOD(BlueprintGeneratedClass__GE_StatusSurvivalMechanic__GE_StatusSurvivalMechanic_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_StatusSurvivalMechanic_C, 0x05F8);
		}

		// class ALD_Skin_Belle_C_Red_C : public ALD_Skin_Belle_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Belle_C_Red__LD_Skin_Belle_C_Red_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Belle_C_Red_C, 0x0532);
		}

		// class ALD_Skin_Vanz_S_Yakusa_C : public ALD_Skin_Vanz_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Vanz_S_Yakusa__LD_Skin_Vanz_S_Yakusa_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Vanz_S_Yakusa_C, 0x0532);
		}

		// class UPartyPlayer_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__PartyPlayer__PartyPlayer_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyPlayer_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyPlayer_C, Button_1, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyPlayer_C, FrameIMG, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyPlayer_C, PlayerIMG, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyPlayer_C, HasPlayer, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyPlayer_C, UnknownData_KB4D, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyPlayer_C, PlayerInfo, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPartyPlayer_C, 0x0380);
		}

		// class ALD_Skin_Nymph_RedSpotted_C : public ALD_Skin_Nymph_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Nymph_RedSpotted__LD_Skin_Nymph_RedSpotted_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Nymph_RedSpotted_C, 0x0532);
		}

		// class ALD_Skin_Tim_A_LeatherBlack_C : public ALD_Skin_Tim_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Tim_A_LeatherBlack__LD_Skin_Tim_A_LeatherBlack_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Tim_A_LeatherBlack_C, 0x0532);
		}

		// class ALD_Skin_Belle_S_Hanbok_C : public ALD_Skin_Belle_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Belle_S_Hanbok__LD_Skin_Belle_S_Hanbok_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Belle_S_Hanbok_C, 0x0532);
		}

		// class ALD_Skin_Jane_B_CamouBlue_C : public ALD_Skin_Jane_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Jane_B_CamouBlue__LD_Skin_Jane_B_CamouBlue_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Jane_B_CamouBlue_C, 0x0532);
		}

		// class UChen_AnimBlueprint_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Chen_AnimBlueprint__Chen_AnimBlueprint_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, UnknownData_UYHY, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_SaveCachedPose_5738E3E3482EC856F408D986069D7376, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_UseCachedPose_56FF48AD41057B5BC486C988B1394FCF, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_LayeredBoneBlend_0D5E17B2447C49E738044C8111170D43, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_UseCachedPose_0000A6E64D8B1BD128A1B1921B6D4C72, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_SaveCachedPose_28F9895840CABF61947DCA8B0C8AFA17, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_Slot_5269E7F642B4CE25B0A7DA8507C10BC6, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_TransitionResult_7EEC496945A4F8E90F153E89C19F5928, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_TransitionResult_0DEA3AEB44EBAE73736F7C8615182CFF, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_TransitionResult_1635A973435613C96788949E064DA2FB, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_TransitionResult_1864121E44888CD7F9D517A3418997F3, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_TransitionResult_7B9B889945662391EE833CBC8AF30A81, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_TransitionResult_81ACD704400296202608FB91ECFDC68F, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_TransitionResult_1931460840C9CDEF3848988B447974FC, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_TransitionResult_2CE234D943C5B2C46AA69BAD60B11C7F, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_TransitionResult_096A078B44F087685F44C991F0A11C3B, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_TransitionResult_28CD33EC469F9EDBF2F19AA95E173BDA, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_TransitionResult_FD91792042DD1B1C119432A4308C38A3, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_TransitionResult_4C3E4B284319F41E1230AC981600770A, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_TransitionResult_170EED65488EFC3BC0CE6490872C68AB, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_TransitionResult_E5E9EF1742C051042AE2E3823625F3E1, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_TransitionResult_CF1EDFA44FF2EDE06C20E98BCA709A92, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_TransitionResult_E034612544E7D447BCF780945379B27B, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_TransitionResult_616A5AC44BC7232339603F929EB0A05E, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_TransitionResult_A1AFCF9946E4EADB34C1ECAA31A1AC69, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_TransitionResult_3429B2AA43DE33F347C410BBE5E7DB0D, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_TransitionResult_70D9B3FD41AA39EB99F8AC98BE415BE9, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_TransitionResult_AFCFBE694E29ED2B732F579AD1F55AA4, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_TransitionResult_65F524624D693FB04703FE85BA0BCE0B, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_TransitionResult_A6EF0A1C4DDBD00CB691D3B5577BE0F0, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_TransitionResult_22EF402140883419981272AB27EECBB4, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_TransitionResult_F48DACB24FF2AF345109A68248E6CAC4, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_TransitionResult_6BFA847C4A2E84CBB90EECA4CC754A07, 0x0928);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_TransitionResult_DC1AD4734B3C72F6B93C4D81DCB1BCB9, 0x0950);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_TransitionResult_E095B3A24C85A05FAA30EEBA05791CF0, 0x0978);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_TransitionResult_A43A73144C9067DFE3D34D830C1E26EA, 0x09A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_TransitionResult_DE44F57E450FF2F4B24B3CB20BF27566, 0x09C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_TransitionResult_4FE091554DECD9A03768B8ACCC50E7EF, 0x09F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_TransitionResult_5806D7C245A5BCA8DBE449B8A88C4FDA, 0x0A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_TransitionResult_CF322CD04FD859636CA0378FC2B949CB, 0x0A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_TransitionResult_E0B751A349212B49D0F235A7D1B6AB92, 0x0A68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_TransitionResult_9E92027349EC1365B896588F9B0960A5, 0x0A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_TransitionResult_312C2275475FF87017D708A435B72CE4, 0x0AB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_TransitionResult_E543124B40C7D9A9B822D08A7DD3CC06, 0x0AE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_TransitionResult_0CCF0D3D44BB2E76F8387C98010FF9BB, 0x0B08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_TransitionResult_1893802C4F82B14134ECDB8835015A67, 0x0B30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_TransitionResult_9C68F585430B6F5675ED48AC00C2ABE8, 0x0B58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_TransitionResult_D75442EF4C41C09C6EE85183EA1D4A47, 0x0B80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_TransitionResult_EEF5AFFA43A7E8AC36584AA8D22D3B62, 0x0BA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_SequencePlayer_F4A443144B7EA2B43A9D40979CF3F441, 0x0BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_LayeredBoneBlend_25DF227F47CCC1798BA6C2AB077E9F48, 0x0C48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_BlendSpacePlayer_FD7B50684C9907494EAFF489D3C3DF8E, 0x0D00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_StateResult_556BADFC4049646A5580CCABA434A5C7, 0x0DE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_SequencePlayer_27107F7F430F9D553BB5DB87F0AA726E, 0x0E00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_StateResult_3CF312AE4F88AA7E4C540CAF5887C2A1, 0x0E78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_SequencePlayer_FCAAF4AB4EE3B9FF128278BD582B3FB4, 0x0E98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_StateResult_52CD9E2A415CA373783507AA53EEAF65, 0x0F10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_SequencePlayer_B45F07A74551FD4DF67213923F57ACB6, 0x0F30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_LayeredBoneBlend_561383C5445B00F8F03A8881EB22CEB8, 0x0FA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_BlendSpacePlayer_B07C31184CD1822137EB149DB5539773, 0x1060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_StateResult_BF2D8F724CB720F345BB7A9B308DD0D8, 0x1140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_SequencePlayer_D9001165490F6338E0673B95D50980A0, 0x1160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_StateResult_E355150C434D5EFF1FF0C1AA6C3E1254, 0x11D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_BlendSpacePlayer_F334FF2440D2EBA3CEB88695B9D941B8, 0x11F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_StateResult_3FC14FDE48413EF44369489DC4D3C5E5, 0x12D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_TwoWayBlend_CE381E8C495A9161796F89A79BE42E23, 0x12F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_BlendSpacePlayer_BEAF712E42F3E39CF849DBA83D9C31E1, 0x13C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_SequencePlayer_3DCAAAFB4820E3AC2B5F91A1E0D690BF, 0x14A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_StateResult_7B9813454CE8B2C2D792AC991CEBE2F1, 0x1518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_TransitionResult_F046C17F4F09B7A37530CBBC0D70FB7B, 0x1538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_TransitionResult_74D30F044CEDD98C38FDE6BCB15D9795, 0x1560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_SequencePlayer_7A4F0FFA4F04B765AC9AA4993D44D22C, 0x1588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_StateResult_23A149B34E41FFA6D549F3A4E6DA1DC9, 0x1600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_SequencePlayer_03C836A84A662943FE4DE98F9763C3DA, 0x1620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_StateResult_7581AA5B40A4E0ED645995BB724BAF07, 0x1698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_SequencePlayer_82AB9C784F2B37AD1FAB169EBFEB9799, 0x16B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_StateResult_C66224AE4BB9EF71C6E44987D3833365, 0x1730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_StateMachine_40A2B9AF46D49641327745A4FBA663C1, 0x1750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_StateResult_11A871E64781F3512A6E2293F51A4B8A, 0x1800);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_BlendSpacePlayer_1D846F04419CABABB814C88256E480FB, 0x1820);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_StateResult_F8B0347744997F1D3CB8C8804409690C, 0x1900);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_StateMachine_4DCD37734BF1654C582C23922993D7DC, 0x1920);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_Root_D0988FC141B7E0B9AB33B8800E198F30, 0x19D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_UseCachedPose_66B6066D4638F9EEDA9E6AB3C6836BB7, 0x19F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_Slot_261C1C22453C1BC9DACC0C998F21AB15, 0x1A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_LayeredBoneBlend_651F8F4B4FEE8D2D82C73B97DAC36CB3, 0x1A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_SaveCachedPose_CC13FFB24D8DF46B1CD57398C88F1C2B, 0x1B18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_UseCachedPose_374199EA40D2F7147DB2E6B316088077, 0x1BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_UseCachedPose_0E6F34294EA4784175A0DFB5C701100E, 0x1BF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, AnimGraphNode_Slot_654765814EB504F54418DF8D33E225F2, 0x1C20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, MoveForward, 0x1C68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, MoveRight, 0x1C6C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, IsInAir, 0x1C70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, UnknownData_HF3Q, 0x1C71);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, Pitch, 0x1C74);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, Roll, 0x1C78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, Yaw, 0x1C7C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, RotationLastTick, 0x1C80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, YawDelta, 0x1C8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, IsAccelerating, 0x1C90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, UnknownData_L0G7, 0x1C91);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, Character, 0x1C98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, IsAttacking, 0x1CA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, UnknownData_U34K, 0x1CA1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, CurrentAttack, 0x1CA4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, FullBody, 0x1CA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, IsCrouch, 0x1CA9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, IsKnockdown, 0x1CAA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, IsInjured, 0x1CAB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, IsWorship, 0x1CAC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, IsSearch, 0x1CAD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, UnknownData_67ZY, 0x1CAE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChen_AnimBlueprint_C, Survivor_Ref, 0x1CB0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChen_AnimBlueprint_C, 0x1CB8);
		}

		// class UWidget_TextWithInputImage_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_TextWithInputImage__Widget_TextWithInputImage_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TextWithInputImage_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TextWithInputImage_C, HorizontalBox_TextBox, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TextWithInputImage_C, Image_input, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TextWithInputImage_C, LeftText, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TextWithInputImage_C, RightText, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TextWithInputImage_C, bIsAction, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TextWithInputImage_C, UnknownData_IS7P, 0x0271);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TextWithInputImage_C, Text, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TextWithInputImage_C, DT_InputImage, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TextWithInputImage_C, bIsUpper, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TextWithInputImage_C, UnknownData_CZPC, 0x0299);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TextWithInputImage_C, ImagePadding, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TextWithInputImage_C, DebugActionInputKey, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TextWithInputImage_C, FontSize, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TextWithInputImage_C, ImageSize, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_TextWithInputImage_C, 0x02C0);
		}

		// class UGE_ApplicationRequirement_LetsFightGhost_C : public UGameplayEffectCustomApplicationRequirement
		TEST_METHOD(BlueprintGeneratedClass__GE_ApplicationRequirement_LetsFightGhost__GE_ApplicationRequirement_LetsFightGhost_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_ApplicationRequirement_LetsFightGhost_C, 0x0030);
		}

		// class UGE_Debuff_BlockSpecter_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Debuff_BlockSpecter__GE_Debuff_BlockSpecter_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Debuff_BlockSpecter_C, 0x05F8);
		}

		// class ALD_Skin_Nymph_B_FrogOrange_C : public ALD_Skin_Nymph_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Nymph_B_FrogOrange__LD_Skin_Nymph_B_FrogOrange_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Nymph_B_FrogOrange_C, 0x0532);
		}

		// class ALD_Skin_Student_A_MoriBeige_C : public ALD_Skin_Student_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Student_A_MoriBeige__LD_Skin_Student_A_MoriBeige_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Student_A_MoriBeige_C, 0x0532);
		}

		// class ALD_Skin_Belle_A_OverallOrange_C : public ALD_Skin_Belle_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Belle_A_OverallOrange__LD_Skin_Belle_A_OverallOrange_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Belle_A_OverallOrange_C, 0x0532);
		}

		// class ALD_Skin_Prisoner_A_BlackBird_C : public ALD_Skin_Prisoner_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Prisoner_A_BlackBird__LD_Skin_Prisoner_A_BlackBird_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Prisoner_A_BlackBird_C, 0x0532);
		}

		// class ALD_Skin_Belle_S_SwimVintage_C : public ALD_Skin_Belle_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Belle_S_SwimVintage__LD_Skin_Belle_S_SwimVintage_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Belle_S_SwimVintage_C, 0x0532);
		}

		// class ALD_Skin_Nymph_C_Ocean_C : public ALD_Skin_Nymph_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Nymph_C_Ocean__LD_Skin_Nymph_C_Ocean_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Nymph_C_Ocean_C, 0x0532);
		}

		// class ALD_Skin_Nymph_D_Default_C : public ALD_Skin_Base_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Nymph_D_Default__LD_Skin_Nymph_D_Default_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Nymph_D_Default_C, 0x0532);
		}

		// class ALD_Skin_Student_B_Mari_C : public ALD_Skin_Student_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Student_B_Mari__LD_Skin_Student_B_Mari_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Student_B_Mari_C, 0x0532);
		}

		// class APickable_TrapTutorial_C : public APickableItemBase_C
		TEST_METHOD(BlueprintGeneratedClass__Pickable_TrapTutorial__Pickable_TrapTutorial_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APickable_TrapTutorial_C, UberGraphFrame, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::APickable_TrapTutorial_C, Sphere, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::APickable_TrapTutorial_C, Target, 0x07A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APickable_TrapTutorial_C, 0x07A8);
		}

		// class ALD_Skin_Prisoner_C_White_C : public ALD_Skin_Prisoner_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Prisoner_C_White__LD_Skin_Prisoner_C_White_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Prisoner_C_White_C, 0x0532);
		}

		// class ALD_Skin_Belle_C_Violet_C : public ALD_Skin_Belle_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Belle_C_Violet__LD_Skin_Belle_C_Violet_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Belle_C_Violet_C, 0x0532);
		}

		// class UGA_WeaponSurvivorHolyKnifeThow_C : public UGA_ProjectileSurvivorBase_C
		TEST_METHOD(BlueprintGeneratedClass__GA_WeaponSurvivorHolyKnifeThow__GA_WeaponSurvivorHolyKnifeThow_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_WeaponSurvivorHolyKnifeThow_C, 0x04E8);
		}

		// class ALD_Skin_Student_B_Peach_C : public ALD_Skin_Student_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Student_B_Peach__LD_Skin_Student_B_Peach_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Student_B_Peach_C, 0x0532);
		}

		// class ALD_Skin_Nymph_B_FrogRainbow_C : public ALD_Skin_Nymph_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Nymph_B_FrogRainbow__LD_Skin_Nymph_B_FrogRainbow_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Nymph_B_FrogRainbow_C, 0x0532);
		}

		// class UGE_PP_SurvivorLetsFightGhost_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_PP_SurvivorLetsFightGhost__GE_PP_SurvivorLetsFightGhost_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_PP_SurvivorLetsFightGhost_C, 0x05F8);
		}

		// class ALD_Skin_Nymph_C_Grey_C : public ALD_Skin_Nymph_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Nymph_C_Grey__LD_Skin_Nymph_C_Grey_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Nymph_C_Grey_C, 0x0532);
		}

		// class ALD_Skin_SeGuard_D_Default_C : public ALD_Skin_Base_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_SeGuard_D_Default__LD_Skin_SeGuard_D_Default_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_SeGuard_D_Default_C, 0x0532);
		}

		// class ALD_Skin_SeGuard_S_Camouflage_C : public ALD_Skin_SeGuard_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_SeGuard_S_Camouflage__LD_Skin_SeGuard_S_Camouflage_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_SeGuard_S_Camouflage_C, 0x0532);
		}

		// class UGE_WeaponPrayHeavy_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_WeaponPrayHeavy__GE_WeaponPrayHeavy_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_WeaponPrayHeavy_C, 0x05F8);
		}

		// class ALD_Skin_Student_A_OverallBlue_C : public ALD_Skin_Student_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Student_A_OverallBlue__LD_Skin_Student_A_OverallBlue_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Student_A_OverallBlue_C, 0x0532);
		}

		// class UGE_PP_HunterSlipperyHand_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_PP_HunterSlipperyHand__GE_PP_HunterSlipperyHand_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_PP_HunterSlipperyHand_C, 0x05F8);
		}

		// class ALD_Skin_Jane_C_Brown_C : public ALD_Skin_Jane_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Jane_C_Brown__LD_Skin_Jane_C_Brown_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Jane_C_Brown_C, 0x0532);
		}

		// class ALD_Skin_Student_A_MoriGreen_C : public ALD_Skin_Student_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Student_A_MoriGreen__LD_Skin_Student_A_MoriGreen_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Student_A_MoriGreen_C, 0x0532);
		}

		// class UGE_CooldownPhaseShift_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_CooldownPhaseShift__GE_CooldownPhaseShift_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_CooldownPhaseShift_C, 0x05F8);
		}

		// class ASoulActor_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__SoulActor__SoulActor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASoulActor_C, ParticleSystem, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASoulActor_C, Scene, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASoulActor_C, 0x0348);
		}

		// class UGE_PP_HunterHRKSense_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_PP_HunterHRKSense__GE_PP_HunterHRKSense_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_PP_HunterHRKSense_C, 0x05F8);
		}

		// class ALD_Skin_Student_B_LuiG_C : public ALD_Skin_Student_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Student_B_LuiG__LD_Skin_Student_B_LuiG_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Student_B_LuiG_C, 0x0532);
		}

		// class ALD_Skin_Jane_C_Olive_C : public ALD_Skin_Jane_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Jane_C_Olive__LD_Skin_Jane_C_Olive_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Jane_C_Olive_C, 0x0532);
		}

		// class UJane_AnimBlueprint_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Jane_AnimBlueprint__Jane_AnimBlueprint_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, UnknownData_3QFL, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_UseCachedPose_B2DAFDC2483F5C44492F9A88AD068B4F, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_SaveCachedPose_0AD59F8240AFA0B70A0FBCBE699DD273, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_LayeredBoneBlend_2A69C6A44493253F5241DFA650A68939, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_UseCachedPose_950D5C174D704EEEE6DC3296E8308E4D, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_SaveCachedPose_F1A9488346609989279DBC8A0BB6D263, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_SaveCachedPose_B7CAA7D7459681B72C5D858473B463B8, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_Slot_83F83D5A4ABF84058C4CBFA77E46490C, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_TransitionResult_E8B9A3BA405E2CD9DE32FABAD1E8F8C8, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_TransitionResult_EE5695B14DA172FDCF79108F0471CE76, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_TransitionResult_C03CCAA0488E36FB94E0C89DEF96AEB0, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_TransitionResult_943B35FF40C9A3649443559A5489B546, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_TransitionResult_1BA648ED42E2A8C63354DEA104436E0F, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_TransitionResult_E587ACF94659C05AB91BDFB5471323DD, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_TransitionResult_88ECF032473E4F9CB06674BE482960B4, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_TransitionResult_A8EF73B24F0A08F599D38FBB39206F87, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_TransitionResult_45011576415BF94B28EC85932BF323FB, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_TransitionResult_46209F3746B5AAD5CA5C1DA1B76008C7, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_TransitionResult_39F642D746A3A153E6DB68A49FCF9B59, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_TransitionResult_BF3546E74C2392AB6E2F8A936706B615, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_TransitionResult_86A693BD4D4ABF9B996AF99C14FA1DE6, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_TransitionResult_2AED3E0448DF0DCFB87D28803810D24F, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_TransitionResult_8D7EA9FA473AD37A1959D19E11780C74, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_TransitionResult_424C94864F5E4C76A09A91A741520064, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_TransitionResult_53E2D15940724AC35504E6AEB48B7EA9, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_TransitionResult_A2B2FB034C4C9A923286329DEDEFD701, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_TransitionResult_E64FAD264762FB77B32332B5335C393E, 0x08C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_TransitionResult_3271F7124D4A46A484AD05A966692B47, 0x08F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_TransitionResult_6B6222DE47E4329F3F9669830D908658, 0x0918);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_TransitionResult_BEECE0D04BFD8FACB7999E9D5253ED45, 0x0940);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_TransitionResult_663242D247742E431831F49B78DDC4CD, 0x0968);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_TransitionResult_3BF4588A4B98BED767E529914DF58D33, 0x0990);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_TransitionResult_90EB318A427B4FF54244A39EB5707F83, 0x09B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_TransitionResult_6E3CA93041ACE9F5515B459238E2FDF6, 0x09E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_TransitionResult_5C01944D48D2D42E49A81CB7ECAB12CE, 0x0A08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_TransitionResult_52F7B6254C0AF1950387E6AB5271CE18, 0x0A30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_TransitionResult_2137824144211B228FE36993C70B5839, 0x0A58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_TransitionResult_7DDC62E04DB22A471B7536B13551B483, 0x0A80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_TransitionResult_822D86F34913385DAF4EC6B205CCCAF3, 0x0AA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_TransitionResult_DA029CE64A91B9D0D3D30B947A45D6BB, 0x0AD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_TransitionResult_BB01B2044736E7A5F67481A29FAF5097, 0x0AF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_TransitionResult_B768672F405D118E45EC35BCD9859A53, 0x0B20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_TransitionResult_0DBE625940A2561BFEB84E9582CB0B25, 0x0B48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_TransitionResult_89AD899748BF3245CCFAA0AB73BE638D, 0x0B70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_TransitionResult_63A0B1AA4EC72018AA7B47A336754829, 0x0B98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_TransitionResult_501388C14A118CD358DC8CA095764BF5, 0x0BC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_TransitionResult_A0DDFA8348E6A01A47AE218AF40BEB98, 0x0BE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_TransitionResult_FB56F3EB4C085B118E8EDAB60CC550B2, 0x0C10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_TransitionResult_2B4746A041F1545E1C3219A88E282649, 0x0C38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_TransitionResult_F07080024C8652AAC6666A93E8AEAF41, 0x0C60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_SequencePlayer_EE964C9646CEFB6D6AF6FCBDFB25D0CA, 0x0C88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_LayeredBoneBlend_5D16613A42F4C334683CEA8D2585ACC2, 0x0D00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_BlendSpacePlayer_D501EDF040F05183A1567591C2C51D92, 0x0DB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_StateResult_98C89E9545D870E12D692CA4693AFC64, 0x0E98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_SequencePlayer_C055095F4BEF3CF6422BD1915AEA4881, 0x0EB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_StateResult_153A0B264C7DFAED3C2C78A5C2F452F3, 0x0F30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_SequencePlayer_B07AF99546E5C471CFB07189252B92A8, 0x0F50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_StateResult_B7340EB341234EF1943C1FAB65B4A1B1, 0x0FC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_SequencePlayer_ECFE8FE444526E22C93F1B84115C44B2, 0x0FE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_LayeredBoneBlend_562F5302458CEF4532B3FBACC3908875, 0x1060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_BlendSpacePlayer_4A763F1F450395C73EA496912154CF86, 0x1118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_StateResult_BF1C273242EEFFFE9EEC55AC44376A83, 0x11F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_SequencePlayer_3C10D82A48BD9CA3BC6A86B35973D33B, 0x1218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_StateResult_5AD4C5144E4C7E4B6E845CBD5CC042D1, 0x1290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_BlendSpacePlayer_B7602A8F4FEAE02BC0C5A393BF646741, 0x12B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_StateResult_46796CF9473236F647459CAB72ED894E, 0x1390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_TwoWayBlend_46CD574349299A6CBE5E59B260AC9D5D, 0x13B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_BlendSpacePlayer_FE0AA7C444C1F3A6A82C09841DDB7B30, 0x1478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_SequencePlayer_0C3FE7EB4A7EDD43347032BD15D0C2A8, 0x1558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_StateResult_4504267B463DD0C4EE9566AA12EEDE55, 0x15D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_TransitionResult_DAA903F846C5AEA42985BFB0511D231B, 0x15F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_TransitionResult_9B22FEB042D8E6F594DD47855BE395E3, 0x1618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_SequencePlayer_D99F073B4D2358BC316A0CB2894F0D58, 0x1640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_StateResult_447905D14B5A711349E51FB137608175, 0x16B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_SequencePlayer_E62999B14C39632531D30F8878F269D7, 0x16D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_StateResult_03B794584DD71EE513DDEAB6C8B2C702, 0x1750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_SequencePlayer_9093191642354779F46166A5B37F9036, 0x1770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_StateResult_B52162624CBF05F991526491DEF63BC1, 0x17E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_StateMachine_6D3E486045B793FEDD1689898262DD87, 0x1808);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_StateResult_C4C9AD5943F3B8C9586DFEBA7C8EBD82, 0x18B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_BlendSpacePlayer_37F7CD84446CD9222FAD91959738FDB7, 0x18D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_StateResult_9B2527B74788234CB3696EAE40E2A127, 0x19B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_StateMachine_00CC1DBD441F4A74E4CE5A9359B2CA86, 0x19D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_Root_BBF02A564EA7AB011677F99C47FC64A2, 0x1A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_UseCachedPose_F050B57B46E72F3FE295E286AC5498F6, 0x1AA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_Slot_DA00AB9349DE87483A0987A2169D0D33, 0x1AD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_LayeredBoneBlend_831BAAFD4CA8ED225B27FC968989296E, 0x1B18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_SaveCachedPose_563F5B0644846BD2932FB9879B870A48, 0x1BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_UseCachedPose_FCB93E8B4F38776BF40B9D861718573F, 0x1C88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_UseCachedPose_75456AE54E82A71A3FE408BF0A760E94, 0x1CB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, AnimGraphNode_Slot_FED653E148EF43BEB9011CAE4119F64D, 0x1CD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, MoveForward, 0x1D20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, MoveRight, 0x1D24);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, IsInAir, 0x1D28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, UnknownData_F5UY, 0x1D29);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, Pitch, 0x1D2C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, Roll, 0x1D30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, Yaw, 0x1D34);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, RotationLastTick, 0x1D38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, YawDelta, 0x1D44);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, IsAccelerating, 0x1D48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, UnknownData_Y27E, 0x1D49);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, Character, 0x1D50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, IsAttacking, 0x1D58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, UnknownData_W2NF, 0x1D59);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, CurrentAttack, 0x1D5C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, FullBody, 0x1D60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, IsCrouch, 0x1D61);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, IsKnockdown, 0x1D62);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, IsInjured, 0x1D63);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, IsWorship, 0x1D64);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, IsSearch, 0x1D65);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, UnknownData_7ZQ5, 0x1D66);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJane_AnimBlueprint_C, Survivor_Ref, 0x1D68);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UJane_AnimBlueprint_C, 0x1D70);
		}

		// class ALD_Skin_Student_C_Grey_C : public ALD_Skin_Student_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Student_C_Grey__LD_Skin_Student_C_Grey_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Student_C_Grey_C, 0x0532);
		}

		// class UGE_Buff_PhaseShift_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Buff_PhaseShift__GE_Buff_PhaseShift_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Buff_PhaseShift_C, 0x05F8);
		}

		// class UNS_Medkit_C : public UAnimNotifyState
		TEST_METHOD(BlueprintGeneratedClass__NS_Medkit__NS_Medkit_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNS_Medkit_C, Tag, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNS_Medkit_C, 0x0040);
		}

		// class ALD_Skin_Student_C_Navy_C : public ALD_Skin_Student_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Student_C_Navy__LD_Skin_Student_C_Navy_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Student_C_Navy_C, 0x0532);
		}

		// class UHSHTargetTypeConeTrace_C : public UHSHTargetType
		TEST_METHOD(BlueprintGeneratedClass__HSHTargetTypeConeTrace__HSHTargetTypeConeTrace_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHTargetTypeConeTrace_C, OffsetFromActor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHTargetTypeConeTrace_C, SphereRadius, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHTargetTypeConeTrace_C, TraceLength, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHTargetTypeConeTrace_C, DegreesTargetCone, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHTargetTypeConeTrace_C, DegreesLookAtOrigin, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHTargetTypeConeTrace_C, UnknownData_S6P5, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHTargetTypeConeTrace_C, ObjectTypes, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHSHTargetTypeConeTrace_C, 0x0060);
		}

		// class AParticleSpawn_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__ParticleSpawn__ParticleSpawn_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AParticleSpawn_C, UberGraphFrame, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AParticleSpawn_C, DefaultSceneRoot, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AParticleSpawn_C, Emit, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AParticleSpawn_C, AttachToComponent, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AParticleSpawn_C, AttachPointName, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AParticleSpawn_C, 0x0368);
		}

		// class ALD_Skin_Student_S_Princess_C : public ALD_Skin_Student_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Student_S_Princess__LD_Skin_Student_S_Princess_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Student_S_Princess_C, 0x0532);
		}

		// class ALD_Skin_Student_S_GirlScout_C : public ALD_Skin_Student_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Student_S_GirlScout__LD_Skin_Student_S_GirlScout_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Student_S_GirlScout_C, 0x0532);
		}

		// class ALD_Skin_Nymph_C_Red_C : public ALD_Skin_Nymph_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Nymph_C_Red__LD_Skin_Nymph_C_Red_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Nymph_C_Red_C, 0x0532);
		}

		// class APickable_Fuse_C : public APickableItemBase_C
		TEST_METHOD(BlueprintGeneratedClass__Pickable_Fuse__Pickable_Fuse_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APickable_Fuse_C, UberGraphFrame, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::APickable_Fuse_C, Sphere, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::APickable_Fuse_C, Target, 0x07A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APickable_Fuse_C, 0x07A8);
		}

		// class ALD_Skin_Tim_B_Calavera_C : public ALD_Skin_Tim_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Tim_B_Calavera__LD_Skin_Tim_B_Calavera_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Tim_B_Calavera_C, 0x0532);
		}

		// class UGA_Potion_C : public UHSHGameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Potion__GA_Potion_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_Potion_C, UberGraphFrame, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_Potion_C, Montage, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_Potion_C, PairAnimation, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_Potion_C, Cost, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_Potion_C, Magnitude, 0x0484);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Potion_C, 0x0488);
		}

		// class UGE_Debuff_LetsFightGhost_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Debuff_LetsFightGhost__GE_Debuff_LetsFightGhost_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Debuff_LetsFightGhost_C, 0x05F8);
		}

		// class ALocker_Blueprint_C : public AHiddingPlace_C
		TEST_METHOD(BlueprintGeneratedClass__Locker_Blueprint__Locker_Blueprint_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALocker_Blueprint_C, UberGraphFrame, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALocker_Blueprint_C, BlockPlayer, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALocker_Blueprint_C, DoorMesh, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALocker_Blueprint_C, Timeline_CloseOpen_Alpha_0A3D75C74B41C467570190B11F0DB203, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALocker_Blueprint_C, Timeline_CloseOpen__Direction_0A3D75C74B41C467570190B11F0DB203, 0x0874);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALocker_Blueprint_C, UnknownData_TVUB, 0x0875);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALocker_Blueprint_C, Timeline_CloseOpen, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALocker_Blueprint_C, Timeline_OpenDoor_Alpha_2E8DC8A944317D30A22D0F95778116DA, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALocker_Blueprint_C, Timeline_OpenDoor__Direction_2E8DC8A944317D30A22D0F95778116DA, 0x0884);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALocker_Blueprint_C, UnknownData_4X4G, 0x0885);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALocker_Blueprint_C, Timeline_OpenDoor, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALocker_Blueprint_C, DoorArray, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALocker_Blueprint_C, AttenuationSetting, 0x08A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALocker_Blueprint_C, 0x08A8);
		}

		// class AProjectileHolyWater_C : public AProjectileBase_C
		TEST_METHOD(BlueprintGeneratedClass__ProjectileHolyWater__ProjectileHolyWater_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectileHolyWater_C, UnknownData_IH2D, 0x0425);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectileHolyWater_C, UberGraphFrame, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectileHolyWater_C, StaticMesh, 0x0438);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AProjectileHolyWater_C, 0x0440);
		}

		// class UGA_Water_C : public UHSHGameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Water__GA_Water_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_Water_C, UberGraphFrame, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_Water_C, MaleMontage, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_Water_C, FemaleMontage, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_Water_C, PairAnimation, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_Water_C, Cost, 0x0480);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Water_C, 0x0484);
		}

		// class ALD_Skin_Student_D_Default_C : public ALD_Skin_Base_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Student_D_Default__LD_Skin_Student_D_Default_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Student_D_Default_C, 0x0532);
		}

		// class ALD_Skin_Vanz_A_WinJacketA_C : public ALD_Skin_Vanz_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Vanz_A_WinJacketA__LD_Skin_Vanz_A_WinJacketA_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Vanz_A_WinJacketA_C, 0x0532);
		}

		// class ABack_Sur_Magic00005_C : public ABackActorBase_C
		TEST_METHOD(BlueprintGeneratedClass__Back_Sur_Magic00005__Back_Sur_Magic00005_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABack_Sur_Magic00005_C, Plane, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABack_Sur_Magic00005_C, 0x0348);
		}

		// class UGE_HolyWater_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_HolyWater__GE_HolyWater_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_HolyWater_C, 0x05F8);
		}

		// class UGE_Debuff_BlockPerk_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Debuff_BlockPerk__GE_Debuff_BlockPerk_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Debuff_BlockPerk_C, 0x05F8);
		}

		// class ALD_Back_Sur_Base_C : public ALD_Back_Base_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Back_Sur_Base__LD_Back_Sur_Base_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Back_Sur_Base_C, 0x055C);
		}

		// class ALD_Skin_Student_C_Green_C : public ALD_Skin_Student_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Student_C_Green__LD_Skin_Student_C_Green_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Student_C_Green_C, 0x0532);
		}

		// class ALD_Skin_Tim_B_RedLight_C : public ALD_Skin_Tim_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Tim_B_RedLight__LD_Skin_Tim_B_RedLight_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Tim_B_RedLight_C, 0x0532);
		}

		// class ALD_Skin_Tim_C_Olive_C : public ALD_Skin_Tim_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Tim_C_Olive__LD_Skin_Tim_C_Olive_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Tim_C_Olive_C, 0x0532);
		}

		// class AHolyThreadActor_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__HolyThreadActor__HolyThreadActor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHolyThreadActor_C, UberGraphFrame, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHolyThreadActor_C, SplineRope, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHolyThreadActor_C, SplineMeshes, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHolyThreadActor_C, MaterialRope, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHolyThreadActor_C, Scale, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHolyThreadActor_C, Axis, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHolyThreadActor_C, CastShadow, 0x0371);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHolyThreadActor_C, UnknownData_J8NJ, 0x0372);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHolyThreadActor_C, LineCurve, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHolyThreadActor_C, NumberOfLineCycle, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHolyThreadActor_C, RandomStream, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHolyThreadActor_C, MinCurve, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHolyThreadActor_C, MaxCurve, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHolyThreadActor_C, IsRandom, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHolyThreadActor_C, UnknownData_ODCB, 0x039D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHolyThreadActor_C, LineSegment, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHolyThreadActor_C, Round, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHolyThreadActor_C, UnknownData_JFSJ, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHolyThreadActor_C, CacheRedRopeMaterial, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHolyThreadActor_C, SplineGenActors, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHolyThreadActor_C, MainPointer, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHolyThreadActor_C, GenPointer, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHolyThreadActor_C, RandomPointArea, 0x03F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHolyThreadActor_C, 0x03F4);
		}

		// class UGE_WeaponSurvivorWoodStick_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_WeaponSurvivorWoodStick__GE_WeaponSurvivorWoodStick_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_WeaponSurvivorWoodStick_C, 0x05F8);
		}

		// class ULinearTimecodeComponent : public USceneComponent
		TEST_METHOD(Class__LinearTimecode__LinearTimecodeComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULinearTimecodeComponent, MediaPlayer, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULinearTimecodeComponent, DropTimecode, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULinearTimecodeComponent, UnknownData_JOUA, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULinearTimecodeComponent, OnTimecodeChange, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULinearTimecodeComponent, UnknownData_48MP, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULinearTimecodeComponent, 0x02C0);
		}

		// class UDropTimecodeToStringConversion : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__LinearTimecode__DropTimecodeToStringConversion)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDropTimecodeToStringConversion, 0x0030);
		}

		// class UGE_Debuff_StunTrap_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Debuff_StunTrap__GE_Debuff_StunTrap_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Debuff_StunTrap_C, 0x05F8);
		}

		// class AHospitalModelOnly_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__HospitalModelOnly__HospitalModelOnly_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospitalModelOnly_C, UberGraphFrame, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHospitalModelOnly_C, 0x0350);
		}

		// class UWebBrowser : public UWidget
		TEST_METHOD(Class__WebBrowserWidget__WebBrowser)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWebBrowser, OnUrlChanged, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWebBrowser, OnBeforePopup, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWebBrowser, InitialURL, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWebBrowser, bSupportsTransparency, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWebBrowser, UnknownData_L720, 0x0149);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWebBrowser, 0x0160);
		}

		// class UWebBrowserAssetManager : public UObject
		TEST_METHOD(Class__WebBrowserWidget__WebBrowserAssetManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWebBrowserAssetManager, DefaultMaterial, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWebBrowserAssetManager, UnknownData_6QS6, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWebBrowserAssetManager, 0x0080);
		}

		// class ALD_Skin_Vanz_B_Boxing_C : public ALD_Skin_Vanz_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Vanz_B_Boxing__LD_Skin_Vanz_B_Boxing_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Vanz_B_Boxing_C, 0x0532);
		}

		// class ALD_Skin_Vanz_B_Tribal_C : public ALD_Skin_Vanz_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Vanz_B_Tribal__LD_Skin_Vanz_B_Tribal_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Vanz_B_Tribal_C, 0x0532);
		}

		// class ULevelVariantSets : public UObject
		TEST_METHOD(Class__VariantManagerContent__LevelVariantSets)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelVariantSets, DirectorClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelVariantSets, VariantSets, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelVariantSets, UnknownData_TNGK, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelVariantSets, 0x0098);
		}

		// class ALevelVariantSetsActor : public AActor
		TEST_METHOD(Class__VariantManagerContent__LevelVariantSetsActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelVariantSetsActor, LevelVariantSets, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelVariantSetsActor, 0x0350);
		}

		// class ULevelVariantSetsFunctionDirector : public UObject
		TEST_METHOD(Class__VariantManagerContent__LevelVariantSetsFunctionDirector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelVariantSetsFunctionDirector, UnknownData_GD1U, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelVariantSetsFunctionDirector, 0x0048);
		}

		// class UPropertyValue : public UObject
		TEST_METHOD(Class__VariantManagerContent__PropertyValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, UnknownData_L7F0, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, Properties, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, PropertyIndices, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, CapturedPropSegments, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, FullDisplayString, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, PropertySetterName, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, PropertySetterParameterDefaults, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, bHasRecordedData, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, UnknownData_XVK7, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, LeafPropertyClass, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, ValueBytes, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, PropCategory, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, UnknownData_MPWV, 0x0141);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyValue, 0x01A0);
		}

		// class UPropertyValueTransform : public UPropertyValue
		TEST_METHOD(Class__VariantManagerContent__PropertyValueTransform)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyValueTransform, 0x01A0);
		}

		// class UPropertyValueVisibility : public UPropertyValue
		TEST_METHOD(Class__VariantManagerContent__PropertyValueVisibility)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyValueVisibility, 0x01A0);
		}

		// class UPropertyValueColor : public UPropertyValue
		TEST_METHOD(Class__VariantManagerContent__PropertyValueColor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyValueColor, 0x01A0);
		}

		// class UPropertyValueMaterial : public UPropertyValue
		TEST_METHOD(Class__VariantManagerContent__PropertyValueMaterial)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyValueMaterial, 0x01A0);
		}

		// class UVariant : public UObject
		TEST_METHOD(Class__VariantManagerContent__Variant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariant, DisplayText, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariant, UnknownData_1VXQ, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariant, ObjectBindings, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVariant, 0x0070);
		}

		// class UVariantObjectBinding : public UObject
		TEST_METHOD(Class__VariantManagerContent__VariantObjectBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantObjectBinding, ObjectPtr, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantObjectBinding, LazyObjectPtr, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantObjectBinding, UnknownData_2V0Y, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantObjectBinding, CapturedProperties, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantObjectBinding, FunctionCallers, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVariantObjectBinding, 0x0088);
		}

		// class UVariantSet : public UObject
		TEST_METHOD(Class__VariantManagerContent__VariantSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantSet, DisplayText, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantSet, UnknownData_GKAB, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantSet, bExpanded, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantSet, UnknownData_BAXO, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantSet, Variants, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVariantSet, 0x0078);
		}

		// class UJokeAudioHunterComponent_C : public UJokeAudioComponent_C
		TEST_METHOD(BlueprintGeneratedClass__JokeAudioHunterComponent__JokeAudioHunterComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UJokeAudioHunterComponent_C, UberGraphFrame, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UJokeAudioHunterComponent_C, 0x0180);
		}

		// class UGE_WeaponSurvivorHolyKnife_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_WeaponSurvivorHolyKnife__GE_WeaponSurvivorHolyKnife_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_WeaponSurvivorHolyKnife_C, 0x05F8);
		}

		// class ALD_Skin_Belle_B_ScotchBlue_C : public ALD_Skin_Belle_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Belle_B_ScotchBlue__LD_Skin_Belle_B_ScotchBlue_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Belle_B_ScotchBlue_C, 0x0532);
		}

		// class UResonanceAudioAmbisonicsSettings : public UAmbisonicsSubmixSettingsBase
		TEST_METHOD(Class__ResonanceAudio__ResonanceAudioAmbisonicsSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UResonanceAudioAmbisonicsSettings, AmbisonicsOrder, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UResonanceAudioAmbisonicsSettings, UnknownData_WUQB, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UResonanceAudioAmbisonicsSettings, 0x0038);
		}

		// class UResonanceAudioBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__ResonanceAudio__ResonanceAudioBlueprintFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UResonanceAudioBlueprintFunctionLibrary, 0x0030);
		}

		// class AResonanceAudioDirectivityVisualizer : public AActor
		TEST_METHOD(Class__ResonanceAudio__ResonanceAudioDirectivityVisualizer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AResonanceAudioDirectivityVisualizer, UnknownData_4W1N, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AResonanceAudioDirectivityVisualizer, Mesh, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AResonanceAudioDirectivityVisualizer, Material, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AResonanceAudioDirectivityVisualizer, Settings, 0x03B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AResonanceAudioDirectivityVisualizer, 0x03B8);
		}

		// class UResonanceAudioReverbPluginPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__ResonanceAudio__ResonanceAudioReverbPluginPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UResonanceAudioReverbPluginPreset, UnknownData_JJEB, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UResonanceAudioReverbPluginPreset, Settings, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UResonanceAudioReverbPluginPreset, 0x0110);
		}

		// class UResonanceAudioSettings : public UObject
		TEST_METHOD(Class__ResonanceAudio__ResonanceAudioSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UResonanceAudioSettings, QualityMode, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UResonanceAudioSettings, UnknownData_ZV9L, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UResonanceAudioSettings, GlobalReverbPreset, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UResonanceAudioSettings, 0x0050);
		}

		// class UResonanceAudioSpatializationSourceSettings : public USpatializationPluginSourceSettingsBase
		TEST_METHOD(Class__ResonanceAudio__ResonanceAudioSpatializationSourceSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UResonanceAudioSpatializationSourceSettings, SpatializationMethod, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UResonanceAudioSpatializationSourceSettings, UnknownData_A8A9, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UResonanceAudioSpatializationSourceSettings, Pattern, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UResonanceAudioSpatializationSourceSettings, Sharpness, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UResonanceAudioSpatializationSourceSettings, bToggleVisualization, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UResonanceAudioSpatializationSourceSettings, UnknownData_IEBJ, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UResonanceAudioSpatializationSourceSettings, Scale, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UResonanceAudioSpatializationSourceSettings, Spread, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UResonanceAudioSpatializationSourceSettings, Rolloff, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UResonanceAudioSpatializationSourceSettings, UnknownData_73VO, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UResonanceAudioSpatializationSourceSettings, MinDistance, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UResonanceAudioSpatializationSourceSettings, MaxDistance, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UResonanceAudioSpatializationSourceSettings, UnknownData_ROG1, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UResonanceAudioSpatializationSourceSettings, 0x0058);
		}

		// class UWidget_LoadingPopup_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_LoadingPopup__Widget_LoadingPopup_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LoadingPopup_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LoadingPopup_C, Background, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LoadingPopup_C, TitleTextBox, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LoadingPopup_C, ConfirmEventDispatcher, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LoadingPopup_C, CancelEventDispatcher, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LoadingPopup_C, Message, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_LoadingPopup_C, 0x0298);
		}

		// class AMechanicSurvivor_C : public ASurvivorBase_C
		TEST_METHOD(BlueprintGeneratedClass__MechanicSurvivor__MechanicSurvivor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMechanicSurvivor_C, UberGraphFrame, 0x0F80);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMechanicSurvivor_C, Box, 0x0F90);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMechanicSurvivor_C, Attacking, 0x0F98);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMechanicSurvivor_C, 0x0FA8);
		}

		// class UCharacterPhysicComponent_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__CharacterPhysicComponent__CharacterPhysicComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterPhysicComponent_C, UberGraphFrame, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterPhysicComponent_C, SkinMesh, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterPhysicComponent_C, IsHit, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterPhysicComponent_C, UnknownData_3PGV, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterPhysicComponent_C, BoneName, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterPhysicComponent_C, BlendWeight, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterPhysicComponent_C, Power, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterPhysicComponent_C, IsFixedBone, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterPhysicComponent_C, UnknownData_UVH1, 0x012D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterPhysicComponent_C, FixBoneName, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterPhysicComponent_C, IgnoreBones, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterPhysicComponent_C, Speed, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterPhysicComponent_C, UnknownData_0M1W, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterPhysicComponent_C, Curve, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterPhysicComponent_C, Alpha, 0x0158);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCharacterPhysicComponent_C, 0x015C);
		}

		// class AChapletActor_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__ChapletActor__ChapletActor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AChapletActor_C, UberGraphFrame, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChapletActor_C, P_Beads, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChapletActor_C, StaticMesh, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChapletActor_C, Scene, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChapletActor_C, OwnerSurvivor, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AChapletActor_C, 0x0368);
		}

		// class ALD_Skin_SeGuard_C_Aqua_C : public ALD_Skin_SeGuard_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_SeGuard_C_Aqua__LD_Skin_SeGuard_C_Aqua_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_SeGuard_C_Aqua_C, 0x0532);
		}

		// class UGE_WeaponSurvivorBareHand_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_WeaponSurvivorBareHand__GE_WeaponSurvivorBareHand_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_WeaponSurvivorBareHand_C, 0x05F8);
		}

		// class ULoginSteam_C : public ULoginBase_C
		TEST_METHOD(BlueprintGeneratedClass__LoginSteam__LoginSteam_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULoginSteam_C, 0x0048);
		}

		// class ALD_Skin_Belle_B_StripedCream_C : public ALD_Skin_Belle_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Belle_B_StripedCream__LD_Skin_Belle_B_StripedCream_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Belle_B_StripedCream_C, 0x0532);
		}

		// class AProjectileHolyKnife_C : public AProjectileBase_C
		TEST_METHOD(BlueprintGeneratedClass__ProjectileHolyKnife__ProjectileHolyKnife_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectileHolyKnife_C, UnknownData_HC4G, 0x0425);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectileHolyKnife_C, UberGraphFrame, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectileHolyKnife_C, SK_HolyKnifeLv3, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectileHolyKnife_C, Rotation, 0x0440);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AProjectileHolyKnife_C, 0x044C);
		}

		// class ALD_Skin_Belle_C_Mustard_C : public ALD_Skin_Belle_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Belle_C_Mustard__LD_Skin_Belle_C_Mustard_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Belle_C_Mustard_C, 0x0532);
		}

		// class UHSURMenuCameraManagerComponent_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__HSURMenuCameraManagerComponent__HSURMenuCameraManagerComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURMenuCameraManagerComponent_C, UberGraphFrame, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURMenuCameraManagerComponent_C, Camera_Login, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURMenuCameraManagerComponent_C, Camera_Mainmenu, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURMenuCameraManagerComponent_C, Camera_Lobby, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURMenuCameraManagerComponent_C, Camera_CharacterSetting, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURMenuCameraManagerComponent_C, Camera_Current, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURMenuCameraManagerComponent_C, State, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURMenuCameraManagerComponent_C, UnknownData_NPKD, 0x0139);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSURMenuCameraManagerComponent_C, CameraConfiguration, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHSURMenuCameraManagerComponent_C, 0x0150);
		}

		// class UGE_WeaponPraySlow_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_WeaponPraySlow__GE_WeaponPraySlow_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_WeaponPraySlow_C, 0x05F8);
		}

		// class UGA_ProjectileSurvivorBase_C : public UGA_ProjectileBase_C
		TEST_METHOD(BlueprintGeneratedClass__GA_ProjectileSurvivorBase__GA_ProjectileSurvivorBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_ProjectileSurvivorBase_C, UnknownData_PIRM, 0x04D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_ProjectileSurvivorBase_C, UberGraphFrame, 0x04D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_ProjectileSurvivorBase_C, 0x04E8);
		}

		// class ALD_Skin_SeGuard_A_SuitCrimson_C : public ALD_Skin_SeGuard_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_SeGuard_A_SuitCrimson__LD_Skin_SeGuard_A_SuitCrimson_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_SeGuard_A_SuitCrimson_C, 0x0532);
		}

		// class ALD_Skin_Jane_S_NursePink_C : public ALD_Skin_Jane_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Jane_S_NursePink__LD_Skin_Jane_S_NursePink_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Jane_S_NursePink_C, 0x0532);
		}

		// class UIPlayerInfo_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__IPlayerInfo__IPlayerInfo_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIPlayerInfo_C, 0x0030);
		}

		// class UGA_WeaponSurvivorChaplet_C : public UGA_WeaponSurvivorBase_C
		TEST_METHOD(BlueprintGeneratedClass__GA_WeaponSurvivorChaplet__GA_WeaponSurvivorChaplet_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_WeaponSurvivorChaplet_C, 0x04D5);
		}

		// class UGE_EnergyDrink_Increase_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_EnergyDrink_Increase__GE_EnergyDrink_Increase_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_EnergyDrink_Increase_C, 0x05F8);
		}

		// class UGE_ApplicationRequirement_PraySlow_C : public UGameplayEffectCustomApplicationRequirement
		TEST_METHOD(BlueprintGeneratedClass__GE_ApplicationRequirement_PraySlow__GE_ApplicationRequirement_PraySlow_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_ApplicationRequirement_PraySlow_C, 0x0030);
		}

		// class ALD_Skin_Jane_A_EmoBlack_C : public ALD_Skin_Jane_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Jane_A_EmoBlack__LD_Skin_Jane_A_EmoBlack_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Jane_A_EmoBlack_C, 0x0532);
		}

		// class UWebSocketConnection : public UNetConnection
		TEST_METHOD(Class__HTML5Networking__WebSocketConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWebSocketConnection, UnknownData_7JCD, 0x18F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWebSocketConnection, 0x1900);
		}

		// class UWebSocketNetDriver : public UNetDriver
		TEST_METHOD(Class__HTML5Networking__WebSocketNetDriver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWebSocketNetDriver, WebSocketPort, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWebSocketNetDriver, UnknownData_053J, 0x075C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWebSocketNetDriver, 0x0768);
		}

		// class UWidget_Image_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_Image__Widget_Image_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Image_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Image_C, NewAnimation, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Image_C, Image_74, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_Image_C, 0x0260);
		}

		// class UStickerSlot_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__StickerSlot__StickerSlot_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStickerSlot_C, StickerImg, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStickerSlot_C, OnStickerDrop, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStickerSlot_C, SlotIndex, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStickerSlot_C, 0x025C);
		}

		// class UFoliageInstancedStaticMeshComponent : public UHierarchicalInstancedStaticMeshComponent
		TEST_METHOD(Class__Foliage__FoliageInstancedStaticMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageInstancedStaticMeshComponent, OnInstanceTakePointDamage, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageInstancedStaticMeshComponent, OnInstanceTakeRadialDamage, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageInstancedStaticMeshComponent, UnknownData_YLNC, 0x07A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageInstancedStaticMeshComponent, 0x07B0);
		}

		// class UFoliageStatistics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Foliage__FoliageStatistics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageStatistics, 0x0030);
		}

		// class UFoliageType : public UObject
		TEST_METHOD(Class__Foliage__FoliageType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UpdateGuid, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, Density, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, DensityAdjustmentFactor, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, Radius, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, Scaling, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_KH1A, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ScaleX, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ScaleY, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ScaleZ, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, VertexColorMaskByChannel, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, VertexColorMask, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_BLOW, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, VertexColorMaskThreshold, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_J9ZN, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ZOffset, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_7WQP, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, AlignMaxAngle, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_65PN, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, RandomPitchAngle, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, GroundSlopeAngle, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, Height, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_LURD, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, LandscapeLayers, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, LandscapeLayer, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_B0W6, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CollisionScale, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MinimumLayerWeight, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MeshBounds, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, LowBoundOriginRadius, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, Mobility, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_VPWZ, 0x0125);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CullDistance, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_QKXF, 0x0132);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, OverriddenLightMapRes, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, LightmapType, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_ZARU, 0x0139);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_DCX8, 0x013D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, BodyInstance, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CustomNavigableGeometry, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, LightingChannels, 0x0289);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_YT8F, 0x028A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_E0B7, 0x028D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CustomDepthStencilValue, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CollisionRadius, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ShadeRadius, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, NumSteps, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, InitialSeedDensity, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, AverageSpreadDistance, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, SpreadVariance, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, SeedsPerStep, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, DistributionSeed, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MaxInitialSeedOffset, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, bCanGrowInShade, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, bSpawnsInShade, 0x02B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_JEIZ, 0x02BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MaxInitialAge, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MaxAge, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, OverlapPriority, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ProceduralScale, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ScaleCurve, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ChangeCount, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_ZX8K, 0x035E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageType, 0x0360);
		}

		// class UFoliageType_InstancedStaticMesh : public UFoliageType
		TEST_METHOD(Class__Foliage__FoliageType_InstancedStaticMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType_InstancedStaticMesh, Mesh, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType_InstancedStaticMesh, OverrideMaterials, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType_InstancedStaticMesh, ComponentClass, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageType_InstancedStaticMesh, 0x0380);
		}

		// class AInstancedFoliageActor : public AActor
		TEST_METHOD(Class__Foliage__InstancedFoliageActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstancedFoliageActor, UnknownData_ZRB3, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInstancedFoliageActor, 0x0388);
		}

		// class AInteractiveFoliageActor : public AStaticMeshActor
		TEST_METHOD(Class__Foliage__InteractiveFoliageActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, CapsuleComponent, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, TouchingActorEntryPosition, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageVelocity, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageForce, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliagePosition, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageDamageImpulseScale, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageTouchImpulseScale, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageStiffness, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageStiffnessQuadratic, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageDamping, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, MaxDamageImpulse, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, MaxTouchImpulse, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, MaxForce, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, Mass, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, UnknownData_N5JI, 0x03A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInteractiveFoliageActor, 0x03A8);
		}

		// class UInteractiveFoliageComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Foliage__InteractiveFoliageComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveFoliageComponent, UnknownData_ORV5, 0x0608);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveFoliageComponent, 0x0610);
		}

		// class AProceduralFoliageBlockingVolume : public AVolume
		TEST_METHOD(Class__Foliage__ProceduralFoliageBlockingVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AProceduralFoliageBlockingVolume, ProceduralFoliageVolume, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AProceduralFoliageBlockingVolume, 0x0378);
		}

		// class UProceduralFoliageComponent : public UActorComponent
		TEST_METHOD(Class__Foliage__ProceduralFoliageComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageComponent, FoliageSpawner, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageComponent, TileOverlap, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageComponent, UnknownData_1Q24, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageComponent, SpawningVolume, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageComponent, ProceduralGuid, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralFoliageComponent, 0x0128);
		}

		// class UProceduralFoliageSpawner : public UObject
		TEST_METHOD(Class__Foliage__ProceduralFoliageSpawner)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, RandomSeed, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, TileSize, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, NumUniqueTiles, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, MinimumQuadTreeSize, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, UnknownData_OZQM, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, FoliageTypes, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, bNeedsSimulation, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, UnknownData_B7QC, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralFoliageSpawner, 0x0078);
		}

		// class UProceduralFoliageTile : public UObject
		TEST_METHOD(Class__Foliage__ProceduralFoliageTile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageTile, FoliageSpawner, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageTile, UnknownData_B4VZ, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageTile, InstancesArray, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageTile, UnknownData_WMH4, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralFoliageTile, 0x0160);
		}

		// class AProceduralFoliageVolume : public AVolume
		TEST_METHOD(Class__Foliage__ProceduralFoliageVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AProceduralFoliageVolume, ProceduralComponent, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AProceduralFoliageVolume, 0x0378);
		}

		// class UGA_ProjectileBase_C : public UHSHGameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_ProjectileBase__GA_ProjectileBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_ProjectileBase_C, UberGraphFrame, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_ProjectileBase_C, Montage, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_ProjectileBase_C, bIsRandom, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_ProjectileBase_C, UnknownData_EHCB, 0x0471);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_ProjectileBase_C, RandomMontage, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_ProjectileBase_C, PairAnimation, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_ProjectileBase_C, RandomAnimation, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_ProjectileBase_C, bIsConfirmOneSpawn, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_ProjectileBase_C, UnknownData_MY1E, 0x04A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_ProjectileBase_C, ProjectileClass, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_ProjectileBase_C, Cost, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_ProjectileBase_C, SocketName, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_ProjectileBase_C, Seed, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_ProjectileBase_C, FlagIsSpawn, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_ProjectileBase_C, UnknownData_ZBMI, 0x04C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_ProjectileBase_C, AssistBound, 0x04CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_ProjectileBase_C, FlagIsLockLuckyShot, 0x04D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_ProjectileBase_C, 0x04D1);
		}

		// class ULiveCodingSettings : public UObject
		TEST_METHOD(Class__LiveCoding__LiveCodingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveCodingSettings, bEnabled, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveCodingSettings, Startup, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveCodingSettings, bPreloadEngineModules, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveCodingSettings, bPreloadEnginePluginModules, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveCodingSettings, bPreloadProjectModules, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveCodingSettings, bPreloadProjectPluginModules, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveCodingSettings, UnknownData_JRSI, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveCodingSettings, PreloadNamedModules, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveCodingSettings, 0x0048);
		}

		// class UGE_PP_SurvivorSpawnCat_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_PP_SurvivorSpawnCat__GE_PP_SurvivorSpawnCat_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_PP_SurvivorSpawnCat_C, 0x05F8);
		}

		// class UProfileImage_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__ProfileImage__ProfileImage_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProfileImage_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProfileImage_C, BT_Profile, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProfileImage_C, Image_BG, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProfileImage_C, Image_HoverBorder, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProfileImage_C, Image_Profile, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProfileImage_C, Img_Equipped, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProfileImage_C, OnProfileClick, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProfileImage_C, HoverAlpha, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProfileImage_C, UnHoverAlpha, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProfileImage_C, InventoryData, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProfileImage_C, 0x0368);
		}

		// class UNS_PhrayHideWaterball_C : public UAnimNotifyState
		TEST_METHOD(BlueprintGeneratedClass__NS_PhrayHideWaterball__NS_PhrayHideWaterball_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNS_PhrayHideWaterball_C, 0x0038);
		}

		// class UGE_Debuff_Camera_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Debuff_Camera__GE_Debuff_Camera_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Debuff_Camera_C, 0x05F8);
		}

		// class ALD_Skin_Tim_C_Navy_C : public ALD_Skin_Tim_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Tim_C_Navy__LD_Skin_Tim_C_Navy_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Tim_C_Navy_C, 0x0532);
		}

		// class UWidget_TooltipNew_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_TooltipNew__Widget_TooltipNew_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TooltipNew_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TooltipNew_C, ShowUp, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TooltipNew_C, BlackFade, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TooltipNew_C, Image_2, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TooltipNew_C, Image_202, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TooltipNew_C, Image_BG, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TooltipNew_C, Image_Header, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TooltipNew_C, RetainerBox_1, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TooltipNew_C, TextDescription, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TooltipNew_C, TextHead, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TooltipNew_C, TooltipTxt, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TooltipNew_C, TooltipTxt_Description, 0x02B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_TooltipNew_C, 0x02C8);
		}

		// class UWidgetDrag_C : public UDragDropOperation
		TEST_METHOD(BlueprintGeneratedClass__WidgetDrag__WidgetDrag_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetDrag_C, WidgetReference, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetDrag_C, DragOffset, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetDrag_C, 0x00A0);
		}

		// class UWidget_LootdropLabel_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_LootdropLabel__Widget_LootdropLabel_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootdropLabel_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootdropLabel_C, BG, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootdropLabel_C, BG_rarity, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootdropLabel_C, Widget_Text_ItemName, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootdropLabel_C, Widget_Text_ItemType, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootdropLabel_C, RarityColor, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_LootdropLabel_C, 0x0280);
		}

		// class UTim_AnimBlueprint_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Tim_AnimBlueprint__Tim_AnimBlueprint_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, UnknownData_QQZ3, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_SaveCachedPose_0C4A0F804392C9E358221C90DB2B79DE, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_UseCachedPose_2201EE4C4F6BD6A131C396B46FAFD1D5, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_LayeredBoneBlend_C9DB693341A6A30F3809EDA0E5427130, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_UseCachedPose_EE7F239741F22BFF7C39A88801F54CDB, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_SaveCachedPose_7EF0392240D1235DFACBA6A0BE036031, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_Slot_39FB48EE41EEEE683E11588F6424E42A, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_TransitionResult_0B76850F4811A88C2C11E8A579EB1397, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_TransitionResult_4A63DA944B5F8928ACE1ABA5259BD989, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_TransitionResult_182B74D94DFA5DDC933612B383D12026, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_TransitionResult_3598C42841497EDBE2A80683B6774693, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_TransitionResult_81C041454E4E9FA2EB9B1E81BAACDADF, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_TransitionResult_E06A5A204FAF15B35C27B1A100C3F9C3, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_TransitionResult_DFB5A0244749AB4FC4B122886ED545C3, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_TransitionResult_D1D04DC5499155755C416DB7F8E772FD, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_TransitionResult_447C744542ECC886D659FF874C9DFD56, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_TransitionResult_CEA899DA44D4B1E2960F1EAE223B226C, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_TransitionResult_8AA05697450097D78DE277AC6CD9D979, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_TransitionResult_07DE7F0B4A2131493AB46B8F31CDF04A, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_TransitionResult_A0D617F542666D39E27129891BAF87F8, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_TransitionResult_A6A79395492311DAC835068DB8BE3670, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_TransitionResult_4850E5D74C29C085D5A8A99354965AF6, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_TransitionResult_EDD687CA468FE40CD868D4962A46E2A2, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_TransitionResult_843BCE5847A9FCCE07C7EA93D9C6E6D9, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_TransitionResult_436DBEF74FF0BA963D6F7795B25DC425, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_TransitionResult_167D154A4C3143B9834C7C8D313E42B1, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_TransitionResult_5E3AE14F4BBFACCF76267E936FE99CBC, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_TransitionResult_FC89517E47D716C3A25308878B5F16A2, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_TransitionResult_FB8627234050768F8596D1B94368AAC3, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_TransitionResult_196E067E4D8A8B5B34F785B76CD51745, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_TransitionResult_91BDCA7D4CAD59A1B17E29944CB9FA09, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_TransitionResult_2AC43E2C4CAD7ED35FC9D4A44772C156, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_TransitionResult_AF46958F4B9DAE4FA479CE8A1E685F07, 0x0928);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_TransitionResult_D8737B894F626DF89A0C67A444EBBF5C, 0x0950);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_TransitionResult_F26A337B405952A7086C4597EC7184B8, 0x0978);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_TransitionResult_46973F8445ED2186E3BBAB943798FA21, 0x09A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_TransitionResult_596A2F484C5AF9EA553DAFB456C6227F, 0x09C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_TransitionResult_67D9ECED4F9D6CBBE07DF98FACBC3D6F, 0x09F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_TransitionResult_3F4BF1B848EDBDE4BCD10B902E7F9280, 0x0A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_TransitionResult_DA8E381D4A3276FC8E67928871612754, 0x0A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_TransitionResult_FD999C23449A5BE7049D1B821B7715A5, 0x0A68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_TransitionResult_B64A4F7244F5DC34FBB370AC312EA463, 0x0A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_TransitionResult_C7450E2A4A345D1CAB5FAAB7833081C7, 0x0AB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_TransitionResult_914074DA4299DD816FFA3D8F48ACF6F0, 0x0AE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_TransitionResult_3EE3C8DE46C8E624EFEADEA384AA65F3, 0x0B08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_TransitionResult_DAC3AB5D4CC7F268E80DE997B03A374D, 0x0B30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_TransitionResult_A7E7413448D488659D19709635E6B245, 0x0B58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_TransitionResult_F4B3FCFD4AFDCA4DF7F203A03E3518C1, 0x0B80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_TransitionResult_22AD4B5A49D5F630453B6590D9DC211C, 0x0BA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_SequencePlayer_2CCBC2864288B0F01A581D831474F2C3, 0x0BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_LayeredBoneBlend_95F62F43446EE40B1B1779AE11B82D6D, 0x0C48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_BlendSpacePlayer_3FD4F0FD4F53B8A0C311498E28513841, 0x0D00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_StateResult_3EA0B79B427C935AEC4504926ED44803, 0x0DE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_SequencePlayer_8466D231409446C84D556891DC04610D, 0x0E00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_StateResult_3E7426A1475B0EE0525B0AAE768EEFB5, 0x0E78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_SequencePlayer_7FB6199E4C630C9BD4207788FF4CAA3C, 0x0E98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_StateResult_9BBA934D4AC7CFE7798117A46CC532F6, 0x0F10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_SequencePlayer_53FDEF9D44F2D9539AEA2DADA912CEC6, 0x0F30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_LayeredBoneBlend_1703DF4D4BAA94FA25DA179FF66073AC, 0x0FA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_BlendSpacePlayer_5436A8554A149FC7C52F7E8BC60752F8, 0x1060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_StateResult_566FEF004AEEDA547DAE5CAF9B55DC9C, 0x1140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_SequencePlayer_6FB5036C4C5FBDB1723DED9F8B6B1F68, 0x1160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_StateResult_B0A716584E161BA7157B7EB5FC122AE6, 0x11D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_BlendSpacePlayer_CEF89F2941F08389244F6EB49C25127D, 0x11F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_StateResult_0C27F7B84ABF7FCA0095EC9600CA2544, 0x12D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_TwoWayBlend_E294AFCE4C53AD8A92EC2980C5833406, 0x12F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_BlendSpacePlayer_E80C8FEF4EF61005113EB492ACA46031, 0x13C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_SequencePlayer_AE123597479F0CFD7766E2BB7E94CCCA, 0x14A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_StateResult_A15EF41D45EA10F97AF05FBE0E9C9BA1, 0x1518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_TransitionResult_47DC5BB148D8E5658B1F2E9501CB49C1, 0x1538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_TransitionResult_55C1862D420AD9D54F68AE8C6F315A7D, 0x1560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_SequencePlayer_ABC2DE2C4162F9CA2190A3B292076EFA, 0x1588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_StateResult_406D63244EFB7247E5FA558588EB8193, 0x1600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_SequencePlayer_A51B46B143CF4724C5AC0499B28455A0, 0x1620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_StateResult_DDA169E94648453FD5AFB98DB883BD60, 0x1698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_SequencePlayer_6DFC76ED4345B710AC0530A564734449, 0x16B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_StateResult_4BA99FBE46AE6E63B0D29BB00B0C87B7, 0x1730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_StateMachine_48FCB22842FD79B9AF9C57A88FB63280, 0x1750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_StateResult_0620E24F47B2C7AFDDF5B88C31076E8E, 0x1800);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_BlendSpacePlayer_37AFFAE24F5B8AA892ADDAB23AC1014E, 0x1820);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_StateResult_518AF82047105DB477100F9D28C59463, 0x1900);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_StateMachine_3545A93B457942B5C862389941ED9813, 0x1920);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_Root_94BF91394D26EC7F51456ABB27C4D96D, 0x19D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_UseCachedPose_B6D0CA364C9BF4733F11B5A6B0BED3DF, 0x19F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_Slot_E0315635450DB2343BB5929753309C22, 0x1A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_LayeredBoneBlend_F8E2A4CB447F4985B744B4BEBA2CDC64, 0x1A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_SaveCachedPose_EBD35D5F46DE9F0DD16047B35534B8EA, 0x1B18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_UseCachedPose_E55EFBF145B21DC0D94332942E22E7A4, 0x1BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_UseCachedPose_48CA36E44FFCD7EAEBB384B8937CE21C, 0x1BF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, AnimGraphNode_Slot_56411FAB4304868DAD89EB958B27440F, 0x1C20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, MoveForward, 0x1C68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, MoveRight, 0x1C6C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, IsInAir, 0x1C70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, UnknownData_G1TH, 0x1C71);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, Pitch, 0x1C74);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, Roll, 0x1C78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, Yaw, 0x1C7C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, RotationLastTick, 0x1C80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, YawDelta, 0x1C8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, IsAccelerating, 0x1C90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, UnknownData_LK5Z, 0x1C91);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, Character, 0x1C98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, IsAttacking, 0x1CA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, UnknownData_VKBY, 0x1CA1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, CurrentAttack, 0x1CA4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, FullBody, 0x1CA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, IsCrouch, 0x1CA9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, IsKnockdown, 0x1CAA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, IsInjured, 0x1CAB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, IsWorship, 0x1CAC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, IsSearch, 0x1CAD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, UnknownData_QMVU, 0x1CAE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTim_AnimBlueprint_C, Survivor_Ref, 0x1CB0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTim_AnimBlueprint_C, 0x1CB8);
		}

		// class UWidget_Button_LootboxStore_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_Button_LootboxStore__Widget_Button_LootboxStore_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_LootboxStore_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_LootboxStore_C, UnHoverAnimation, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_LootboxStore_C, HoverAnimation, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_LootboxStore_C, Button_This, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_LootboxStore_C, Text, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_LootboxStore_C, AutoSize, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_LootboxStore_C, bUpperCase, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_LootboxStore_C, UnknownData_0V8H, 0x0282);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_LootboxStore_C, Size, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_LootboxStore_C, UnknownData_OJEH, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_LootboxStore_C, OnClicked, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_LootboxStore_C, FontSize, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_LootboxStore_C, UnHoverAlpha, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_LootboxStore_C, HoverAlpha, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_LootboxStore_C, UnknownData_YRMQ, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_LootboxStore_C, Style, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_LootboxStore_C, TextTransfom, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_LootboxStore_C, TextJustify, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_LootboxStore_C, UnknownData_8OLT, 0x0531);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_LootboxStore_C, Font, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_LootboxStore_C, FontColor, 0x0588);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_Button_LootboxStore_C, 0x0598);
		}

		// class UGE_Buff_ImmuneNoEffect_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Buff_ImmuneNoEffect__GE_Buff_ImmuneNoEffect_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Buff_ImmuneNoEffect_C, 0x05F8);
		}

		// class UWidget_HeaderButtonActive_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_HeaderButtonActive__Widget_HeaderButtonActive_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_HeaderButtonActive_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_HeaderButtonActive_C, Begin, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_HeaderButtonActive_C, UnHoverAnimation, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_HeaderButtonActive_C, HoverAnimation, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_HeaderButtonActive_C, Button_This, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_HeaderButtonActive_C, TextBlock_2, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_HeaderButtonActive_C, Text, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_HeaderButtonActive_C, AutoSize, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_HeaderButtonActive_C, bUpperCase, 0x0291);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_HeaderButtonActive_C, UnknownData_6O9W, 0x0292);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_HeaderButtonActive_C, Size, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_HeaderButtonActive_C, UnknownData_F1PO, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_HeaderButtonActive_C, OnClicked, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_HeaderButtonActive_C, FontSize, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_HeaderButtonActive_C, UnHoverAlpha, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_HeaderButtonActive_C, HoverAlpha, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_HeaderButtonActive_C, UnknownData_6CE0, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_HeaderButtonActive_C, Style, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_HeaderButtonActive_C, TextTransfom, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_HeaderButtonActive_C, TextJustify, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_HeaderButtonActive_C, UnknownData_PQ7N, 0x0541);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_HeaderButtonActive_C, Font, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_HeaderButtonActive_C, OnActive, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_HeaderButtonActive_C, bIsActive, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_HeaderButtonActive_C, UnknownData_TKBX, 0x05A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_HeaderButtonActive_C, ActiveAlpha, 0x05AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_HeaderButtonActive_C, HorizontalAlignment, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_HeaderButtonActive_C, VerticalAlignment, 0x05B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_HeaderButtonActive_C, UnknownData_VQZ3, 0x05B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_HeaderButtonActive_C, TextPadding, 0x05B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_HeaderButtonActive_C, TextShadow, 0x05C4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_HeaderButtonActive_C, 0x05D4);
		}

		// class ALD_Skin_SeGuard_C_Khaki_C : public ALD_Skin_SeGuard_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_SeGuard_C_Khaki__LD_Skin_SeGuard_C_Khaki_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_SeGuard_C_Khaki_C, 0x0532);
		}

		// class ALootDropTarget_C : public ATargetPoint
		TEST_METHOD(BlueprintGeneratedClass__LootDropTarget__LootDropTarget_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALootDropTarget_C, 0x0338);
		}

		// class UWidget_LootboxOpen_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_LootboxOpen__Widget_LootboxOpen_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxOpen_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxOpen_C, OnHover, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxOpen_C, Button_1, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxOpen_C, Fire, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxOpen_C, Image_1, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxOpen_C, ProgressBar, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxOpen_C, TextBlock_Amount, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxOpen_C, Widget_Text_Lootbox, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxOpen_C, Widget_Text_Remaining, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxOpen_C, OnPressed, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxOpen_C, OnReleased, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_LootboxOpen_C, 0x02B0);
		}

		// class ABP_Candle_C : public AStaticMeshActor
		TEST_METHOD(BlueprintGeneratedClass__BP_Candle__BP_Candle_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Candle_C, MaterialBillboard, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Candle_C, Candles, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Candle_C, SelectCandle, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Candle_C, IsOpenLight_, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Candle_C, UnknownData_KL78, 0x0365);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Candle_C, LightLocation, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Candle_C, 0x0378);
		}

		// class ALD_Skin_Vanz_B_USA_C : public ALD_Skin_Vanz_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Vanz_B_USA__LD_Skin_Vanz_B_USA_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Vanz_B_USA_C, 0x0532);
		}

		// class AHSURLobbyHUD_C : public AHUD
		TEST_METHOD(BlueprintGeneratedClass__HSURLobbyHUD__HSURLobbyHUD_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURLobbyHUD_C, UberGraphFrame, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURLobbyHUD_C, DefaultSceneRoot, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURLobbyHUD_C, PlayerInfoWidgetMap, 0x0440);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHSURLobbyHUD_C, 0x0490);
		}

		// class ULightNoise_C : public USceneComponent
		TEST_METHOD(BlueprintGeneratedClass__LightNoise__LightNoise_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightNoise_C, UnknownData_K9PN, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightNoise_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightNoise_C, NoiseCurve, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightNoise_C, StaticNoiseSpeed, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightNoise_C, StaticMin, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightNoise_C, StaticMax, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightNoise_C, Seed, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightNoise_C, StartNoiseSpeedCurveTime, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightNoise_C, AccTime, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightNoise_C, Owner, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightNoise_C, NoiseSound, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightNoise_C, CachedIntensity, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightNoise_C, UnknownData_0BXU, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightNoise_C, SoundAttenuation, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightNoise_C, VolumeMultiplier, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightNoise_C, PitchMultiplier, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightNoise_C, NoiseSoundComponent, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightNoise_C, SoundMin, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightNoise_C, SoundMax, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightNoise_C, IntensityMultiplierCurve, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightNoise_C, StartIntensityCurveTime, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightNoise_C, CurrentLightIntensityMultiplier, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightNoise_C, CurrentLightNoiseMultiplier, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightNoise_C, IsPlayingSound, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightNoise_C, IsOn, 0x02DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightNoise_C, IsComponentOwner, 0x02DE);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightNoise_C, UnknownData_OELM, 0x02DF);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightNoise_C, ComponentOwner, 0x02E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightNoise_C, 0x02E8);
		}

		// class UWidget_Button_LobbySwitchRole_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_Button_LobbySwitchRole__Widget_Button_LobbySwitchRole_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_LobbySwitchRole_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_LobbySwitchRole_C, Close, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_LobbySwitchRole_C, Open, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_LobbySwitchRole_C, Widget_Button_Switchrole, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_LobbySwitchRole_C, Widget_RoleSelector, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_LobbySwitchRole_C, OnClickedToHunter, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_LobbySwitchRole_C, UnHoverAlpha, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_LobbySwitchRole_C, HoverAlpha, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_LobbySwitchRole_C, bIsOpen, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_LobbySwitchRole_C, UnknownData_7QMS, 0x0289);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_LobbySwitchRole_C, OnClickedToSurvivor, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_LobbySwitchRole_C, OnClickedToSpectator, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_Button_LobbySwitchRole_C, 0x02B0);
		}

		// class UGE_Hunter_SpecterStartGameCooldown_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Hunter_SpecterStartGameCooldown__GE_Hunter_SpecterStartGameCooldown_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Hunter_SpecterStartGameCooldown_C, 0x05F8);
		}

		// class UGameplayTasksComponent : public UActorComponent
		TEST_METHOD(Class__GameplayTasks__GameplayTasksComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, UnknownData_X574, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, UnknownData_RGE9, 0x010D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, SimulatedTasks, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, TaskPriorityQueue, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, UnknownData_EGX0, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, TickingTasks, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, KnownTasks, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, OnClaimedResourcesChange, 0x0160);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTasksComponent, 0x0170);
		}

		// class UGameplayTask : public UObject
		TEST_METHOD(Class__GameplayTasks__GameplayTask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, UnknownData_FMG7, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, InstanceName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, UnknownData_KGLS, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, ResourceOverlapPolicy, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, UnknownData_MKP9, 0x0043);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, ChildTask, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, UnknownData_JR7B, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTask, 0x0080);
		}

		// class UGameplayTask_ClaimResource : public UGameplayTask
		TEST_METHOD(Class__GameplayTasks__GameplayTask_ClaimResource)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTask_ClaimResource, 0x0080);
		}

		// class UGameplayTask_SpawnActor : public UGameplayTask
		TEST_METHOD(Class__GameplayTasks__GameplayTask_SpawnActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_SpawnActor, Success, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_SpawnActor, DidNotSpawn, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_SpawnActor, UnknownData_91Y4, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_SpawnActor, ClassToSpawn, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTask_SpawnActor, 0x00C0);
		}

		// class UUMG_IngamePlayerInfo_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UMG_IngamePlayerInfo__UMG_IngamePlayerInfo_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMG_IngamePlayerInfo_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMG_IngamePlayerInfo_C, IMG_Character, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMG_IngamePlayerInfo_C, Name, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMG_IngamePlayerInfo_C, PerkIcon_1, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMG_IngamePlayerInfo_C, PerkIcon_2, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMG_IngamePlayerInfo_C, Ping, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMG_IngamePlayerInfo_C, TotalScore, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMG_IngamePlayerInfo_C, PlayerState, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMG_IngamePlayerInfo_C, IsHunter, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMG_IngamePlayerInfo_C, UnknownData_YGUB, 0x0289);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMG_IngamePlayerInfo_C, OwnerInfo, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMG_IngamePlayerInfo_C, 0x03A0);
		}

		// class UGameplayTask_TimeLimitedExecution : public UGameplayTask
		TEST_METHOD(Class__GameplayTasks__GameplayTask_TimeLimitedExecution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_TimeLimitedExecution, OnFinished, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_TimeLimitedExecution, OnTimeExpired, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_TimeLimitedExecution, UnknownData_36GJ, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTask_TimeLimitedExecution, 0x00B0);
		}

		// class UGameplayTask_WaitDelay : public UGameplayTask
		TEST_METHOD(Class__GameplayTasks__GameplayTask_WaitDelay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_WaitDelay, OnFinish, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_WaitDelay, UnknownData_X9Z0, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTask_WaitDelay, 0x0098);
		}

		// class UEyeTrackerFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__EyeTracker__EyeTrackerFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEyeTrackerFunctionLibrary, 0x0030);
		}

		// class UGameplayTaskOwnerInterface : public UInterface
		TEST_METHOD(Class__GameplayTasks__GameplayTaskOwnerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTaskOwnerInterface, 0x0030);
		}

		// class UGameplayTaskResource : public UObject
		TEST_METHOD(Class__GameplayTasks__GameplayTaskResource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTaskResource, ManualResourceID, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTaskResource, AutoResourceID, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTaskResource, UnknownData_BP6L, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTaskResource, UnknownData_4WTB, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTaskResource, 0x0040);
		}

		// class UOverlays : public UObject
		TEST_METHOD(Class__Overlay__Overlays)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOverlays, 0x0030);
		}

		// class UBasicOverlays : public UOverlays
		TEST_METHOD(Class__Overlay__BasicOverlays)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasicOverlays, Overlays, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBasicOverlays, 0x0040);
		}

		// class ULocalizedOverlays : public UOverlays
		TEST_METHOD(Class__Overlay__LocalizedOverlays)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalizedOverlays, DefaultOverlays, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalizedOverlays, LocaleToOverlaysMap, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalizedOverlays, 0x0088);
		}

		// class UWidget_StoreList_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_StoreList__Widget_StoreList_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreList_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreList_C, Image_103, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreList_C, Line_Down, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreList_C, Line_Up, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreList_C, ListPanel, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreList_C, Widget_Header_CrystalStore, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreList_C, Widget_Header_DirectStore, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreList_C, Widget_Header_Discount, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreList_C, Widget_Header_Features, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreList_C, Widget_Header_TokenStore, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreList_C, PlayerInfo, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreList_C, OnClickDiscount, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreList_C, OnClickCrystal, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreList_C, OnClickToken, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreList_C, OnClickDirectStore, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreList_C, OnClickFeatures, 0x03E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_StoreList_C, 0x03F8);
		}

		// class UControlRig : public UObject
		TEST_METHOD(Class__ControlRig__ControlRig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlRig, UnknownData_A9T7, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlRig, ExecutionType, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlRig, UnknownData_HOGS, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlRig, Hierarchy, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlRig, Operators, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlRig, UnknownData_LO7Y, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UControlRig, 0x0158);
		}

		// class UControlRigBindingTrack : public UMovieSceneSpawnTrack
		TEST_METHOD(Class__ControlRig__ControlRigBindingTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UControlRigBindingTrack, 0x0080);
		}

		// class UControlRigBlueprintGeneratedClass : public UBlueprintGeneratedClass
		TEST_METHOD(Class__ControlRig__ControlRigBlueprintGeneratedClass)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UControlRigBlueprintGeneratedClass, 0x0300);
		}

		// class UControlRigComponent : public UActorComponent
		TEST_METHOD(Class__ControlRig__ControlRigComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlRigComponent, OnPreInitializeDelegate, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlRigComponent, OnPostInitializeDelegate, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlRigComponent, OnPreEvaluateDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlRigComponent, OnPostEvaluateDelegate, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlRigComponent, ControlRig, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UControlRigComponent, 0x0148);
		}

		// class AControlRigControl : public AActor
		TEST_METHOD(Class__ControlRig__ControlRigControl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AControlRigControl, PropertyPath, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AControlRigControl, UnknownData_8C9R, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AControlRigControl, Transform, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AControlRigControl, UnknownData_SSTD, 0x0381);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AControlRigControl, 0x0388);
		}

		// class UControlRigLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__ControlRig__ControlRigLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UControlRigLibrary, 0x0030);
		}

		// class UControlRigObjectHolder : public UObject
		TEST_METHOD(Class__ControlRig__ControlRigObjectHolder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlRigObjectHolder, Objects, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UControlRigObjectHolder, 0x0040);
		}

		// class UControlRigSequence : public ULevelSequence
		TEST_METHOD(Class__ControlRig__ControlRigSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlRigSequence, LastExportedToAnimationSequence, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlRigSequence, LastExportedUsingSkeletalMesh, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlRigSequence, LastExportedFrameRate, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlRigSequence, UnknownData_230A, 0x04F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UControlRigSequence, 0x04F8);
		}

		// class UControlRigSequencerAnimInstance : public UAnimSequencerInstance
		TEST_METHOD(Class__ControlRig__ControlRigSequencerAnimInstance)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UControlRigSequencerAnimInstance, 0x0270);
		}

		// class AControlRigStaticMeshControl : public AControlRigControl
		TEST_METHOD(Class__ControlRig__ControlRigStaticMeshControl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AControlRigStaticMeshControl, Scene, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AControlRigStaticMeshControl, Mesh, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AControlRigStaticMeshControl, UnknownData_TBTK, 0x0398);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AControlRigStaticMeshControl, 0x03A0);
		}

		// class UMovieSceneControlRigSection : public UMovieSceneSubSection
		TEST_METHOD(Class__ControlRig__MovieSceneControlRigSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneControlRigSection, bAdditive, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneControlRigSection, bApplyBoneFilter, 0x0159);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneControlRigSection, UnknownData_6GYE, 0x015A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneControlRigSection, BoneFilter, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneControlRigSection, Weight, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneControlRigSection, 0x0210);
		}

		// class UMovieSceneControlRigTrack : public UMovieSceneSubTrack
		TEST_METHOD(Class__ControlRig__MovieSceneControlRigTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneControlRigTrack, 0x0070);
		}

		// class APrisonerHunter_C : public AHunterBase_C
		TEST_METHOD(BlueprintGeneratedClass__PrisonerHunter__PrisonerHunter_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerHunter_C, UnknownData_0OT0, 0x0E1C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerHunter_C, UberGraphFrame, 0x0E20);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerHunter_C, A_BelleIdle01_EN_Cue, 0x0E30);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerHunter_C, A_Belle_Cutter_SlidingLoop_Cue, 0x0E38);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerHunter_C, Box, 0x0E40);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerHunter_C, MoveSurviveTimeline_Curve_3DC717A94AE7BDCDEAE3C1902D6A3CC6, 0x0E48);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerHunter_C, MoveSurviveTimeline_Alpha_3DC717A94AE7BDCDEAE3C1902D6A3CC6, 0x0E4C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerHunter_C, MoveSurviveTimeline__Direction_3DC717A94AE7BDCDEAE3C1902D6A3CC6, 0x0E50);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerHunter_C, UnknownData_1YPS, 0x0E51);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerHunter_C, MoveSurviveTimeline, 0x0E58);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerHunter_C, Attacking, 0x0E60);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerHunter_C, CrossHairLenght, 0x0E70);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerHunter_C, UnknownData_ZWMS, 0x0E74);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerHunter_C, CacheSurvive, 0x0E78);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerHunter_C, CacheStartHook, 0x0E80);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerHunter_C, CacheEndHook, 0x0E8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrisonerHunter_C, HookTargetLocation, 0x0E98);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrisonerHunter_C, 0x0EA4);
		}

		// class ANewMainMenu_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__NewMainMenu__NewMainMenu_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANewMainMenu_C, UberGraphFrame, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANewMainMenu_C, PlayerController, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANewMainMenu_C, SceneLoaded, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANewMainMenu_C, UnknownData_NYLH, 0x0359);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANewMainMenu_C, WidgetManager_2_ExecuteUbergraph_NewMainMenu_RefProperty, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANewMainMenu_C, 0x0368);
		}

		// class UGA_ImmuneHunterBelle_C : public UGA_ImmuneHunterBase_C
		TEST_METHOD(BlueprintGeneratedClass__GA_ImmuneHunterBelle__GA_ImmuneHunterBelle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_ImmuneHunterBelle_C, 0x0490);
		}

		// class UHSHCheatManager_C : public UHSHCheatManagerNative
		TEST_METHOD(BlueprintGeneratedClass__HSHCheatManager__HSHCheatManager_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHSHCheatManager_C, 0x0080);
		}

		// class UVaRestJsonObject : public UObject
		TEST_METHOD(Class__VaRestPlugin__VaRestJsonObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestJsonObject, UnknownData_YV54, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVaRestJsonObject, 0x0040);
		}

		// class UVaRestJsonValue : public UObject
		TEST_METHOD(Class__VaRestPlugin__VaRestJsonValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestJsonValue, UnknownData_O8FB, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVaRestJsonValue, 0x0040);
		}

		// class UVaRestLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__VaRestPlugin__VaRestLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVaRestLibrary, 0x0030);
		}

		// class UVaRestRequestJSON : public UObject
		TEST_METHOD(Class__VaRestPlugin__VaRestRequestJSON)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestRequestJSON, OnRequestComplete, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestRequestJSON, OnRequestFail, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestRequestJSON, UnknownData_2ZKT, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestRequestJSON, ResponseSize, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestRequestJSON, UnknownData_VD92, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestRequestJSON, ResponseContent, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestRequestJSON, bIsValidJsonResponse, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestRequestJSON, UnknownData_OGSR, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestRequestJSON, RequestJsonObj, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestRequestJSON, UnknownData_DS6V, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestRequestJSON, ResponseJsonObj, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestRequestJSON, UnknownData_4KSO, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVaRestRequestJSON, 0x01C8);
		}

		// class UVaRestSettings : public UObject
		TEST_METHOD(Class__VaRestPlugin__VaRestSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestSettings, bExtendedLog, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestSettings, UnknownData_3MY8, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVaRestSettings, 0x0038);
		}

		// class UGE_Debuff_SpecterExitSlow_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Debuff_SpecterExitSlow__GE_Debuff_SpecterExitSlow_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Debuff_SpecterExitSlow_C, 0x05F8);
		}

		// class UIWidgetAnimation_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__IWidgetAnimation__IWidgetAnimation_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIWidgetAnimation_C, 0x0030);
		}

		// class UMaterialExpressionSpriteTextureSampler : public UMaterialExpressionTextureSampleParameter2D
		TEST_METHOD(Class__Paper2D__MaterialExpressionSpriteTextureSampler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpriteTextureSampler, bSampleAdditionalTextures, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpriteTextureSampler, UnknownData_7O81, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpriteTextureSampler, AdditionalSlotIndex, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpriteTextureSampler, SlotDisplayName, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSpriteTextureSampler, 0x0128);
		}

		// class APaperCharacter : public ACharacter
		TEST_METHOD(Class__Paper2D__PaperCharacter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APaperCharacter, Sprite, 0x0748);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APaperCharacter, 0x0750);
		}

		// class UPaperFlipbook : public UObject
		TEST_METHOD(Class__Paper2D__PaperFlipbook)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbook, FramesPerSecond, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbook, UnknownData_BL91, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbook, KeyFrames, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbook, DefaultMaterial, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbook, CollisionSource, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbook, UnknownData_O64A, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperFlipbook, 0x0058);
		}

		// class APaperFlipbookActor : public AActor
		TEST_METHOD(Class__Paper2D__PaperFlipbookActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APaperFlipbookActor, RenderComponent, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APaperFlipbookActor, 0x0340);
		}

		// class UPaperFlipbookComponent : public UMeshComponent
		TEST_METHOD(Class__Paper2D__PaperFlipbookComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, SourceFlipbook, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, Material, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, PlayRate, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, UnknownData_I031, 0x05B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, AccumulatedTime, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, CachedFrameIndex, 0x05BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, SpriteColor, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, CachedBodySetup, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, OnFinishedPlaying, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, UnknownData_JQWU, 0x05E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperFlipbookComponent, 0x05F0);
		}

		// class AHead_Sur_Hat00029_C : public AHeadActorBase_C
		TEST_METHOD(BlueprintGeneratedClass__Head_Sur_Hat00029__Head_Sur_Hat00029_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHead_Sur_Hat00029_C, StaticMesh, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHead_Sur_Hat00029_C, 0x0348);
		}

		// class APaperGroupedSpriteActor : public AActor
		TEST_METHOD(Class__Paper2D__PaperGroupedSpriteActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APaperGroupedSpriteActor, RenderComponent, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APaperGroupedSpriteActor, 0x0340);
		}

		// class UPaperGroupedSpriteComponent : public UMeshComponent
		TEST_METHOD(Class__Paper2D__PaperGroupedSpriteComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperGroupedSpriteComponent, InstanceMaterials, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperGroupedSpriteComponent, PerInstanceSpriteData, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperGroupedSpriteComponent, UnknownData_JHGZ, 0x05C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperGroupedSpriteComponent, 0x05D0);
		}

		// class UPaperRuntimeSettings : public UObject
		TEST_METHOD(Class__Paper2D__PaperRuntimeSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperRuntimeSettings, bEnableSpriteAtlasGroups, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperRuntimeSettings, bEnableTerrainSplineEditing, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperRuntimeSettings, bResizeSpriteDataToMatchTextures, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperRuntimeSettings, UnknownData_IQ9Z, 0x0033);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperRuntimeSettings, 0x0038);
		}

		// class UPaperSprite : public UObject
		TEST_METHOD(Class__Paper2D__PaperSprite)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, UnknownData_FVTV, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, SourceUV, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, SourceDimension, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, SourceTexture, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, AdditionalSourceTextures, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, BakedSourceUV, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, BakedSourceDimension, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, BakedSourceTexture, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, DefaultMaterial, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, AlternateMaterial, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, Sockets, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, SpriteCollisionDomain, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, UnknownData_3C49, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, PixelsPerUnrealUnit, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, BodySetup, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, AlternateMaterialSplitIndex, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, UnknownData_CLGK, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, BakedRenderData, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperSprite, 0x00C8);
		}

		// class APaperSpriteActor : public AActor
		TEST_METHOD(Class__Paper2D__PaperSpriteActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APaperSpriteActor, RenderComponent, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APaperSpriteActor, 0x0340);
		}

		// class UPaperSpriteAtlas : public UObject
		TEST_METHOD(Class__Paper2D__PaperSpriteAtlas)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperSpriteAtlas, 0x0030);
		}

		// class UPaperSpriteBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Paper2D__PaperSpriteBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperSpriteBlueprintLibrary, 0x0030);
		}

		// class UPaperSpriteComponent : public UMeshComponent
		TEST_METHOD(Class__Paper2D__PaperSpriteComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSpriteComponent, SourceSprite, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSpriteComponent, MaterialOverride, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSpriteComponent, SpriteColor, 0x05B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperSpriteComponent, 0x05C0);
		}

		// class APaperTerrainActor : public AActor
		TEST_METHOD(Class__Paper2D__PaperTerrainActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APaperTerrainActor, DummyRoot, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::APaperTerrainActor, SplineComponent, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::APaperTerrainActor, RenderComponent, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APaperTerrainActor, 0x0350);
		}

		// class UPaperTerrainComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Paper2D__PaperTerrainComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, TerrainMaterial, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, bClosedSpline, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, bFilledSpline, 0x0581);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, UnknownData_3D1Q, 0x0582);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, AssociatedSpline, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, RandomSeed, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, SegmentOverlapAmount, 0x0594);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, TerrainColor, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, ReparamStepsPerSegment, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, SpriteCollisionDomain, 0x05AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, UnknownData_D9KE, 0x05AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, CollisionThickness, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, UnknownData_1CSQ, 0x05B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, CachedBodySetup, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, UnknownData_Q2C0, 0x05C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperTerrainComponent, 0x05D0);
		}

		// class UPaperTerrainMaterial : public UDataAsset
		TEST_METHOD(Class__Paper2D__PaperTerrainMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainMaterial, Rules, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainMaterial, InteriorFill, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperTerrainMaterial, 0x0050);
		}

		// class UPaperTerrainSplineComponent : public USplineComponent
		TEST_METHOD(Class__Paper2D__PaperTerrainSplineComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainSplineComponent, UnknownData_J23H, 0x0660);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperTerrainSplineComponent, 0x0670);
		}

		// class UPaperTileLayer : public UObject
		TEST_METHOD(Class__Paper2D__PaperTileLayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, LayerName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, LayerWidth, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, LayerHeight, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, UnknownData_JZ60, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, CollisionThicknessOverride, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, CollisionOffsetOverride, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, LayerColor, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, AllocatedWidth, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, AllocatedHeight, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, UnknownData_OSZ3, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, AllocatedCells, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, TileSet, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, AllocatedGrid, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperTileLayer, 0x00A0);
		}

		// class UPaperTileMap : public UObject
		TEST_METHOD(Class__Paper2D__PaperTileMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, MapWidth, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, MapHeight, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, TileWidth, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, TileHeight, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, PixelsPerUnrealUnit, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, SeparationPerTileX, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, SeparationPerTileY, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, SeparationPerLayer, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, SelectedTileSet, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, Material, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, TileLayers, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, CollisionThickness, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, SpriteCollisionDomain, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, ProjectionMode, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, UnknownData_YTGD, 0x0096);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, HexSideLength, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, UnknownData_DDEB, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, BodySetup, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, LayerNameIndex, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, UnknownData_9DTB, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperTileMap, 0x00B0);
		}

		// class APaperTileMapActor : public AActor
		TEST_METHOD(Class__Paper2D__PaperTileMapActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APaperTileMapActor, RenderComponent, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APaperTileMapActor, 0x0340);
		}

		// class UPaperTileMapComponent : public UMeshComponent
		TEST_METHOD(Class__Paper2D__PaperTileMapComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, MapWidth, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, MapHeight, 0x05A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, TileWidth, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, TileHeight, 0x05AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, DefaultLayerTileSet, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, Material, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, TileLayers, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, TileMapColor, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, UseSingleLayerIndex, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, bUseSingleLayer, 0x05E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, UnknownData_VMA3, 0x05E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, TileMap, 0x05E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperTileMapComponent, 0x05F0);
		}

		// class UPaperTileSet : public UObject
		TEST_METHOD(Class__Paper2D__PaperTileSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, TileSize, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, TileSheet, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, AdditionalSourceTextures, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, BorderMargin, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, PerTileSpacing, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, DrawingOffset, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, WidthInTiles, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, HeightInTiles, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, AllocatedWidth, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, AllocatedHeight, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, PerTileData, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, Terrains, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, TileWidth, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, TileHeight, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, Margin, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, Spacing, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperTileSet, 0x00B0);
		}

		// class UTileMapBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Paper2D__TileMapBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTileMapBlueprintLibrary, 0x0030);
		}

		// class UActorSequence : public UMovieSceneSequence
		TEST_METHOD(Class__ActorSequence__ActorSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequence, MovieScene, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequence, ObjectReferences, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorSequence, 0x0378);
		}

		// class UActorSequenceComponent : public UActorComponent
		TEST_METHOD(Class__ActorSequence__ActorSequenceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequenceComponent, PlaybackSettings, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequenceComponent, UnknownData_FSZY, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequenceComponent, Sequence, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequenceComponent, SequencePlayer, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorSequenceComponent, 0x0128);
		}

		// class UActorSequencePlayer : public UMovieSceneSequencePlayer
		TEST_METHOD(Class__ActorSequence__ActorSequencePlayer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorSequencePlayer, 0x07D0);
		}

		// class UConsoleSettings : public UObject
		TEST_METHOD(Class__EngineSettings__ConsoleSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, MaxScrollbackSize, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, UnknownData_EKV5, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, ManualAutoCompleteList, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, AutoCompleteMapPaths, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, BackgroundOpacityPercentage, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, bOrderTopToBottom, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, UnknownData_KU8I, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, InputColor, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, HistoryColor, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, AutoCompleteCommandColor, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, AutoCompleteCVarColor, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, AutoCompleteFadedColor, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, UnknownData_34JJ, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConsoleSettings, 0x0078);
		}

		// class UGameMapsSettings : public UObject
		TEST_METHOD(Class__EngineSettings__GameMapsSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, EditorStartupMap, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, LocalMapOptions, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, TransitionMap, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, bUseSplitscreen, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, TwoPlayerSplitscreenLayout, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, ThreePlayerSplitscreenLayout, 0x0072);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, FourPlayerSplitscreenLayout, 0x0073);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, bOffsetPlayerGamepadIds, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, UnknownData_CFAL, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GameInstanceClass, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GameDefaultMap, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, ServerDefaultMap, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GlobalDefaultGameMode, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GlobalDefaultServerGameMode, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GameModeMapPrefixes, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GameModeClassAliases, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameMapsSettings, 0x0110);
		}

		// class UGameNetworkManagerSettings : public UObject
		TEST_METHOD(Class__EngineSettings__GameNetworkManagerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, MinDynamicBandwidth, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, MaxDynamicBandwidth, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, TotalNetBandwidth, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, BadPingThreshold, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, UnknownData_1IZI, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, StandbyRxCheatTime, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, StandbyTxCheatTime, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, PercentMissingForRxStandby, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, PercentMissingForTxStandby, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, PercentForBadPing, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, JoinInProgressStandbyWaitTime, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, UnknownData_X2FY, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameNetworkManagerSettings, 0x0060);
		}

		// class UGameSessionSettings : public UObject
		TEST_METHOD(Class__EngineSettings__GameSessionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSessionSettings, MaxSpectators, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSessionSettings, MaxPlayers, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSessionSettings, UnknownData_KLTR, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameSessionSettings, 0x0040);
		}

		// class UGeneralEngineSettings : public UObject
		TEST_METHOD(Class__EngineSettings__GeneralEngineSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeneralEngineSettings, 0x0030);
		}

		// class UGeneralProjectSettings : public UObject
		TEST_METHOD(Class__EngineSettings__GeneralProjectSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, CompanyName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, CompanyDistinguishedName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, CopyrightNotice, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, Description, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, Homepage, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, LicensingTerms, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, PrivacyPolicy, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectID, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectName, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectVersion, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, SupportContact, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectDisplayedTitle, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectDebugTitleInfo, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bShouldWindowPreserveAspectRatio, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bUseBorderlessWindow, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bStartInVR, 0x0112);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bStartInAR, 0x0113);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bSupportAR, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bAllowWindowResize, 0x0115);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bAllowClose, 0x0116);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bAllowMaximize, 0x0117);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bAllowMinimize, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, UnknownData_A4OW, 0x0119);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeneralProjectSettings, 0x0120);
		}

		// class UHudSettings : public UObject
		TEST_METHOD(Class__EngineSettings__HudSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHudSettings, UnknownData_M2IG, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHudSettings, DebugDisplay, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHudSettings, 0x0048);
		}

		// class UTutorialSaveGame_C : public USaveGame
		TEST_METHOD(BlueprintGeneratedClass__TutorialSaveGame__TutorialSaveGame_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSaveGame_C, UberGraphFrame, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSaveGame_C, CurrentValue, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSaveGame_C, DefualtValue, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTutorialSaveGame_C, 0x0048);
		}

		// class USoundSimple : public USoundBase
		TEST_METHOD(Class__SoundUtilities__SoundSimple)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSimple, Variations, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSimple, SoundWave, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundSimple, 0x0118);
		}

		// class USoundUtilitiesBPFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__SoundUtilities__SoundUtilitiesBPFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundUtilitiesBPFunctionLibrary, 0x0030);
		}

		// class UBTTask_PickItem_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTTask_PickItem__BTTask_PickItem_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PickItem_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PickItem_C, TargetPointKey, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_PickItem_C, 0x00E0);
		}

		// class UGE_WeaponBelleLight_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_WeaponBelleLight__GE_WeaponBelleLight_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_WeaponBelleLight_C, 0x05F8);
		}

		// class UGE_Buff_Poltergeist_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Buff_Poltergeist__GE_Buff_Poltergeist_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Buff_Poltergeist_C, 0x05F8);
		}

		// class UCustomMeshComponent : public UMeshComponent
		TEST_METHOD(Class__CustomMeshComponent__CustomMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCustomMeshComponent, UnknownData_E5TS, 0x05A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCustomMeshComponent, 0x05B0);
		}

		// class ULootBoxPreviewManagerComponent_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__LootBoxPreviewManagerComponent__LootBoxPreviewManagerComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULootBoxPreviewManagerComponent_C, UberGraphFrame, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULootBoxPreviewManagerComponent_C, lootDropList, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULootBoxPreviewManagerComponent_C, ClassToSpawn, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULootBoxPreviewManagerComponent_C, 0x0128);
		}

		// class AProjectilePrayAttack_C : public AProjectileBase_C
		TEST_METHOD(BlueprintGeneratedClass__ProjectilePrayAttack__ProjectilePrayAttack_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectilePrayAttack_C, UnknownData_1FAO, 0x0425);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectilePrayAttack_C, UberGraphFrame, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectilePrayAttack_C, Timer, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectilePrayAttack_C, bDebug, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectilePrayAttack_C, UnknownData_KNNF, 0x0441);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectilePrayAttack_C, Radius_CheckDestroy, 0x0444);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AProjectilePrayAttack_C, 0x0448);
		}

		// class ATimSurvivor_C : public ASurvivorBase_C
		TEST_METHOD(BlueprintGeneratedClass__TimSurvivor__TimSurvivor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATimSurvivor_C, UberGraphFrame, 0x0F80);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATimSurvivor_C, Box, 0x0F90);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATimSurvivor_C, Attacking, 0x0F98);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATimSurvivor_C, 0x0FA8);
		}

		// class USurvivor_Male_AnimBP_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Survivor_Male_AnimBP__Survivor_Male_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, UnknownData_WVAO, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_Root_2DBF0F6340DA59AA0AA8C4B5BEB2802F, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_SaveCachedPose_D03152B7441591A95777328C1FEE3089, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_LayeredBoneBlend_A0D51D7D41A6ECAE762DD7A0345AE36A, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_BlendListByBool_1B17B6824245D8B090620286F4C8B1D4, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_LocalToComponentSpace_DE774A11440A94A10A1605B3C30568D4, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_ComponentToLocalSpace_6C31B5AB4F9027CE59225EABF49BBE35, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_ModifyBone_ACFB84CC4CC7370FD976379F0B9CFB2A, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, UnknownData_QDGR, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_TwoBoneIK_73DA3A334758D1409BB187BFDB843AC6, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_TwoBoneIK_4C8ADD6A4251032C5C8A5BA92CF5D69A, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_ModifyBone_AABC65784257623CCC539A9FA105ECEA, 0x09C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_ModifyBone_DF9BD796450BC42CD504B9BAA62D3A95, 0x0AC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_BlendListByBool_17EB1DD5400C280B16E765809E317984, 0x0BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_TransitionResult_A029FD754B40E582DFFA92987EBA5973, 0x0C70);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_TransitionResult_4364D2F9437D80A9CEE6519F0B7B0BB3, 0x0C98);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_TransitionResult_041F57874DD7495C66D4D4A94A640DF6, 0x0CC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_TransitionResult_32021F124FAC7D40FA69568BF3460489, 0x0CE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_TransitionResult_A788C8914454292968614CA592BBEF14, 0x0D10);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_SequencePlayer_3680CA50478211914540C18F3351A3F5, 0x0D38);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_StateResult_BCEE5AFB48D2AD40620AE1BF2A06718F, 0x0DB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_SequencePlayer_437544924B0785192AAAE6B3E05CE7E7, 0x0DD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_StateResult_7C227D7F447A3F4BB2F3E5873F5E4F95, 0x0E48);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_SequencePlayer_5797AB224B6D3CE261A0E0B0E2F56377, 0x0E68);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_StateResult_A2D0016A4955C1AC93A7EC85FD703CE2, 0x0EE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_SequencePlayer_E6EFD5EF46423E8125795AB64BC92811, 0x0F00);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_LayeredBoneBlend_BE53F15646608232EF5BB5AAECA4B045, 0x0F78);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_TransitionResult_19A9F77049B86ED5ED85F6AC11A3F12D, 0x1030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_TransitionResult_07DBB3084E940730D1EDF387849CB65C, 0x1058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_BlendListByBool_64C023C0401DFC28E811F2AB59DDC5AC, 0x1080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_BlendListByBool_6E264F834825A9F8A1098A9556E82592, 0x1120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_BlendListByBool_5E394E534181B7E7A09C74A2A058CF70, 0x11C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_BlendListByBool_F28425724DF5B68DCB07F496DE70D2ED, 0x1260);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_BlendSpacePlayer_E59335964A3E9A645A64EBA60BE9A528, 0x1300);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_BlendSpacePlayer_A711A4014F2661167712E4A962EF0808, 0x13E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_BlendSpacePlayer_799B4D2A40AD434FBDDCE0922A4D0489, 0x14C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_BlendSpacePlayer_FC8BEC1140877EDEAE8717A86DDA6707, 0x15A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_SequencePlayer_16D55C224F6E5BF6C5503DA38EC06497, 0x1680);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_SequencePlayer_B3A068D34DF8387E007BFC908D7F4E32, 0x16F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_BlendSpacePlayer_0E4117334DF7A994EE9641B1ED96798B, 0x1770);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_BlendListByBool_5237D27E44928761848FF4B86BF2CFF6, 0x1850);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_LayeredBoneBlend_D159158D41487F1793DA808263C57F28, 0x18F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_BlendSpacePlayer_0AB9CC0C42CA81BEC9FC64BF6F7FA0DD, 0x19A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_BlendListByBool_9B52F5B84E66AED8A1FF8BA9B18544BF, 0x1A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_LayeredBoneBlend_C210D8F14B9D9FC9C36186A0155D16B8, 0x1B28);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_BlendSpacePlayer_D25A952F4657EE178B5627AD38E25AB5, 0x1BE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_BlendListByBool_796F716B477B57AB1A7DE6B7C73C8EEB, 0x1CC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_BlendSpacePlayer_ABB9317A4E29F9E3C4ABAAB4D550C733, 0x1D60);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_BlendSpacePlayer_EF7EB08B428E72E42BABBB944FC9FD1C, 0x1E40);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_ApplyAdditive_BF63D7B947B023E3915C9FABEE5CB236, 0x1F20);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_StateResult_7DE12827486268393EE7D78BBE4DC1F5, 0x1FE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_TransitionResult_F827063D44F5C3C3335734896EC35883, 0x2008);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_TransitionResult_08B10CE6453A36687F3B1B87F5FAF24A, 0x2030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_TransitionResult_E9B48AD945133ED42EF6B189EF4A8DEE, 0x2058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_TransitionResult_1C7FEFAD4D901EC00E2ECDAA7AF0C38E, 0x2080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_StateResult_43FEED8240BD1022FB8979AD52AC67A4, 0x20A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_BlendListByBool_5F789033416E958D8F9AC7A9D3D3EB07, 0x20C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_SequencePlayer_25C84D9749E6ADD91FB6AB96F8F816A9, 0x2168);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_SequencePlayer_213B85DF4D56B9284BCC939D0BAD0CBE, 0x21E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_StateResult_B23DA69F4ACE881FF0B351B617D9919B, 0x2258);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_SequencePlayer_9BADEF904EA276174D2F56897970C02B, 0x2278);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_BlendListByBool_84CE6049452D605E3DD31C9A564CABE4, 0x22F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_SequencePlayer_D5B933F042313A814ED15280032D82D5, 0x2390);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_StateResult_BC1E82EB4666744F1142B4878F45E38D, 0x2408);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_StateMachine_64994CAF4DD1301E492F14BEB347A6E4, 0x2428);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_StateResult_296F15354E98D7A37F8291BAE8EC90B9, 0x24D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_StateMachine_7B4791DF48247A3B60B0A28B9C05C151, 0x24F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_StateResult_1665FCD844F8FC90F1886BB2357FAB06, 0x25A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_StateMachine_8449C44940A29F7D852F5D8323F9C63C, 0x25C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_BlendListByBool_40D07E264E4E01A162E95E8C035443D2, 0x2678);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_SaveCachedPose_E7D588004AD89D7F43D454812AA9587F, 0x2718);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_UseCachedPose_3692DD6F41507C247AB69C82ED07E42C, 0x27D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_UseCachedPose_03FA763848F54F23585168B55D7404E2, 0x27F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_UseCachedPose_A82049384C1ACD060E0956A7AD536225, 0x2820);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_SaveCachedPose_24413DEF4F703782472785B77A35C2F4, 0x2848);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_UseCachedPose_EFE36F374E95BBA05A118CB253942DE9, 0x2900);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_Slot_08D61DBD4FA7984B50174B913E8130BC, 0x2928);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_TwoBoneIK_AC57102C4BC1F29A0FA7D98BDABB41D5, 0x2970);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_TwoBoneIK_E6CA502448E07C07E13AFD903543F562, 0x2B50);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_UseCachedPose_C90D5AD04CD589DAF437D39F7D3069D8, 0x2D30);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_RotationOffsetBlendSpace_CC650866461558F0E425F4B08929F4A5, 0x2D58);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_Slot_714FB5554A3FD10D398A39ACF8F3376E, 0x2EE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_UseCachedPose_E1DCC12F484E2DC182E064BB4FE9FEED, 0x2F28);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_SaveCachedPose_9E71C90B40880734D3F01C915C153D56, 0x2F50);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_UseCachedPose_AC3DDB944BECA94679A71FBE030C997C, 0x3008);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_UseCachedPose_C3F69B614EC4D377D7431F9F1B4FC3F2, 0x3030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_ComponentToLocalSpace_A182A7CE480AAB3E28874A8D6EADF331, 0x3058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_LocalToComponentSpace_E04EE56B4AC73C36B7E841A081C1C406, 0x3078);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_UseCachedPose_CCC26E3442EEBFE2FA66169465018209, 0x3098);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_LayeredBoneBlend_3F926D5A4162FBEF1D33F39C1E50A98F, 0x30C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_SaveCachedPose_627F32DB4E2509EB71102D9BAF36A40D, 0x3178);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_UseCachedPose_3A2A0C7745C72E741137B29BC9CFDE07, 0x3230);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_BlendListByBool_59929E1A418A8A4ABA55BBA271C8F5BE, 0x3258);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_LayeredBoneBlend_C96C68014A8E9269162E39B0D3C0A69C, 0x32F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_UseCachedPose_140463E24FCD53D8D4433299E8FDE838, 0x33B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, AnimGraphNode_SequencePlayer_97E8773F4B572EA795B24EB55A9E77FF, 0x33D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, MoveForward, 0x3450);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, MoveRight, 0x3454);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, IsInAir, 0x3458);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, UnknownData_GI1J, 0x3459);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, Pitch, 0x345C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, Roll, 0x3460);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, Yaw, 0x3464);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, RotationLastTick, 0x3468);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, YawDelta, 0x3474);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, IsAccelerating, 0x3478);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, FullBody, 0x3479);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, IsCrouch, 0x347A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, IsKnockdown, 0x347B);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, IsInjured, 0x347C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, IsSearch, 0x347D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, UnknownData_AJA6, 0x347E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, Survivor_Ref, 0x3480);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, FootLeftJointLoc, 0x3488);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, FootRightJointLoc, 0x3494);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, IK_LeftFoot_Alpha, 0x34A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, IK_RightFoot_Alpha, 0x34A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, RightFootEffectorLoc, 0x34A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, LeftFootEffectorLoc, 0x34AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, IKAdjustOffset, 0x34B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, RightFootRotation, 0x34B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, LeftFootRotation, 0x34C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, IKTraceDistance, 0x34CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, IKFeetInterpSpeed, 0x34D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, DeltaSeconds, 0x34D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, HipsOffest, 0x34D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, IKHipsInterpSpeed, 0x34DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, IKCapsuleHalfHeight, 0x34E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, HandRightEffectorLoc, 0x34E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, HandLeftEffectorLoc, 0x34F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, IKLeftHand_Alpha, 0x34FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, IKRightHand_Alpha, 0x3500);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, bIsEnableIK, 0x3504);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, EnableRightHandIK, 0x3505);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, EnableLeftHandIK, 0x3506);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, IsGrab, 0x3507);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, bIKIgnore, 0x3508);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, bIsForceUpper, 0x3509);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, IKInteractType, 0x350A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, UnknownData_FV6M, 0x350B);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, SnapSocket, 0x350C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, bIsLookBack, 0x3514);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, UnknownData_GS6V, 0x3515);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, Speed, 0x3518);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Male_AnimBP_C, bIsCameraLock, 0x351C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USurvivor_Male_AnimBP_C, 0x351D);
		}

		// class UBloodSeekComponent_C : public UBloodSeekComponentNative
		TEST_METHOD(BlueprintGeneratedClass__BloodSeekComponent__BloodSeekComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodSeekComponent_C, UberGraphFrame, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodSeekComponent_C, Step, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodSeekComponent_C, StepTimeFrequency, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodSeekComponent_C, StepBloodSpeed, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodSeekComponent_C, BeforeTImeDecrease, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodSeekComponent_C, DecreaseRate, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodSeekComponent_C, UnknownData_S3IX, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodSeekComponent_C, TransparentActors, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodSeekComponent_C, TraceChannel, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodSeekComponent_C, UnknownData_AU6Q, 0x0179);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodSeekComponent_C, SeenAlpha, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodSeekComponent_C, EaseFunction, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodSeekComponent_C, UnknownData_016M, 0x0181);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodSeekComponent_C, BlendExp, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodSeekComponent_C, SpeedSeenAlpha, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodSeekComponent_C, BeforeTimeAlpha, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodSeekComponent_C, OwnerHunter, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodSeekComponent_C, AudioChaseCache, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodSeekComponent_C, BloodTrailActor, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodSeekComponent_C, TrailList, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodSeekComponent_C, SurvivorReceiveEyeBound, 0x01F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBloodSeekComponent_C, 0x01FC);
		}

		// class USD_ManagerComponent_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__SD_ManagerComponent__SD_ManagerComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USD_ManagerComponent_C, UberGraphFrame, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::USD_ManagerComponent_C, GameState, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::USD_ManagerComponent_C, bInSuddenDeathMode, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::USD_ManagerComponent_C, UnknownData_CBX6, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::USD_ManagerComponent_C, TimerOffset, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USD_ManagerComponent_C, bInitialize, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USD_ManagerComponent_C, bIsSuddenDeathActive, 0x0121);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USD_ManagerComponent_C, 0x0122);
		}

		// class UUMG_IngameInfo_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UMG_IngameInfo__UMG_IngameInfo_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMG_IngameInfo_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMG_IngameInfo_C, Begin, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMG_IngameInfo_C, BG, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMG_IngameInfo_C, Image_130, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMG_IngameInfo_C, Image_132, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMG_IngameInfo_C, Image_133, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMG_IngameInfo_C, Image_134, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMG_IngameInfo_C, Image_135, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMG_IngameInfo_C, Observerlist, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMG_IngameInfo_C, SpecterBG, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMG_IngameInfo_C, UMG_IngamePlayerInfo_C_2, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMG_IngameInfo_C, UMG_IngamePlayerInfo_C_3, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMG_IngameInfo_C, UMG_IngamePlayerInfo_C_4, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMG_IngameInfo_C, UMG_IngamePlayerInfo_C_5, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMG_IngameInfo_C, UMG_IngamePlayerInfo_Hunter, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMG_IngameInfo_C, hunter, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMG_IngameInfo_C, Survivors, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMG_IngameInfo_C, Observers, 0x02E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMG_IngameInfo_C, 0x02F0);
		}

		// class UGE_WeaponPrisonerHeavy_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_WeaponPrisonerHeavy__GE_WeaponPrisonerHeavy_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_WeaponPrisonerHeavy_C, 0x05F8);
		}

		// class ULootBoxManagerComponent_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__LootBoxManagerComponent__LootBoxManagerComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULootBoxManagerComponent_C, UberGraphFrame, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULootBoxManagerComponent_C, lootBoxType, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULootBoxManagerComponent_C, lootBoxPreviewManagerComponent_REF, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULootBoxManagerComponent_C, lootDropList, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULootBoxManagerComponent_C, OnReceiveLootBox, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULootBoxManagerComponent_C, OnOpenLootBoxFailed, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULootBoxManagerComponent_C, 0x0158);
		}

		// class UPerkHandleSurvivorComponent_C : public UPerkHandleComponent_C
		TEST_METHOD(BlueprintGeneratedClass__PerkHandleSurvivorComponent__PerkHandleSurvivorComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkHandleSurvivorComponent_C, UberGraphFrame, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkHandleSurvivorComponent_C, bIsCollect, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkHandleSurvivorComponent_C, UnknownData_SM9F, 0x01A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkHandleSurvivorComponent_C, CacheItem, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkHandleSurvivorComponent_C, TimerHandEmpty, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkHandleSurvivorComponent_C, UnknownData_NJKZ, 0x01DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkHandleSurvivorComponent_C, TimerLoopWeaknessPerk, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkHandleSurvivorComponent_C, TimerLoopSixSensePerk, 0x01E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPerkHandleSurvivorComponent_C, 0x01F0);
		}

		// class UPlayerSaveGame_C : public USaveGame
		TEST_METHOD(BlueprintGeneratedClass__PlayerSaveGame__PlayerSaveGame_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerSaveGame_C, S_PlayerInfo, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerSaveGame_C, 0x0140);
		}

		// class UWidget_TesterGuide_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_TesterGuide__Widget_TesterGuide_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TesterGuide_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TesterGuide_C, Begin, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TesterGuide_C, ContentSwitcher, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TesterGuide_C, Image_1, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TesterGuide_C, Image_3, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TesterGuide_C, Image_4, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TesterGuide_C, Image_5, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TesterGuide_C, Image_7, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TesterGuide_C, Image_8, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TesterGuide_C, Image_9, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TesterGuide_C, Image_10, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TesterGuide_C, Image_11, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TesterGuide_C, Image_12, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TesterGuide_C, Image_13, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TesterGuide_C, Image_14, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TesterGuide_C, Image_15, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TesterGuide_C, Image_16, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TesterGuide_C, Image_17, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TesterGuide_C, Image_19, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TesterGuide_C, Image_20, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TesterGuide_C, Image_21, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TesterGuide_C, Image_22, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TesterGuide_C, Image_69, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TesterGuide_C, Image_239, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TesterGuide_C, Image_408, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TesterGuide_C, MultiLineEditableTextBox_1, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TesterGuide_C, MultiLineEditableTextBox_2, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TesterGuide_C, MultiLineEditableTextBox_3, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TesterGuide_C, MultiLineEditableTextBox_4, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TesterGuide_C, MultiLineEditableTextBox_5, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TesterGuide_C, MultiLineEditableTextBox_6, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TesterGuide_C, MultiLineEditableTextBox_7, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TesterGuide_C, MultiLineEditableTextBox_8, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TesterGuide_C, MultiLineEditableTextBox_9, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TesterGuide_C, MultiLineEditableTextBox_10, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TesterGuide_C, MultiLineEditableTextBox_182, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TesterGuide_C, SwitchIndex, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TesterGuide_C, Widget_Button_Close, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TesterGuide_C, Widget_Button_Next, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_TesterGuide_C, Widget_Button_Previous, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_TesterGuide_C, 0x0388);
		}

		// class UWidget_ButtonWithIndex_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_ButtonWithIndex__Widget_ButtonWithIndex_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonWithIndex_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonWithIndex_C, Button_This, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonWithIndex_C, TextBlock_2, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonWithIndex_C, Text, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonWithIndex_C, AutoSize, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonWithIndex_C, bUpperCase, 0x0279);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonWithIndex_C, UnknownData_BKDM, 0x027A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonWithIndex_C, Size, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonWithIndex_C, UnknownData_3NHC, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonWithIndex_C, OnClicked, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonWithIndex_C, FontSize, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonWithIndex_C, UnHoverAlpha, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonWithIndex_C, HoverAlpha, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonWithIndex_C, Index, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonWithIndex_C, HorizontalAlimentText, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonWithIndex_C, VerticalAlimentText, 0x02A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonWithIndex_C, UnknownData_R5KP, 0x02AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonWithIndex_C, PaddingText, 0x02AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_ButtonWithIndex_C, 0x02BC);
		}

		// class UWidget_Button_LobbyPlayerRole_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_Button_LobbyPlayerRole__Widget_Button_LobbyPlayerRole_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_LobbyPlayerRole_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_LobbyPlayerRole_C, Button_This, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_LobbyPlayerRole_C, TextBlock_2, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_LobbyPlayerRole_C, Text, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_LobbyPlayerRole_C, AutoSize, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_LobbyPlayerRole_C, bUpperCase, 0x0279);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_LobbyPlayerRole_C, UnknownData_U737, 0x027A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_LobbyPlayerRole_C, Size, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_LobbyPlayerRole_C, UnknownData_UWH7, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_LobbyPlayerRole_C, OnClicked, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_LobbyPlayerRole_C, FontSize, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_LobbyPlayerRole_C, UnHoverAlpha, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_LobbyPlayerRole_C, HoverAlpha, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_LobbyPlayerRole_C, UnknownData_TQP7, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_LobbyPlayerRole_C, Style, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_LobbyPlayerRole_C, TextTransfom, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_LobbyPlayerRole_C, TextJustify, 0x0528);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_Button_LobbyPlayerRole_C, 0x0529);
		}

		// class ALD_Skin_Belle_D_Default_C : public ALD_Skin_Base_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Belle_D_Default__LD_Skin_Belle_D_Default_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Belle_D_Default_C, 0x0532);
		}

		// class UMatchMakingComponent_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__MatchMakingComponent__MatchMakingComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatchMakingComponent_C, UberGraphFrame, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatchMakingComponent_C, HSURGameInstance_REF, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatchMakingComponent_C, MatchId, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatchMakingComponent_C, ip, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatchMakingComponent_C, Port, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatchMakingComponent_C, IsFindingMatch, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatchMakingComponent_C, IsWaitingForMatch, 0x0149);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatchMakingComponent_C, UnknownData_A7CU, 0x014A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatchMakingComponent_C, MatchMakingCode, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatchMakingComponent_C, IsMatchFound, 0x0160);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMatchMakingComponent_C, 0x0161);
		}

		// class AEndgameCamera_C : public ACameraBase_C
		TEST_METHOD(BlueprintGeneratedClass__EndgameCamera__EndgameCamera_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AEndgameCamera_C, UberGraphFrame, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEndgameCamera_C, hunter, 0x03B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AEndgameCamera_C, 0x03C0);
		}

		// class UWidget_LootdropEquipLabel_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_LootdropEquipLabel__Widget_LootdropEquipLabel_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootdropEquipLabel_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootdropEquipLabel_C, Widget_Button, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootdropEquipLabel_C, OnEquip, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_LootdropEquipLabel_C, 0x0268);
		}

		// class UWidget_MainMenu_Quitgame_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_MainMenu_Quitgame__Widget_MainMenu_Quitgame_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenu_Quitgame_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenu_Quitgame_C, Background, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenu_Quitgame_C, Image_1, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenu_Quitgame_C, Widget_Button_NO, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenu_Quitgame_C, Widget_Button_YES, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenu_Quitgame_C, ButtonTextCache, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_MainMenu_Quitgame_C, 0x0280);
		}

		// class UBelle_AnimBP_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Belle_AnimBP__Belle_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_AnimBP_C, UnknownData_AUVB, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_AnimBP_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_AnimBP_C, AnimGraphNode_SaveCachedPose_C497F5674144B3B8FEFCDBBD0DD79C61, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_AnimBP_C, AnimGraphNode_UseCachedPose_2D31CF1F4A6A4F5732E76D9E78F22207, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_AnimBP_C, AnimGraphNode_BlendSpacePlayer_D2A43C944A728F54E9802AB1AC0B8E5A, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_AnimBP_C, AnimGraphNode_BlendListByBool_B479A0794239D157CE4CA5AA3ADCE210, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_AnimBP_C, AnimGraphNode_BlendSpacePlayer_D2DCFD4649B8F6E30234B98425FB3429, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_AnimBP_C, AnimGraphNode_StateResult_325FD20A4E47A1C86DFBE2A9D1459739, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_AnimBP_C, AnimGraphNode_StateMachine_3C194FC444681FCDC91B01A17310D209, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_AnimBP_C, AnimGraphNode_SaveCachedPose_9AC5ABB4495249A617C2FE8350524900, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_AnimBP_C, AnimGraphNode_SaveCachedPose_E7B91FBD42C81B96F627A5A5CB59BBC6, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_AnimBP_C, AnimGraphNode_LayeredBoneBlend_5961BA95499771152A3E60957BE8E3AC, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_AnimBP_C, AnimGraphNode_UseCachedPose_DEDC63E4403667232AF1B2A7D5E78048, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_AnimBP_C, AnimGraphNode_Slot_2F8C94194091228577BED8A73DEEFDF6, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_AnimBP_C, AnimGraphNode_TransitionResult_A20CF4024DA9EA9BCD2C07955BA27D31, 0x0928);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_AnimBP_C, AnimGraphNode_TransitionResult_569B50004642C0773B88BDB13F81B16E, 0x0950);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_AnimBP_C, AnimGraphNode_TransitionResult_DA25D5424B67FCCBBD8821AEF2AAD83C, 0x0978);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_AnimBP_C, AnimGraphNode_TransitionResult_653AC20D4540FEE499F445BCF1D0CE26, 0x09A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_AnimBP_C, AnimGraphNode_TransitionResult_0D1EB73245F417A4150D429780E01FC7, 0x09C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_AnimBP_C, AnimGraphNode_TransitionResult_D114ECFC45CD6C3879EFF684026BFDE0, 0x09F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_AnimBP_C, AnimGraphNode_TransitionResult_7BDB2E124475E8278F9230A557EF059E, 0x0A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_AnimBP_C, AnimGraphNode_SequencePlayer_891D6888419C91EE105C53A0E384B831, 0x0A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_AnimBP_C, AnimGraphNode_StateResult_60DD545C428E0784194E2E8677089C02, 0x0AB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_AnimBP_C, AnimGraphNode_SequencePlayer_206DAB7643AEFCF29DAEA79F4C39BADE, 0x0AD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_AnimBP_C, AnimGraphNode_UseCachedPose_E2D01BF245AE7572A716C881349918F5, 0x0B50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_AnimBP_C, AnimGraphNode_ApplyAdditive_5E6CD9824A64628254B670825ACEA91F, 0x0B78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_AnimBP_C, AnimGraphNode_StateResult_2B29F3D443DE6D72551940B4F5ED7736, 0x0C40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_AnimBP_C, AnimGraphNode_TransitionResult_D3B3856843239C29A0E6CC9C08CC193E, 0x0C60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_AnimBP_C, AnimGraphNode_TransitionResult_0620FD794784033543949DA9CF9ACA4C, 0x0C88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_AnimBP_C, AnimGraphNode_SequencePlayer_5CEA76E84498F5C1AFA8719363A72C5D, 0x0CB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_AnimBP_C, AnimGraphNode_UseCachedPose_8CCE5F204D1D206CCBAD6A867561FF09, 0x0D28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_AnimBP_C, AnimGraphNode_ApplyAdditive_92EAADC54E452AFF3BE7ABA9ED7389F4, 0x0D50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_AnimBP_C, AnimGraphNode_StateResult_9F5B05D3488148D6E7F50C834B0DADE6, 0x0E18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_AnimBP_C, AnimGraphNode_UseCachedPose_52668C914862A3C6B803479133377ECC, 0x0E38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_AnimBP_C, AnimGraphNode_ApplyAdditive_02F3824944010D5380BC76BFC6C8D4BF, 0x0E60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_AnimBP_C, AnimGraphNode_SequencePlayer_8F3F01D2473F4121BD4951982CA420D0, 0x0F28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_AnimBP_C, AnimGraphNode_StateResult_EEC3B1CA456CECD94E76F09E081A44A7, 0x0FA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_AnimBP_C, AnimGraphNode_UseCachedPose_B27D4FE647718AD1C30ABD97C2AB7BD0, 0x0FC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_AnimBP_C, AnimGraphNode_ApplyAdditive_45584E68482FA03642E3C2AA70782D20, 0x0FE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_AnimBP_C, AnimGraphNode_SequencePlayer_5801A8764CD91AD5B1FFBFA3E1D60D15, 0x10B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_AnimBP_C, AnimGraphNode_StateResult_02C0B7A4430FC55E9E9ADDBCB50C6078, 0x1128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_AnimBP_C, AnimGraphNode_StateMachine_07CCF1D24A0A699FDF2F35B325BF2B5C, 0x1148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_AnimBP_C, AnimGraphNode_StateResult_B90EAC364EFC7F252567C4B1A6EF4107, 0x11F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_AnimBP_C, AnimGraphNode_UseCachedPose_68576BB849A84B764B37A4A32DCF5DCD, 0x1218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_AnimBP_C, AnimGraphNode_StateResult_A48326864773B0613512C0A83ACF277C, 0x1240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_AnimBP_C, AnimGraphNode_StateMachine_C1DF78CA4FD2ABEA08A655A73C727D5F, 0x1260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_AnimBP_C, AnimGraphNode_Root_4B17CC674FE6AE64E35240A521575808, 0x1310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_AnimBP_C, AnimGraphNode_SaveCachedPose_F356147249F9261336EC9A957C9853C5, 0x1330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_AnimBP_C, AnimGraphNode_RotationOffsetBlendSpace_7EF5237B41FB38F7EDB2DB800C253EFF, 0x13E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_AnimBP_C, AnimGraphNode_UseCachedPose_6AA714614EB47A937124C29D338C5048, 0x1570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_AnimBP_C, AnimGraphNode_Slot_BA4332A3417603AAA7DA1F9E6F2EA0A7, 0x1598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_AnimBP_C, WalkForward, 0x15E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_AnimBP_C, WalkRight, 0x15E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_AnimBP_C, IsInAir, 0x15E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_AnimBP_C, UnknownData_W6ML, 0x15E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_AnimBP_C, Pitch, 0x15EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_AnimBP_C, Roll, 0x15F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_AnimBP_C, Yaw, 0x15F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_AnimBP_C, RotationLastTick, 0x15F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_AnimBP_C, YawDelta, 0x1604);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_AnimBP_C, IsAccelerating, 0x1608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_AnimBP_C, UnknownData_9WPV, 0x1609);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_AnimBP_C, Character, 0x1610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_AnimBP_C, IsAttacking, 0x1618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_AnimBP_C, UnknownData_5HUC, 0x1619);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_AnimBP_C, CurrentAttack, 0x161C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_AnimBP_C, FullBody, 0x1620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_AnimBP_C, Is_Atk_Hit, 0x1621);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_AnimBP_C, is_Die, 0x1622);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_AnimBP_C, UnknownData_AMSS, 0x1623);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_AnimBP_C, Hunter_Ref, 0x1628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_AnimBP_C, Speed, 0x1630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBelle_AnimBP_C, CameraMode, 0x1634);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBelle_AnimBP_C, 0x1638);
		}

		// class AChainSplineActor_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__ChainSplineActor__ChainSplineActor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AChainSplineActor_C, UberGraphFrame, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChainSplineActor_C, StaticMesh, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChainSplineActor_C, Sphere, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChainSplineActor_C, Spline, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChainSplineActor_C, Scene, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChainSplineActor_C, Timeline_0_1__Direction_57635F844F1A7895147BCE802452DA59, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChainSplineActor_C, UnknownData_JYCP, 0x0369);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChainSplineActor_C, Timeline_0_1, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChainSplineActor_C, NewMesh, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChainSplineActor_C, SplineMeshs, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChainSplineActor_C, Scale, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChainSplineActor_C, AnchorPoint, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChainSplineActor_C, Location, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChainSplineActor_C, UnknownData_8R86, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChainSplineActor_C, OnBeginOverlap, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChainSplineActor_C, OldLocation, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChainSplineActor_C, TargetPoint, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChainSplineActor_C, ForwardAxis, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChainSplineActor_C, UnknownData_8EWE, 0x03E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChainSplineActor_C, Duration, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChainSplineActor_C, Wait, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChainSplineActor_C, Current, 0x03EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChainSplineActor_C, hunter, 0x03F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AChainSplineActor_C, 0x03F8);
		}

		// class UNS_StapNailOnHead_C : public UAnimNotifyState
		TEST_METHOD(BlueprintGeneratedClass__NS_StapNailOnHead__NS_StapNailOnHead_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNS_StapNailOnHead_C, Tag, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNS_StapNailOnHead_C, 0x0040);
		}

		// class ABP_3DWidget_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BP_3DWidget__BP_3DWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_3DWidget_C, Widget, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_3DWidget_C, DefaultSceneRoot, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_3DWidget_C, 0x0348);
		}

		// class UBTDecorator_AllRitualDone_C : public UBTDecorator_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTDecorator_AllRitualDone__BTDecorator_AllRitualDone_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_AllRitualDone_C, 0x00A8);
		}

		// class UBTTask_TryOpenPortal_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTTask_TryOpenPortal__BTTask_TryOpenPortal_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_TryOpenPortal_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_TryOpenPortal_C, TargetPointKey, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_TryOpenPortal_C, Cache, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_TryOpenPortal_C, bCacheTaskExitPortal, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_TryOpenPortal_C, bFoundPortal, 0x00E9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_TryOpenPortal_C, 0x00EA);
		}

		// class UWidget_BuyLevel_Multi_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_BuyLevel_Multi__Widget_BuyLevel_Multi_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_BuyLevel_Multi_C, BG, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_BuyLevel_Multi_C, 0x0248);
		}

		// class ALootDropPreviewActor_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__LootDropPreviewActor__LootDropPreviewActor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALootDropPreviewActor_C, UberGraphFrame, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALootDropPreviewActor_C, DebugTextRender, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALootDropPreviewActor_C, Arrow, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALootDropPreviewActor_C, Box, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALootDropPreviewActor_C, Scene, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALootDropPreviewActor_C, LootDropData, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALootDropPreviewActor_C, CachePreview, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALootDropPreviewActor_C, AutoActivate, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALootDropPreviewActor_C, SpawnSkip, 0x03B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALootDropPreviewActor_C, 0x03BA);
		}

		// class UWidget_LootboxProduct_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_LootboxProduct__Widget_LootboxProduct_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxProduct_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxProduct_C, Image_3, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxProduct_C, Image_166, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxProduct_C, Image_168, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxProduct_C, Image_169, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxProduct_C, Image_171, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxProduct_C, Image_558, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxProduct_C, Image_BG, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxProduct_C, Image_Product, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxProduct_C, Text_Amount, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxProduct_C, Text_Owned, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxProduct_C, Text_Price, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxProduct_C, TextBlock_3, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxProduct_C, TextBlock_198, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxProduct_C, Widget_Button, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxProduct_C, Widget_Button_Decrease, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxProduct_C, Widget_Button_Increase, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxProduct_C, Amount, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxProduct_C, UnknownData_4KC2, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxProduct_C, ProductShortCode, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxProduct_C, OnPurchaseClick, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxProduct_C, Product, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxProduct_C, WidgetManager, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxProduct_C, Count, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxProduct_C, UnknownData_FZ3A, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LootboxProduct_C, MainMenuGameMode_REF, 0x03A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_LootboxProduct_C, 0x03B0);
		}

		// class UGE_WeaponPrayProjectile_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_WeaponPrayProjectile__GE_WeaponPrayProjectile_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_WeaponPrayProjectile_C, 0x05F8);
		}

		// class USurvivor_Lobby_ABP_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Survivor_Lobby_ABP__Survivor_Lobby_ABP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Lobby_ABP_C, UnknownData_A3CD, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Lobby_ABP_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Lobby_ABP_C, AnimGraphNode_Root_B053721C43E540D58CBA8482DEA106CC, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Lobby_ABP_C, AnimGraphNode_TransitionResult_C405EC8245F24BE1D88EB2947BCB305B, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Lobby_ABP_C, AnimGraphNode_TransitionResult_B723B46744DE734B904D94BB3449774E, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Lobby_ABP_C, AnimGraphNode_TransitionResult_5CA45B684FBAFB37F30AF4B5EFAC1E1A, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Lobby_ABP_C, AnimGraphNode_TransitionResult_020E82714EE2DD6D1BB370A00284E8C7, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Lobby_ABP_C, AnimGraphNode_TransitionResult_A3DA266C41833897732426BB3B1D88F3, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Lobby_ABP_C, AnimGraphNode_TransitionResult_B0C4490245DBDF5A202D0C8FB1D8D0E6, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Lobby_ABP_C, AnimGraphNode_TransitionResult_0B9641C644F8BE3D687BF988C04894C2, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Lobby_ABP_C, AnimGraphNode_SequencePlayer_6DE9A0C1406508ADBE0F95872A8EADC2, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Lobby_ABP_C, AnimGraphNode_StateResult_6409AF5643A9764DA5040AA0245EA662, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Lobby_ABP_C, AnimGraphNode_SequencePlayer_BBD51B7F44F1AAD38F4392B693DD5CFC, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Lobby_ABP_C, AnimGraphNode_StateResult_5AB7D433427176139E4461B8C75822B8, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Lobby_ABP_C, AnimGraphNode_StateMachine_86186DA1468C4F9A9961CC8A22693B1A, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Lobby_ABP_C, AnimGraphNode_StateResult_1E55934A4A8EC92A70E29FA51242AF91, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Lobby_ABP_C, AnimGraphNode_SequencePlayer_9F70A79B4E1FA5D669F17A91A14E83A4, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Lobby_ABP_C, AnimGraphNode_StateResult_3A93E4024AA7CFB01CC52388B283483F, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Lobby_ABP_C, AnimGraphNode_TransitionResult_7787E18C4E3E57A76B50699E8B4E0449, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Lobby_ABP_C, AnimGraphNode_TransitionResult_E490C55E4B7B28A3C75839BE00137695, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Lobby_ABP_C, AnimGraphNode_SequencePlayer_3CBDEE7F446CAC086F4DFF89B488C42F, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Lobby_ABP_C, AnimGraphNode_StateResult_49655CCC4718C4C580BE51A0B6ACEAD3, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Lobby_ABP_C, AnimGraphNode_SequencePlayer_4D6E3BC243F5D5A6DA4F3BAC07424010, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Lobby_ABP_C, AnimGraphNode_StateResult_53C918654E2A4826B412A882B0F7C12D, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Lobby_ABP_C, AnimGraphNode_StateMachine_01E804EC4F6EA9A7073BBAA8979D58DD, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Lobby_ABP_C, AnimGraphNode_StateResult_CFAB117F4032E6FAB4272EB0CC50F028, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Lobby_ABP_C, AnimGraphNode_SequencePlayer_8C0637B74E0E3DED24E53388E74AB932, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Lobby_ABP_C, AnimGraphNode_StateResult_42A0B82B4CFDAC5A53DAC68B5F8DE22F, 0x0918);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Lobby_ABP_C, AnimGraphNode_StateResult_86DBBB5B46A1AC2DB9B1598D7ED5B47A, 0x0938);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Lobby_ABP_C, AnimGraphNode_StateMachine_6150CC3C43D8AEE12BDDFAA59174FBD9, 0x0958);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Lobby_ABP_C, IsReady, 0x0A08);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Lobby_ABP_C, UnknownData_WG1U, 0x0A09);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Lobby_ABP_C, LobbyActor, 0x0A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Lobby_ABP_C, IsReadyDebug, 0x0A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivor_Lobby_ABP_C, ActState, 0x0A19);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USurvivor_Lobby_ABP_C, 0x0A1A);
		}

		// class UBTTask_FindRitual_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTTask_FindRitual__BTTask_FindRitual_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_FindRitual_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_FindRitual_C, TargetPointKey, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_FindRitual_C, TargetLocationKey, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_FindRitual_C, State, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_FindRitual_C, 0x010C);
		}

		// class AHSURLobbySpectator_C : public ASpectatorPawn
		TEST_METHOD(BlueprintGeneratedClass__HSURLobbySpectator__HSURLobbySpectator_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHSURLobbySpectator_C, 0x03C0);
		}

		// class UBTDecorator_IfCanInteract_C : public UBTDecorator_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTDecorator_IfCanInteract__BTDecorator_IfCanInteract_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_IfCanInteract_C, 0x00A8);
		}

		// class UWidget_Icon_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_Icon__Widget_Icon_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Icon_C, icon, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_Icon_C, 0x0248);
		}

		// class UGE_Debuff_RazorBlade_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Debuff_RazorBlade__GE_Debuff_RazorBlade_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Debuff_RazorBlade_C, 0x05F8);
		}

		// class AHSHPlayerStart_Hunter_C : public AHSHPlayerStart_C
		TEST_METHOD(BlueprintGeneratedClass__HSHPlayerStart_Hunter__HSHPlayerStart_Hunter_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHSHPlayerStart_Hunter_C, 0x0358);
		}

		// class UNS_Projectile_C : public UAnimNotifyState
		TEST_METHOD(BlueprintGeneratedClass__NS_Projectile__NS_Projectile_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNS_Projectile_C, Tag, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNS_Projectile_C, 0x0040);
		}

		// class UWidget_LDImage_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_LDImage__Widget_LDImage_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LDImage_C, Border, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LDImage_C, Image_Icon, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_LDImage_C, 0x0250);
		}

		// class UGE_PP_SurvivorSixthSense_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_PP_SurvivorSixthSense__GE_PP_SurvivorSixthSense_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_PP_SurvivorSixthSense_C, 0x05F8);
		}

		// class USequenceDirector_C : public ULevelSequenceDirector
		TEST_METHOD(BlueprintGeneratedClass__LS_BeginLootbox__SequenceDirector_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USequenceDirector_C, 0x0038);
		}

		// class ALD_Skin_Tim_D_Default_C : public ALD_Skin_Base_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Tim_D_Default__LD_Skin_Tim_D_Default_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Tim_D_Default_C, 0x0532);
		}

		// class ASuddenDeathEffect_C : public ARitualEffectBase_C
		TEST_METHOD(BlueprintGeneratedClass__SuddenDeathEffect__SuddenDeathEffect_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASuddenDeathEffect_C, UberGraphFrame, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASuddenDeathEffect_C, Timeline_0_IncScale_CB55BC2147E2EE1793B0568300AA1CEC, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASuddenDeathEffect_C, Timeline_0_FadeOutBlendWeight_CB55BC2147E2EE1793B0568300AA1CEC, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASuddenDeathEffect_C, Timeline_0__Direction_CB55BC2147E2EE1793B0568300AA1CEC, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASuddenDeathEffect_C, UnknownData_ZUPU, 0x0391);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASuddenDeathEffect_C, Timeline_1, 0x0398);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASuddenDeathEffect_C, 0x03A0);
		}

		// class AScanWeakDetectorEffect_C : public ARitualEffectBase_C
		TEST_METHOD(BlueprintGeneratedClass__ScanWeakDetectorEffect__ScanWeakDetectorEffect_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScanWeakDetectorEffect_C, UberGraphFrame, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScanWeakDetectorEffect_C, Timeline_0_IncScale_A6A9269C47839975513CE29FB8C4B984, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScanWeakDetectorEffect_C, Timeline_0_FadeOutBlendWeight_A6A9269C47839975513CE29FB8C4B984, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScanWeakDetectorEffect_C, Timeline_0__Direction_A6A9269C47839975513CE29FB8C4B984, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScanWeakDetectorEffect_C, UnknownData_0DXK, 0x0391);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScanWeakDetectorEffect_C, Timeline_1, 0x0398);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScanWeakDetectorEffect_C, 0x03A0);
		}

		// class UGE_StatusSurvivorLimitAttribute_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_StatusSurvivorLimitAttribute__GE_StatusSurvivorLimitAttribute_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_StatusSurvivorLimitAttribute_C, 0x05F8);
		}

		// class ABloodPortal_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BloodPortal__BloodPortal_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABloodPortal_C, UberGraphFrame, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABloodPortal_C, Audio, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABloodPortal_C, Decal, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABloodPortal_C, ParticleSystem, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABloodPortal_C, StaticMesh, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABloodPortal_C, Scene, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABloodPortal_C, Timeline_0_Alpha_65909A2F41ADD5343DAD5EBC06A55193, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABloodPortal_C, Timeline_0__Direction_65909A2F41ADD5343DAD5EBC06A55193, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABloodPortal_C, UnknownData_4X6D, 0x0375);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABloodPortal_C, Timeline_1, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABloodPortal_C, 0x0380);
		}

		// class AInteractionSigilScroll_C : public AInteractionBase_C
		TEST_METHOD(BlueprintGeneratedClass__InteractionSigilScroll__InteractionSigilScroll_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractionSigilScroll_C, UnknownData_WA20, 0x06C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractionSigilScroll_C, UberGraphFrame, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractionSigilScroll_C, Box, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractionSigilScroll_C, IndicatorCharacter, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractionSigilScroll_C, CacheIndicatorLocation, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractionSigilScroll_C, UnknownData_B6IK, 0x06FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractionSigilScroll_C, OnShowOutline, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractionSigilScroll_C, OnHideOutline, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractionSigilScroll_C, OnDestroyedByHunter, 0x0720);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInteractionSigilScroll_C, 0x0730);
		}

		// class AStatusActor_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__StatusActor__StatusActor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AStatusActor_C, UberGraphFrame, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStatusActor_C, Widget, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStatusActor_C, Scene, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStatusActor_C, Timeline_0_NewTrack_0_B57D34A14143A12219478F87C18B8D68, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStatusActor_C, Timeline_0__Direction_B57D34A14143A12219478F87C18B8D68, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStatusActor_C, UnknownData_PW49, 0x035D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStatusActor_C, Timeline_1, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStatusActor_C, Widget3D, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStatusActor_C, CurrentParticle, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStatusActor_C, CurrentTag, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStatusActor_C, ViewTarget, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStatusActor_C, CurrentSFX, 0x03A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AStatusActor_C, 0x03A8);
		}

		// class AHSURLobbyPawn_C : public APawn
		TEST_METHOD(BlueprintGeneratedClass__HSURLobbyPawn__HSURLobbyPawn_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURLobbyPawn_C, UberGraphFrame, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURLobbyPawn_C, Camera, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURLobbyPawn_C, DefaultSceneRoot, 0x03B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHSURLobbyPawn_C, 0x03B8);
		}

		// class ALD_3DWidgetBase_C : public ALD_Base_C
		TEST_METHOD(BlueprintGeneratedClass__LD_3DWidgetBase__LD_3DWidgetBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALD_3DWidgetBase_C, UnknownData_N7PL, 0x0501);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALD_3DWidgetBase_C, UberGraphFrame, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALD_3DWidgetBase_C, WidgetImage, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALD_3DWidgetBase_C, Timeline_0_Alpha_84CF046D465EEDCD70C41DB1908267F3, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALD_3DWidgetBase_C, Timeline_0__Direction_84CF046D465EEDCD70C41DB1908267F3, 0x0524);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALD_3DWidgetBase_C, UnknownData_ATZD, 0x0525);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALD_3DWidgetBase_C, Timeline_1, 0x0528);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_3DWidgetBase_C, 0x0530);
		}

		// class UWidget_LobbyPlayerInfo_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_LobbyPlayerInfo__Widget_LobbyPlayerInfo_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LobbyPlayerInfo_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LobbyPlayerInfo_C, OnReady, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LobbyPlayerInfo_C, Begin, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LobbyPlayerInfo_C, Image_1, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LobbyPlayerInfo_C, Image_Profile, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LobbyPlayerInfo_C, PlayerName, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LobbyPlayerInfo_C, ReadyStatus, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LobbyPlayerInfo_C, TextBlock_295, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LobbyPlayerInfo_C, VerticalBox_1, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LobbyPlayerInfo_C, ActorLocation, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LobbyPlayerInfo_C, UnknownData_5VU2, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LobbyPlayerInfo_C, ReadyImage, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LobbyPlayerInfo_C, UnreadyImage, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LobbyPlayerInfo_C, PlayerId, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LobbyPlayerInfo_C, UnknownData_DT30, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LobbyPlayerInfo_C, Name, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LobbyPlayerInfo_C, WidgetOffset, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LobbyPlayerInfo_C, bIsVisible, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LobbyPlayerInfo_C, UnknownData_NLE7, 0x02D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LobbyPlayerInfo_C, PlayerInfo, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_LobbyPlayerInfo_C, PlayerReady, 0x03E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_LobbyPlayerInfo_C, 0x03E9);
		}

		// class URandomSpawnItemsComponent_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__RandomSpawnItemsComponent__RandomSpawnItemsComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URandomSpawnItemsComponent_C, UberGraphFrame, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::URandomSpawnItemsComponent_C, LimitItemComponent, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::URandomSpawnItemsComponent_C, LimitSpawnPoint, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::URandomSpawnItemsComponent_C, UnknownData_AWVJ, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URandomSpawnItemsComponent_C, Items, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::URandomSpawnItemsComponent_C, ItemsUnique, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::URandomSpawnItemsComponent_C, CacheID, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::URandomSpawnItemsComponent_C, Counting, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::URandomSpawnItemsComponent_C, CountingFixed, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::URandomSpawnItemsComponent_C, CountingDefault, 0x0158);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URandomSpawnItemsComponent_C, 0x015C);
		}

		// class UGA_WeaponHunterBase_C : public UGA_WeaponBase_C
		TEST_METHOD(BlueprintGeneratedClass__GA_WeaponHunterBase__GA_WeaponHunterBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_WeaponHunterBase_C, UnknownData_3RWM, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_WeaponHunterBase_C, UberGraphFrame, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_WeaponHunterBase_C, DistanceAtkLight, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_WeaponHunterBase_C, DistanceAtkHeavy, 0x04D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_WeaponHunterBase_C, WidthAtkHeavy, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_WeaponHunterBase_C, WidthAtkLight, 0x04DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_WeaponHunterBase_C, 0x04E0);
		}

		// class UWidget_Button_Play_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_Button_Play__Widget_Button_Play_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_Play_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_Play_C, UnHoverAnimation, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_Play_C, HoverAnimation, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_Play_C, BG, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_Play_C, Button_This, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_Play_C, TextBlock_2, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_Play_C, Text_Ready, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_Play_C, Text_Unready, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_Play_C, AutoSize, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_Play_C, bUpperCase, 0x02A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_Play_C, UnknownData_1HCM, 0x02AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_Play_C, Size, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_Play_C, UnknownData_50YL, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_Play_C, OnClicked, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_Play_C, FontSize, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_Play_C, UnHoverAlpha, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_Play_C, HoverAlpha, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_Play_C, IsHover, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_Play_C, IsActive, 0x02D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_Play_C, bUseActiveButton, 0x02D6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_Play_C, IsReady, 0x02D7);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_Button_Play_C, 0x02D8);
		}

		// class UUMG_IngameDebugMode_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UMG_IngameDebugMode__UMG_IngameDebugMode_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMG_IngameDebugMode_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMG_IngameDebugMode_C, Widget_Button, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMG_IngameDebugMode_C, 0x0258);
		}

		// class UMathLibrary_C : public UBlueprintFunctionLibrary
		TEST_METHOD(BlueprintGeneratedClass__MathLibrary__MathLibrary_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMathLibrary_C, 0x0030);
		}

		// class UIngame_ProgressComponent_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Ingame_ProgressComponent__Ingame_ProgressComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_ProgressComponent_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_ProgressComponent_C, MissAnimation, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_ProgressComponent_C, CancleAnimation, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_ProgressComponent_C, EndAnimation, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_ProgressComponent_C, StartAnimation, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_ProgressComponent_C, BGGrow, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_ProgressComponent_C, ProgressBar_380, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_ProgressComponent_C, ProgressBar_Decrease, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_ProgressComponent_C, Percent, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_ProgressComponent_C, UnknownData_421L, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_ProgressComponent_C, MID_ProgressDecrease, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_ProgressComponent_C, MID_ProgressMain, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_ProgressComponent_C, LastPercent, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_ProgressComponent_C, Alpha, 0x02A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIngame_ProgressComponent_C, 0x02A8);
		}

		// class ASecretPortalTeamBase_C : public AInteractionBase_C
		TEST_METHOD(BlueprintGeneratedClass__SecretPortalTeamBase__SecretPortalTeamBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecretPortalTeamBase_C, UnknownData_Q7PR, 0x06C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecretPortalTeamBase_C, UberGraphFrame, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecretPortalTeamBase_C, ArrowSnapLocation, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecretPortalTeamBase_C, ArrowLookAt, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecretPortalTeamBase_C, ownerPortal, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecretPortalTeamBase_C, bPortalIsOpen, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecretPortalTeamBase_C, bPortalActive, 0x06F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecretPortalTeamBase_C, bPortalHavePlayerExit, 0x06FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecretPortalTeamBase_C, bAutoActive, 0x06FB);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecretPortalTeamBase_C, progressTime, 0x06FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecretPortalTeamBase_C, DecreaseProgressTimeInSD, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecretPortalTeamBase_C, bIsProgress_, 0x0704);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecretPortalTeamBase_C, bIsProgressFinish_, 0x0705);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecretPortalTeamBase_C, UnknownData_FUDS, 0x0706);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecretPortalTeamBase_C, MontageExit, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecretPortalTeamBase_C, OnExitPortal, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecretPortalTeamBase_C, OnExitPortalTutorial, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecretPortalTeamBase_C, OnOpenPortal, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecretPortalTeamBase_C, PlayerExitDisplayName, 0x0748);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASecretPortalTeamBase_C, 0x0758);
		}

		// class UGE_AttackMoveSpeed_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_AttackMoveSpeed__GE_AttackMoveSpeed_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_AttackMoveSpeed_C, 0x05F8);
		}

		// class AItemChest_Defualt_C : public AItemChest_C
		TEST_METHOD(BlueprintGeneratedClass__ItemChest_Defualt__ItemChest_Defualt_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AItemChest_Defualt_C, 0x07B8);
		}

		// class UIngame_IntroduceScene_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Ingame_IntroduceScene__Ingame_IntroduceScene_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_IntroduceScene_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_IntroduceScene_C, End, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_IntroduceScene_C, Begin, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_IntroduceScene_C, BG, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_IntroduceScene_C, TextTextBlock, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_IntroduceScene_C, MapName, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_IntroduceScene_C, OnAnimationEnd, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIngame_IntroduceScene_C, 0x0290);
		}

		// class UIOutlineInterection_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__IOutlineInterection__IOutlineInterection_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIOutlineInterection_C, 0x0030);
		}

		// class UNS_Belle_SpinWeapon_C : public UAnimNotifyState
		TEST_METHOD(BlueprintGeneratedClass__NS_Belle_SpinWeapon__NS_Belle_SpinWeapon_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNS_Belle_SpinWeapon_C, Tag, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNS_Belle_SpinWeapon_C, 0x0040);
		}

		// class USequenceDirector_C : public ULevelSequenceDirector
		TEST_METHOD(BlueprintGeneratedClass__LS_LootBoxTest__SequenceDirector_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USequenceDirector_C, 0x0038);
		}

		// class AHSHPlayerCameraManagerPC_C : public APlayerCameraManager
		TEST_METHOD(BlueprintGeneratedClass__HSHPlayerCameraManagerPC__HSHPlayerCameraManagerPC_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHSHPlayerCameraManagerPC_C, 0x2670);
		}

		// class UWidget_ButtonChoiceArrow_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_ButtonChoiceArrow__Widget_ButtonChoiceArrow_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoiceArrow_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoiceArrow_C, BG, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoiceArrow_C, Button_Backward, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoiceArrow_C, Button_Forward, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoiceArrow_C, Button_This, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoiceArrow_C, HorizontalBox_Choice, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoiceArrow_C, HorizontalBox_Test, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoiceArrow_C, TextBlock_2, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoiceArrow_C, TextBlock_Choice, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoiceArrow_C, Text, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoiceArrow_C, AutoSize, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoiceArrow_C, bUpperCase, 0x02A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoiceArrow_C, UnknownData_B0YJ, 0x02AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoiceArrow_C, Size, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoiceArrow_C, UnknownData_W25T, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoiceArrow_C, OnClicked, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoiceArrow_C, FontSize, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoiceArrow_C, UnknownData_ABE7, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoiceArrow_C, Choice, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoiceArrow_C, LeftOffset, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoiceArrow_C, Offsets_Choice, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoiceArrow_C, Active_Choice, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoiceArrow_C, Size_Choice, 0x02F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_ButtonChoiceArrow_C, 0x02F8);
		}

		// class UWidget_CustomizeList_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_CustomizeList__Widget_CustomizeList_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CustomizeList_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CustomizeList_C, Image_103, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CustomizeList_C, Line_Down, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CustomizeList_C, Line_Up, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CustomizeList_C, Widget_Header_Accessories, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CustomizeList_C, Widget_Header_Characters, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CustomizeList_C, Widget_Header_Emote, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CustomizeList_C, Widget_Header_Inventory, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CustomizeList_C, Widget_Header_Perk, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CustomizeList_C, Widget_Header_Skin, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CustomizeList_C, PlayerInfo, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CustomizeList_C, OnClickCharacters, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CustomizeList_C, OnClickPerk, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CustomizeList_C, OnClickEmoteVO, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CustomizeList_C, OnClickSkin, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CustomizeList_C, OnClickAcces, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CustomizeList_C, OnClickInventory, 0x03F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_CustomizeList_C, 0x0408);
		}

		// class UWidget_Hunter_Tutorial_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_Hunter_Tutorial__Widget_Hunter_Tutorial_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Hunter_Tutorial_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Hunter_Tutorial_C, BeginAnimation, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Hunter_Tutorial_C, BG, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Hunter_Tutorial_C, Effect, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Hunter_Tutorial_C, ForegroundBottom, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Hunter_Tutorial_C, ForegroundTop, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Hunter_Tutorial_C, Image_61, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Hunter_Tutorial_C, Image_127, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Hunter_Tutorial_C, Image_218, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Hunter_Tutorial_C, Img_Elim, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Hunter_Tutorial_C, Img_Protect, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Hunter_Tutorial_C, Widget_Text_Elim, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Hunter_Tutorial_C, Widget_Text_Mission, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Hunter_Tutorial_C, Widget_Text_Protect, 0x02B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_Hunter_Tutorial_C, 0x02B8);
		}

		// class UWidget_ControlSelect_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_ControlSelect__Widget_ControlSelect_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ControlSelect_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ControlSelect_C, BG, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ControlSelect_C, InputKeySelector_1, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ControlSelect_C, InputKeySelector_2, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ControlSelect_C, Widget_Text_Description, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ControlSelect_C, MyActionName, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ControlSelect_C, OnKeySelected_1, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ControlSelect_C, OnKeySelected_2, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ControlSelect_C, MyActionDisplayName, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_ControlSelect_C, 0x02B0);
		}

		// class ABP_MainMenuPawn_C : public APawn
		TEST_METHOD(BlueprintGeneratedClass__BP_MainMenuPawn__BP_MainMenuPawn_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MainMenuPawn_C, UberGraphFrame, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MainMenuPawn_C, Camera, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MainMenuPawn_C, DefaultSceneRoot, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MainMenuPawn_C, WidgetMainMenuManager, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MainMenuPawn_C, bLockKey, 0x03C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_MainMenuPawn_C, 0x03C1);
		}

		// class ARitualBase_C : public AInteractionBase_C
		TEST_METHOD(BlueprintGeneratedClass__RitualBase__RitualBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualBase_C, UnknownData_ZE79, 0x06C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualBase_C, UberGraphFrame, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualBase_C, SnapLocation2, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualBase_C, SnapLocation1, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualBase_C, InteractBox, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualBase_C, LookAtLocation, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualBase_C, SnapLocation, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualBase_C, Decal, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualBase_C, IsCeremonyComplete_, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualBase_C, UnknownData_CRUG, 0x0711);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualBase_C, ProgressPlaceTime, 0x0714);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualBase_C, ProgressRitualTime, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualBase_C, ProgressSpeed, 0x071C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualBase_C, bOnAutoCeremony, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualBase_C, UnknownData_V83F, 0x0721);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualBase_C, FinishCharacter, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualBase_C, PrimaryItemID, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualBase_C, SlateBrushNormalCantPlace, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualBase_C, SlateBrushHoverCantPlace, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualBase_C, SlateBrushNormalCeremony, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualBase_C, SlateBrushHoverCeremony, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualBase_C, GameState, 0x0960);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualBase_C, INDCantPlace, 0x0968);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualBase_C, INDCanPlace, 0x0970);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualBase_C, INDCeremony, 0x0978);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualBase_C, Character, 0x0980);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualBase_C, OnPlaceItem, 0x0988);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualBase_C, bIsShouldSnap, 0x0998);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualBase_C, bAutoCeremonyAfterPlace, 0x0999);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualBase_C, UnknownData_RRKU, 0x099A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualBase_C, InteractCharacter, 0x09A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualBase_C, bUseParentStopFinishProgress, 0x09B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualBase_C, UnknownData_2UG6, 0x09B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualBase_C, AutoCeremonySection, 0x09B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualBase_C, bPlayerInteract, 0x09BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualBase_C, UnknownData_OLSS, 0x09BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualBase_C, OnPerfromSuccess, 0x09C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualBase_C, bIsCanCeremony, 0x09D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualBase_C, UnknownData_3DRB, 0x09D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualBase_C, LocationSlotPlayerID, 0x09D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualBase_C, OnInteract, 0x0A28);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualBase_C, IsEnable, 0x0A38);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualBase_C, UnknownData_CY84, 0x0A39);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualBase_C, OnRepItemID, 0x0A40);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARitualBase_C, 0x0A50);
		}

		// class UBTTask_SurvivorSigil_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTTask_SurvivorSigil__BTTask_SurvivorSigil_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SurvivorSigil_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SurvivorSigil_C, AcceptanceRadius, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SurvivorSigil_C, Distance, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SurvivorSigil_C, CanPlace, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_SurvivorSigil_C, 0x00C1);
		}

		// class UBTTask_Interact_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTTask_Interact__BTTask_Interact_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Interact_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Interact_C, InteractClass, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Interact_C, InteractRadius, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Interact_C, CheckHavePlayerInteract, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Interact_C, RestartIfCantInteract, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Interact_C, UnknownData_51CZ, 0x00C6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Interact_C, CacheInteraction, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Interact_C, CacheUseProgress, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_Interact_C, 0x00D1);
		}

		// class UBTTask_StopMovement_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTTask_StopMovement__BTTask_StopMovement_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_StopMovement_C, UberGraphFrame, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_StopMovement_C, 0x00B8);
		}

		// class UWidget_MainMenu_LocalMatch_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_MainMenu_LocalMatch__Widget_MainMenu_LocalMatch_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenu_LocalMatch_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenu_LocalMatch_C, Image_92, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenu_LocalMatch_C, IPTextbox, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenu_LocalMatch_C, PortTextbox, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenu_LocalMatch_C, Widget_Button, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenu_LocalMatch_C, Widget_Button_Cancel, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenu_LocalMatch_C, Widget_Text, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainMenu_LocalMatch_C, OnCancel, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_MainMenu_LocalMatch_C, 0x0290);
		}

		// class AVentilatorManager_C : public AVentilatorManagerNative
		TEST_METHOD(BlueprintGeneratedClass__VentilatorManager__VentilatorManager_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AVentilatorManager_C, UberGraphFrame, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVentilatorManager_C, Billboard, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVentilatorManager_C, Scene, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVentilatorManager_C, Ventilator, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVentilatorManager_C, CacheIndexLifting, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVentilatorManager_C, Survivors, 0x0398);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVentilatorManager_C, 0x03A8);
		}

		// class UBTTask_CheckExecution_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTTask_CheckExecution__BTTask_CheckExecution_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_CheckExecution_C, UberGraphFrame, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_CheckExecution_C, 0x00B8);
		}

		// class UBTDecorator_IfHaveChest_C : public UBTDecorator_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTDecorator_IfHaveChest__BTDecorator_IfHaveChest_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IfHaveChest_C, TargetPointKey, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IfHaveChest_C, TargetLocationKey, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IfHaveChest_C, ObjectiveChance, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IfHaveChest_C, OnlyRedChest, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IfHaveChest_C, UnknownData_YT38, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IfHaveChest_C, Cache, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_IfHaveChest_C, 0x0110);
		}

		// class UBTTask_PlaceItem_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTTask_PlaceItem__BTTask_PlaceItem_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlaceItem_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlaceItem_C, TargetPointKey, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlaceItem_C, Cache, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_PlaceItem_C, 0x00E8);
		}

		// class UGE_StatusHunterPray_C : public UGE_StatusHunterBase_C
		TEST_METHOD(BlueprintGeneratedClass__GE_StatusHunterPray__GE_StatusHunterPray_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_StatusHunterPray_C, 0x05F8);
		}

		// class UGE_StatusHunterHrk_C : public UGE_StatusHunterBase_C
		TEST_METHOD(BlueprintGeneratedClass__GE_StatusHunterHrk__GE_StatusHunterHrk_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_StatusHunterHrk_C, 0x05F8);
		}

		// class UPingManagerComponent_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__PingManagerComponent__PingManagerComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPingManagerComponent_C, UberGraphFrame, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPingManagerComponent_C, PlayerController, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPingManagerComponent_C, ActivePair, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPingManagerComponent_C, bInitialize, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPingManagerComponent_C, UnknownData_9I8W, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPingManagerComponent_C, CanCancelDegrees, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPingManagerComponent_C, bIsChange, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPingManagerComponent_C, UnknownData_Q7DH, 0x0139);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPingManagerComponent_C, TimeEnemy, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPingManagerComponent_C, TimeItem, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPingManagerComponent_C, TimeChest, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPingManagerComponent_C, TimeTrap, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPingManagerComponent_C, TimeSurvivorTime, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPingManagerComponent_C, SoundList, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPingManagerComponent_C, TimeRitual, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPingManagerComponent_C, TimeHunterSpecter, 0x0164);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPingManagerComponent_C, 0x0168);
		}

		// class UBTTask_TryExitPortal_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTTask_TryExitPortal__BTTask_TryExitPortal_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_TryExitPortal_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_TryExitPortal_C, TargetPointKey, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_TryExitPortal_C, Cache, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_TryExitPortal_C, bFoundPortal, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_TryExitPortal_C, 0x00E9);
		}

		// class UBTDecorator_IfHaveItemInHandID_C : public UBTDecorator_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTDecorator_IfHaveItemInHandID__BTDecorator_IfHaveItemInHandID_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IfHaveItemInHandID_C, CompareIDs, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_IfHaveItemInHandID_C, 0x00B8);
		}

		// class UOutlineManagerComponent_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__OutlineManagerComponent__OutlineManagerComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOutlineManagerComponent_C, UberGraphFrame, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOutlineManagerComponent_C, bInitialize, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOutlineManagerComponent_C, UnknownData_52L7, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOutlineManagerComponent_C, AuraHunterTimer, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOutlineManagerComponent_C, hunter, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOutlineManagerComponent_C, AuraInfo, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOutlineManagerComponent_C, bForceUpdate, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOutlineManagerComponent_C, 0x0131);
		}

		// class UNavFilter_Hunter_C : public UNavigationQueryFilter
		TEST_METHOD(BlueprintGeneratedClass__NavFilter_Hunter__NavFilter_Hunter_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavFilter_Hunter_C, 0x0050);
		}

		// class UIngame_CatLifeTime_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Ingame_CatLifeTime__Ingame_CatLifeTime_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_CatLifeTime_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_CatLifeTime_C, ProgressBar_70, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_CatLifeTime_C, CacheLifeTime, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_CatLifeTime_C, RealLifeTime, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_CatLifeTime_C, MaxLifetime, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIngame_CatLifeTime_C, 0x0264);
		}

		// class ALD_Skin_SeGuard_S_Hunter_C : public ALD_Skin_SeGuard_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_SeGuard_S_Hunter__LD_Skin_SeGuard_S_Hunter_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_SeGuard_S_Hunter_C, 0x0532);
		}

		// class AScanEffect_C : public ARitualEffectBase_C
		TEST_METHOD(BlueprintGeneratedClass__ScanEffect__ScanEffect_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScanEffect_C, UberGraphFrame, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScanEffect_C, Timeline_0_IncScale_5BBD247044D871C8A66ECD9101CA1BE2, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScanEffect_C, Timeline_0_FadeOutBlendWeight_5BBD247044D871C8A66ECD9101CA1BE2, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScanEffect_C, Timeline_0__Direction_5BBD247044D871C8A66ECD9101CA1BE2, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScanEffect_C, UnknownData_GB3D, 0x0391);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScanEffect_C, Timeline_1, 0x0398);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScanEffect_C, 0x03A0);
		}

		// class UGE_StatusSurvivalJean_C : public UGE_StatusSurvivalBase_C
		TEST_METHOD(BlueprintGeneratedClass__GE_StatusSurvivalJean__GE_StatusSurvivalJean_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_StatusSurvivalJean_C, 0x05F8);
		}

		// class ASplineGenRedRope_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__SplineGenRedRope__SplineGenRedRope_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplineGenRedRope_C, UberGraphFrame, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplineGenRedRope_C, PreviewMaterial, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplineGenRedRope_C, Arrow, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplineGenRedRope_C, Scene, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplineGenRedRope_C, Spline, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplineGenRedRope_C, NumOfSplinePoint, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplineGenRedRope_C, ShowPointer, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplineGenRedRope_C, UnknownData_57YN, 0x036D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplineGenRedRope_C, PointerIndex, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplineGenRedRope_C, UnknownData_ASD7, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplineGenRedRope_C, StockIndex, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplineGenRedRope_C, StockMesh, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplineGenRedRope_C, CastShadow, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplineGenRedRope_C, UnknownData_4OQ5, 0x0399);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplineGenRedRope_C, RedRopeMaterial, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplineGenRedRope_C, RedRopeMesh, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplineGenRedRope_C, SplineMeshComponent, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplineGenRedRope_C, IsRecievesDecal, 0x03B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASplineGenRedRope_C, 0x03B9);
		}

		// class AVentilator_C : public AInteractionBase_C
		TEST_METHOD(BlueprintGeneratedClass__Ventilator__Ventilator_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AVentilator_C, UnknownData_FD9P, 0x06C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVentilator_C, UberGraphFrame, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVentilator_C, Arrow1, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVentilator_C, LookAtPoint, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVentilator_C, ChildActor, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVentilator_C, Plane, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVentilator_C, Box, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVentilator_C, Arrow, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVentilator_C, TargetPoint, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVentilator_C, Mechanic, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVentilator_C, StaticMeshLocation, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVentilator_C, bCanInteract, 0x072C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVentilator_C, bIsLift, 0x072D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVentilator_C, UnknownData_AG9O, 0x072E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVentilator_C, OnUseVentilator, 0x0730);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVentilator_C, 0x0740);
		}

		// class UBTDecorator_NearTarget_C : public UBTDecorator_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTDecorator_NearTarget__BTDecorator_NearTarget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_NearTarget_C, Distance, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_NearTarget_C, Offset, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_NearTarget_C, 0x00D4);
		}

		// class AAofSurvivor_C : public ASurvivorBase_C
		TEST_METHOD(BlueprintGeneratedClass__AofSurvivor__AofSurvivor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAofSurvivor_C, UberGraphFrame, 0x0F80);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAofSurvivor_C, Box, 0x0F90);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAofSurvivor_C, Attacking, 0x0F98);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAofSurvivor_C, 0x0FA8);
		}

		// class AHSURLobbyPC_C : public APlayerController
		TEST_METHOD(BlueprintGeneratedClass__HSURLobbyPC__HSURLobbyPC_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURLobbyPC_C, UberGraphFrame, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURLobbyPC_C, PlayerInfo, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURLobbyPC_C, Countdown, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURLobbyPC_C, UnknownData_AVM9, 0x07B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURLobbyPC_C, DebugUI, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURLobbyPC_C, MapName, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURLobbyPC_C, Lobby, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURLobbyPC_C, LobbyPreviewManager, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURLobbyPC_C, bIsAllPlayerReady, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURLobbyPC_C, bIsTravelToGameplay, 0x07E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURLobbyPC_C, bIsPlayerInfoChange, 0x07EA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHSURLobbyPC_C, 0x07EB);
		}

		// class ULoadingScreen_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__LoadingScreen__LoadingScreen_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoadingScreen_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoadingScreen_C, CircularThrobber_1, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoadingScreen_C, CircularThrobber_2, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoadingScreen_C, WidgetSwitcher_1, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoadingScreen_C, ActiveSwitcher, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULoadingScreen_C, 0x026C);
		}

		// class UGE_TrapTestTutorial_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_TrapTestTutorial__GE_TrapTestTutorial_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_TrapTestTutorial_C, 0x05F8);
		}

		// class UStorePopupWithNumber_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__StorePopupWithNumber__StorePopupWithNumber_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStorePopupWithNumber_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStorePopupWithNumber_C, Background, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStorePopupWithNumber_C, ButtonBox, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStorePopupWithNumber_C, Image_186, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStorePopupWithNumber_C, Image_405, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStorePopupWithNumber_C, Image_558, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStorePopupWithNumber_C, TextBlock_198, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStorePopupWithNumber_C, TextBlock_907, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStorePopupWithNumber_C, TitleTextBox, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStorePopupWithNumber_C, Widget_Button_Cancel, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStorePopupWithNumber_C, Widget_Button_Confirm, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStorePopupWithNumber_C, Widget_Button_Decrease, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStorePopupWithNumber_C, Widget_Button_Increase, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStorePopupWithNumber_C, Title, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStorePopupWithNumber_C, Message, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStorePopupWithNumber_C, ConfirmEventDispatcher, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStorePopupWithNumber_C, CancelEventDispatcher, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStorePopupWithNumber_C, popupType, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStorePopupWithNumber_C, UnknownData_1CSE, 0x02F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStorePopupWithNumber_C, Count, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStorePopupWithNumber_C, Price, 0x02F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStorePopupWithNumber_C, 0x02FC);
		}

		// class UBTTask_SelectTarget_Prisoner_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTTask_SelectTarget_Prisoner__BTTask_SelectTarget_Prisoner_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SelectTarget_Prisoner_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SelectTarget_Prisoner_C, SelfActor, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SelectTarget_Prisoner_C, TargetLocation, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SelectTarget_Prisoner_C, CurrentTarget, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SelectTarget_Prisoner_C, PreviousTarget, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SelectTarget_Prisoner_C, Distance, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SelectTarget_Prisoner_C, IsTargetSurvivor, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SelectTarget_Prisoner_C, ChaseTime, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SelectTarget_Prisoner_C, DistanceToChaseSurvivor, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SelectTarget_Prisoner_C, SecondToDropChase, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SelectTarget_Prisoner_C, DistanceToChasePreviousSurvivor, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SelectTarget_Prisoner_C, DistanceToDetectHiding, 0x01DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_SelectTarget_Prisoner_C, 0x01E0);
		}

		// class USaveGameManager_C : public UObject
		TEST_METHOD(BlueprintGeneratedClass__SaveGameManager__SaveGameManager_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameManager_C, UberGraphFrame, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameManager_C, SlotName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameManager_C, OptionDisplay, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameManager_C, DisplaySlot, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameManager_C, OptionAudio, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameManager_C, AudioSlot, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameManager_C, OnInitialize, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameManager_C, OptionGraphics, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameManager_C, GraphicsSlot, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameManager_C, OptionControl, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameManager_C, ControlSlot, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameManager_C, Tutorial, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameManager_C, TutorialSlot, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameManager_C, OptionSystem, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameManager_C, SystemSlot, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameManager_C, Announcement, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameManager_C, AnnouncementSlot, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USaveGameManager_C, 0x0108);
		}

		// class UHSHProcessParameter_C : public UProcessParameters
		TEST_METHOD(BlueprintGeneratedClass__HSHProcessParameter__HSHProcessParameter_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHProcessParameter_C, UberGraphFrame, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHProcessParameter_C, OnStartGameSession, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHProcessParameter_C, OnUpdateGameSession, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHProcessParameter_C, GameSession, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHSHProcessParameter_C, OnProcessTerminate, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHSHProcessParameter_C, 0x0118);
		}

		// class UGE_StatusSurvivalSecurity_C : public UGE_StatusSurvivalBase_C
		TEST_METHOD(BlueprintGeneratedClass__GE_StatusSurvivalSecurity__GE_StatusSurvivalSecurity_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_StatusSurvivalSecurity_C, 0x05F8);
		}

		// class UGE_PP_SurvivorCanSpawn_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_PP_SurvivorCanSpawn__GE_PP_SurvivorCanSpawn_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_PP_SurvivorCanSpawn_C, 0x05F8);
		}

		// class UGameSparksRestFunctionLibrary_C : public UBlueprintFunctionLibrary
		TEST_METHOD(BlueprintGeneratedClass__GameSparksRestFunctionLibrary__GameSparksRestFunctionLibrary_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameSparksRestFunctionLibrary_C, 0x0030);
		}

		// class AHiddenNotifyEffect_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__HiddenNotifyEffect__HiddenNotifyEffect_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHiddenNotifyEffect_C, UberGraphFrame, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHiddenNotifyEffect_C, Sphere, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHiddenNotifyEffect_C, Timeline_Alpha_Emissive_C6EBC7F84EDED2C15314588A0D99EAAF, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHiddenNotifyEffect_C, Timeline_Alpha_Alpha_C6EBC7F84EDED2C15314588A0D99EAAF, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHiddenNotifyEffect_C, Timeline_Alpha__Direction_C6EBC7F84EDED2C15314588A0D99EAAF, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHiddenNotifyEffect_C, UnknownData_DTOY, 0x0359);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHiddenNotifyEffect_C, Timeline_Alpha, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHiddenNotifyEffect_C, M_Hidden, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHiddenNotifyEffect_C, 0x0370);
		}

		// class UAnimNotify_FootStep_C : public UAnimNotify
		TEST_METHOD(BlueprintGeneratedClass__AnimNotify_FootStep__AnimNotify_FootStep_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_FootStep_C, 0x0040);
		}

		// class ALD_Skin_Jane_A_HighSchoolDark_C : public ALD_Skin_Jane_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Jane_A_HighSchoolDark__LD_Skin_Jane_A_HighSchoolDark_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Jane_A_HighSchoolDark_C, 0x0532);
		}

		// class UIngame_CameraBinding_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Ingame_CameraBinding__Ingame_CameraBinding_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_CameraBinding_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_CameraBinding_C, FadeOut, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_CameraBinding_C, Image_1, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_CameraBinding_C, Image_52, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_CameraBinding_C, Count, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_CameraBinding_C, UnknownData_E6CX, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_CameraBinding_C, Character, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_CameraBinding_C, Class, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_CameraBinding_C, Timer, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_CameraBinding_C, Speed, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_CameraBinding_C, WidgetComponent, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_CameraBinding_C, bIsFade, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_CameraBinding_C, bStartTick, 0x0291);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIngame_CameraBinding_C, 0x0292);
		}

		// class UBTTask_CheckImmune_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTTask_CheckImmune__BTTask_CheckImmune_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_CheckImmune_C, UberGraphFrame, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_CheckImmune_C, 0x00B8);
		}

		// class UBTService_CheckingCompleteRitual_C : public UBTService_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTService_CheckingCompleteRitual__BTService_CheckingCompleteRitual_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_CheckingCompleteRitual_C, UberGraphFrame, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_CheckingCompleteRitual_C, bAllRitualComplete, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_CheckingCompleteRitual_C, 0x00B1);
		}

		// class UTutorialIngameBase_C : public UObject
		TEST_METHOD(BlueprintGeneratedClass__TutorialIngameBase__TutorialIngameBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialIngameBase_C, UberGraphFrame, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialIngameBase_C, PreviousTutorialEvent, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialIngameBase_C, CurrentTutorialEvent, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialIngameBase_C, Timer, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialIngameBase_C, UnknownData_TMYU, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialIngameBase_C, TutorialEvent, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialIngameBase_C, Index, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialIngameBase_C, UnknownData_QYGU, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialIngameBase_C, DataTable, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialIngameBase_C, TimerEndTime, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialIngameBase_C, UnknownData_WI73, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialIngameBase_C, OnShowTutorial, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialIngameBase_C, OnHideTutorial, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialIngameBase_C, State, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTutorialIngameBase_C, 0x00C9);
		}

		// class AHSHPlayerStart_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__HSHPlayerStart__HSHPlayerStart_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHPlayerStart_C, Arrow, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHPlayerStart_C, Billboard, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHPlayerStart_C, TextRender, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSHPlayerStart_C, Capsule, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHSHPlayerStart_C, 0x0358);
		}

		// class UBTTask_StopAI_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTTask_StopAI__BTTask_StopAI_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_StopAI_C, UberGraphFrame, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_StopAI_C, 0x00B8);
		}

		// class UGA_WeaponPrisoner_C : public UGA_WeaponHunterBase_C
		TEST_METHOD(BlueprintGeneratedClass__GA_WeaponPrisoner__GA_WeaponPrisoner_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_WeaponPrisoner_C, UberGraphFrame, 0x04E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_WeaponPrisoner_C, 0x04F0);
		}

		// class UGE_Buff_Immune_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_buff_Immune__GE_Buff_Immune_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Buff_Immune_C, 0x05F8);
		}

		// class UIngame_ItemDecription_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Ingame_ItemDecription__Ingame_ItemDecription_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_ItemDecription_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_ItemDecription_C, Begin, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_ItemDecription_C, CanvasPanel_Item, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_ItemDecription_C, Image_BG, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_ItemDecription_C, Image_Border, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_ItemDecription_C, TextBlock_217, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_ItemDecription_C, TextBlock_350, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_ItemDecription_C, ActorRef, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_ItemDecription_C, Header, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_ItemDecription_C, Description, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIngame_ItemDecription_C, 0x02B8);
		}

		// class ALD_Skin_Nymph_S_Canned_C : public ALD_Skin_Nymph_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Nymph_S_Canned__LD_Skin_Nymph_S_Canned_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Nymph_S_Canned_C, 0x0532);
		}

		// class UGA_ImmuneHunterPrisoner_C : public UGA_ImmuneHunterBase_C
		TEST_METHOD(BlueprintGeneratedClass__GA_ImmuneHunterPrisoner__GA_ImmuneHunterPrisoner_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_ImmuneHunterPrisoner_C, 0x0490);
		}

		// class ADestructHiddenPlaceActor_C : public ADestructibleActor
		TEST_METHOD(BlueprintGeneratedClass__DestructHiddenPlaceActor__DestructHiddenPlaceActor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADestructHiddenPlaceActor_C, DestructMesh, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADestructHiddenPlaceActor_C, 0x0360);
		}

		// class UPickableConditionLessThanHalfHP_C : public UPickableConditionBase_C
		TEST_METHOD(BlueprintGeneratedClass__PickableConditionLessThanHalfHP__PickableConditionLessThanHalfHP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPickableConditionLessThanHalfHP_C, 0x0030);
		}

		// class UGE_GeneralSuddenDeathHeal_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_GeneralSuddenDeathHeal__GE_GeneralSuddenDeathHeal_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_GeneralSuddenDeathHeal_C, 0x05F8);
		}

		// class ANavModifyBox_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__NavModifyBox__NavModifyBox_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavModifyBox_C, Box, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavModifyBox_C, NavModifier, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavModifyBox_C, 0x0348);
		}

		// class UITutorialEvent_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__ITutorialEvent__ITutorialEvent_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UITutorialEvent_C, 0x0030);
		}

		// class ALD_Skin_Prisoner_B_Baseball_C : public ALD_Skin_Prisoner_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Prisoner_B_Baseball__LD_Skin_Prisoner_B_Baseball_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Prisoner_B_Baseball_C, 0x0532);
		}

		// class UBTTask_InteractSomething_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTTask_InteractSomething__BTTask_InteractSomething_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_InteractSomething_C, UberGraphFrame, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_InteractSomething_C, 0x00B8);
		}

		// class UWidget_ButtonChoice_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_ButtonChoice__Widget_ButtonChoice_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoice_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoice_C, Button_This, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoice_C, HorizontalBox_Choice, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoice_C, TextBlock_2, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoice_C, Text, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoice_C, AutoSize, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoice_C, bUpperCase, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoice_C, UnknownData_AS1S, 0x0282);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoice_C, Size, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoice_C, UnknownData_K0O9, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoice_C, OnClicked, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoice_C, FontSize, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoice_C, UnknownData_9RJY, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoice_C, Choice, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoice_C, LeftOffset, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoice_C, Size_Choice, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoice_C, Padding_Choice, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoice_C, Active_Choice, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoice_C, Style_ActiveButton, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoice_C, Style_DeactiveButton, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoice_C, Color_ActiveText, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoice_C, Color_DeactiveText, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoice_C, ButtonHorizontalAlignment, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoice_C, ButtonVerticalAlignment, 0x0819);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoice_C, UnknownData_Q9W7, 0x081A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoice_C, bIsEnable, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoice_C, PaddingText, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoice_C, HorizontalAlimentText, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoice_C, VerticalAlimentText, 0x0841);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_ButtonChoice_C, 0x0842);
		}

		// class UWidget_Button_Profile_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_Button_Profile__Widget_Button_Profile_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_Profile_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_Profile_C, HoverAnimation, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_Profile_C, Button_This, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_Profile_C, Size, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_Profile_C, OnClicked, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_Profile_C, UnHoverAlpha, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_Profile_C, HoverAlpha, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_Profile_C, Style, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_Button_Profile_C, 0x04F8);
		}

		// class UTouristJap_Lobby_ABP_C : public USurvivor_Lobby_ABP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__TouristJap_Lobby_ABP__TouristJap_Lobby_ABP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTouristJap_Lobby_ABP_C, 0x0A1A);
		}

		// class UWidget_ButtonSlider_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_ButtonSlider__Widget_ButtonSlider_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonSlider_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonSlider_C, BG, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonSlider_C, Button_This, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonSlider_C, EditableTextBox_1, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonSlider_C, HorizontalBox_Choice, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonSlider_C, ProgressBar_109, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonSlider_C, Slider_169, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonSlider_C, TextBlock_2, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonSlider_C, Text, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonSlider_C, AutoSize, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonSlider_C, bUpperCase, 0x02A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonSlider_C, bIsRound, 0x02A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonSlider_C, UnknownData_175Q, 0x02A3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonSlider_C, Size, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonSlider_C, UnknownData_8615, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonSlider_C, OnClicked, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonSlider_C, FontSize, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonSlider_C, UnHoverAlpha, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonSlider_C, HoverAlpha, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonSlider_C, UnknownData_0RUD, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonSlider_C, OnSlideValue, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonSlider_C, LeftOffset, 0x02E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_ButtonSlider_C, 0x02E4);
		}

		// class APickableItemBase_C : public AInteractionBase_C
		TEST_METHOD(BlueprintGeneratedClass__PickableItemBase__PickableItemBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APickableItemBase_C, UnknownData_XDQM, 0x06C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APickableItemBase_C, UberGraphFrame, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APickableItemBase_C, ItemAura, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APickableItemBase_C, Pivot, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APickableItemBase_C, DropMovementComponent, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APickableItemBase_C, RotateLoop_Yaw_4805CDE647D6FCD7D1808AA805CF4358, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APickableItemBase_C, RotateLoop__Direction_4805CDE647D6FCD7D1808AA805CF4358, 0x06FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APickableItemBase_C, UnknownData_IWEJ, 0x06FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::APickableItemBase_C, RotateLoop, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::APickableItemBase_C, Timeline_0_ZValue_0558725A4D51AF9F905587ABA1712E12, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::APickableItemBase_C, Timeline_0_0_1_0558725A4D51AF9F905587ABA1712E12, 0x070C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APickableItemBase_C, Timeline_0__Direction_0558725A4D51AF9F905587ABA1712E12, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::APickableItemBase_C, UnknownData_Q19A, 0x0711);
			CHEAT_GEAR_CHECK_OFFSET(CG::APickableItemBase_C, Timeline_1, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::APickableItemBase_C, Durability, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::APickableItemBase_C, ItemId, 0x0724);
			CHEAT_GEAR_CHECK_OFFSET(CG::APickableItemBase_C, UnknownData_N4MS, 0x0734);
			CHEAT_GEAR_CHECK_OFFSET(CG::APickableItemBase_C, Condition, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::APickableItemBase_C, IsDropFromSurvivor_, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::APickableItemBase_C, UnknownData_YO4I, 0x0741);
			CHEAT_GEAR_CHECK_OFFSET(CG::APickableItemBase_C, MI_HunterMat, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::APickableItemBase_C, MI_SurvivorMat, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::APickableItemBase_C, IsOnWater, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::APickableItemBase_C, UnknownData_5R96, 0x0759);
			CHEAT_GEAR_CHECK_OFFSET(CG::APickableItemBase_C, WaterComponent, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::APickableItemBase_C, IsBusy, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::APickableItemBase_C, UnknownData_S3F2, 0x0769);
			CHEAT_GEAR_CHECK_OFFSET(CG::APickableItemBase_C, MatIndex, 0x076C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APickableItemBase_C, bIsShouldNotMove, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::APickableItemBase_C, UnknownData_EMNA, 0x0771);
			CHEAT_GEAR_CHECK_OFFSET(CG::APickableItemBase_C, OnCollected, 0x0778);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APickableItemBase_C, 0x0788);
		}

		// class UWidget_ButtonTextNumberInput_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_ButtonTextNumberInput__Widget_ButtonTextNumberInput_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonTextNumberInput_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonTextNumberInput_C, BG_Black, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonTextNumberInput_C, HorizontalBox_1, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonTextNumberInput_C, Text_number, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonTextNumberInput_C, Widget_Button_Decrease, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonTextNumberInput_C, Widget_Button_Increase, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonTextNumberInput_C, Text, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonTextNumberInput_C, AutoSize, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonTextNumberInput_C, bUpperCase, 0x0291);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonTextNumberInput_C, UnknownData_9V2W, 0x0292);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonTextNumberInput_C, Size, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonTextNumberInput_C, UnknownData_AADH, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonTextNumberInput_C, OnClicked, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonTextNumberInput_C, FontSize, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonTextNumberInput_C, bIsEditableTextReadonly, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonTextNumberInput_C, UnknownData_O9G5, 0x02B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonTextNumberInput_C, Editable_Style, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonTextNumberInput_C, Editable_FontSize, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonTextNumberInput_C, UnknownData_VA8R, 0x04D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonTextNumberInput_C, Editable_Text, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonTextNumberInput_C, bEditableText_UpperCase, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonTextNumberInput_C, UnknownData_VC7L, 0x04F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonTextNumberInput_C, Count, 0x04F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_ButtonTextNumberInput_C, 0x04F8);
		}

		// class UIngame_PingPanel_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Ingame_PingPanel__Ingame_PingPanel_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_PingPanel_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_PingPanel_C, CanvasPanel_1, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_PingPanel_C, CanCancelDegrees, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_PingPanel_C, UnknownData_G0FT, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_PingPanel_C, MainCanvas, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_PingPanel_C, ActivePing, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_PingPanel_C, ScreenSize, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_PingPanel_C, PingWidget, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIngame_PingPanel_C, 0x0288);
		}

		// class ADestruct_ContreteWall_C : public ADestructibleBase_C
		TEST_METHOD(BlueprintGeneratedClass__Destruct_ContreteWall__Destruct_ContreteWall_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADestruct_ContreteWall_C, 0x0761);
		}

		// class ALD_Skin_Belle_C_Green_C : public ALD_Skin_Belle_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Belle_C_Green__LD_Skin_Belle_C_Green_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Belle_C_Green_C, 0x0532);
		}

		// class APickable_HolyKnifePerk_C : public APickable_WeaponBase_C
		TEST_METHOD(BlueprintGeneratedClass__Pickable_HolyKnifePerk__Pickable_HolyKnifePerk_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APickable_HolyKnifePerk_C, UberGraphFrame, 0x07A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APickable_HolyKnifePerk_C, 0x07B0);
		}

		// class UWidget_Mainpanel_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_Mainpanel__Widget_Mainpanel_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Mainpanel_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Mainpanel_C, Loop, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Mainpanel_C, BeginPanel, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Mainpanel_C, Forground, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Mainpanel_C, Image_4, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Mainpanel_C, Logo, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Mainpanel_C, Redrope, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Mainpanel_C, OnFindMatch, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Mainpanel_C, OnLootbox, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Mainpanel_C, OnItemStore, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Mainpanel_C, OnSetting, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Mainpanel_C, OnExit, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Mainpanel_C, OnProfile, 0x02D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_Mainpanel_C, 0x02E0);
		}

		// class UGE_StatusSurvivalJapanTouristF_C : public UGE_StatusSurvivalBase_C
		TEST_METHOD(BlueprintGeneratedClass__GE_StatusSurvivalJapanTouristF__GE_StatusSurvivalJapanTouristF_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_StatusSurvivalJapanTouristF_C, 0x05F8);
		}

		// class APickable_WeaponBase_C : public APickableItemBase_C
		TEST_METHOD(BlueprintGeneratedClass__Pickable_WeaponBase__Pickable_WeaponBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APickable_WeaponBase_C, UberGraphFrame, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::APickable_WeaponBase_C, Sphere, 0x0798);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APickable_WeaponBase_C, 0x07A0);
		}

		// class AItemChest_Objective2_C : public AItemChest_C
		TEST_METHOD(BlueprintGeneratedClass__ItemChest_Objective2__ItemChest_Objective2_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemChest_Objective2_C, UberGraphFrame, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemChest_Objective2_C, Aura, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemChest_Objective2_C, SM_MERGED_HolyRopeCustom, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemChest_Objective2_C, Decal, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemChest_Objective2_C, Plane1, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemChest_Objective2_C, Plane, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemChest_Objective2_C, Cube, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemChest_Objective2_C, Plane2, 0x07F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AItemChest_Objective2_C, 0x0800);
		}

		// class UBTTask_ChaseTarget_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTTask_ChaseTarget__BTTask_ChaseTarget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_ChaseTarget_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_ChaseTarget_C, Target, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_ChaseTarget_C, IsTargetSurvivor, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_ChaseTarget_C, 0x00E1);
		}

		// class UGameSparksLogin_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__GameSparksLogin__GameSparksLogin_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSparksLogin_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSparksLogin_C, Loop, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSparksLogin_C, FadetoLogin, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSparksLogin_C, PressAnyKey, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSparksLogin_C, BG_Fog, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSparksLogin_C, FG, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSparksLogin_C, Forground, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSparksLogin_C, Image_1, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSparksLogin_C, Image_4, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSparksLogin_C, Image_284, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSparksLogin_C, Line_Red, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSparksLogin_C, Line_Thread, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSparksLogin_C, Logo, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSparksLogin_C, PasswordSlot, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSparksLogin_C, TextBlock_2, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSparksLogin_C, UsernameSlot, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSparksLogin_C, Widget_Button_FBLogin, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSparksLogin_C, Widget_Button_ForgetPW, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSparksLogin_C, Widget_Button_Login, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSparksLogin_C, Widget_Button_Register, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSparksLogin_C, WidgetSwitcher_1, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSparksLogin_C, WidgetManager, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSparksLogin_C, bPressAnyButton, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSparksLogin_C, UnknownData_N2CQ, 0x02F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSparksLogin_C, LoginObject, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSparksLogin_C, LoginPanel, 0x0308);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameSparksLogin_C, 0x0310);
		}

		// class ALD_Skin_SeGuard_B_Camou_C : public ALD_Skin_SeGuard_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_SeGuard_B_Camou__LD_Skin_SeGuard_B_Camou_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_SeGuard_B_Camou_C, 0x0532);
		}

		// class UMovieSceneCaptureProtocolBase : public UObject
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneCaptureProtocolBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCaptureProtocolBase, UnknownData_N6BZ, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCaptureProtocolBase, State, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCaptureProtocolBase, UnknownData_OW7B, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCaptureProtocolBase, 0x0060);
		}

		// class UMovieSceneAudioCaptureProtocolBase : public UMovieSceneCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneAudioCaptureProtocolBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneAudioCaptureProtocolBase, 0x0060);
		}

		// class UNullAudioCaptureProtocol : public UMovieSceneAudioCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__NullAudioCaptureProtocol)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNullAudioCaptureProtocol, 0x0060);
		}

		// class UMasterAudioSubmixCaptureProtocol : public UMovieSceneAudioCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__MasterAudioSubmixCaptureProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMasterAudioSubmixCaptureProtocol, Filename, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMasterAudioSubmixCaptureProtocol, UnknownData_LXIU, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMasterAudioSubmixCaptureProtocol, 0x0098);
		}

		// class UMovieSceneImageCaptureProtocolBase : public UMovieSceneCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneImageCaptureProtocolBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneImageCaptureProtocolBase, 0x0060);
		}

		// class UCompositionGraphCaptureProtocol : public UMovieSceneImageCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__CompositionGraphCaptureProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, IncludeRenderPasses, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, bCaptureFramesInHDR, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, UnknownData_N6AB, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, HDRCompressionQuality, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, CaptureGamut, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, UnknownData_PKRG, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, PostProcessingMaterial, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, bDisableScreenPercentage, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, UnknownData_HJMA, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, PostProcessingMaterialPtr, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, UnknownData_0TD2, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCompositionGraphCaptureProtocol, 0x00C8);
		}

		// class UFrameGrabberProtocol : public UMovieSceneImageCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__FrameGrabberProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFrameGrabberProtocol, UnknownData_0CWK, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFrameGrabberProtocol, 0x0070);
		}

		// class UImageSequenceProtocol : public UFrameGrabberProtocol
		TEST_METHOD(Class__MovieSceneCapture__ImageSequenceProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UImageSequenceProtocol, UnknownData_R5QH, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageSequenceProtocol, 0x00E0);
		}

		// class UCompressedImageSequenceProtocol : public UImageSequenceProtocol
		TEST_METHOD(Class__MovieSceneCapture__CompressedImageSequenceProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompressedImageSequenceProtocol, CompressionQuality, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompressedImageSequenceProtocol, UnknownData_P5GV, 0x00E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCompressedImageSequenceProtocol, 0x00E8);
		}

		// class UImageSequenceProtocol_BMP : public UImageSequenceProtocol
		TEST_METHOD(Class__MovieSceneCapture__ImageSequenceProtocol_BMP)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageSequenceProtocol_BMP, 0x00E0);
		}

		// class UImageSequenceProtocol_PNG : public UCompressedImageSequenceProtocol
		TEST_METHOD(Class__MovieSceneCapture__ImageSequenceProtocol_PNG)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageSequenceProtocol_PNG, 0x00E8);
		}

		// class UImageSequenceProtocol_JPG : public UCompressedImageSequenceProtocol
		TEST_METHOD(Class__MovieSceneCapture__ImageSequenceProtocol_JPG)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageSequenceProtocol_JPG, 0x00E8);
		}

		// class UImageSequenceProtocol_EXR : public UImageSequenceProtocol
		TEST_METHOD(Class__MovieSceneCapture__ImageSequenceProtocol_EXR)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UImageSequenceProtocol_EXR, bCompressed, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImageSequenceProtocol_EXR, CaptureGamut, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImageSequenceProtocol_EXR, UnknownData_BEZ9, 0x00E2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageSequenceProtocol_EXR, 0x00F0);
		}

		// class UMovieSceneCaptureInterface : public UInterface
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneCaptureInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCaptureInterface, 0x0030);
		}

		// class UMovieSceneCapture : public UObject
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneCapture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, UnknownData_E8CW, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, ImageCaptureProtocolType, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, AudioCaptureProtocolType, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, ImageCaptureProtocol, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, AudioCaptureProtocol, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, Settings, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, bUseSeparateProcess, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, bCloseEditorWhenCaptureStarts, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, UnknownData_VF4L, 0x00E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, AdditionalCommandLineArguments, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, InheritedCommandLineArguments, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, UnknownData_1HW3, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCapture, 0x0208);
		}

		// class ULevelCapture : public UMovieSceneCapture
		TEST_METHOD(Class__MovieSceneCapture__LevelCapture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelCapture, bAutoStartCapture, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelCapture, UnknownData_3IK2, 0x0209);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelCapture, PrerequisiteActorId, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelCapture, UnknownData_GE7T, 0x0224);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelCapture, 0x0228);
		}

		// class UMovieSceneCaptureEnvironment : public UObject
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneCaptureEnvironment)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCaptureEnvironment, 0x0030);
		}

		// class UUserDefinedCaptureProtocol : public UMovieSceneImageCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__UserDefinedCaptureProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedCaptureProtocol, World, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedCaptureProtocol, UnknownData_J66C, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserDefinedCaptureProtocol, 0x00E0);
		}

		// class UUserDefinedImageCaptureProtocol : public UUserDefinedCaptureProtocol
		TEST_METHOD(Class__MovieSceneCapture__UserDefinedImageCaptureProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedImageCaptureProtocol, Format, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedImageCaptureProtocol, bEnableCompression, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedImageCaptureProtocol, UnknownData_TMSO, 0x00E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedImageCaptureProtocol, CompressionQuality, 0x00E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserDefinedImageCaptureProtocol, 0x00E8);
		}

		// class UVideoCaptureProtocol : public UFrameGrabberProtocol
		TEST_METHOD(Class__MovieSceneCapture__VideoCaptureProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoCaptureProtocol, bUseCompression, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoCaptureProtocol, UnknownData_57Y2, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoCaptureProtocol, CompressionQuality, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoCaptureProtocol, UnknownData_A9YL, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVideoCaptureProtocol, 0x0088);
		}

		// class UVanz_Lobby_ABP_C : public USurvivor_Lobby_ABP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__Vanz_Lobby_ABP__Vanz_Lobby_ABP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVanz_Lobby_ABP_C, 0x0A1A);
		}

		// class APickable_Chaplet_C : public APickable_WeaponBase_C
		TEST_METHOD(BlueprintGeneratedClass__Pickable_Chaplet__Pickable_Chaplet_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APickable_Chaplet_C, UberGraphFrame, 0x07A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APickable_Chaplet_C, 0x07B0);
		}

		// class UGeometryCache : public UObject
		TEST_METHOD(Class__GeometryCache__GeometryCache)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, UnknownData_AEPH, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, Materials, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, Tracks, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, UnknownData_IN23, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, StartFrame, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, EndFrame, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCache, 0x0070);
		}

		// class AGeometryCacheActor : public AActor
		TEST_METHOD(Class__GeometryCache__GeometryCacheActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCacheActor, GeometryCacheComponent, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGeometryCacheActor, 0x0340);
		}

		// class UGeometryCacheCodecBase : public UObject
		TEST_METHOD(Class__GeometryCache__GeometryCacheCodecBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheCodecBase, TopologyRanges, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheCodecBase, 0x0040);
		}

		// class UGeometryCacheCodecRaw : public UGeometryCacheCodecBase
		TEST_METHOD(Class__GeometryCache__GeometryCacheCodecRaw)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheCodecRaw, DummyProperty, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheCodecRaw, UnknownData_473O, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheCodecRaw, 0x0048);
		}

		// class UGeometryCacheCodecV1 : public UGeometryCacheCodecBase
		TEST_METHOD(Class__GeometryCache__GeometryCacheCodecV1)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheCodecV1, UnknownData_OEL3, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheCodecV1, 0x0048);
		}

		// class UGeometryCacheComponent : public UMeshComponent
		TEST_METHOD(Class__GeometryCache__GeometryCacheComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, GeometryCache, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, bRunning, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, bLooping, 0x05A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, UnknownData_GBMZ, 0x05AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, StartTimeOffset, 0x05AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, PlaybackSpeed, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, NumTracks, 0x05B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, ElapsedTime, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, UnknownData_J21O, 0x05BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, Duration, 0x05EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, bManualTick, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, UnknownData_ZI85, 0x05F1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheComponent, 0x0600);
		}

		// class UGeometryCacheTrack : public UObject
		TEST_METHOD(Class__GeometryCache__GeometryCacheTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack, Duration, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack, UnknownData_US1G, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheTrack, 0x0060);
		}

		// class UGeometryCacheTrack_FlipbookAnimation : public UGeometryCacheTrack
		TEST_METHOD(Class__GeometryCache__GeometryCacheTrack_FlipbookAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack_FlipbookAnimation, NumMeshSamples, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack_FlipbookAnimation, UnknownData_5U26, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheTrack_FlipbookAnimation, 0x0088);
		}

		// class UGeometryCacheTrackStreamable : public UGeometryCacheTrack
		TEST_METHOD(Class__GeometryCache__GeometryCacheTrackStreamable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrackStreamable, Codec, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrackStreamable, UnknownData_DDIW, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrackStreamable, StartSampleTime, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrackStreamable, UnknownData_TD91, 0x0194);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheTrackStreamable, 0x0198);
		}

		// class UGeometryCacheTrack_TransformAnimation : public UGeometryCacheTrack
		TEST_METHOD(Class__GeometryCache__GeometryCacheTrack_TransformAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack_TransformAnimation, UnknownData_W4V9, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheTrack_TransformAnimation, 0x0108);
		}

		// class UGeometryCacheTrack_TransformGroupAnimation : public UGeometryCacheTrack
		TEST_METHOD(Class__GeometryCache__GeometryCacheTrack_TransformGroupAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack_TransformGroupAnimation, UnknownData_X9CH, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheTrack_TransformGroupAnimation, 0x0108);
		}

		// class ATrapActorSigilScroll_C : public ATrapActorBase_C
		TEST_METHOD(BlueprintGeneratedClass__TrapActorSigilScroll__TrapActorSigilScroll_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapActorSigilScroll_C, UberGraphFrame, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapActorSigilScroll_C, Center, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapActorSigilScroll_C, BarrierParticle, 0x0450);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATrapActorSigilScroll_C, 0x0458);
		}

		// class APickable_CatPerk_C : public APickable_WeaponBase_C
		TEST_METHOD(BlueprintGeneratedClass__Pickable_CatPerk__Pickable_CatPerk_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APickable_CatPerk_C, UberGraphFrame, 0x07A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APickable_CatPerk_C, 0x07B0);
		}

		// class UGE_StatusSurvivalVanz_C : public UGE_StatusSurvivalBase_C
		TEST_METHOD(BlueprintGeneratedClass__GE_StatusSurvivalVanz__GE_StatusSurvivalVanz_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_StatusSurvivalVanz_C, 0x05F8);
		}

		// class ALD_Skin_Prisoner_S_Teddy_C : public ALD_Skin_Prisoner_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Prisoner_S_Teddy__LD_Skin_Prisoner_S_Teddy_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Prisoner_S_Teddy_C, 0x0532);
		}

		// class ALD_Skin_Belle_A_OverallBlue_C : public ALD_Skin_Belle_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Belle_A_OverallBlue__LD_Skin_Belle_A_OverallBlue_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Belle_A_OverallBlue_C, 0x0532);
		}

		// class UABP_zBingzCat_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__ABP_zBingzCat__ABP_zBingzCat_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_zBingzCat_C, UnknownData_I1G1, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_zBingzCat_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_zBingzCat_C, AnimGraphNode_Root_865A64CA4D02463768992DAF7DC83C38, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_zBingzCat_C, AnimGraphNode_TransitionResult_EB93244F404DD862AAACA89879D900DF, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_zBingzCat_C, AnimGraphNode_TransitionResult_4710C50648D0DB8A95D1DA9AAAB8EFF8, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_zBingzCat_C, AnimGraphNode_TransitionResult_CB62BFDE4BF73B0EC8616FAF164B6CB8, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_zBingzCat_C, AnimGraphNode_TransitionResult_CE641DA741415E593EB200BF76945ABA, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_zBingzCat_C, AnimGraphNode_TransitionResult_40D8EE46477663C681B8A299C05FAC87, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_zBingzCat_C, AnimGraphNode_TransitionResult_8502824440E0BDB2AE69BBAA5F280775, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_zBingzCat_C, AnimGraphNode_TransitionResult_8285B64F442D4FD1FD3D07B3F81FF8AF, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_zBingzCat_C, AnimGraphNode_SequencePlayer_23419318405473182B33D6AC144EDAD4, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_zBingzCat_C, AnimGraphNode_StateResult_6F5AD27E4FAD730D1DA548B641B4347D, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_zBingzCat_C, AnimGraphNode_SequencePlayer_CF7B6B894A2F03084E9333A62C2BDBB5, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_zBingzCat_C, AnimGraphNode_StateResult_8EE826BA47BEF8A98C9A8AA8F1A1DAD8, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_zBingzCat_C, AnimGraphNode_SequencePlayer_CE2FCF0A4E3BA23FAC967F82D33FF194, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_zBingzCat_C, AnimGraphNode_StateResult_B3E2612048DC3F3399F83EBF83CEA411, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_zBingzCat_C, AnimGraphNode_TransitionResult_22DC62F64796CB776550D7BBE4D1D6EC, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_zBingzCat_C, AnimGraphNode_TransitionResult_733F4191441200ECEA8AEEB224E928A0, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_zBingzCat_C, AnimGraphNode_BlendSpacePlayer_2C31BBB549CDF7BBD260429B7791196C, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_zBingzCat_C, AnimGraphNode_StateResult_8D6DF36B47450CA6FB9BE89F677ABA7D, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_zBingzCat_C, AnimGraphNode_RandomPlayer_6939770B477B06A138E08AA2D733BFDD, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_zBingzCat_C, AnimGraphNode_StateResult_58E4628E4CEEE68EA7FF73B3C332E8C9, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_zBingzCat_C, AnimGraphNode_StateMachine_573D0F7041682C9B655248B0ADF8C017, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_zBingzCat_C, AnimGraphNode_StateResult_928885E346F7332BA287B693AFA92F34, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_zBingzCat_C, AnimGraphNode_BlendSpacePlayer_BDBD632A44B47E03C027A59FC0740E07, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_zBingzCat_C, AnimGraphNode_StateResult_B55CBF3B4642E973686BF0AA55D6B610, 0x0908);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_zBingzCat_C, AnimGraphNode_RandomPlayer_3417A2E841BF4B587912608DA590427A, 0x0928);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_zBingzCat_C, AnimGraphNode_StateResult_FD9320874B444913B3FD35B6FD2522F0, 0x0990);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_zBingzCat_C, AnimGraphNode_StateMachine_7ACE1DB845B5930661FC57B89F5F68BF, 0x09B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_zBingzCat_C, AnimGraphNode_Slot_9A6593294E6BEE22FBD36FB5A09C4314, 0x0A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_zBingzCat_C, AnimGraphNode_SaveCachedPose_275A63E64D2AF54B08F6A69616261F31, 0x0AA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_zBingzCat_C, AnimGraphNode_UseCachedPose_EF23FB9A485E66E250715D8477A3A363, 0x0B60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_zBingzCat_C, AnimGraphNode_BlendListByBool_83560F62464FEA9C33B275ACA4EABBD4, 0x0B88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_zBingzCat_C, AnimGraphNode_SequencePlayer_E55C399549634297C770198EF213EFC0, 0x0C28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_zBingzCat_C, AnimGraphNode_BlendListByBool_5E7BAA9946AC3FFAF56E47B4E9CEFD81, 0x0CA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_zBingzCat_C, AnimGraphNode_SaveCachedPose_9A4801F943442F04EE841E9D33D17B7B, 0x0D40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_zBingzCat_C, AnimGraphNode_UseCachedPose_222D5ACD458605A23BFE73BC51266F81, 0x0DF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_zBingzCat_C, AnimGraphNode_SequencePlayer_D5F7DB1146F7898C04A4E98CB3952888, 0x0E20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_zBingzCat_C, refZBingzCat, 0x0E98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_zBingzCat_C, BlendIdle0, 0x0EA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_zBingzCat_C, Yaw, 0x0EA4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_zBingzCat_C, Speed, 0x0EA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_zBingzCat_C, IsAiming, 0x0EAC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_zBingzCat_C, IsFalling, 0x0EAD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_zBingzCat_C, IsInProgress, 0x0EAE);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UABP_zBingzCat_C, 0x0EAF);
		}

		// class UGA_WeaponPray_C : public UGA_WeaponHunterBase_C
		TEST_METHOD(BlueprintGeneratedClass__GA_WeaponPray__GA_WeaponPray_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_WeaponPray_C, 0x04E0);
		}

		// class ADestructAnimationActor_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__DestructAnimationActor__DestructAnimationActor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADestructAnimationActor_C, UberGraphFrame, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADestructAnimationActor_C, SkeletalMesh, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADestructAnimationActor_C, Scale, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADestructAnimationActor_C, UnknownData_BJB2, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADestructAnimationActor_C, SDestructAnimation, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADestructAnimationActor_C, AutoDestroy, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADestructAnimationActor_C, 0x0379);
		}

		// class UGE_Potion_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Potion__GE_Potion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Potion_C, 0x05F8);
		}

		// class ALD_Skin_Prisoner_C_Green_C : public ALD_Skin_Prisoner_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Prisoner_C_Green__LD_Skin_Prisoner_C_Green_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Prisoner_C_Green_C, 0x0532);
		}

		// class UFemale_Survivor_ABP_C : public UMale_Survivor_ABP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__Female_Survivor_ABP__Female_Survivor_ABP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFemale_Survivor_ABP_C, 0x2D84);
		}

		// class UTutorialIngameHunter_C : public UTutorialIngameBase_C
		TEST_METHOD(BlueprintGeneratedClass__TutorialIngameHunter__TutorialIngameHunter_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTutorialIngameHunter_C, 0x00C9);
		}

		// class ALD_Skin_SeGuard_B_Blue_C : public ALD_Skin_SeGuard_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_SeGuard_B_Blue__LD_Skin_SeGuard_B_Blue_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_SeGuard_B_Blue_C, 0x0532);
		}

		// class UGE_State_FullBloodSeek_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_State_FullBloodSeek__GE_State_FullBloodSeek_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_State_FullBloodSeek_C, 0x05F8);
		}

		// class ALD_Skin_Prisoner_C_Blue_C : public ALD_Skin_Prisoner_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Prisoner_C_Blue__LD_Skin_Prisoner_C_Blue_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Prisoner_C_Blue_C, 0x0532);
		}

		// class ALD_Skin_Nymph_C_Orange_C : public ALD_Skin_Nymph_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Nymph_C_Orange__LD_Skin_Nymph_C_Orange_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Nymph_C_Orange_C, 0x0532);
		}

		// class ANewOpenLightRitualEffect_C : public ARitualEffectBase_C
		TEST_METHOD(BlueprintGeneratedClass__NewOpenLightRitualEffect__NewOpenLightRitualEffect_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANewOpenLightRitualEffect_C, UberGraphFrame, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANewOpenLightRitualEffect_C, Timeline_0_IncScale_EA0D80B94F7A9153BA02D3A8DA91CD48, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANewOpenLightRitualEffect_C, Timeline_0_FadeOutBlendWeight_EA0D80B94F7A9153BA02D3A8DA91CD48, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANewOpenLightRitualEffect_C, Timeline_0__Direction_EA0D80B94F7A9153BA02D3A8DA91CD48, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANewOpenLightRitualEffect_C, UnknownData_RSDK, 0x0391);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANewOpenLightRitualEffect_C, Timeline_1, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANewOpenLightRitualEffect_C, SurvivorPostprocess, 0x03A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANewOpenLightRitualEffect_C, 0x08D0);
		}

		// class UTutorialIngameSurvivor_C : public UTutorialIngameBase_C
		TEST_METHOD(BlueprintGeneratedClass__TutorialIngameSurvivor__TutorialIngameSurvivor_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTutorialIngameSurvivor_C, 0x00C9);
		}

		// class UN_Audio_C : public UAnimNotify
		TEST_METHOD(BlueprintGeneratedClass__N_Audio__N_Audio_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UN_Audio_C, DataTable, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UN_Audio_C, PlayVoiceChance, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UN_Audio_C, bServerOnly, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UN_Audio_C, 0x004D);
		}

		// class ALD_Skin_SeGuard_S_WhiteGuard_C : public ALD_Skin_SeGuard_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_SeGuard_S_WhiteGuard__LD_Skin_SeGuard_S_WhiteGuard_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_SeGuard_S_WhiteGuard_C, 0x0532);
		}

		// class UUtilityFunctionLibrary_C : public UBlueprintFunctionLibrary
		TEST_METHOD(BlueprintGeneratedClass__UtilityFunctionLibrary__UtilityFunctionLibrary_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUtilityFunctionLibrary_C, 0x0030);
		}

		// class ALD_Skin_Nymph_SandySpeckled_C : public ALD_Skin_Nymph_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Nymph_SandySpeckled__LD_Skin_Nymph_SandySpeckled_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Nymph_SandySpeckled_C, 0x0532);
		}

		// class UGE_Buff_StockpileCharge_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Buff_StockpileCharge__GE_Buff_StockpileCharge_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Buff_StockpileCharge_C, 0x05F8);
		}

		// class UIngame_SpectatorRole_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Ingame_SpectatorRole__Ingame_SpectatorRole_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SpectatorRole_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SpectatorRole_C, TextBlock_1, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SpectatorRole_C, Widget_TextWithInputImage_C_1, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SpectatorRole_C, Widget_TextWithInputImage_C_2, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SpectatorRole_C, Widget_TextWithInputImage_C_3, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_SpectatorRole_C, bBlockInput, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIngame_SpectatorRole_C, 0x0271);
		}

		// class AJeanSurvivor_C : public ASurvivorBase_C
		TEST_METHOD(BlueprintGeneratedClass__JeanSurvivor__JeanSurvivor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AJeanSurvivor_C, UberGraphFrame, 0x0F80);
			CHEAT_GEAR_CHECK_OFFSET(CG::AJeanSurvivor_C, Box, 0x0F90);
			CHEAT_GEAR_CHECK_OFFSET(CG::AJeanSurvivor_C, Attacking, 0x0F98);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AJeanSurvivor_C, 0x0FA8);
		}

		// class ALD_Skin_SeGuard_C_Striped_C : public ALD_Skin_SeGuard_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_SeGuard_C_Striped__LD_Skin_SeGuard_C_Striped_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_SeGuard_C_Striped_C, 0x0532);
		}

		// class ALD_Skin_Tim_B_ScotchRed_C : public ALD_Skin_Tim_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Tim_B_ScotchRed__LD_Skin_Tim_B_ScotchRed_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Tim_B_ScotchRed_C, 0x0532);
		}

		// class ALD_Skin_Prisoner_A_SuitA_C : public ALD_Skin_Prisoner_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Prisoner_A_SuitA__LD_Skin_Prisoner_A_SuitA_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Prisoner_A_SuitA_C, 0x0532);
		}

		// class UAnimNotify_DestroyHideable_C : public UAnimNotify
		TEST_METHOD(BlueprintGeneratedClass__AnimNotify_DestroyHideable__AnimNotify_DestroyHideable_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_DestroyHideable_C, 0x0040);
		}

		// class UOnlineSubsystemNullLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__OnlineSubsystemNull__OnlineSubsystemNullLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineSubsystemNullLibrary, 0x0030);
		}

		// class UGE_Buff_StockpileFull_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Buff_StockpileFull__GE_Buff_StockpileFull_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Buff_StockpileFull_C, 0x05F8);
		}

		// class UGE_Debuff_StunTrapTutorial_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Debuff_StunTrapTutorial__GE_Debuff_StunTrapTutorial_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Debuff_StunTrapTutorial_C, 0x05F8);
		}

		// class ADummySurvivor_C : public ASurvivorBase_C
		TEST_METHOD(BlueprintGeneratedClass__DummySurvivor__DummySurvivor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADummySurvivor_C, UberGraphFrame, 0x0F80);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADummySurvivor_C, Box, 0x0F90);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADummySurvivor_C, Attacking, 0x0F98);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADummySurvivor_C, 0x0FA8);
		}

		// class UGE_StatusHunterPrisoner_C : public UGE_StatusHunterBase_C
		TEST_METHOD(BlueprintGeneratedClass__GE_StatusHunterPrisoner__GE_StatusHunterPrisoner_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_StatusHunterPrisoner_C, 0x05F8);
		}

		// class ALD_Skin_Prisoner_B_Street_C : public ALD_Skin_Prisoner_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Prisoner_B_Street__LD_Skin_Prisoner_B_Street_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Prisoner_B_Street_C, 0x0532);
		}

		// class ABareHandActor_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BareHandActor__BareHandActor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABareHandActor_C, UberGraphFrame, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABareHandActor_C, P_Beads, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABareHandActor_C, Scene, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABareHandActor_C, OwnerSurvivor, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABareHandActor_C, 0x0360);
		}

		// class AProjectileMagicRice_C : public AProjectileBase_C
		TEST_METHOD(BlueprintGeneratedClass__ProjectileMagicRice__ProjectileMagicRice_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectileMagicRice_C, UnknownData_87S3, 0x0425);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectileMagicRice_C, UberGraphFrame, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectileMagicRice_C, StaticMesh, 0x0438);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AProjectileMagicRice_C, 0x0440);
		}

		// class ALD_Skin_Nymph_C_Purple_C : public ALD_Skin_Nymph_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Nymph_C_Purple__LD_Skin_Nymph_C_Purple_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Nymph_C_Purple_C, 0x0532);
		}

		// class UIngame_Fade_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Ingame_Fade__Ingame_Fade_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Fade_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Fade_C, Fade, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Fade_C, CanvasPanel_1, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngame_Fade_C, Image_51, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIngame_Fade_C, 0x0268);
		}

		// class ALD_Skin_Vanz_C_Brown_C : public ALD_Skin_Vanz_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Vanz_C_Brown__LD_Skin_Vanz_C_Brown_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Vanz_C_Brown_C, 0x0532);
		}

		// class UGE_StatusSurvivalTim_C : public UGE_StatusSurvivalBase_C
		TEST_METHOD(BlueprintGeneratedClass__GE_StatusSurvivalTim__GE_StatusSurvivalTim_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_StatusSurvivalTim_C, 0x05F8);
		}

		// class ALD_Skin_Jane_A_HighSchool_C : public ALD_Skin_Jane_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Jane_A_HighSchool__LD_Skin_Jane_A_HighSchool_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Jane_A_HighSchool_C, 0x0532);
		}

		// class UWDG_Activity_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WDG_Activity__WDG_Activity_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWDG_Activity_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWDG_Activity_C, ActivityOverlay, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWDG_Activity_C, ActivityItemActiveScale, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWDG_Activity_C, ActivityItemInactiveScale, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWDG_Activity_C, IsBusy, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWDG_Activity_C, UnknownData_SBXW, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWDG_Activity_C, ActivityItemStartX, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWDG_Activity_C, ActivityItemEndX, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWDG_Activity_C, ActivityItemStartY, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWDG_Activity_C, ActivityItemPadding, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWDG_Activity_C, ActivityItemLerpSpeed, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWDG_Activity_C, ActivityItemAnchor, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWDG_Activity_C, 0x0290);
		}

		// class UMale_AnimBlueprint_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Male_AnimBlueprint__Male_AnimBlueprint_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, UnknownData_379A, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, AnimGraphNode_Root_E31962104A92F3C7EAE2C4A23AA9FF15, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, AnimGraphNode_TransitionResult_BAF1E23D4F39C9C2FF872F8E30F8E605, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, AnimGraphNode_TransitionResult_9C682F6C4600A012DFC8798BC4A009FD, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, AnimGraphNode_TransitionResult_3B8CB87C44BD7207EC8C1798A1D05486, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, AnimGraphNode_TransitionResult_1B8A00C34D9B9A146751DDA140753DD8, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, AnimGraphNode_TransitionResult_C0A5880D449E8CD58079EDA69B67D0A2, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, AnimGraphNode_TransitionResult_0A3A111A4F057824E5E5488FD2F47FAE, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, AnimGraphNode_TransitionResult_59329CDC450C8454572F7F974A387B59, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, AnimGraphNode_TransitionResult_15E4C2AF4A399F7A2ADE8E85FF6FD953, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, AnimGraphNode_TransitionResult_DD597D7A4E12E9B063102EBC4E6ABA8D, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, AnimGraphNode_TransitionResult_EDD0F1064FF3B8488E2FFD8F5AABE983, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, AnimGraphNode_TransitionResult_B118F0F94124ACEB719AECA9B3E49947, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, AnimGraphNode_SequencePlayer_D28FB5F243C1E3B10F3DDB8DD5AB1415, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, AnimGraphNode_StateResult_2162545B4A67C3D14D58B5823B89BC1B, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, AnimGraphNode_BlendSpacePlayer_03A7A2934F79D868FCCB04BAE55BFEAE, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, AnimGraphNode_StateResult_306E01BE4CF14C2B901382A59793D0BD, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, AnimGraphNode_TwoWayBlend_A05DA2064B284569D18388AF4EF9080C, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, AnimGraphNode_BlendSpacePlayer_C3F816AF4E31F5D83CE579BC70024F69, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, AnimGraphNode_SequencePlayer_5637CAC34913E1885757F0AB8B76E909, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, AnimGraphNode_StateResult_26BBB3794767F1ED6D9FB2A0E897298F, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, AnimGraphNode_TransitionResult_4ACD443945FFA45F0E2126BB4964E0EE, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, AnimGraphNode_TransitionResult_B15F2F634E6BEA85A9D858913953A3A1, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, AnimGraphNode_SequencePlayer_C48764DA4E2684924EAFF5A7BCF163A0, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, AnimGraphNode_StateResult_84DB0ADC4C5E17B810A91D91562545E5, 0x08F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, AnimGraphNode_SequencePlayer_ED6D8A7841B49FAF31240EA55C790508, 0x0918);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, AnimGraphNode_StateResult_9F51593F429090D01153C3A0BB5483D3, 0x0990);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, AnimGraphNode_SequencePlayer_5788EB424C366C5F5BF7CEA60481AC39, 0x09B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, AnimGraphNode_StateResult_1AAD68FD41C44C256EB71E96DA1FEA32, 0x0A28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, AnimGraphNode_StateMachine_EB1427BB4FC0B95D6187079FD9FDCE6D, 0x0A48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, AnimGraphNode_StateResult_DFBBF69B4D3BAABCB7ECA1AEED10583F, 0x0AF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, AnimGraphNode_BlendSpacePlayer_A314031D408355F0E83035A4434D2241, 0x0B18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, AnimGraphNode_StateResult_B1EC55CF479096E1F9F0E4B57C11DF93, 0x0BF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, AnimGraphNode_StateMachine_6C17A60F494A4B7A655560987DF8B7A2, 0x0C18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, AnimGraphNode_SaveCachedPose_D7AF57A244CBB818C44FE8A07F08E2A3, 0x0CC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, AnimGraphNode_Slot_F410035D458E923D0AA0198E8CAB6112, 0x0D80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, AnimGraphNode_UseCachedPose_EDA335D1411CA67AB4A21192B9171230, 0x0DC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, AnimGraphNode_SaveCachedPose_8FBAC62B4A467CB987FDBA9CE9BA23B9, 0x0DF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, AnimGraphNode_LayeredBoneBlend_B13BB6FC4F9BEDF079D3B1A0E0A0A0D8, 0x0EA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, AnimGraphNode_UseCachedPose_FD203AE140D7BCD72851AD8DD25B6A83, 0x0F60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, AnimGraphNode_UseCachedPose_9B325A9749B8DCE1E4246C80978A406B, 0x0F88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, AnimGraphNode_BlendListByBool_B226D355427052F988E175816878D451, 0x0FB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, AnimGraphNode_UseCachedPose_8A92F1684A090A5B0593DDBF7A0ABBB2, 0x1050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, AnimGraphNode_SaveCachedPose_ABBD42F344D951927B7AAD8BF1629E3D, 0x1078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, AnimGraphNode_LocalToComponentSpace_A3DB46984F445265743624A8BD4E4899, 0x1130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, AnimGraphNode_HandIKRetargeting_7DC3CCA14C794F25A2F208A2017F59FD, 0x1150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, AnimGraphNode_ComponentToLocalSpace_ACC28E76497579786F2C4A86B198C44E, 0x1270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, AnimGraphNode_ModifyBone_1B8A79454C7E1DB23E632DBB99146278, 0x1290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, UnknownData_XO1Q, 0x1398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, AnimGraphNode_TwoBoneIK_1703AA57409F50E39986818750A81F69, 0x13A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, AnimGraphNode_TwoBoneIK_42DA7E164994BB50F08D81A6F6B4C9D4, 0x1580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, AnimGraphNode_ModifyBone_F70762A94C77E1B171A12097890F89F6, 0x1760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, AnimGraphNode_ModifyBone_D28A664A48FEA30CC900A8B1BFAE9068, 0x1868);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, AnimGraphNode_SaveCachedPose_B8B14BCD4AD9DC815167E0902E6D063A, 0x1970);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, AnimGraphNode_UseCachedPose_75F37E7443F9CBD92321F69F5A8070DC, 0x1A28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, AnimGraphNode_UseCachedPose_1B0F88E948EC6AAB7A2507939B04340B, 0x1A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, AnimGraphNode_Slot_4026871449358F32FF0FA6B58454A3DA, 0x1A78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, AnimGraphNode_TwoBoneIK_2ADBFD9F4AD2A433911F83971E39EEB8, 0x1AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, AnimGraphNode_TwoBoneIK_8D9D6EEF4B61DE609AE7ADA9D5F90E18, 0x1CA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, AnimGraphNode_LayeredBoneBlend_F5D3819647F0400495F6EB9B43AD2579, 0x1E80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, AnimGraphNode_SequencePlayer_72ABF2C940F210895F9680BADFE6F669, 0x1F38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, AnimGraphNode_UseCachedPose_AEE8A6D54D3449A2EC6B5BA196F431AA, 0x1FB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, AnimGraphNode_BlendListByBool_422704B64B5C27A48B2F5393A73901E6, 0x1FD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, MoveForward, 0x2078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, MoveRight, 0x207C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, IsInAir, 0x2080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, UnknownData_8I9Z, 0x2081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, Pitch, 0x2084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, Roll, 0x2088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, Yaw, 0x208C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, RotationLastTick, 0x2090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, YawDelta, 0x209C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, IsAccelerating, 0x20A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, FullBody, 0x20A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, IsCrouch, 0x20A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, IsKnockdown, 0x20A3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, IsInjured, 0x20A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, IsSearch, 0x20A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, UnknownData_QH11, 0x20A6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, Survivor_Ref, 0x20A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, FootLeftJointLoc, 0x20B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, FootRightJointLoc, 0x20BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, IK_LeftFoot_Alpha, 0x20C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, IK_RightFoot_Alpha, 0x20CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, RightFootEffectorLoc, 0x20D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, LeftFootEffectorLoc, 0x20D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, IKAdjustOffset, 0x20D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, RightFootRotation, 0x20DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, LeftFootRotation, 0x20E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, IKTraceDistance, 0x20F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, IKFeetInterpSpeed, 0x20F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, DeltaSeconds, 0x20FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, HipsOffest, 0x2100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, IKHipsInterpSpeed, 0x2104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, IKCapsuleHalfHeight, 0x2108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, HandRightEffectorLoc, 0x210C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, HandLeftEffectorLoc, 0x2118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, IKLeftHand_Alpha, 0x2124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, IKRightHand_Alpha, 0x2128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMale_AnimBlueprint_C, bIsEnableIK, 0x212C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMale_AnimBlueprint_C, 0x212D);
		}

		// class ABP_Sky_Sphere_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BP_Sky_Sphere__BP_Sky_Sphere_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, SkySphereMesh, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, Base, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, Sky_material, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, Refresh_material, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, UnknownData_9TSN, 0x0351);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, Directional_light_actor, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, Colors_determined_by_sun_position, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, UnknownData_PZMB, 0x0361);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, Sun_height, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, Sun_brightness, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, Horizon_Falloff, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, Zenith_color, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, Horizon_color, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, Cloud_color, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, Overall_color, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, Cloud_speed, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, Cloud_opacity, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, Stars_brightness, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, UnknownData_M26F, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, Horizon_color_curve, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, Zenith_color_curve, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, Cloud_color_curve, 0x03D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Sky_Sphere_C, 0x03D8);
		}

		// class ALD_Skin_Prisoner_A_SuitB_C : public ALD_Skin_Prisoner_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Prisoner_A_SuitB__LD_Skin_Prisoner_A_SuitB_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Prisoner_A_SuitB_C, 0x0532);
		}

		// class UProgressInterface_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__ProgressInterface__ProgressInterface_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProgressInterface_C, 0x0030);
		}

		// class ALD_Skin_Nymph_B_FrogBlue_C : public ALD_Skin_Nymph_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Nymph_B_FrogBlue__LD_Skin_Nymph_B_FrogBlue_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Nymph_B_FrogBlue_C, 0x0532);
		}

		// class UIInteractable_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__IInteractable__IInteractable_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIInteractable_C, 0x0030);
		}

		// class ALD_Skin_Vanz_Songkran_C : public ALD_Skin_Vanz_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Vanz_Songkran__LD_Skin_Vanz_Songkran_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Vanz_Songkran_C, 0x0532);
		}

		// class UGE_StatusSurvivalAof_C : public UGE_StatusSurvivalBase_C
		TEST_METHOD(BlueprintGeneratedClass__GE_StatusSurvivalAof__GE_StatusSurvivalAof_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_StatusSurvivalAof_C, 0x05F8);
		}

		// class UIIngamePlayerDataSurvivor_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__IIngamePlayerDataSurvivor__IIngamePlayerDataSurvivor_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIIngamePlayerDataSurvivor_C, 0x0030);
		}

		// class UAttackCameraShake_C : public UCameraShake
		TEST_METHOD(BlueprintGeneratedClass__AttackCameraShake__AttackCameraShake_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAttackCameraShake_C, 0x0170);
		}

		// class USQObjective_LastManStand_C : public UQuestObjective_C
		TEST_METHOD(BlueprintGeneratedClass__SQObjective_LastManStand__SQObjective_LastManStand_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USQObjective_LastManStand_C, IsSuccess, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USQObjective_LastManStand_C, 0x0039);
		}

		// class UPingHunterComponent_C : public UPingComponent_C
		TEST_METHOD(BlueprintGeneratedClass__PingHunterComponent__PingHunterComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPingHunterComponent_C, UberGraphFrame, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPingHunterComponent_C, hshcharacter, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPingHunterComponent_C, OnSoundIcon, 0x0180);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPingHunterComponent_C, 0x0190);
		}

		// class ALD_Skin_Vanz_C_Ocean_C : public ALD_Skin_Vanz_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Vanz_C_Ocean__LD_Skin_Vanz_C_Ocean_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Vanz_C_Ocean_C, 0x0532);
		}

		// class UPerkHandleComponent_C : public UPerkHandleComponentNative
		TEST_METHOD(BlueprintGeneratedClass__PerkHandleComponent__PerkHandleComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkHandleComponent_C, UberGraphFrame, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkHandleComponent_C, SpawnCollectTime, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkHandleComponent_C, UnknownData_7YU8, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkHandleComponent_C, AllCharacter, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkHandleComponent_C, AuraData, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkHandleComponent_C, CountCacheTags, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPerkHandleComponent_C, 0x0198);
		}

		// class UChatComponent_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__ChatComponent__ChatComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatComponent_C, UberGraphFrame, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatComponent_C, LimitCacheText, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatComponent_C, UnknownData_HA9Q, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatComponent_C, Chat, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatComponent_C, OnChatUpdate, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatComponent_C, DT_Filter, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChatComponent_C, 0x0140);
		}

		// class APickable_Orb_C : public APickableItemBase_C
		TEST_METHOD(BlueprintGeneratedClass__Pickable_Orb__Pickable_Orb_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APickable_Orb_C, UberGraphFrame, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::APickable_Orb_C, P_RedOrb, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::APickable_Orb_C, Sphere, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APickable_Orb_C, Target, 0x07A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APickable_Orb_C, 0x07B0);
		}

		// class UExecutionSurvivorComponent_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__ExecutionSurvivorComponent__ExecutionSurvivorComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UExecutionSurvivorComponent_C, UberGraphFrame, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExecutionSurvivorComponent_C, survivor, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExecutionSurvivorComponent_C, CacheCamera, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExecutionSurvivorComponent_C, IsAttach, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExecutionSurvivorComponent_C, isExecution, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExecutionSurvivorComponent_C, UnknownData_OSEX, 0x0122);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExecutionSurvivorComponent_C, OnCameraSuccess, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExecutionSurvivorComponent_C, HunterTarget, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExecutionSurvivorComponent_C, SurvivorMontage, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExecutionSurvivorComponent_C, bShouldMoveToTarget, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExecutionSurvivorComponent_C, UnknownData_WA3G, 0x0149);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExecutionSurvivorComponent_C, Distance, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExecutionSurvivorComponent_C, BlendInTime, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExecutionSurvivorComponent_C, BlendOutTime, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExecutionSurvivorComponent_C, State, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExecutionSurvivorComponent_C, CameraMode, 0x0159);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExecutionSurvivorComponent_C, 0x015A);
		}

		// class UItemDecriptionComponent_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__ItemDecriptionComponent__ItemDecriptionComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemDecriptionComponent_C, UberGraphFrame, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemDecriptionComponent_C, Widget, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemDecriptionComponent_C, Enable, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemDecriptionComponent_C, UnknownData_AKXB, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemDecriptionComponent_C, Header, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemDecriptionComponent_C, Description, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UItemDecriptionComponent_C, 0x0150);
		}

		// class ABP_PavilionDock_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BP_PavilionDock__BP_PavilionDock_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PavilionDock_C, SM_PavilionDock_Roof05, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PavilionDock_C, InstancedStaticMesh16, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PavilionDock_C, InstancedStaticMesh15, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PavilionDock_C, InstancedStaticMesh11, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PavilionDock_C, InstancedStaticMesh14, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PavilionDock_C, InstancedStaticMesh13, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PavilionDock_C, InstancedStaticMesh12, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PavilionDock_C, InstancedStaticMesh10, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PavilionDock_C, InstancedStaticMesh, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PavilionDock_C, InstancedStaticMesh8, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PavilionDock_C, InstancedStaticMesh7, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PavilionDock_C, InstancedStaticMesh6, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PavilionDock_C, InstancedStaticMesh5, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PavilionDock_C, InstancedStaticMesh4, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PavilionDock_C, InstancedStaticMesh3, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PavilionDock_C, InstancedStaticMesh2, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PavilionDock_C, InstancedStaticMesh1, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PavilionDock_C, InstancedStaticMesh9, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PavilionDock_C, SM_PavilionDock_Ceiling01, 0x03C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PavilionDock_C, 0x03D0);
		}

		// class ALD_Skin_Vanz_B_Camouflage_C : public ALD_Skin_Vanz_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Vanz_B_Camouflage__LD_Skin_Vanz_B_Camouflage_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Vanz_B_Camouflage_C, 0x0532);
		}

		// class UWidget_ButtonItemIcon_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_ButtonItemIcon__Widget_ButtonItemIcon_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonItemIcon_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonItemIcon_C, Hover, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonItemIcon_C, Button, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonItemIcon_C, icon, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonItemIcon_C, AutoSize, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonItemIcon_C, UnknownData_N9GD, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonItemIcon_C, Size, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonItemIcon_C, UnknownData_K6T1, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonItemIcon_C, OnClicked, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonItemIcon_C, UnHoverAlpha, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonItemIcon_C, HoverAlpha, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonItemIcon_C, Style, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonItemIcon_C, bIsLock, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonItemIcon_C, bIsSelected, 0x0509);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_ButtonItemIcon_C, 0x050A);
		}

		// class ALD_Skin_Prisoner_S_Riffer_C : public ALD_Skin_Prisoner_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Prisoner_S_Riffer__LD_Skin_Prisoner_S_Riffer_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Prisoner_S_Riffer_C, 0x0532);
		}

		// class UWidget_OptionControl_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_OptionControl__Widget_OptionControl_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionControl_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionControl_C, HunterVBox, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionControl_C, SurvivorVBox, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionControl_C, ToggleCounch, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionControl_C, ToggleSprint, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionControl_C, Widget_Button_Active, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionControl_C, Widget_Button_ChoiceControl, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionControl_C, Widget_Button_Default, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionControl_C, Widget_ButtonSlider_ResScale, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionControl_C, Widget_SkillcheckType, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionControl_C, WidgetSwitcher_210, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionControl_C, OptionManager, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionControl_C, OptionControl, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionControl_C, SurvivorControlWidgets, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionControl_C, HunterControlWidgets, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_OptionControl_C, 0x02D0);
		}

		// class AMainMenuDesktop_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__MainMenuDesktop__MainMenuDesktop_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMainMenuDesktop_C, 0x0340);
		}

		// class ALD_Skin_Jane_B_UK_C : public ALD_Skin_Jane_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Jane_B_UK__LD_Skin_Jane_B_UK_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Jane_B_UK_C, 0x0532);
		}

		// class UGA_PA_HunterPrayPhaseShift_C : public UGA_PA_HunterBase_C
		TEST_METHOD(BlueprintGeneratedClass__GA_PA_HunterPrayPhaseShift__GA_PA_HunterPrayPhaseShift_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_PA_HunterPrayPhaseShift_C, UberGraphFrame, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_PA_HunterPrayPhaseShift_C, Montage, 0x0460);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_PA_HunterPrayPhaseShift_C, 0x0468);
		}

		// class ALD_Skin_Vanz_S_USA_C : public ALD_Skin_Vanz_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Vanz_S_USA__LD_Skin_Vanz_S_USA_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Vanz_S_USA_C, 0x0532);
		}

		// class UGE_PP_SurvivorWeaknessDetector_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_PP_SurvivorWeaknessDetector__GE_PP_SurvivorWeaknessDetector_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_PP_SurvivorWeaknessDetector_C, 0x05F8);
		}

		// class ALD_Skin_Jane_C_Purple_C : public ALD_Skin_Jane_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Jane_C_Purple__LD_Skin_Jane_C_Purple_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Jane_C_Purple_C, 0x0532);
		}

		// class ALD_Skin_Prisoner_B_Orange_C : public ALD_Skin_Prisoner_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Prisoner_B_Orange__LD_Skin_Prisoner_B_Orange_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Prisoner_B_Orange_C, 0x0532);
		}

		// class ALD_Skin_SeGuard_C_Turquoise_C : public ALD_Skin_SeGuard_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_SeGuard_C_Turquoise__LD_Skin_SeGuard_C_Turquoise_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_SeGuard_C_Turquoise_C, 0x0532);
		}

		// class UGarchaCameraShake_C : public UCameraShake
		TEST_METHOD(BlueprintGeneratedClass__GarchaCameraShake__GarchaCameraShake_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarchaCameraShake_C, NewVar_1, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGarchaCameraShake_C, 0x0171);
		}

		// class ARandomObjectiveActor_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__RandomObjectiveActor__RandomObjectiveActor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ARandomObjectiveActor_C, Billboard, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARandomObjectiveActor_C, TextRender, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARandomObjectiveActor_C, bIsActive, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARandomObjectiveActor_C, UnknownData_V4R7, 0x0349);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARandomObjectiveActor_C, Pattern, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARandomObjectiveActor_C, 0x0360);
		}

		// class ABP_FogSheet_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BP_FogSheet__BP_FogSheet_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FogSheet_C, FogSheet, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FogSheet_C, FogSheetMasterMaterialFaceCamera, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FogSheet_C, FogSheetMasterMaterial, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FogSheet_C, FogSheetMID, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FogSheet_C, Color, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FogSheet_C, Brightness, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FogSheet_C, Size, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FogSheet_C, Opacity, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FogSheet_C, DepthFadeDistance, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FogSheet_C, NoiseProjectionDistance, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FogSheet_C, NoiseSize, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FogSheet_C, PanningSpeed, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FogSheet_C, FadeDistance, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FogSheet_C, X_Direction, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FogSheet_C, Y_Direction, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FogSheet_C, MaxDrawDistance, 0x0398);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_FogSheet_C, 0x039C);
		}

		// class UHSHTargetTypeCamera_C : public UHSHTargetTypeConeTrace_C
		TEST_METHOD(BlueprintGeneratedClass__HSHTargetTypeCamera__HSHTargetTypeCamera_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHSHTargetTypeCamera_C, 0x0060);
		}

		// class ALD_Head_Sur_Hat00029_C : public ALD_Head_Sur_Base_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Head_Sur_Hat00029__LD_Head_Sur_Hat00029_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Head_Sur_Hat00029_C, 0x0568);
		}

		// class ALD_Skin_Prisoner_B_Green_C : public ALD_Skin_Prisoner_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Prisoner_B_Green__LD_Skin_Prisoner_B_Green_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Prisoner_B_Green_C, 0x0532);
		}

		// class ALD_Skin_SeGuard_C_Muddy_C : public ALD_Skin_SeGuard_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_SeGuard_C_Muddy__LD_Skin_SeGuard_C_Muddy_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_SeGuard_C_Muddy_C, 0x0532);
		}

		// class ALD_Skin_Belle_S_SailorFuku_C : public ALD_Skin_Belle_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Belle_S_SailorFuku__LD_Skin_Belle_S_SailorFuku_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Belle_S_SailorFuku_C, 0x0532);
		}

		// class AHSURPlayerState_C : public AHSHPlayerStateNative
		TEST_METHOD(BlueprintGeneratedClass__HSURPlayerState__HSURPlayerState_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURPlayerState_C, UberGraphFrame, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURPlayerState_C, DefaultSceneRoot, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURPlayerState_C, PlayerRole, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURPlayerState_C, Status, 0x0479);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURPlayerState_C, UnknownData_16AR, 0x047A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURPlayerState_C, NormalStatusImage, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURPlayerState_C, SoulStatusImage, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURPlayerState_C, PlayerCharacterClass, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURPlayerState_C, DeathCount, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURPlayerState_C, bIsSturdyUsed, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURPlayerState_C, UnknownData_5JNR, 0x049D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURPlayerState_C, CharacterIcon, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURPlayerState_C, CharacterIconSlateBrush, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHSURPlayerState_C, PlayerInfo, 0x05B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHSURPlayerState_C, 0x06C0);
		}

		// class ALD_Skin_Prisoner_C_OffWhite_C : public ALD_Skin_Prisoner_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Prisoner_C_OffWhite__LD_Skin_Prisoner_C_OffWhite_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Prisoner_C_OffWhite_C, 0x0532);
		}

		// class UNS_LockCharacterRotate_C : public UAnimNotifyState
		TEST_METHOD(BlueprintGeneratedClass__NS_LockCharacterRotate__NS_LockCharacterRotate_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNS_LockCharacterRotate_C, 0x0038);
		}

		// class ALD_Skin_Student_C_Red_C : public ALD_Skin_Student_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Student_C_Red__LD_Skin_Student_C_Red_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Student_C_Red_C, 0x0532);
		}

		// class UAudioCurveSourceComponent : public UAudioComponent
		TEST_METHOD(Class__FacialAnimation__AudioCurveSourceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioCurveSourceComponent, CurveSourceBindingName, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioCurveSourceComponent, CurveSyncOffset, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioCurveSourceComponent, UnknownData_PYRE, 0x075C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioCurveSourceComponent, 0x0790);
		}

		// class UPickableConditionNotFullHP_C : public UPickableConditionBase_C
		TEST_METHOD(BlueprintGeneratedClass__PickableConditionNotFullHP__PickableConditionNotFullHP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPickableConditionNotFullHP_C, 0x0030);
		}

		// class ATrapActorHolyThread_C : public ATrapActorBase_C
		TEST_METHOD(BlueprintGeneratedClass__TrapActorHolyThread__TrapActorHolyThread_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapActorHolyThread_C, UberGraphFrame, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrapActorHolyThread_C, HolyThreadActor, 0x0448);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATrapActorHolyThread_C, 0x0450);
		}

		// class UMaterialShaderQualitySettings : public UObject
		TEST_METHOD(Class__MaterialShaderQualitySettings__MaterialShaderQualitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialShaderQualitySettings, ForwardSettingMap, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialShaderQualitySettings, 0x0080);
		}

		// class UShaderPlatformQualitySettings : public UObject
		TEST_METHOD(Class__MaterialShaderQualitySettings__ShaderPlatformQualitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UShaderPlatformQualitySettings, QualityOverrides, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShaderPlatformQualitySettings, UnknownData_OLNY, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShaderPlatformQualitySettings, 0x0058);
		}

		// class ALD_Skin_Nymph_A_Purple_C : public ALD_Skin_Nymph_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Nymph_A_Purple__LD_Skin_Nymph_A_Purple_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Nymph_A_Purple_C, 0x0532);
		}

		// class UGE_Hunter_Specter_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Hunter_Specter__GE_Hunter_Specter_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Hunter_Specter_C, 0x05F8);
		}

		// class UDropMovementComponent_C : public UDropMovementComponentBase
		TEST_METHOD(BlueprintGeneratedClass__DropMovementComponent__DropMovementComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDropMovementComponent_C, UberGraphFrame, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDropMovementComponent_C, ParentActor, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDropMovementComponent_C, Safe_Zone, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDropMovementComponent_C, UnknownData_L04G, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDropMovementComponent_C, NewVar_1, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDropMovementComponent_C, 0x0138);
		}

		// class AGameplayDebuggerCategoryReplicator : public AActor
		TEST_METHOD(Class__GameplayDebugger__GameplayDebuggerCategoryReplicator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayDebuggerCategoryReplicator, OwnerPC, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayDebuggerCategoryReplicator, bIsEnabled, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayDebuggerCategoryReplicator, UnknownData_0AIJ, 0x0341);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayDebuggerCategoryReplicator, ReplicatedData, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayDebuggerCategoryReplicator, DebugActor, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayDebuggerCategoryReplicator, RenderingComp, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayDebuggerCategoryReplicator, UnknownData_RVNE, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameplayDebuggerCategoryReplicator, 0x03A8);
		}

		// class UGameplayDebuggerConfig : public UObject
		TEST_METHOD(Class__GameplayDebugger__GameplayDebuggerConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayDebuggerConfig, ActivationKey, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayDebuggerConfig, CategoryRowNextKey, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayDebuggerConfig, CategoryRowPrevKey, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayDebuggerConfig, CategorySlot0, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayDebuggerConfig, CategorySlot1, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayDebuggerConfig, CategorySlot2, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayDebuggerConfig, CategorySlot3, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayDebuggerConfig, CategorySlot4, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayDebuggerConfig, CategorySlot5, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayDebuggerConfig, CategorySlot6, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayDebuggerConfig, CategorySlot7, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayDebuggerConfig, CategorySlot8, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayDebuggerConfig, CategorySlot9, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayDebuggerConfig, DebugCanvasPaddingLeft, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayDebuggerConfig, DebugCanvasPaddingRight, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayDebuggerConfig, DebugCanvasPaddingTop, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayDebuggerConfig, DebugCanvasPaddingBottom, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayDebuggerConfig, Categories, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayDebuggerConfig, Extensions, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayDebuggerConfig, UnknownData_26BV, 0x0198);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayDebuggerConfig, 0x0258);
		}

		// class UGameplayDebuggerLocalController : public UObject
		TEST_METHOD(Class__GameplayDebugger__GameplayDebuggerLocalController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayDebuggerLocalController, CachedReplicator, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayDebuggerLocalController, CachedPlayerManager, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayDebuggerLocalController, DebugActorCandidate, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayDebuggerLocalController, UnknownData_VJ4Y, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayDebuggerLocalController, 0x0140);
		}

		// class AGameplayDebuggerPlayerManager : public AActor
		TEST_METHOD(Class__GameplayDebugger__GameplayDebuggerPlayerManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayDebuggerPlayerManager, playerData, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayDebuggerPlayerManager, PendingRegistrations, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayDebuggerPlayerManager, UnknownData_6W0L, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameplayDebuggerPlayerManager, 0x0360);
		}

		// class UGameplayDebuggerRenderingComponent : public UPrimitiveComponent
		TEST_METHOD(Class__GameplayDebugger__GameplayDebuggerRenderingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayDebuggerRenderingComponent, UnknownData_E6SC, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayDebuggerRenderingComponent, UnknownData_00S6, 0x0580);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayDebuggerRenderingComponent, 0x05E0);
		}

		// class ALD_Skin_Belle_C_Aqua_C : public ALD_Skin_Belle_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Belle_C_Aqua__LD_Skin_Belle_C_Aqua_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Belle_C_Aqua_C, 0x0532);
		}

		// class UNS_Water_C : public UAnimNotifyState
		TEST_METHOD(BlueprintGeneratedClass__NS_Water__NS_Water_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNS_Water_C, Tag, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNS_Water_C, 0x0040);
		}

		// class ALD_Skin_Prisoner_S_Bloody_C : public ALD_Skin_Prisoner_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Prisoner_S_Bloody__LD_Skin_Prisoner_S_Bloody_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Prisoner_S_Bloody_C, 0x0532);
		}

		// class UIHSHAIController_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__IHSHAIController__IHSHAIController_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIHSHAIController_C, 0x0030);
		}

		// class ALD_Skin_Tim_C_Brown_C : public ALD_Skin_Tim_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Tim_C_Brown__LD_Skin_Tim_C_Brown_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Tim_C_Brown_C, 0x0532);
		}

		// class UGE_Debuff_SpecterExit_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Debuff_SpecterExit__GE_Debuff_SpecterExit_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Debuff_SpecterExit_C, 0x05F8);
		}

		// class ALD_Skin_Vanz_C_Red_C : public ALD_Skin_Vanz_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Vanz_C_Red__LD_Skin_Vanz_C_Red_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Vanz_C_Red_C, 0x0532);
		}

		// class ALD_Skin_Belle_B_Dotted_C : public ALD_Skin_Belle_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Belle_B_Dotted__LD_Skin_Belle_B_Dotted_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Belle_B_Dotted_C, 0x0532);
		}

		// class ALD_Skin_Prisoner_C_Sky_C : public ALD_Skin_Prisoner_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Prisoner_C_Sky__LD_Skin_Prisoner_C_Sky_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Prisoner_C_Sky_C, 0x0532);
		}

		// class UBTDecorator_IsMovable_C : public UBTDecorator_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTDecorator_IsMovable__BTDecorator_IsMovable_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_IsMovable_C, 0x00A8);
		}

		// class ALD_Skin_TouristJap_D_Default_C : public ALD_Skin_Base_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_TouristJap_D_Default__LD_Skin_TouristJap_D_Default_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_TouristJap_D_Default_C, 0x0532);
		}

		// class AFogManager_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__FogManager__FogManager_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFogManager_C, UberGraphFrame, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFogManager_C, Billboard, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFogManager_C, TextRender, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFogManager_C, Scene, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFogManager_C, IsInitialize, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFogManager_C, UnknownData_OZIN, 0x0361);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFogManager_C, HunterPreset, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFogManager_C, SurvivorPreset, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFogManager_C, UnknownData_ZPM2, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFogManager_C, Fog, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFogManager_C, SpectatorPreset, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFogManager_C, PostProcess, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFogManager_C, Cache, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFogManager_C, PostProcessMaterial, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFogManager_C, Time, 0x03A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFogManager_C, 0x03AC);
		}

		// class UAvfMediaSettings : public UObject
		TEST_METHOD(Class__AvfMediaFactory__AvfMediaSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvfMediaSettings, NativeAudioOut, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvfMediaSettings, UnknownData_EDB9, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAvfMediaSettings, 0x0038);
		}

		// class UGE_CooldownDoorSlam_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_CooldownDoorSlam__GE_CooldownDoorSlam_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_CooldownDoorSlam_C, 0x05F8);
		}

		// class UGE_Buff_AutoGuard_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Buff_AutoGuard__GE_Buff_AutoGuard_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Buff_AutoGuard_C, 0x05F8);
		}

		// class ALD_Skin_Jane_A_EmoBlue_C : public ALD_Skin_Jane_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Jane_A_EmoBlue__LD_Skin_Jane_A_EmoBlue_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Jane_A_EmoBlue_C, 0x0532);
		}

		// class ULightPropagationVolumeBlendable : public UObject
		TEST_METHOD(Class__LightPropagationVolumeRuntime__LightPropagationVolumeBlendable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightPropagationVolumeBlendable, UnknownData_PTDK, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightPropagationVolumeBlendable, Settings, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightPropagationVolumeBlendable, BlendWeight, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightPropagationVolumeBlendable, UnknownData_UTN9, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightPropagationVolumeBlendable, 0x0080);
		}

		// class UNavArea_LowCost_C : public UNavArea
		TEST_METHOD(BlueprintGeneratedClass__NavArea_LowCost__NavArea_LowCost_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea_LowCost_C, 0x0050);
		}

		// class ALD_Skin_Belle_B_Bee_C : public ALD_Skin_Belle_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Belle_B_Bee__LD_Skin_Belle_B_Bee_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Belle_B_Bee_C, 0x0532);
		}

		// class UDmgTypeBP_Environmental_C : public UDamageType
		TEST_METHOD(BlueprintGeneratedClass__DmgTypeBP_Environmental__DmgTypeBP_Environmental_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDmgTypeBP_Environmental_C, 0x0048);
		}

		// class UIOptionSubscriber_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__IOptionSubscriber__IOptionSubscriber_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIOptionSubscriber_C, 0x0030);
		}

		// class ALD_Skin_Jane_C_Navy_C : public ALD_Skin_Jane_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Jane_C_Navy__LD_Skin_Jane_C_Navy_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Jane_C_Navy_C, 0x0532);
		}

		// class UGE_Buff_SpawnDagger_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Buff_SpawnDagger__GE_Buff_SpawnDagger_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Buff_SpawnDagger_C, 0x05F8);
		}

		// class UNS_DisableAction_C : public UAnimNotifyState
		TEST_METHOD(BlueprintGeneratedClass__NS_DisableAction__NS_DisableAction_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNS_DisableAction_C, 0x0038);
		}

		// class UDestroyObjectCameraShake_C : public UCameraShake
		TEST_METHOD(BlueprintGeneratedClass__DestroyObjectCameraShake__DestroyObjectCameraShake_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDestroyObjectCameraShake_C, 0x0170);
		}

		// class ALD_Skin_Tim_C_Brick_C : public ALD_Skin_Tim_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Tim_C_Brick__LD_Skin_Tim_C_Brick_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Tim_C_Brick_C, 0x0532);
		}

		// class AZBingCat_PreviewItem_Soul_C : public AZBingCat_PreviewItemBase_C
		TEST_METHOD(BlueprintGeneratedClass__ZBingCat_PreviewItem_Soul__ZBingCat_PreviewItem_Soul_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AZBingCat_PreviewItem_Soul_C, ParticleSystem, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AZBingCat_PreviewItem_Soul_C, 0x0358);
		}

		// class UGE_Debuff_Stun_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Debuff_Stun__GE_Debuff_Stun_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Debuff_Stun_C, 0x05F8);
		}

		// class AZBingCat_PreviewItem_HolyWater_C : public AZBingCat_PreviewItemBase_C
		TEST_METHOD(BlueprintGeneratedClass__ZBingCat_PreviewItem_HolyWater__ZBingCat_PreviewItem_HolyWater_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AZBingCat_PreviewItem_HolyWater_C, 0x0350);
		}

		// class UPingComponent_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__PingComponent__PingComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPingComponent_C, UberGraphFrame, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPingComponent_C, PlayerClass, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPingComponent_C, EnemyClass, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPingComponent_C, Distance, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPingComponent_C, DebugDrawType, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPingComponent_C, TraceChannel, 0x0125);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPingComponent_C, UnknownData_CQV6, 0x0126);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPingComponent_C, HUD, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPingComponent_C, PingReplicate, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPingComponent_C, CanSendSound, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPingComponent_C, UnknownData_7TPZ, 0x0141);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPingComponent_C, TimerHandle_EnableSendSound, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPingComponent_C, bIsPossess, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPingComponent_C, UnknownData_B790, 0x0151);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPingComponent_C, OnPingUpdated, 0x0158);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPingComponent_C, 0x0168);
		}

		// class APreviewMeshActor_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__PreviewMeshActor__PreviewMeshActor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APreviewMeshActor_C, UberGraphFrame, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::APreviewMeshActor_C, StaticMesh, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::APreviewMeshActor_C, Scene, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::APreviewMeshActor_C, RefActor, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::APreviewMeshActor_C, IsShowMesh, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APreviewMeshActor_C, 0x0361);
		}

		// class USQObjective_DebugAlwaySuccess_C : public UQuestObjective_C
		TEST_METHOD(BlueprintGeneratedClass__SQObjective_DebugAlwaySuccess__SQObjective_DebugAlwaySuccess_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USQObjective_DebugAlwaySuccess_C, 0x0038);
		}

		// class ALD_Skin_Tim_C_Violet_C : public ALD_Skin_Tim_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Tim_C_Violet__LD_Skin_Tim_C_Violet_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Tim_C_Violet_C, 0x0532);
		}

		// class UWidget_PlayerProfile_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_PlayerProfile__Widget_PlayerProfile_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlayerProfile_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlayerProfile_C, Searching, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlayerProfile_C, BG, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlayerProfile_C, Image_1, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlayerProfile_C, Image_2, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlayerProfile_C, Image_3, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlayerProfile_C, Image_4, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlayerProfile_C, Image_Coin, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlayerProfile_C, TextBlock_47, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlayerProfile_C, TextBlock_Coin, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlayerProfile_C, TextBlock_Fang, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlayerProfile_C, TextBlock_Level, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlayerProfile_C, TextBlock_LevelNumber, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlayerProfile_C, TextBlock_Name, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlayerProfile_C, TextBlock_Token, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlayerProfile_C, Widget_Button, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlayerProfile_C, Widget_Button_Invite, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlayerProfile_C, Widget_PartyMember_C_1, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlayerProfile_C, Widget_PartyMember_C_2, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlayerProfile_C, Widget_PartyMember_C_3, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlayerProfile_C, Widget_PartyMember_C_4, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlayerProfile_C, OnProfileImage, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlayerProfile_C, WidgetManager, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlayerProfile_C, OnLobbyDataUpdate, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlayerProfile_C, IsLobbyReady, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlayerProfile_C, UnknownData_2JXT, 0x0319);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlayerProfile_C, LobbyID, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlayerProfile_C, MembersWidget, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlayerProfile_C, DebugPlayerID, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlayerProfile_C, SteamLobby, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PlayerProfile_C, PlayerProfile, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_PlayerProfile_C, 0x0408);
		}

		// class AEffectActor_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__EffectActor__EffectActor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AEffectActor_C, UberGraphFrame, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEffectActor_C, StaticMesh, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEffectActor_C, Scene, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEffectActor_C, bIsActive, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AEffectActor_C, 0x0359);
		}

		// class UN_PerkActive_C : public UAnimNotify
		TEST_METHOD(BlueprintGeneratedClass__N_PerkActive__N_PerkActive_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UN_PerkActive_C, Tag, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UN_PerkActive_C, 0x0048);
		}

		// class ULoadingWidget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__LoadingWidget__LoadingWidget_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULoadingWidget_C, 0x0240);
		}

		// class ALD_Skin_Vanz_A_FisherBlue_C : public ALD_Skin_Vanz_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Vanz_A_FisherBlue__LD_Skin_Vanz_A_FisherBlue_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Vanz_A_FisherBlue_C, 0x0532);
		}

		// class UGE_Buff_SpawnCamera_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Buff_SpawnCamera__GE_Buff_SpawnCamera_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Buff_SpawnCamera_C, 0x05F8);
		}

		// class UGE_GeneralStartSprint_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_GeneralStartSprint__GE_GeneralStartSprint_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_GeneralStartSprint_C, 0x05F8);
		}

		// class UWidget_HSHSLogo_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_HSHSLogo__Widget_HSHSLogo_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_HSHSLogo_C, Image_40, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_HSHSLogo_C, 0x0248);
		}

		// class UBTDecorator_IfHaveRitualState2_C : public UBTDecorator_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTDecorator_IfHaveRitualState2__BTDecorator_IfHaveRitualState2_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IfHaveRitualState2_C, TargetPointKey, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IfHaveRitualState2_C, TargetLocationKey, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_IfHaveRitualState2_C, 0x00F8);
		}

		// class UGE_WeaponBelleHeavy_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_WeaponBelleHeavy__GE_WeaponBelleHeavy_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_WeaponBelleHeavy_C, 0x05F8);
		}

		// class UNS_PlaceIncense_C : public UAnimNotifyState
		TEST_METHOD(BlueprintGeneratedClass__NS_PlaceIncense__NS_PlaceIncense_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNS_PlaceIncense_C, Tag, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNS_PlaceIncense_C, 0x0040);
		}

		// class UWidget_CharacterSelectorIcon_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_CharacterSelectorIcon__Widget_CharacterSelectorIcon_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSelectorIcon_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSelectorIcon_C, Hover, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSelectorIcon_C, UnFocus, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSelectorIcon_C, Focus, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSelectorIcon_C, BG, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSelectorIcon_C, Button_1, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSelectorIcon_C, Frame, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSelectorIcon_C, IMG_Character, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSelectorIcon_C, SizeBox_1, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSelectorIcon_C, characteritem, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSelectorIcon_C, OnClick, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSelectorIcon_C, IsEquipped, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSelectorIcon_C, UnknownData_ITDP, 0x02A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSelectorIcon_C, OnHover, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSelectorIcon_C, OnUnHover, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSelectorIcon_C, HoverAlpha, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSelectorIcon_C, UnHoverAlpha, 0x02D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_CharacterSelectorIcon_C, 0x02D8);
		}

		// class ALD_Skin_Jane_S_WonderW_C : public ALD_Skin_Jane_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Jane_S_WonderW__LD_Skin_Jane_S_WonderW_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Jane_S_WonderW_C, 0x0532);
		}

		// class UGE_State_HaveBareHand_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_State_HaveBareHand__GE_State_HaveBareHand_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_State_HaveBareHand_C, 0x05F8);
		}

		// class UGE_Buff_Sturdy_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Buff_Sturdy__GE_Buff_Sturdy_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Buff_Sturdy_C, 0x05F8);
		}

		// class UNS_HandIK_C : public UAnimNotifyState
		TEST_METHOD(BlueprintGeneratedClass__NS_HandIK__NS_HandIK_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNS_HandIK_C, Tag, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNS_HandIK_C, InteractType, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNS_HandIK_C, HandIK, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNS_HandIK_C, UnknownData_8W46, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNS_HandIK_C, RightSnapSocket, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNS_HandIK_C, LeftSnapSocket, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNS_HandIK_C, 0x0054);
		}

		// class UIRitualState_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__IRitualState__IRitualState_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIRitualState_C, 0x0030);
		}

		// class APickable_HolyKnife_C : public APickable_WeaponBase_C
		TEST_METHOD(BlueprintGeneratedClass__Pickable_HolyKnife__Pickable_HolyKnife_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APickable_HolyKnife_C, UberGraphFrame, 0x07A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APickable_HolyKnife_C, 0x07B0);
		}

		// class UGE_Buff_ImmuneSurvivor_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Buff_ImmuneSurvivor__GE_Buff_ImmuneSurvivor_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Buff_ImmuneSurvivor_C, 0x05F8);
		}

		// class AHeadActorBase_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__HeadActorBase__HeadActorBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHeadActorBase_C, Scene, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHeadActorBase_C, 0x0340);
		}

		// class ALD_Skin_Prisoner_B_Dusty_C : public ALD_Skin_Prisoner_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Prisoner_B_Dusty__LD_Skin_Prisoner_B_Dusty_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Prisoner_B_Dusty_C, 0x0532);
		}

		// class ALD_Skin_Nymph_A_Green_C : public ALD_Skin_Nymph_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Nymph_A_Green__LD_Skin_Nymph_A_Green_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Nymph_A_Green_C, 0x0532);
		}

		// class UGE_Debuff_DecreaseMoveSpeed_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Debuff_DecreaseMoveSpeed__GE_Debuff_DecreaseMoveSpeed_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Debuff_DecreaseMoveSpeed_C, 0x05F8);
		}

		// class UGE_Buff_StaminaAfterAtked_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Buff_StaminaAfterAtked__GE_Buff_StaminaAfterAtked_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Buff_StaminaAfterAtked_C, 0x05F8);
		}

		// class UGE_RitualState_00_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_RitualState_00__GE_RitualState_00_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_RitualState_00_C, 0x05F8);
		}

		// class UGE_CooldownConfusion_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_CooldownConfusion__GE_CooldownConfusion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_CooldownConfusion_C, 0x05F8);
		}

		// class ABackActorBase_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BackActorBase__BackActorBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABackActorBase_C, Scene, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABackActorBase_C, 0x0340);
		}

		// class UGE_Debuff_StunMini_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Debuff_StunMini__GE_Debuff_StunMini_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Debuff_StunMini_C, 0x05F8);
		}

		// class ALD_Skin_Jane_B_Bunny_C : public ALD_Skin_Jane_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Jane_B_Bunny__LD_Skin_Jane_B_Bunny_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Jane_B_Bunny_C, 0x0532);
		}

		// class ALD_Skin_Nymph_A_Orange_C : public ALD_Skin_Nymph_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Nymph_A_Orange__LD_Skin_Nymph_A_Orange_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Nymph_A_Orange_C, 0x0532);
		}

		// class ABloodTrailActor_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BloodTrailActor__BloodTrailActor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABloodTrailActor_C, UberGraphFrame, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABloodTrailActor_C, Scene, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABloodTrailActor_C, Target, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABloodTrailActor_C, Trail, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABloodTrailActor_C, TimerCountRemoveTrail, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABloodTrailActor_C, TimerMaxRemoveTrail, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABloodTrailActor_C, MaxTrackLocation, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABloodTrailActor_C, TimerCountCache, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABloodTrailActor_C, TimerMaxCache, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABloodTrailActor_C, UnknownData_24TO, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABloodTrailActor_C, Spline, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABloodTrailActor_C, 0x0388);
		}

		// class UGE_RitualState_02_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_RitualState_02__GE_RitualState_02_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_RitualState_02_C, 0x05F8);
		}

		// class ALD_Skin_Tim_S_Macho_C : public ALD_Skin_Tim_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Tim_S_Macho__LD_Skin_Tim_S_Macho_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Tim_S_Macho_C, 0x0532);
		}

		// class UGE_PP_HunterTremorSmash_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_PP_HunterTremorSmash__GE_PP_HunterTremorSmash_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_PP_HunterTremorSmash_C, 0x05F8);
		}

		// class UGE_WeaponSurvivorHolyKnifeThow_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_WeaponSurvivorHolyKnifeThow__GE_WeaponSurvivorHolyKnifeThow_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_WeaponSurvivorHolyKnifeThow_C, 0x05F8);
		}

		// class ALD_Skin_Nymph_BlueStriped_C : public ALD_Skin_Nymph_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Nymph_BlueStriped__LD_Skin_Nymph_BlueStriped_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Nymph_BlueStriped_C, 0x0532);
		}

		// class UN_CheckAfterHit_C : public UAnimNotify
		TEST_METHOD(BlueprintGeneratedClass__N_CheckAfterHit__N_CheckAfterHit_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UN_CheckAfterHit_C, 0x0040);
		}

		// class ALD_Sticker_Base_C : public ALD_3DWidgetBase_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Sticker_Base__LD_Sticker_Base_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Sticker_Base_C, 0x0530);
		}

		// class UGE_GeneralExecutionHeal_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_GeneralExecutionHeal__GE_GeneralExecutionHeal_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_GeneralExecutionHeal_C, 0x05F8);
		}

		// class ALD_Skin_Vanz_C_Purple_C : public ALD_Skin_Vanz_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Vanz_C_Purple__LD_Skin_Vanz_C_Purple_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Vanz_C_Purple_C, 0x0532);
		}

		// class UNS_DisableInput_C : public UAnimNotifyState
		TEST_METHOD(BlueprintGeneratedClass__NS_DisableInput__NS_DisableInput_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNS_DisableInput_C, 0x0038);
		}

		// class URandomObjectiveComponent_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__RandomObjectiveComponent__RandomObjectiveComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URandomObjectiveComponent_C, UberGraphFrame, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::URandomObjectiveComponent_C, bActive, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::URandomObjectiveComponent_C, UnknownData_CKPA, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::URandomObjectiveComponent_C, randomObjectList, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::URandomObjectiveComponent_C, RandomList, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::URandomObjectiveComponent_C, bInitialize, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::URandomObjectiveComponent_C, UnknownData_C4YB, 0x0139);
			CHEAT_GEAR_CHECK_OFFSET(CG::URandomObjectiveComponent_C, RandomPatternActor, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::URandomObjectiveComponent_C, RandomPattern, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URandomObjectiveComponent_C, 0x0158);
		}

		// class UWidget_Button_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_Button__Widget_Button_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_C, FadeAnimation, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_C, PopUpAnimation, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_C, Button_This, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_C, TextBlock_2, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_C, Text, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_C, AutoSize, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_C, bUpperCase, 0x0289);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_C, UnknownData_0VGS, 0x028A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_C, Size, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_C, UnknownData_HSEX, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_C, OnClicked, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_C, FontSize, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_C, UnHoverAlpha, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_C, HoverAlpha, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_C, UnknownData_RMQ6, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_C, Style, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_C, TextTransfom, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_C, TextJustify, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_C, UnknownData_V9NE, 0x0539);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_C, Font, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_C, FontColor, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_Button_C, AnimationType, 0x05B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_Button_C, 0x05B9);
		}

		// class UWidget_ImageSkill_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_ImageSkill__Widget_ImageSkill_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImageSkill_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImageSkill_C, FinishedCooldown, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImageSkill_C, Image_BG, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImageSkill_C, Image_Block, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImageSkill_C, Image_Border, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImageSkill_C, Image_CooldownEffect, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImageSkill_C, Image_input, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImageSkill_C, Image_Skill, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImageSkill_C, Panel_Charge, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImageSkill_C, ProgressBar_Cooldown, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImageSkill_C, TextBlock_92, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImageSkill_C, TextBlock_Charge, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImageSkill_C, Skill_Offset, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImageSkill_C, Skill_Brush, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImageSkill_C, Input_Offset, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImageSkill_C, Input_Brush, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImageSkill_C, bIsBlock, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImageSkill_C, UnknownData_08ZR, 0x03D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImageSkill_C, Cooldown_Style, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImageSkill_C, Cooldown, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImageSkill_C, Cooldown_FillColor, 0x0584);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImageSkill_C, bEnableCharge, 0x0594);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImageSkill_C, UnknownData_G7DJ, 0x0595);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImageSkill_C, Charge, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImageSkill_C, Charge_Position, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImageSkill_C, Charge_Font, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImageSkill_C, bIsCooldown, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImageSkill_C, UnknownData_62MI, 0x0609);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImageSkill_C, ActionName, 0x060C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImageSkill_C, TimeRemaining, 0x0614);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImageSkill_C, bIsShowInput, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImageSkill_C, UnknownData_S4FJ, 0x0619);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ImageSkill_C, FontColor, 0x0620);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_ImageSkill_C, 0x0648);
		}

		// class UWidget_ButtonBuying_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_ButtonBuying__Widget_ButtonBuying_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonBuying_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonBuying_C, UnHoverAnimation, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonBuying_C, HoverAnimation, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonBuying_C, Button_This, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonBuying_C, Image_Icon, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonBuying_C, SizeBox_108, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonBuying_C, TextBlock_2, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonBuying_C, PriceText, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonBuying_C, AutoSize, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonBuying_C, bUpperCase, 0x0299);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonBuying_C, UnknownData_T2CN, 0x029A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonBuying_C, Size, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonBuying_C, UnknownData_BL60, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonBuying_C, OnClicked, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonBuying_C, FontSize, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonBuying_C, UnHoverAlpha, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonBuying_C, HoverAlpha, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonBuying_C, UnknownData_TAYL, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonBuying_C, Style, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonBuying_C, TextTransfom, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonBuying_C, TextJustify, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonBuying_C, UnknownData_QE36, 0x0549);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonBuying_C, Font, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonBuying_C, CurrencyType, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonBuying_C, bShowIcon, 0x05A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_ButtonBuying_C, 0x05A2);
		}

		// class UIIngameHunterUI_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__IIngameHunterUI__IIngameHunterUI_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIIngameHunterUI_C, 0x0030);
		}

		// class UBTDecorator_IfPortalOpen_C : public UBTDecorator_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTDecorator_IfPortalOpen__BTDecorator_IfPortalOpen_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IfPortalOpen_C, TargetPointKey, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_IfPortalOpen_C, 0x00D0);
		}

		// class ALD_Skin_Jane_B_NY_C : public ALD_Skin_Jane_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Jane_B_NY__LD_Skin_Jane_B_NY_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Jane_B_NY_C, 0x0532);
		}

		// class AAIController_Hunter_Prisoner_C : public AAIController_Hunter_C
		TEST_METHOD(BlueprintGeneratedClass__AIController_Hunter_Prisoner__AIController_Hunter_Prisoner_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController_Hunter_Prisoner_C, UnknownData_5TJV, 0x0581);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController_Hunter_Prisoner_C, UberGraphFrame, 0x0588);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAIController_Hunter_Prisoner_C, 0x0598);
		}

		// class UGA_Cat_C : public UHSHGameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Cat__GA_Cat_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_Cat_C, UberGraphFrame, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_Cat_C, Montage, 0x0460);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Cat_C, 0x0468);
		}

		// class ALootDropSkinPreviewItem_C : public ALootDropPreviewItem_C
		TEST_METHOD(BlueprintGeneratedClass__LootDropSkinPreviewItem__LootDropSkinPreviewItem_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALootDropSkinPreviewItem_C, UnknownData_G51O, 0x0399);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALootDropSkinPreviewItem_C, UberGraphFrame, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALootDropSkinPreviewItem_C, SkeletalMesh, 0x03B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALootDropSkinPreviewItem_C, 0x03B8);
		}

		// class ABP_LightBeamLootdrop_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BP_LightBeamLootdrop__BP_LightBeamLootdrop_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_LightBeamLootdrop_C, StaticMesh, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_LightBeamLootdrop_C, UISprite, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_LightBeamLootdrop_C, GodRayMesh, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_LightBeamLootdrop_C, Light, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_LightBeamLootdrop_C, Width, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_LightBeamLootdrop_C, Length, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_LightBeamLootdrop_C, Mid, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_LightBeamLootdrop_C, Color, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_LightBeamLootdrop_C, Brightness, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_LightBeamLootdrop_C, Fade_Distance, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_LightBeamLootdrop_C, Animated, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_LightBeamLootdrop_C, UnknownData_G1MR, 0x0381);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_LightBeamLootdrop_C, RandomTime, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_LightBeamLootdrop_C, SpotLight, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_LightBeamLootdrop_C, Use_light_for_rotation, 0x038D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_LightBeamLootdrop_C, UnknownData_B85R, 0x038E);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_LightBeamLootdrop_C, MaxDrawDistance, 0x0390);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_LightBeamLootdrop_C, 0x0394);
		}

		// class UIProcessParameter_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__IProcessParameter__IProcessParameter_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIProcessParameter_C, 0x0030);
		}

		// class UGA_WeaponSurvivorWoodStick_C : public UGA_WeaponSurvivorBase_C
		TEST_METHOD(BlueprintGeneratedClass__GA_WeaponSurvivorWoodStick__GA_WeaponSurvivorWoodStick_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_WeaponSurvivorWoodStick_C, 0x04D5);
		}

		// class ALD_Skin_Vanz_A_SuitBlack_C : public ALD_Skin_Vanz_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Vanz_A_SuitBlack__LD_Skin_Vanz_A_SuitBlack_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Vanz_A_SuitBlack_C, 0x0532);
		}

		// class UGA_TrapSurvivorTestTutorial_C : public UGA_TrapSurvivorBase_C
		TEST_METHOD(BlueprintGeneratedClass__GA_TrapSurvivorTestTutorial__GA_TrapSurvivorTestTutorial_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_TrapSurvivorTestTutorial_C, 0x04C0);
		}

		// class ARattanActor_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__RattanACtor__RattanActor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ARattanActor_C, UberGraphFrame, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARattanActor_C, StaticMesh, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARattanActor_C, Scene, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARattanActor_C, Timeline_0_Val_F119CEF24A509914FB9BC7B92C1D5191, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARattanActor_C, Timeline_0__Direction_F119CEF24A509914FB9BC7B92C1D5191, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARattanActor_C, UnknownData_F0IN, 0x035D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARattanActor_C, Timeline_1, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARattanActor_C, MI_Rattan, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARattanActor_C, 0x0370);
		}

		// class UBTDecorator_IfHaveSoulInScene_C : public UBTDecorator_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTDecorator_IfHaveSoulInScene__BTDecorator_IfHaveSoulInScene_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IfHaveSoulInScene_C, TargetPointKey, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IfHaveSoulInScene_C, TargetLocationKey, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_IfHaveSoulInScene_C, 0x00F8);
		}

		// class UGA_TrapSurvivorBase_C : public UHSHGameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_TrapSurvivorBase__GA_TrapSurvivorBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_TrapSurvivorBase_C, UberGraphFrame, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_TrapSurvivorBase_C, Montage, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_TrapSurvivorBase_C, MaxCount, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_TrapSurvivorBase_C, MaxCasting, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_TrapSurvivorBase_C, TimeDuration, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_TrapSurvivorBase_C, UnknownData_KUPV, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_TrapSurvivorBase_C, PreviewMesh, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_TrapSurvivorBase_C, PreviewCompleteMesh, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_TrapSurvivorBase_C, PairAnimation, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_TrapSurvivorBase_C, TrapActorClass, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_TrapSurvivorBase_C, CacheCount, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_TrapSurvivorBase_C, Cost, 0x04AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_TrapSurvivorBase_C, bTwoStep, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_TrapSurvivorBase_C, bOneStepWithProgress, 0x04B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_TrapSurvivorBase_C, bIsSnapHeight, 0x04B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_TrapSurvivorBase_C, bIsCanSkillCheck, 0x04B3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_TrapSurvivorBase_C, UnknownData_P1VK, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_TrapSurvivorBase_C, TrapRef, 0x04B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_TrapSurvivorBase_C, 0x04C0);
		}

		// class APickable_SigilScrollTutorial_C : public APickableItemBase_C
		TEST_METHOD(BlueprintGeneratedClass__Pickable_SigilScrollTutorial__Pickable_SigilScrollTutorial_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APickable_SigilScrollTutorial_C, UberGraphFrame, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::APickable_SigilScrollTutorial_C, Sphere, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::APickable_SigilScrollTutorial_C, Target, 0x07A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APickable_SigilScrollTutorial_C, 0x07A8);
		}

		// class UIIngamePlayerDataHunter_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__IIngamePlayerDataHunter__IIngamePlayerDataHunter_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIIngamePlayerDataHunter_C, 0x0030);
		}

		// class AAIController_Survivor_C : public ADetourCrowdAIController
		TEST_METHOD(BlueprintGeneratedClass__AIController_Survivor__AIController_Survivor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController_Survivor_C, UberGraphFrame, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController_Survivor_C, AIPerception, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController_Survivor_C, survivor, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController_Survivor_C, OnFinishDuty, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController_Survivor_C, PlayerInfo, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController_Survivor_C, Spectator, 0x0580);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAIController_Survivor_C, 0x0588);
		}

		// class AHolyKnifePerkActor_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__HolyKnifePerkActor__HolyKnifePerkActor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHolyKnifePerkActor_C, UberGraphFrame, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHolyKnifePerkActor_C, P_TimPerk, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHolyKnifePerkActor_C, StaticMesh, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHolyKnifePerkActor_C, Scene, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHolyKnifePerkActor_C, OwnerSurvivor, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHolyKnifePerkActor_C, 0x0368);
		}

		// class AZBingCat_PreviewItemBase_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__ZBingCat_PreviewItemBase__ZBingCat_PreviewItemBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AZBingCat_PreviewItemBase_C, PreviewItem, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZBingCat_PreviewItemBase_C, PreviewCat, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZBingCat_PreviewItemBase_C, _Root, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AZBingCat_PreviewItemBase_C, 0x0350);
		}

		// class UGE_TrapTest_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_TrapTest__GE_TrapTest_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_TrapTest_C, 0x05F8);
		}

		// class ALD_Skin_Student_A_OverallOrange_C : public ALD_Skin_Student_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Student_A_OverallOrange__LD_Skin_Student_A_OverallOrange_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Student_A_OverallOrange_C, 0x0532);
		}

		// class UGA_WeaponSurvivorBase_C : public UGA_WeaponBase_C
		TEST_METHOD(BlueprintGeneratedClass__GA_WeaponSurvivorBase__GA_WeaponSurvivorBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_WeaponSurvivorBase_C, UnknownData_ECWE, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_WeaponSurvivorBase_C, UberGraphFrame, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_WeaponSurvivorBase_C, DistanceAtk, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_WeaponSurvivorBase_C, FlagIsLockLuckyShot, 0x04D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_WeaponSurvivorBase_C, 0x04D5);
		}

		// class AZBingCat_PreviewItem_Match_C : public AZBingCat_PreviewItemBase_C
		TEST_METHOD(BlueprintGeneratedClass__ZBingCat_PreviewItem_Match__ZBingCat_PreviewItem_Match_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AZBingCat_PreviewItem_Match_C, PreviewSubItem, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AZBingCat_PreviewItem_Match_C, 0x0358);
		}

		// class AJaneDressSurvivor_C : public ASurvivorBase_C
		TEST_METHOD(BlueprintGeneratedClass__JaneDressSurvivor__JaneDressSurvivor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AJaneDressSurvivor_C, UberGraphFrame, 0x0F80);
			CHEAT_GEAR_CHECK_OFFSET(CG::AJaneDressSurvivor_C, Box, 0x0F90);
			CHEAT_GEAR_CHECK_OFFSET(CG::AJaneDressSurvivor_C, Attacking, 0x0F98);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AJaneDressSurvivor_C, 0x0FA8);
		}

		// class ALD_Skin_Student_MorningGlory_C : public ALD_Skin_Student_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Student_MorningGlory__LD_Skin_Student_MorningGlory_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Student_MorningGlory_C, 0x0532);
		}

		// class UGE_Trap_SigilScroll_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Trap_SigilScroll__GE_Trap_SigilScroll_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Trap_SigilScroll_C, 0x05F8);
		}

		// class ABloodTrailSplineActor_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BloodTrailSplineActor__BloodTrailSplineActor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABloodTrailSplineActor_C, UberGraphFrame, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABloodTrailSplineActor_C, ParticleSystem, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABloodTrailSplineActor_C, Spline, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABloodTrailSplineActor_C, DefaultSceneRoot, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABloodTrailSplineActor_C, ParticleMovement_Distances_FA5F0AFF491AA15F9885E4981ED869B2, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABloodTrailSplineActor_C, ParticleMovement__Direction_FA5F0AFF491AA15F9885E4981ED869B2, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABloodTrailSplineActor_C, UnknownData_8MPU, 0x0365);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABloodTrailSplineActor_C, ParticleMovement, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABloodTrailSplineActor_C, 0x0370);
		}

		// class ALD_Skin_Belle_A_StreetGreen_C : public ALD_Skin_Belle_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Belle_A_StreetGreen__LD_Skin_Belle_A_StreetGreen_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Belle_A_StreetGreen_C, 0x0532);
		}

		// class ALD_Skin_Student_C_Purple_C : public ALD_Skin_Student_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Student_C_Purple__LD_Skin_Student_C_Purple_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Student_C_Purple_C, 0x0532);
		}

		// class UOptionGraphicsSaveGame_C : public USaveGame
		TEST_METHOD(BlueprintGeneratedClass__OptionGraphicsSaveGame__OptionGraphicsSaveGame_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionGraphicsSaveGame_C, UberGraphFrame, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionGraphicsSaveGame_C, CurrentValue, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionGraphicsSaveGame_C, DefualtValue, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOptionGraphicsSaveGame_C, 0x0070);
		}

		// class ALD_Skin_Tim_B_Dragon_C : public ALD_Skin_Tim_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Tim_B_Dragon__LD_Skin_Tim_B_Dragon_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Tim_B_Dragon_C, 0x0532);
		}

		// class ALD_Skin_Jane_C_Brick_C : public ALD_Skin_Jane_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Jane_C_Brick__LD_Skin_Jane_C_Brick_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Jane_C_Brick_C, 0x0532);
		}

		// class ADestructibleActor : public AActor
		TEST_METHOD(Class__ApexDestruction__DestructibleActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADestructibleActor, DestructibleComponent, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADestructibleActor, UnknownData_7QYH, 0x0341);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADestructibleActor, OnActorFracture, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADestructibleActor, 0x0358);
		}

		// class UDestructibleComponent : public USkinnedMeshComponent
		TEST_METHOD(Class__ApexDestruction__DestructibleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleComponent, UnknownData_MOZN, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleComponent, UnknownData_NRFW, 0x0709);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleComponent, FractureEffects, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleComponent, bEnableHardSleeping, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleComponent, UnknownData_IMGF, 0x0721);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleComponent, LargeChunkThreshold, 0x0724);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleComponent, UnknownData_8ST7, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleComponent, OnComponentFracture, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleComponent, UnknownData_Y5SJ, 0x0748);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDestructibleComponent, 0x07E0);
		}

		// class UDestructibleFractureSettings : public UObject
		TEST_METHOD(Class__ApexDestruction__DestructibleFractureSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, CellSiteCount, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, FractureMaterialDesc, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, RandomSeed, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, UnknownData_ECFP, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, VoronoiSites, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, OriginalSubmeshCount, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, UnknownData_A0WT, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, Materials, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, ChunkParameters, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, UnknownData_GWWE, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDestructibleFractureSettings, 0x00C0);
		}

		// class UDestructibleMesh : public USkeletalMesh
		TEST_METHOD(Class__ApexDestruction__DestructibleMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleMesh, DefaultDestructibleParameters, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleMesh, FractureEffects, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleMesh, UnknownData_9YNQ, 0x03F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDestructibleMesh, 0x03F8);
		}

		// class UModularSynthPresetBank : public UObject
		TEST_METHOD(Class__Synthesis__ModularSynthPresetBank)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UModularSynthPresetBank, Presets, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModularSynthPresetBank, 0x0040);
		}

		// class UModularSynthLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Synthesis__ModularSynthLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModularSynthLibrary, 0x0030);
		}

		// class UModularSynthComponent : public USynthComponent
		TEST_METHOD(Class__Synthesis__ModularSynthComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UModularSynthComponent, VoiceCount, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModularSynthComponent, UnknownData_D370, 0x0674);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModularSynthComponent, 0x0CF0);
		}

		// class USourceEffectBitCrusherPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectBitCrusherPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectBitCrusherPreset, UnknownData_0WCK, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectBitCrusherPreset, Settings, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectBitCrusherPreset, 0x0080);
		}

		// class USourceEffectChorusPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectChorusPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectChorusPreset, UnknownData_PFKD, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectChorusPreset, Settings, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectChorusPreset, 0x00A0);
		}

		// class USourceEffectDynamicsProcessorPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectDynamicsProcessorPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectDynamicsProcessorPreset, UnknownData_ZUHT, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectDynamicsProcessorPreset, Settings, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectDynamicsProcessorPreset, 0x00C0);
		}

		// class UEnvelopeFollowerListener : public UActorComponent
		TEST_METHOD(Class__Synthesis__EnvelopeFollowerListener)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvelopeFollowerListener, OnEnvelopeFollowerUpdate, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvelopeFollowerListener, UnknownData_89GO, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvelopeFollowerListener, 0x0120);
		}

		// class USourceEffectEnvelopeFollowerPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectEnvelopeFollowerPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectEnvelopeFollowerPreset, UnknownData_439B, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectEnvelopeFollowerPreset, Settings, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectEnvelopeFollowerPreset, 0x0088);
		}

		// class USourceEffectEQPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectEQPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectEQPreset, UnknownData_1FBE, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectEQPreset, Settings, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectEQPreset, 0x0090);
		}

		// class USourceEffectFilterPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectFilterPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectFilterPreset, UnknownData_EFWG, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectFilterPreset, Settings, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectFilterPreset, 0x0088);
		}

		// class USourceEffectFoldbackDistortionPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectFoldbackDistortionPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectFoldbackDistortionPreset, UnknownData_SWCO, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectFoldbackDistortionPreset, Settings, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectFoldbackDistortionPreset, 0x0088);
		}

		// class USourceEffectPannerPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectPannerPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectPannerPreset, UnknownData_NPAL, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectPannerPreset, Settings, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectPannerPreset, 0x0078);
		}

		// class USourceEffectPhaserPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectPhaserPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectPhaserPreset, UnknownData_58WA, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectPhaserPreset, Settings, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectPhaserPreset, 0x0090);
		}

		// class USourceEffectRingModulationPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectRingModulationPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectRingModulationPreset, UnknownData_DYZJ, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectRingModulationPreset, Settings, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectRingModulationPreset, 0x0098);
		}

		// class USourceEffectSimpleDelayPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectSimpleDelayPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectSimpleDelayPreset, UnknownData_5TF8, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectSimpleDelayPreset, Settings, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectSimpleDelayPreset, 0x00A0);
		}

		// class USourceEffectStereoDelayPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectStereoDelayPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectStereoDelayPreset, UnknownData_ULFR, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectStereoDelayPreset, Settings, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectStereoDelayPreset, 0x0098);
		}

		// class USourceEffectWaveShaperPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectWaveShaperPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectWaveShaperPreset, UnknownData_4G3C, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectWaveShaperPreset, Settings, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectWaveShaperPreset, 0x0080);
		}

		// class USubmixEffectDelayPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__Synthesis__SubmixEffectDelayPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectDelayPreset, UnknownData_JOCH, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectDelayPreset, Settings, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectDelayPreset, DynamicSettings, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectDelayPreset, UnknownData_SHJP, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectDelayPreset, 0x0098);
		}

		// class USubmixEffectFilterPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__Synthesis__SubmixEffectFilterPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectFilterPreset, UnknownData_7XNA, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectFilterPreset, Settings, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectFilterPreset, 0x0088);
		}

		// class USubmixEffectFlexiverbPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__Synthesis__SubmixEffectFlexiverbPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectFlexiverbPreset, UnknownData_HZ9L, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectFlexiverbPreset, Settings, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectFlexiverbPreset, 0x0090);
		}

		// class USubmixEffectTapDelayPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__Synthesis__SubmixEffectTapDelayPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectTapDelayPreset, UnknownData_NEI4, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectTapDelayPreset, Settings, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectTapDelayPreset, UnknownData_8NT4, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectTapDelayPreset, 0x00B8);
		}

		// class USynth2DSlider : public UWidget
		TEST_METHOD(Class__Synthesis__Synth2DSlider)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, ValueX, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, ValueY, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, ValueXDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, ValueYDelegate, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, WidgetStyle, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, SliderHandleColor, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, IndentHandle, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, Locked, 0x0409);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, UnknownData_O6B5, 0x040A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, StepSize, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, IsFocusable, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, UnknownData_5TY5, 0x0411);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, OnMouseCaptureBegin, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, OnMouseCaptureEnd, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, OnControllerCaptureBegin, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, OnControllerCaptureEnd, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, OnValueChangedX, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, OnValueChangedY, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, UnknownData_G1WO, 0x0478);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynth2DSlider, 0x0488);
		}

		// class ALD_Skin_Vanz_S_Boxing_C : public ALD_Skin_Vanz_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Vanz_S_Boxing__LD_Skin_Vanz_S_Boxing_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Vanz_S_Boxing_C, 0x0532);
		}

		// class UGranularSynth : public USynthComponent
		TEST_METHOD(Class__Synthesis__GranularSynth)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGranularSynth, GranulatedSoundWave, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGranularSynth, UnknownData_OP04, 0x0678);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGranularSynth, 0x09C0);
		}

		// class USynthSamplePlayer : public USynthComponent
		TEST_METHOD(Class__Synthesis__SynthSamplePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthSamplePlayer, SoundWave, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthSamplePlayer, OnSampleLoaded, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthSamplePlayer, OnSamplePlaybackProgress, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthSamplePlayer, UnknownData_3VHD, 0x0698);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynthSamplePlayer, 0x0790);
		}

		// class USynthKnob : public UWidget
		TEST_METHOD(Class__Synthesis__SynthKnob)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, Value, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, StepSize, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, MouseSpeed, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, MouseFineTuneSpeed, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, UnknownData_76YD, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, ParameterName, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, ParameterUnits, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, ValueDelegate, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, WidgetStyle, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, Locked, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, IsFocusable, 0x03A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, UnknownData_TF2K, 0x03AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, OnMouseCaptureBegin, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, OnMouseCaptureEnd, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, OnControllerCaptureBegin, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, OnControllerCaptureEnd, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, OnValueChanged, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, UnknownData_0SPT, 0x0400);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynthKnob, 0x0410);
		}

		// class UUUID : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AWSCore__UUID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUUID, 0x0030);
		}

		// class UAndroidPermissionCallbackProxy : public UObject
		TEST_METHOD(Class__AndroidPermission__AndroidPermissionCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAndroidPermissionCallbackProxy, OnPermissionsGrantedDynamicDelegate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAndroidPermissionCallbackProxy, UnknownData_AM8L, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAndroidPermissionCallbackProxy, 0x0050);
		}

		// class UAndroidPermissionFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AndroidPermission__AndroidPermissionFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAndroidPermissionFunctionLibrary, 0x0030);
		}

		// class UAchievementBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__OnlineSubsystemUtils__AchievementBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAchievementBlueprintLibrary, 0x0030);
		}

		// class UAchievementQueryCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__AchievementQueryCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementQueryCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementQueryCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementQueryCallbackProxy, UnknownData_2CWP, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAchievementQueryCallbackProxy, 0x0068);
		}

		// class UAchievementWriteCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__AchievementWriteCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementWriteCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementWriteCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementWriteCallbackProxy, UnknownData_TRH3, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAchievementWriteCallbackProxy, 0x0080);
		}

		// class UConnectionCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__ConnectionCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConnectionCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConnectionCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConnectionCallbackProxy, UnknownData_GPV7, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConnectionCallbackProxy, 0x0078);
		}

		// class UCreateSessionCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__CreateSessionCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreateSessionCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreateSessionCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreateSessionCallbackProxy, UnknownData_D9CU, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCreateSessionCallbackProxy, 0x0098);
		}

		// class UDestroySessionCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__DestroySessionCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestroySessionCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestroySessionCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestroySessionCallbackProxy, UnknownData_TNNI, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDestroySessionCallbackProxy, 0x0078);
		}

		// class UEndMatchCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__EndMatchCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndMatchCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndMatchCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndMatchCallbackProxy, UnknownData_D3RQ, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEndMatchCallbackProxy, 0x0080);
		}

		// class UEndTurnCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__EndTurnCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndTurnCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndTurnCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndTurnCallbackProxy, UnknownData_SJ1J, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEndTurnCallbackProxy, 0x0078);
		}

		// class UFindSessionsCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__FindSessionsCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindSessionsCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindSessionsCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindSessionsCallbackProxy, UnknownData_QN63, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFindSessionsCallbackProxy, 0x0090);
		}

		// class UFindTurnBasedMatchCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__FindTurnBasedMatchCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindTurnBasedMatchCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindTurnBasedMatchCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindTurnBasedMatchCallbackProxy, UnknownData_9WFZ, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFindTurnBasedMatchCallbackProxy, 0x0088);
		}

		// class UInAppPurchaseCallbackProxy : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__InAppPurchaseCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy, UnknownData_M3WZ, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseCallbackProxy, 0x0088);
		}

		// class UInAppPurchaseQueryCallbackProxy : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__InAppPurchaseQueryCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy, UnknownData_RKQI, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseQueryCallbackProxy, 0x0098);
		}

		// class UInAppPurchaseRestoreCallbackProxy : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__InAppPurchaseRestoreCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseRestoreCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseRestoreCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseRestoreCallbackProxy, UnknownData_7IZ5, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseRestoreCallbackProxy, 0x0098);
		}

		// class UIpConnection : public UNetConnection
		TEST_METHOD(Class__OnlineSubsystemUtils__IpConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpConnection, UnknownData_7MZJ, 0x18F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIpConnection, 0x1950);
		}

		// class UIpNetDriver : public UNetDriver
		TEST_METHOD(Class__OnlineSubsystemUtils__IpNetDriver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, UnknownData_IMLQ, 0x0759);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, MaxPortCountToTry, 0x075C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, UnknownData_8WI5, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, ServerDesiredSocketReceiveBufferBytes, 0x077C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, ServerDesiredSocketSendBufferBytes, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, ClientDesiredSocketReceiveBufferBytes, 0x0784);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, ClientDesiredSocketSendBufferBytes, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, UnknownData_2H9F, 0x078C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIpNetDriver, 0x07A0);
		}

		// class UJoinSessionCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__JoinSessionCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UJoinSessionCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJoinSessionCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJoinSessionCallbackProxy, UnknownData_M7JK, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UJoinSessionCallbackProxy, 0x0130);
		}

		// class ULeaderboardBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__OnlineSubsystemUtils__LeaderboardBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULeaderboardBlueprintLibrary, 0x0030);
		}

		// class ULeaderboardFlushCallbackProxy : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__LeaderboardFlushCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardFlushCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardFlushCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardFlushCallbackProxy, UnknownData_NTWE, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULeaderboardFlushCallbackProxy, 0x0070);
		}

		// class ULeaderboardQueryCallbackProxy : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__LeaderboardQueryCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardQueryCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardQueryCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardQueryCallbackProxy, UnknownData_F7GR, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULeaderboardQueryCallbackProxy, 0x00A0);
		}

		// class ULogoutCallbackProxy : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__OnlineSubsystemUtils__LogoutCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULogoutCallbackProxy, OnSuccess, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULogoutCallbackProxy, OnFailure, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULogoutCallbackProxy, UnknownData_XG41, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULogoutCallbackProxy, 0x0070);
		}

		// class AOnlineBeacon : public AActor
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineBeacon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeacon, UnknownData_RGME, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeacon, BeaconConnectionInitialTimeout, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeacon, BeaconConnectionTimeout, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeacon, NetDriver, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeacon, UnknownData_YXUW, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOnlineBeacon, 0x0368);
		}

		// class AOnlineBeaconClient : public AOnlineBeacon
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineBeaconClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconClient, BeaconOwner, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconClient, BeaconConnection, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconClient, ConnectionState, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconClient, UnknownData_KY0Z, 0x0379);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOnlineBeaconClient, 0x03B8);
		}

		// class AOnlineBeaconHost : public AOnlineBeacon
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineBeaconHost)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHost, ListenPort, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHost, UnknownData_U06K, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHost, ClientActors, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHost, UnknownData_LK59, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOnlineBeaconHost, 0x0420);
		}

		// class AOnlineBeaconHostObject : public AActor
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineBeaconHostObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHostObject, BeaconTypeName, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHostObject, ClientBeaconActorClass, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHostObject, ClientActors, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOnlineBeaconHostObject, 0x0360);
		}

		// class UOnlineEngineInterfaceImpl : public UOnlineEngineInterface
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineEngineInterfaceImpl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineEngineInterfaceImpl, VoiceSubsystemNameOverride, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineEngineInterfaceImpl, UnknownData_ZUEL, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineEngineInterfaceImpl, 0x0130);
		}

		// class UOnlinePIESettings : public UDeveloperSettings
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlinePIESettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlinePIESettings, bOnlinePIEEnabled, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlinePIESettings, UnknownData_Y8PD, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlinePIESettings, Logins, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlinePIESettings, 0x0058);
		}

		// class UOnlineSessionClient : public UOnlineSession
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineSessionClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionClient, UnknownData_TJPQ, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionClient, bIsFromInvite, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionClient, bHandlingDisconnect, 0x0191);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionClient, UnknownData_577D, 0x0192);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineSessionClient, 0x0198);
		}

		// class APartyBeaconClient : public AOnlineBeaconClient
		TEST_METHOD(Class__OnlineSubsystemUtils__PartyBeaconClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, UnknownData_DZDH, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, DestSessionId, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, PendingReservation, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, RequestType, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, bPendingReservationSent, 0x0439);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, bCancelReservation, 0x043A);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, UnknownData_0W5Q, 0x043B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APartyBeaconClient, 0x0468);
		}

		// class APartyBeaconHost : public AOnlineBeaconHostObject
		TEST_METHOD(Class__OnlineSubsystemUtils__PartyBeaconHost)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, State, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, UnknownData_SUJI, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, bLogoutOnSessionTimeout, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, UnknownData_KPTR, 0x03C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, SessionTimeoutSecs, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, TravelSessionTimeoutSecs, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, UnknownData_HLW8, 0x03D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APartyBeaconHost, 0x03D8);
		}

		// class UPartyBeaconState : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__PartyBeaconState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, SessionName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, NumConsumedReservations, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, MaxReservations, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, NumTeams, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, NumPlayersPerTeam, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, TeamAssignmentMethod, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, ReservedHostTeamNum, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, ForceTeamNum, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, bRestrictCrossConsole, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, UnknownData_HY4K, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, Reservations, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, UnknownData_IY5Z, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPartyBeaconState, 0x0080);
		}

		// class UQuitMatchCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__QuitMatchCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuitMatchCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuitMatchCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuitMatchCallbackProxy, UnknownData_PND0, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQuitMatchCallbackProxy, 0x0078);
		}

		// class UShowLoginUICallbackProxy : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__OnlineSubsystemUtils__ShowLoginUICallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UShowLoginUICallbackProxy, OnSuccess, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShowLoginUICallbackProxy, OnFailure, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShowLoginUICallbackProxy, UnknownData_P7WO, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShowLoginUICallbackProxy, 0x0068);
		}

		// class ATestBeaconClient : public AOnlineBeaconClient
		TEST_METHOD(Class__OnlineSubsystemUtils__TestBeaconClient)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATestBeaconClient, 0x03B8);
		}

		// class ATestBeaconHost : public AOnlineBeaconHostObject
		TEST_METHOD(Class__OnlineSubsystemUtils__TestBeaconHost)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATestBeaconHost, 0x0360);
		}

		// class UTurnBasedBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__OnlineSubsystemUtils__TurnBasedBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTurnBasedBlueprintLibrary, 0x0030);
		}

		// class UVoipListenerSynthComponent : public USynthComponent
		TEST_METHOD(Class__OnlineSubsystemUtils__VoipListenerSynthComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoipListenerSynthComponent, UnknownData_0P2O, 0x0670);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoipListenerSynthComponent, 0x0680);
		}

		// class ALD_Skin_Nymph_A_Ocean_C : public ALD_Skin_Nymph_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Nymph_A_Ocean__LD_Skin_Nymph_A_Ocean_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Nymph_A_Ocean_C, 0x0532);
		}

		// class UJsonUtilitiesDummyObject : public UObject
		TEST_METHOD(Class__JsonUtilities__JsonUtilitiesDummyObject)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UJsonUtilitiesDummyObject, 0x0030);
		}

		// class UTcpMessagingSettings : public UObject
		TEST_METHOD(Class__TcpMessaging__TcpMessagingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, EnableTransport, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, UnknownData_Z3LC, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, ListenEndpoint, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, ConnectToEndpoints, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, ConnectionRetryDelay, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, UnknownData_EW1X, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTcpMessagingSettings, 0x0060);
		}

		// class UILootDropPreview_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__ILootDropPreview__ILootDropPreview_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UILootDropPreview_C, 0x0030);
		}

		// class ULocationServices : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__LocationServicesBPLibrary__LocationServices)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocationServices, 0x0030);
		}

		// class ULocationServicesImpl : public UObject
		TEST_METHOD(Class__LocationServicesBPLibrary__LocationServicesImpl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocationServicesImpl, OnLocationChanged, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocationServicesImpl, 0x0040);
		}

		// class UGE_DecreaseHealthOnSpawn_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_DecreaseHealthOnSpawn__GE_DecreaseHealthOnSpawn_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_DecreaseHealthOnSpawn_C, 0x05F8);
		}

		// class UBuildPatchManifest : public UObject
		TEST_METHOD(Class__BuildPatchServices__BuildPatchManifest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, ManifestFileVersion, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, bIsFileData, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, UnknownData_GBAT, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, AppID, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, AppName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, BuildVersion, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, LaunchExe, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, LaunchCommand, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, PrereqIds, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, PrereqName, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, PrereqPath, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, PrereqArgs, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, FileManifestList, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, ChunkList, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, CustomFields, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBuildPatchManifest, 0x0128);
		}

		// class ALD_Skin_Student_B_Overall_C : public ALD_Skin_Student_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Student_B_Overall__LD_Skin_Student_B_Overall_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Student_B_Overall_C, 0x0532);
		}

		// class UMovieSceneSpawnTrack : public UMovieSceneTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSpawnTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSpawnTrack, Sections, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSpawnTrack, ObjectGuid, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSpawnTrack, 0x0080);
		}

		// class UMovieSceneTransformOrigin : public UInterface
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneTransformOrigin)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneTransformOrigin, 0x0030);
		}

		// class UMovieScene3DConstraintSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DConstraintSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DConstraintSection, ConstraintId, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DConstraintSection, ConstraintBindingID, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DConstraintSection, 0x0110);
		}

		// class UMovieScene3DAttachSection : public UMovieScene3DConstraintSection
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DAttachSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, AttachSocketName, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, AttachComponentName, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, AttachmentLocationRule, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, AttachmentRotationRule, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, AttachmentScaleRule, 0x0122);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, DetachmentLocationRule, 0x0123);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, DetachmentRotationRule, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, DetachmentScaleRule, 0x0125);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, UnknownData_IIPY, 0x0126);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DAttachSection, 0x0128);
		}

		// class UMovieScene3DConstraintTrack : public UMovieSceneTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DConstraintTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DConstraintTrack, ConstraintSections, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DConstraintTrack, 0x0070);
		}

		// class UMovieScene3DAttachTrack : public UMovieScene3DConstraintTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DAttachTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DAttachTrack, 0x0070);
		}

		// class UMovieScene3DPathSection : public UMovieScene3DConstraintSection
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DPathSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathSection, TimingCurve, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathSection, FrontAxisEnum, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathSection, UpAxisEnum, 0x01B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathSection, UnknownData_Q9EZ, 0x01B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathSection, UnknownData_UQL9, 0x01B5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DPathSection, 0x01B8);
		}

		// class UMovieScene3DPathTrack : public UMovieScene3DConstraintTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DPathTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DPathTrack, 0x0070);
		}

		// class UMovieScene3DTransformSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DTransformSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, TransformMask, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, UnknownData_BWNG, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, Translation, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, Rotation, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, Scale, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, ManualWeight, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, UnknownData_CV7S, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, bUseQuaternionInterpolation, 0x0734);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, UnknownData_Z8BC, 0x0735);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DTransformSection, 0x0738);
		}

		// class UMovieScenePropertyTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePropertyTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertyTrack, SectionToKey, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertyTrack, PropertyName, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertyTrack, PropertyPath, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertyTrack, Sections, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePropertyTrack, 0x0090);
		}

		// class UMovieScene3DTransformTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DTransformTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DTransformTrack, 0x0090);
		}

		// class UMovieSceneActorReferenceSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneActorReferenceSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneActorReferenceSection, ActorReferenceData, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneActorReferenceSection, ActorGuidIndexCurve, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneActorReferenceSection, ActorGuidStrings, 0x0208);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneActorReferenceSection, 0x0218);
		}

		// class UMovieSceneActorReferenceTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneActorReferenceTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneActorReferenceTrack, 0x0090);
		}

		// class UMovieSceneAudioSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneAudioSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, Sound, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, StartFrameOffset, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, UnknownData_13MO, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, AudioStartTime, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, AudioDilationFactor, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, AudioVolume, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, UnknownData_CU9A, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, SoundVolume, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, PitchMultiplier, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, bSuppressSubtitles, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, bOverrideAttenuation, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, UnknownData_V059, 0x024A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, AttenuationSettings, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, OnQueueSubtitles, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, OnAudioFinished, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, OnAudioPlaybackPercent, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneAudioSection, 0x0288);
		}

		// class UMovieSceneAudioTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneAudioTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioTrack, AudioSections, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneAudioTrack, 0x0070);
		}

		// class UMovieSceneBoolSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneBoolSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBoolSection, DefaultValue, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBoolSection, UnknownData_937H, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBoolSection, BoolCurve, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBoolSection, 0x0180);
		}

		// class UMovieSceneBoolTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneBoolTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBoolTrack, 0x0090);
		}

		// class UMovieSceneByteSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneByteSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneByteSection, ByteCurve, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneByteSection, 0x0180);
		}

		// class UMovieSceneByteTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneByteTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneByteTrack, Enum, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneByteTrack, 0x0098);
		}

		// class UMovieSceneCameraAnimSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraAnimSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, AnimData, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, CameraAnim, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, PlayRate, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, PlayScale, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, BlendInTime, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, BlendOutTime, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, bLooping, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, UnknownData_LQ9B, 0x0121);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraAnimSection, 0x0128);
		}

		// class UMovieSceneCameraAnimTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraAnimTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimTrack, CameraAnimSections, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraAnimTrack, 0x0070);
		}

		// class UMovieSceneCameraCutSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraCutSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutSection, CameraGuid, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutSection, CameraBindingID, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraCutSection, 0x0110);
		}

		// class UMovieSceneCameraCutTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraCutTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutTrack, Sections, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraCutTrack, 0x0070);
		}

		// class UMovieSceneCameraShakeSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraShakeSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, ShakeData, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, ShakeClass, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, PlayScale, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, PlaySpace, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, UnknownData_KIIG, 0x0115);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, UserDefinedPlaySpace, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, UnknownData_LTX2, 0x0124);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraShakeSection, 0x0128);
		}

		// class UMovieSceneCameraShakeTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraShakeTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeTrack, CameraShakeSections, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraShakeTrack, 0x0070);
		}

		// class UMovieSceneCinematicShotSection : public UMovieSceneSubSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCinematicShotSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCinematicShotSection, ShotDisplayName, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCinematicShotSection, DisplayName, 0x0168);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCinematicShotSection, 0x0180);
		}

		// class UMovieSceneCinematicShotTrack : public UMovieSceneSubTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCinematicShotTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCinematicShotTrack, 0x0070);
		}

		// class UMovieSceneColorSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneColorSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorSection, RedCurve, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorSection, GreenCurve, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorSection, BlueCurve, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorSection, AlphaCurve, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneColorSection, 0x0368);
		}

		// class UMovieSceneColorTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneColorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorTrack, bIsSlateColor, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorTrack, UnknownData_71EI, 0x0091);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneColorTrack, 0x0098);
		}

		// class UMovieSceneEnumSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEnumSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEnumSection, EnumCurve, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEnumSection, 0x0180);
		}

		// class UMovieSceneEnumTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEnumTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEnumTrack, Enum, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEnumTrack, 0x0098);
		}

		// class UMovieSceneEulerTransformTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEulerTransformTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEulerTransformTrack, 0x0090);
		}

		// class UMovieSceneEventSectionBase : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventSectionBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventSectionBase, 0x00E8);
		}

		// class UMovieSceneEventRepeaterSection : public UMovieSceneEventSectionBase
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventRepeaterSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventRepeaterSection, Event, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventRepeaterSection, 0x00F0);
		}

		// class UMovieSceneEventSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventSection, events, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventSection, EventData, 0x0160);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventSection, 0x01E8);
		}

		// class UMovieSceneEventTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTrack, UnknownData_JA2E, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTrack, EventPosition, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTrack, UnknownData_XPGB, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTrack, EventReceivers, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTrack, Sections, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventTrack, 0x0088);
		}

		// class UMovieSceneEventTriggerSection : public UMovieSceneEventSectionBase
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventTriggerSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTriggerSection, EventChannel, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventTriggerSection, 0x0170);
		}

		// class UMovieSceneFloatSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneFloatSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFloatSection, FloatCurve, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFloatSection, 0x0188);
		}

		// class UMovieSceneFadeSection : public UMovieSceneFloatSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneFadeSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFadeSection, FadeColor, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFadeSection, UnknownData_D1LZ, 0x0199);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFadeSection, 0x01A0);
		}

		// class UMovieSceneFloatTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneFloatTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFloatTrack, 0x0090);
		}

		// class UMovieSceneFadeTrack : public UMovieSceneFloatTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneFadeTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFadeTrack, 0x0090);
		}

		// class UMovieSceneIntegerSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneIntegerSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneIntegerSection, IntegerCurve, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneIntegerSection, 0x0178);
		}

		// class UMovieSceneIntegerTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneIntegerTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneIntegerTrack, 0x0090);
		}

		// class UMovieSceneLevelVisibilitySection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneLevelVisibilitySection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneLevelVisibilitySection, Visibility, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneLevelVisibilitySection, UnknownData_LBNY, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneLevelVisibilitySection, LevelNames, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneLevelVisibilitySection, 0x0100);
		}

		// class UMovieSceneLevelVisibilityTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneLevelVisibilityTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneLevelVisibilityTrack, Sections, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneLevelVisibilityTrack, 0x0070);
		}

		// class UMovieSceneMaterialTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneMaterialTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMaterialTrack, Sections, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMaterialTrack, 0x0070);
		}

		// class UMovieSceneMaterialParameterCollectionTrack : public UMovieSceneMaterialTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneMaterialParameterCollectionTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMaterialParameterCollectionTrack, MPC, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMaterialParameterCollectionTrack, 0x0078);
		}

		// class UMovieSceneComponentMaterialTrack : public UMovieSceneMaterialTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneComponentMaterialTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneComponentMaterialTrack, MaterialIndex, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneComponentMaterialTrack, UnknownData_6UYH, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneComponentMaterialTrack, 0x0078);
		}

		// class UMovieSceneObjectPropertySection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneObjectPropertySection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneObjectPropertySection, ObjectChannel, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneObjectPropertySection, 0x01A8);
		}

		// class UMovieSceneObjectPropertyTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneObjectPropertyTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneObjectPropertyTrack, PropertyClass, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneObjectPropertyTrack, 0x0098);
		}

		// class UMovieSceneParameterSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneParameterSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParameterSection, ScalarParameterNamesAndCurves, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParameterSection, VectorParameterNamesAndCurves, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParameterSection, ColorParameterNamesAndCurves, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneParameterSection, 0x0118);
		}

		// class UMovieSceneParticleParameterTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneParticleParameterTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParticleParameterTrack, Sections, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneParticleParameterTrack, 0x0070);
		}

		// class UMovieSceneParticleSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneParticleSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParticleSection, ParticleKeys, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneParticleSection, 0x0180);
		}

		// class UMovieSceneParticleTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneParticleTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParticleTrack, ParticleSections, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneParticleTrack, 0x0070);
		}

		// class UMovieScenePrimitiveMaterialSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePrimitiveMaterialSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePrimitiveMaterialSection, MaterialChannel, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePrimitiveMaterialSection, 0x01A8);
		}

		// class UMovieScenePrimitiveMaterialTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePrimitiveMaterialTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePrimitiveMaterialTrack, MaterialIndex, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePrimitiveMaterialTrack, UnknownData_Y4RP, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePrimitiveMaterialTrack, 0x0098);
		}

		// class UMovieSceneSkeletalAnimationSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSkeletalAnimationSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, Params, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, AnimSequence, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, Animation, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, StartOffset, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, EndOffset, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, PlayRate, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, UnknownData_X6HY, 0x01D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, SlotName, 0x01D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSkeletalAnimationSection, 0x01E0);
		}

		// class UMovieSceneSkeletalAnimationTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSkeletalAnimationTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationTrack, AnimationSections, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationTrack, bUseLegacySectionIndexBlend, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationTrack, UnknownData_HXVD, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSkeletalAnimationTrack, 0x0078);
		}

		// class UMovieSceneSlomoSection : public UMovieSceneFloatSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSlomoSection)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSlomoSection, 0x0188);
		}

		// class UMovieSceneSlomoTrack : public UMovieSceneFloatTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSlomoTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSlomoTrack, 0x0090);
		}

		// class UMovieSceneSpawnSection : public UMovieSceneBoolSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSpawnSection)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSpawnSection, 0x0180);
		}

		// class UMovieSceneStringSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneStringSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneStringSection, StringCurve, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneStringSection, 0x0188);
		}

		// class UMovieSceneStringTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneStringTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneStringTrack, 0x0090);
		}

		// class UMovieSceneTransformTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneTransformTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneTransformTrack, 0x0090);
		}

		// class UMovieSceneVectorSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneVectorSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorSection, Curves, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorSection, ChannelsUsed, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorSection, UnknownData_I4ZN, 0x036C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneVectorSection, 0x0370);
		}

		// class UMovieSceneVectorTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneVectorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorTrack, NumChannelsUsed, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorTrack, UnknownData_LUIH, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneVectorTrack, 0x0098);
		}

		// class UMovieSceneVisibilityTrack : public UMovieSceneBoolTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneVisibilityTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneVisibilityTrack, 0x0090);
		}

		// class AHolyRopeCustom_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__HolyRopeCustom__HolyRopeCustom_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHolyRopeCustom_C, UberGraphFrame, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHolyRopeCustom_C, Billboard, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHolyRopeCustom_C, PreviewMaterial, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHolyRopeCustom_C, SplineRope, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHolyRopeCustom_C, Scene, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHolyRopeCustom_C, Timeline_Fade_Alpha_9BB8944747A4C56942822EA42DCC511A, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHolyRopeCustom_C, Timeline_Fade__Direction_9BB8944747A4C56942822EA42DCC511A, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHolyRopeCustom_C, UnknownData_9HKV, 0x036D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHolyRopeCustom_C, Timeline_Fade, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHolyRopeCustom_C, SplineMeshes, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHolyRopeCustom_C, MaterialRope, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHolyRopeCustom_C, Scale, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHolyRopeCustom_C, Axis, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHolyRopeCustom_C, CastShadow, 0x0399);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHolyRopeCustom_C, UnknownData_MSCC, 0x039A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHolyRopeCustom_C, LineCurve, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHolyRopeCustom_C, NumberOfLineCycle, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHolyRopeCustom_C, RandomStream, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHolyRopeCustom_C, MinCurve, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHolyRopeCustom_C, MaxCurve, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHolyRopeCustom_C, IsRandom, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHolyRopeCustom_C, UnknownData_HOES, 0x03C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHolyRopeCustom_C, LineSegment, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHolyRopeCustom_C, Round, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHolyRopeCustom_C, UnknownData_2U1H, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHolyRopeCustom_C, RedRopeMaterial, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHolyRopeCustom_C, DissolveDuration, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHolyRopeCustom_C, UnknownData_FGKR, 0x03EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHolyRopeCustom_C, SplineGenActors, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHolyRopeCustom_C, Pointer, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHolyRopeCustom_C, IsLoop, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHolyRopeCustom_C, StartVisible, 0x0411);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHolyRopeCustom_C, 0x0412);
		}

		// class UMeshReconstructorBase : public UObject
		TEST_METHOD(Class__MRMesh__MeshReconstructorBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshReconstructorBase, 0x0030);
		}

		// class UMockDataMeshTrackerComponent : public USceneComponent
		TEST_METHOD(Class__MRMesh__MockDataMeshTrackerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, OnMeshTrackerUpdated, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, ScanWorld, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, RequestNormals, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, RequestVertexConfidence, 0x026A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, VertexColorMode, 0x026B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, UnknownData_R0HC, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, BlockVertexColors, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, VertexColorFromConfidenceZero, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, VertexColorFromConfidenceOne, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, UpdateInterval, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, UnknownData_TMUJ, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, MRMesh, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, UnknownData_MHX9, 0x02B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMockDataMeshTrackerComponent, 0x02D0);
		}

		// class UMRMeshComponent : public UPrimitiveComponent
		TEST_METHOD(Class__MRMesh__MRMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, UnknownData_EDH8, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, Material, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, bCreateMeshProxySections, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, bUpdateNavMeshOnMeshUpdate, 0x0589);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, bNeverCreateCollisionMesh, 0x058A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, UnknownData_7GDI, 0x058B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, CachedBodySetup, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, BodySetups, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, UnknownData_6WIU, 0x05A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMRMeshComponent, 0x05D0);
		}

		// class AGeometryCollectionActor : public AActor
		TEST_METHOD(Class__GeometryCollectionEngine__GeometryCollectionActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionActor, GeometryCollectionComponent, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionActor, GeometryCollectionDebugDrawComponent, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionActor, UnknownData_0GPB, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGeometryCollectionActor, 0x0590);
		}

		// class UGeometryCollectionCache : public UObject
		TEST_METHOD(Class__GeometryCollectionEngine__GeometryCollectionCache)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionCache, RecordedData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionCache, SupportedCollection, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionCache, CompatibleCollectionState, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCollectionCache, 0x0058);
		}

		// class UGeometryCollectionComponent : public UMeshComponent
		TEST_METHOD(Class__GeometryCollectionEngine__GeometryCollectionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, ChaosSolverActor, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, RestCollection, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, DynamicCollection, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, FieldSystem, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, Simulating, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, ObjectType, 0x05C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, EnableClustering, 0x05C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_ZIQD, 0x05C3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, MaxClusterLevel, 0x05C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, DamageThreshold, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, CollisionType, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, ImplicitType, 0x05D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_78RE, 0x05DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, MinLevelSetResolution, 0x05DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, MaxLevelSetResolution, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, MassAsDensity, 0x05E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_FICL, 0x05E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, Mass, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, MinimumMassClamp, 0x05EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, CollisionParticlesFraction, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, Friction, 0x05F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, Bouncyness, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, LinearSleepingThreshold, 0x05FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, AngularSleepingThreshold, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, InitialVelocityType, 0x0604);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_PT19, 0x0605);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, InitialLinearVelocity, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, InitialAngularVelocity, 0x0614);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, CacheParameters, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, DummyBoxComponent, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_LGDR, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, InteriorMaterialID, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, BoneSelectedMaterialID, 0x0684);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_1XF4, 0x0688);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCollectionComponent, 0x06B0);
		}

		// class AGeometryCollectionDebugDrawActor : public AActor
		TEST_METHOD(Class__GeometryCollectionEngine__GeometryCollectionDebugDrawActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, PointThickness, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, LineThickness, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bTextShadow, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, UnknownData_PR4Z, 0x0341);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, TextScale, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, NormalScale, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, TransformScale, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, ArrowScale, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, UnknownData_R3MD, 0x0354);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGeometryCollectionDebugDrawActor, 0x0358);
		}

		// class UGeometryCollectionDebugDrawComponent : public UMeshComponent
		TEST_METHOD(Class__GeometryCollectionEngine__GeometryCollectionDebugDrawComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawComponent, GeometryCollectionDebugDrawActor, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawComponent, GeometryCollectionRenderLevelSet, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawComponent, bDebugDrawLevelSet, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawComponent, bRenderLevelSetAtOrigin, 0x05B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawComponent, UnknownData_YWWS, 0x05B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawComponent, LevelSetIndex, 0x05B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawComponent, bDebugDrawTransform, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawComponent, bDebugDrawTransformIndex, 0x05B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawComponent, bDebugDrawBoundingBox, 0x05BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawComponent, UnknownData_ZLDM, 0x05BB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawComponent, GeometryColor, 0x05BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawComponent, bDebugDrawProximity, 0x05CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawComponent, bDebugDrawBreakingFace, 0x05CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawComponent, bDebugDrawBreakingRegionData, 0x05CE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawComponent, UnknownData_LZWG, 0x05CF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawComponent, BreakingColor, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawComponent, bDebugDrawFace, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawComponent, bDebugDrawFaceIndex, 0x05E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawComponent, bDebugDrawFaceNormal, 0x05E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawComponent, bDebugDrawSingleFace, 0x05E3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawComponent, SingleFaceIdx, 0x05E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawComponent, FaceColor, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawComponent, bDebugDrawVertex, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawComponent, bDebugDrawVertexIndex, 0x05F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawComponent, bDebugDrawVertexNormal, 0x05FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawComponent, UnknownData_RAY6, 0x05FB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawComponent, VertexColor, 0x05FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawComponent, UnknownData_XWSV, 0x060C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCollectionDebugDrawComponent, 0x0630);
		}

		// class UGeometryCollection : public UObject
		TEST_METHOD(Class__GeometryCollectionEngine__GeometryCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, UnknownData_HTEB, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, Materials, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, PersistentGuid, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, StateGuid, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, InteriorMaterialIndex, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, BoneSelectedMaterialIndex, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, UnknownData_DVYQ, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCollection, 0x0080);
		}

		// class AGeometryCollectionRenderLevelSetActor : public AActor
		TEST_METHOD(Class__GeometryCollectionEngine__GeometryCollectionRenderLevelSetActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionRenderLevelSetActor, TargetVolumeTexture, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionRenderLevelSetActor, RayMarchMaterial, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionRenderLevelSetActor, SurfaceTolerance, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionRenderLevelSetActor, Isovalue, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionRenderLevelSetActor, Enabled, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionRenderLevelSetActor, RenderVolumeBoundingBox, 0x0351);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionRenderLevelSetActor, UnknownData_D1WL, 0x0352);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGeometryCollectionRenderLevelSetActor, 0x03D0);
		}

		// class UStaticMeshSimulationComponent : public UActorComponent
		TEST_METHOD(Class__GeometryCollectionEngine__StaticMeshSimulationComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, Simulating, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, ObjectType, 0x0101);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, UnknownData_69X2, 0x0102);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, Mass, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, CollisionType, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, InitialVelocityType, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, UnknownData_7IJ9, 0x010A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, InitialLinearVelocity, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, InitialAngularVelocity, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, DamageThreshold, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, Friction, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, Bouncyness, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, ChaosSolverActor, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, UnknownData_D1GC, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaticMeshSimulationComponent, 0x0140);
		}

		// class UGE_ApplicationRequirement_TremorSmash_C : public UGameplayEffectCustomApplicationRequirement
		TEST_METHOD(BlueprintGeneratedClass__GE_ApplicationRequirement_TremorSmash__GE_ApplicationRequirement_TremorSmash_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_ApplicationRequirement_TremorSmash_C, 0x0030);
		}

		// class ASubLevel_CharacterSetting_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__SubLevel_CharacterSetting__SubLevel_CharacterSetting_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASubLevel_CharacterSetting_C, 0x0340);
		}

		// class UKismetProceduralMeshLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__ProceduralMeshComponent__KismetProceduralMeshLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetProceduralMeshLibrary, 0x0030);
		}

		// class UProceduralMeshComponent : public UMeshComponent
		TEST_METHOD(Class__ProceduralMeshComponent__ProceduralMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, UnknownData_AY0T, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, bUseComplexAsSimpleCollision, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, bUseAsyncCooking, 0x05A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, UnknownData_U8ZD, 0x05AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, ProcMeshBodySetup, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, ProcMeshSections, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, CollisionConvexElems, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, LocalBounds, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, UnknownData_K5H8, 0x05F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, AsyncBodySetupQueue, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, UnknownData_BC4F, 0x0608);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralMeshComponent, 0x0610);
		}

		// class UImageWriteBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__ImageWriteQueue__ImageWriteBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageWriteBlueprintLibrary, 0x0030);
		}

		// class UGE_Debuff_PondTrap_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Debuff_PondTrap__GE_Debuff_PondTrap_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Debuff_PondTrap_C, 0x05F8);
		}

		// class UAutomationBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__FunctionalTesting__AutomationBlueprintFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAutomationBlueprintFunctionLibrary, 0x0030);
		}

		// class UAutomationViewSettings : public UDataAsset
		TEST_METHOD(Class__FunctionalTesting__AutomationViewSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationViewSettings, AntiAliasing, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationViewSettings, MotionBlur, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationViewSettings, TemporalAA, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationViewSettings, ScreenSpaceReflections, 0x003B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationViewSettings, ScreenSpaceAO, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationViewSettings, DistanceFieldAO, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationViewSettings, ContactShadows, 0x003E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationViewSettings, EyeAdaptation, 0x003F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationViewSettings, Bloom, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationViewSettings, UnknownData_98EN, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAutomationViewSettings, 0x0048);
		}

		// class UFuncTestRenderingComponent : public UPrimitiveComponent
		TEST_METHOD(Class__FunctionalTesting__FuncTestRenderingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFuncTestRenderingComponent, UnknownData_LCMS, 0x0578);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFuncTestRenderingComponent, 0x0580);
		}

		// class AFunctionalTest : public AActor
		TEST_METHOD(Class__FunctionalTesting__FunctionalTest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFunctionalTest, SpriteComponent, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFunctionalTest, UnknownData_HKEL, 0x0341);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFunctionalTest, Author, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFunctionalTest, Description, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFunctionalTest, ObservationPoint, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFunctionalTest, RandomNumbersStream, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFunctionalTest, Result, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFunctionalTest, UnknownData_3JD5, 0x0379);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFunctionalTest, PreparationTimeLimit, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFunctionalTest, TimeLimit, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFunctionalTest, UnknownData_BU4O, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFunctionalTest, TimesUpMessage, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFunctionalTest, TimesUpResult, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFunctionalTest, UnknownData_9ZUJ, 0x03A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFunctionalTest, OnTestPrepare, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFunctionalTest, OnTestStart, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFunctionalTest, OnTestFinished, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFunctionalTest, AutoDestroyActors, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFunctionalTest, UnknownData_AGEW, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFunctionalTest, bIsRunning, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFunctionalTest, UnknownData_JD3U, 0x0421);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFunctionalTest, TotalTime, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFunctionalTest, UnknownData_ZICO, 0x043C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFunctionalTest, 0x0450);
		}

		// class AFunctionalAITest : public AFunctionalTest
		TEST_METHOD(Class__FunctionalTesting__FunctionalAITest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFunctionalAITest, SpawnSets, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFunctionalAITest, SpawnLocationRandomizationRange, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFunctionalAITest, UnknownData_GK1N, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFunctionalAITest, SpawnedPawns, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFunctionalAITest, PendingDelayedSpawns, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFunctionalAITest, CurrentSpawnSetIndex, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFunctionalAITest, UnknownData_0WWZ, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFunctionalAITest, CurrentSpawnSetName, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFunctionalAITest, OnAISpawned, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFunctionalAITest, OnAllAISPawned, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFunctionalAITest, NavMeshDebugOrigin, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFunctionalAITest, NavMeshDebugExtent, 0x04CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFunctionalAITest, UnknownData_0GXS, 0x04D9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFunctionalAITest, 0x04E8);
		}

		// class UAutomationPerformaceHelper : public UObject
		TEST_METHOD(Class__FunctionalTesting__AutomationPerformaceHelper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationPerformaceHelper, UnknownData_67U1, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAutomationPerformaceHelper, 0x0068);
		}

		// class AFunctionalTestGameMode : public AGameModeBase
		TEST_METHOD(Class__FunctionalTesting__FunctionalTestGameMode)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFunctionalTestGameMode, 0x03D8);
		}

		// class UFunctionalTestingManager : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__FunctionalTesting__FunctionalTestingManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunctionalTestingManager, TestsLeft, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunctionalTestingManager, AllTests, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunctionalTestingManager, OnSetupTests, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunctionalTestingManager, OnTestsComplete, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunctionalTestingManager, OnTestsBegin, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunctionalTestingManager, UnknownData_NOA5, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFunctionalTestingManager, 0x00C0);
		}

		// class APhasedAutomationActorBase : public AActor
		TEST_METHOD(Class__FunctionalTesting__PhasedAutomationActorBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APhasedAutomationActorBase, 0x0338);
		}

		// class AFunctionalTestLevelScript : public ALevelScriptActor
		TEST_METHOD(Class__FunctionalTesting__FunctionalTestLevelScript)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFunctionalTestLevelScript, 0x0340);
		}

		// class UFunctionalTestUtilityLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__FunctionalTesting__FunctionalTestUtilityLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFunctionalTestUtilityLibrary, 0x0030);
		}

		// class AScreenshotFunctionalTestBase : public AFunctionalTest
		TEST_METHOD(Class__FunctionalTesting__ScreenshotFunctionalTestBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScreenshotFunctionalTestBase, Notes, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScreenshotFunctionalTestBase, ScreenshotCamera, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScreenshotFunctionalTestBase, ScreenshotOptions, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScreenshotFunctionalTestBase, UnknownData_HQM9, 0x04A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScreenshotFunctionalTestBase, 0x04C8);
		}

		// class AFunctionalUIScreenshotTest : public AScreenshotFunctionalTestBase
		TEST_METHOD(Class__FunctionalTesting__FunctionalUIScreenshotTest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFunctionalUIScreenshotTest, WidgetClass, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFunctionalUIScreenshotTest, SpawnedWidget, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFunctionalUIScreenshotTest, WidgetLocation, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFunctionalUIScreenshotTest, UnknownData_9IP3, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFunctionalUIScreenshotTest, UnknownData_P9AD, 0x04DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFunctionalUIScreenshotTest, ScreenshotRT, 0x04E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFunctionalUIScreenshotTest, 0x04E8);
		}

		// class UGroundTruthData : public UObject
		TEST_METHOD(Class__FunctionalTesting__GroundTruthData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroundTruthData, bResetGroundTruth, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroundTruthData, UnknownData_EJEU, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroundTruthData, ObjectData, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGroundTruthData, 0x0040);
		}

		// class AScreenshotFunctionalTest : public AScreenshotFunctionalTestBase
		TEST_METHOD(Class__FunctionalTesting__ScreenshotFunctionalTest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScreenshotFunctionalTest, bCameraCutOnScreenshotPrep, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScreenshotFunctionalTest, UnknownData_UD4Z, 0x04C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScreenshotFunctionalTest, 0x04D0);
		}

		// class UTestPhaseComponent : public USceneComponent
		TEST_METHOD(Class__FunctionalTesting__TestPhaseComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestPhaseComponent, UnknownData_SV90, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestPhaseComponent, 0x0260);
		}

		// class UTraceQueryTestResults : public UObject
		TEST_METHOD(Class__FunctionalTesting__TraceQueryTestResults)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTraceQueryTestResults, ChannelResults, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTraceQueryTestResults, ObjectResults, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTraceQueryTestResults, ProfileResults, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTraceQueryTestResults, BatchOptions, 0x09F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTraceQueryTestResults, UnknownData_TTBL, 0x09F7);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTraceQueryTestResults, 0x09F8);
		}

		// class AFieldSystemActor : public AActor
		TEST_METHOD(Class__FieldSystemEngine__FieldSystemActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFieldSystemActor, FieldSystemComponent, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFieldSystemActor, 0x0340);
		}

		// class UFieldSystemComponent : public UPrimitiveComponent
		TEST_METHOD(Class__FieldSystemEngine__FieldSystemComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemComponent, FieldSystem, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemComponent, UnknownData_KFFB, 0x0580);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldSystemComponent, 0x0590);
		}

		// class ALD_Head_Sur_Base_C : public ALD_Head_Base_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Head_Sur_Base__LD_Head_Sur_Base_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Head_Sur_Base_C, 0x0568);
		}

		// class UFontBulkData : public UObject
		TEST_METHOD(Class__SlateCore__FontBulkData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontBulkData, UnknownData_UG3B, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFontBulkData, 0x00E8);
		}

		// class UFontFaceInterface : public UInterface
		TEST_METHOD(Class__SlateCore__FontFaceInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFontFaceInterface, 0x0030);
		}

		// class UFontProviderInterface : public UInterface
		TEST_METHOD(Class__SlateCore__FontProviderInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFontProviderInterface, 0x0030);
		}

		// class USlateTypes : public UObject
		TEST_METHOD(Class__SlateCore__SlateTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateTypes, 0x0030);
		}

		// class USlateWidgetStyleAsset : public UObject
		TEST_METHOD(Class__SlateCore__SlateWidgetStyleAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateWidgetStyleAsset, CustomStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateWidgetStyleAsset, 0x0038);
		}

		// class USlateWidgetStyleContainerBase : public UObject
		TEST_METHOD(Class__SlateCore__SlateWidgetStyleContainerBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateWidgetStyleContainerBase, UnknownData_2IPB, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateWidgetStyleContainerBase, 0x0038);
		}

		// class USlateWidgetStyleContainerInterface : public UInterface
		TEST_METHOD(Class__SlateCore__SlateWidgetStyleContainerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateWidgetStyleContainerInterface, 0x0030);
		}

		// class USignificanceManager : public UObject
		TEST_METHOD(Class__SignificanceManager__SignificanceManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USignificanceManager, UnknownData_4M8A, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USignificanceManager, SignificanceManagerClassName, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USignificanceManager, 0x0120);
		}

		// class UMediaSource : public UObject
		TEST_METHOD(Class__MediaAssets__MediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSource, UnknownData_U3RN, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaSource, 0x0038);
		}

		// class UBaseMediaSource : public UMediaSource
		TEST_METHOD(Class__MediaAssets__BaseMediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseMediaSource, PlayerName, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseMediaSource, 0x0040);
		}

		// class UFileMediaSource : public UBaseMediaSource
		TEST_METHOD(Class__MediaAssets__FileMediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFileMediaSource, FilePath, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFileMediaSource, PrecacheFile, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFileMediaSource, UnknownData_BA88, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFileMediaSource, 0x0068);
		}

		// class UMediaBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MediaAssets__MediaBlueprintFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaBlueprintFunctionLibrary, 0x0030);
		}

		// class UMediaPlayer : public UObject
		TEST_METHOD(Class__MediaAssets__MediaPlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnEndReached, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnMediaClosed, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnMediaOpened, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnMediaOpenFailed, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnPlaybackResumed, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnPlaybackSuspended, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnSeekCompleted, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnTracksChanged, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, CacheAhead, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, CacheBehind, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, CacheBehindGame, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, NativeAudioOut, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, PlayOnOpen, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_Z756, 0x00CA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_UX81, 0x00CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, Playlist, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, PlaylistIndex, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_C0B1, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, TimeDelay, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, HorizontalFieldOfView, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, VerticalFieldOfView, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, ViewRotation, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_T230, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, PlayerGuid, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_I565, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaPlayer, 0x0140);
		}

		// class UMediaPlaylist : public UObject
		TEST_METHOD(Class__MediaAssets__MediaPlaylist)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlaylist, Items, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaPlaylist, 0x0040);
		}

		// class UMediaSoundComponent : public USynthComponent
		TEST_METHOD(Class__MediaAssets__MediaSoundComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, Channels, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, UnknownData_8KXS, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, DynamicRateAdjustment, 0x0674);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, UnknownData_G1Q1, 0x0675);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, RateAdjustmentFactor, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, RateAdjustmentRange, 0x067C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, UnknownData_4OE7, 0x068C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, MediaPlayer, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, UnknownData_2784, 0x0698);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaSoundComponent, 0x0880);
		}

		// class UMediaTexture : public UTexture
		TEST_METHOD(Class__MediaAssets__MediaTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, AddressX, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, AddressY, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, AutoClear, 0x00C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, UnknownData_ROKB, 0x00C3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, ClearColor, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, UnknownData_N83A, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, MediaPlayer, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, UnknownData_XJ9V, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaTexture, 0x0188);
		}

		// class UPlatformMediaSource : public UMediaSource
		TEST_METHOD(Class__MediaAssets__PlatformMediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformMediaSource, MediaSource, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformMediaSource, 0x0040);
		}

		// class UStreamMediaSource : public UBaseMediaSource
		TEST_METHOD(Class__MediaAssets__StreamMediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamMediaSource, StreamUrl, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStreamMediaSource, 0x0050);
		}

		// class UTimeSynchronizableMediaSource : public UBaseMediaSource
		TEST_METHOD(Class__MediaAssets__TimeSynchronizableMediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizableMediaSource, bUseTimeSynchronization, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizableMediaSource, UnknownData_WIY5, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimeSynchronizableMediaSource, 0x0048);
		}

		// class UNS_DissolvePortal_C : public UAnimNotifyState
		TEST_METHOD(BlueprintGeneratedClass__NS_DissolvePortal__NS_DissolvePortal_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNS_DissolvePortal_C, 0x0038);
		}

		// class UMovieSceneGeometryCacheSection : public UMovieSceneSection
		TEST_METHOD(Class__GeometryCacheTracks__MovieSceneGeometryCacheSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneGeometryCacheSection, Params, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneGeometryCacheSection, 0x0120);
		}

		// class UMovieSceneGeometryCacheTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__GeometryCacheTracks__MovieSceneGeometryCacheTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneGeometryCacheTrack, AnimationSections, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneGeometryCacheTrack, 0x0070);
		}

		// class UHeadMountedDisplayFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__HeadMountedDisplay__HeadMountedDisplayFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHeadMountedDisplayFunctionLibrary, 0x0030);
		}

		// class UMotionControllerComponent : public UPrimitiveComponent
		TEST_METHOD(Class__HeadMountedDisplay__MotionControllerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, UnknownData_GCIE, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, MotionSource, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, UnknownData_X8NQ, 0x0589);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, CurrentTrackingStatus, 0x058C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, bDisplayDeviceModel, 0x058D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, UnknownData_OUTS, 0x058E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, DisplayModelSource, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, CustomDisplayMesh, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, DisplayMeshMaterialOverrides, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, UnknownData_AMWM, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, DisplayComponent, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, UnknownData_PYLC, 0x0618);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMotionControllerComponent, 0x0630);
		}

		// class UMotionTrackedDeviceFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__HeadMountedDisplay__MotionTrackedDeviceFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMotionTrackedDeviceFunctionLibrary, 0x0030);
		}

		// class UVRNotificationsComponent : public UActorComponent
		TEST_METHOD(Class__HeadMountedDisplay__VRNotificationsComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDTrackingInitializingAndNeedsHMDToBeTrackedDelegate, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDTrackingInitializedDelegate, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDRecenteredDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDLostDelegate, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDReconnectedDelegate, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDConnectCanceledDelegate, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDPutOnHeadDelegate, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDRemovedFromHeadDelegate, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, VRControllerRecenteredDelegate, 0x0180);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVRNotificationsComponent, 0x0190);
		}

		// class UXRAssetFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__HeadMountedDisplay__XRAssetFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UXRAssetFunctionLibrary, 0x0030);
		}

		// class UAsyncTask_LoadXRDeviceVisComponent : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__HeadMountedDisplay__AsyncTask_LoadXRDeviceVisComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTask_LoadXRDeviceVisComponent, OnModelLoaded, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTask_LoadXRDeviceVisComponent, OnLoadFailure, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTask_LoadXRDeviceVisComponent, UnknownData_Z3Z1, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTask_LoadXRDeviceVisComponent, SpawnedComponent, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncTask_LoadXRDeviceVisComponent, 0x0068);
		}

		// class UImgMediaSettings : public UObject
		TEST_METHOD(Class__ImgMediaFactory__ImgMediaSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, DefaultFrameRate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, CacheBehindPercentage, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, CacheSizeGB, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, CacheThreads, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, CacheThreadStackSizeKB, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, ExrDecoderThreads, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, UnknownData_26KY, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, DefaultProxy, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, UseDefaultProxy, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, UnknownData_HC26, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImgMediaSettings, 0x0068);
		}

		// class UImgMediaSource : public UBaseMediaSource
		TEST_METHOD(Class__ImgMedia__ImgMediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSource, FrameRateOverride, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSource, ProxyOverride, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSource, SequencePath, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImgMediaSource, 0x0068);
		}

		// class USynthComponent : public USceneComponent
		TEST_METHOD(Class__AudioMixer__SynthComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, UnknownData_Z42T, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, AttenuationSettings, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, AttenuationOverrides, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, ConcurrencySettings, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, ConcurrencySet, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, SoundClass, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, SourceEffectChain, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, SoundSubmix, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, SoundSubmixSends, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, BusSends, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, PreEffectBusSends, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, UnknownData_QDF4, 0x05F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, EnvelopeFollowerAttackTime, 0x05F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, EnvelopeFollowerReleaseTime, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, UnknownData_D1L5, 0x05FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, OnAudioEnvelopeValue, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, UnknownData_A3ZP, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, Synth, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, AudioComponent, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, UnknownData_HOKD, 0x0640);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynthComponent, 0x0670);
		}

		// class UAudioMixerBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AudioMixer__AudioMixerBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioMixerBlueprintLibrary, 0x0030);
		}

		// class USubmixEffectDynamicsProcessorPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__AudioMixer__SubmixEffectDynamicsProcessorPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectDynamicsProcessorPreset, UnknownData_MOL0, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectDynamicsProcessorPreset, Settings, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectDynamicsProcessorPreset, 0x00C0);
		}

		// class USubmixEffectSubmixEQPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__AudioMixer__SubmixEffectSubmixEQPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectSubmixEQPreset, UnknownData_USC3, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectSubmixEQPreset, Settings, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectSubmixEQPreset, 0x0090);
		}

		// class USubmixEffectReverbPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__AudioMixer__SubmixEffectReverbPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectReverbPreset, UnknownData_9N2N, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectReverbPreset, Settings, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectReverbPreset, 0x00D8);
		}

		// class USynthSound : public USoundWaveProcedural
		TEST_METHOD(Class__AudioMixer__SynthSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthSound, UnknownData_X0YB, 0x0300);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynthSound, 0x0320);
		}

		// class UGE_WeaponPrayLight_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_WeaponPrayLight__GE_WeaponPrayLight_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_WeaponPrayLight_C, 0x05F8);
		}

		// class UWidget_OptionSoundMobile_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_OptionSoundMobile__Widget_OptionSoundMobile_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionSoundMobile_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionSoundMobile_C, Widget_Button_Active, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionSoundMobile_C, Widget_Button_Default, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionSoundMobile_C, Widget_ButtonChoice_Subtitle, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionSoundMobile_C, Widget_ButtonChoice_Vibration, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionSoundMobile_C, Widget_ButtonSlider_BGM, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionSoundMobile_C, Widget_ButtonSlider_Master, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionSoundMobile_C, Widget_ButtonSlider_SFX, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionSoundMobile_C, Widget_ButtonSlider_Voice, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_OptionSoundMobile_C, OptionManager, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_OptionSoundMobile_C, 0x0298);
		}

		// class UFieldSystem : public UObject
		TEST_METHOD(Class__FieldSystemCore__FieldSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystem, UnknownData_TKCG, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldSystem, 0x0048);
		}

		// class UBlueprintGameplayTagLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__GameplayTags__BlueprintGameplayTagLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintGameplayTagLibrary, 0x0030);
		}

		// class UGameplayTagAssetInterface : public UInterface
		TEST_METHOD(Class__GameplayTags__GameplayTagAssetInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagAssetInterface, 0x0030);
		}

		// class UEditableGameplayTagQuery : public UObject
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQuery)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQuery, UserDescription, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQuery, UnknownData_38ZL, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQuery, RootExpression, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQuery, TagQueryExportText_Helper, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQuery, 0x00A0);
		}

		// class UEditableGameplayTagQueryExpression : public UObject
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression, 0x0030);
		}

		// class UEditableGameplayTagQueryExpression_AnyTagsMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_AnyTagsMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_AnyTagsMatch, Tags, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_AnyTagsMatch, 0x0050);
		}

		// class UEditableGameplayTagQueryExpression_AllTagsMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_AllTagsMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_AllTagsMatch, Tags, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_AllTagsMatch, 0x0050);
		}

		// class UEditableGameplayTagQueryExpression_NoTagsMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_NoTagsMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_NoTagsMatch, Tags, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_NoTagsMatch, 0x0050);
		}

		// class UEditableGameplayTagQueryExpression_AnyExprMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_AnyExprMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_AnyExprMatch, Expressions, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_AnyExprMatch, 0x0040);
		}

		// class UEditableGameplayTagQueryExpression_AllExprMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_AllExprMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_AllExprMatch, Expressions, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_AllExprMatch, 0x0040);
		}

		// class UEditableGameplayTagQueryExpression_NoExprMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_NoExprMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_NoExprMatch, Expressions, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_NoExprMatch, 0x0040);
		}

		// class UGameplayTagsManager : public UObject
		TEST_METHOD(Class__GameplayTags__GameplayTagsManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, UnknownData_A5GA, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, TagSources, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, UnknownData_W9X2, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, GameplayTagTables, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, UnknownData_OT4X, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagsManager, 0x0288);
		}

		// class UGameplayTagsList : public UObject
		TEST_METHOD(Class__GameplayTags__GameplayTagsList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsList, ConfigFileName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsList, GameplayTagList, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagsList, 0x0050);
		}

		// class URestrictedGameplayTagsList : public UObject
		TEST_METHOD(Class__GameplayTags__RestrictedGameplayTagsList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URestrictedGameplayTagsList, ConfigFileName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::URestrictedGameplayTagsList, RestrictedGameplayTagList, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URestrictedGameplayTagsList, 0x0050);
		}

		// class UGameplayTagsSettings : public UGameplayTagsList
		TEST_METHOD(Class__GameplayTags__GameplayTagsSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, ImportTagsFromConfig, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, WarnOnInvalidTags, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, FastReplication, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, UnknownData_RV4X, 0x0053);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, InvalidTagCharacters, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, CategoryRemapping, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, GameplayTagTableList, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, GameplayTagRedirects, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, CommonlyReplicatedTags, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, NumBitsForContainerSize, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, NetIndexFirstBitSegment, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, RestrictedConfigFiles, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagsSettings, 0x00C0);
		}

		// class UGameplayTagsDeveloperSettings : public UObject
		TEST_METHOD(Class__GameplayTags__GameplayTagsDeveloperSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsDeveloperSettings, DeveloperConfigName, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagsDeveloperSettings, 0x0040);
		}

		// class ULimitItemsBaseComponent_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__LimitItemsBaseComponent__LimitItemsBaseComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULimitItemsBaseComponent_C, UberGraphFrame, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULimitItemsBaseComponent_C, 0x0110);
		}

		// class UWidget_ButtonChoiceDropdown_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_ButtonChoiceDropdown__Widget_ButtonChoiceDropdown_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoiceDropdown_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoiceDropdown_C, BG, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoiceDropdown_C, Button_This, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoiceDropdown_C, ComboBoxString_249, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoiceDropdown_C, HorizontalBox_Choice, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoiceDropdown_C, TextBlock_2, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoiceDropdown_C, Text, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoiceDropdown_C, AutoSize, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoiceDropdown_C, bUpperCase, 0x0291);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoiceDropdown_C, UnknownData_Y2PO, 0x0292);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoiceDropdown_C, Size, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoiceDropdown_C, UnknownData_WSZU, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoiceDropdown_C, OnClicked, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoiceDropdown_C, FontSize, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoiceDropdown_C, UnknownData_51G5, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoiceDropdown_C, Choice, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoiceDropdown_C, LeftOffset, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoiceDropdown_C, Offsets_Choice, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoiceDropdown_C, Active_Choice, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonChoiceDropdown_C, Size_Choice, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_ButtonChoiceDropdown_C, 0x02E0);
		}

		// class UWmfMediaSettings : public UObject
		TEST_METHOD(Class__WmfMediaFactory__WmfMediaSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWmfMediaSettings, AllowNonStandardCodecs, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWmfMediaSettings, LowLatency, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWmfMediaSettings, NativeAudioOut, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWmfMediaSettings, HardwareAcceleratedVideoDecoding, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWmfMediaSettings, UnknownData_ZL9B, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWmfMediaSettings, 0x0038);
		}

		// class AZBingCat_PreviewItem_Trap_C : public AZBingCat_PreviewItemBase_C
		TEST_METHOD(BlueprintGeneratedClass__ZBingCat_PreviewItem_Trap__ZBingCat_PreviewItem_Trap_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AZBingCat_PreviewItem_Trap_C, 0x0350);
		}

		// class ALD_Profile_Base_C : public ALD_3DWidgetBase_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Profile_Base__LD_Profile_Base_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALD_Profile_Base_C, UberGraphFrame, 0x0530);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Profile_Base_C, 0x0540);
		}

		// class UWidget_PartyMember_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_PartyMember__Widget_PartyMember_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PartyMember_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PartyMember_C, Icon_Leader, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PartyMember_C, Image_Border, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PartyMember_C, MenuAnchor, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PartyMember_C, Widget_Button_Profile, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PartyMember_C, Size, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PartyMember_C, OnRightMouseDown, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PartyMember_C, MenuAnchorWidget, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PartyMember_C, MemberCount, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PartyMember_C, IsSelfPartyLeader, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PartyMember_C, IsMemberLeader, 0x0295);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PartyMember_C, IsMemberSelf, 0x0296);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PartyMember_C, UnknownData_JUMX, 0x0297);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PartyMember_C, WidgetManager, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_PartyMember_C, MyMemberIndex, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_PartyMember_C, 0x02A4);
		}

		// class UEditableMeshAdapter : public UObject
		TEST_METHOD(Class__EditableMesh__EditableMeshAdapter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableMeshAdapter, 0x0030);
		}

		// class UEditableGeometryCollectionAdapter : public UEditableMeshAdapter
		TEST_METHOD(Class__EditableMesh__EditableGeometryCollectionAdapter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGeometryCollectionAdapter, GeometryCollection, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGeometryCollectionAdapter, OriginalGeometryCollection, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGeometryCollectionAdapter, GeometryCollectionLODIndex, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGeometryCollectionAdapter, UnknownData_6J1M, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGeometryCollectionAdapter, 0x00E0);
		}

		// class UEditableMesh : public UObject
		TEST_METHOD(Class__EditableMesh__EditableMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, UnknownData_7RC2, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, Adapters, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, UnknownData_Z61S, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, TextureCoordinateCount, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, UnknownData_BF7N, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, PendingCompactCounter, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, SubdivisionCount, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, UnknownData_AESK, 0x049C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableMesh, 0x0680);
		}

		// class UEditableMeshFactory : public UObject
		TEST_METHOD(Class__EditableMesh__EditableMeshFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableMeshFactory, 0x0030);
		}

		// class UEditableStaticMeshAdapter : public UEditableMeshAdapter
		TEST_METHOD(Class__EditableMesh__EditableStaticMeshAdapter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableStaticMeshAdapter, StaticMesh, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableStaticMeshAdapter, OriginalStaticMesh, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableStaticMeshAdapter, StaticMeshLODIndex, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableStaticMeshAdapter, UnknownData_X758, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableStaticMeshAdapter, 0x00E8);
		}

		// class ALD_Skin_Tim_Songkran_C : public ALD_Skin_Tim_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Tim_Songkran__LD_Skin_Tim_Songkran_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Tim_Songkran_C, 0x0532);
		}

		// class ALD_Skin_Tim_A_MultiColourA_C : public ALD_Skin_Tim_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Tim_A_MultiColourA__LD_Skin_Tim_A_MultiColourA_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Tim_A_MultiColourA_C, 0x0532);
		}

		// class UN_PhrayEndActivePerk_C : public UAnimNotify
		TEST_METHOD(BlueprintGeneratedClass__N_PhrayEndActivePerk__N_PhrayEndActivePerk_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UN_PhrayEndActivePerk_C, 0x0040);
		}

		// class UWidget_MainpanelMobile_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_MainpanelMobile__Widget_MainpanelMobile_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainpanelMobile_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainpanelMobile_C, BeginPanel, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainpanelMobile_C, Widget_Button_FindMatch, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainpanelMobile_C, Widget_Button_ItemStore, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainpanelMobile_C, Widget_Button_Lootbox, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainpanelMobile_C, Widget_Button_Setting, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainpanelMobile_C, OnFindMatch, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainpanelMobile_C, OnLootbox, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainpanelMobile_C, OnItemStore, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainpanelMobile_C, OnSetting, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_MainpanelMobile_C, OnExit, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_MainpanelMobile_C, 0x02C8);
		}

		// class UWidget_CharacterSelectorNew_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_CharacterSelectorNew__Widget_CharacterSelectorNew_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSelectorNew_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSelectorNew_C, Image_1, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSelectorNew_C, UniformGridPanel_1, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSelectorNew_C, Widget_CharacterSelectorIcon, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSelectorNew_C, Widget_CharacterSelectorIcon_C_1, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSelectorNew_C, Widget_CharacterSelectorIcon_C_2, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSelectorNew_C, Widget_CharacterSelectorIcon_C_3, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSelectorNew_C, Widget_CharacterSelectorIcon_C_4, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSelectorNew_C, Widget_CharacterSelectorIcon_C_5, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSelectorNew_C, Widget_CharacterSelectorIcon_C_6, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSelectorNew_C, Widget_CharacterSelectorIcon_C_7, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSelectorNew_C, Widget_CharacterSelectorIcon_C_8, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSelectorNew_C, Widget_CharacterSelectorIcon_C_9, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSelectorNew_C, Widget_CharacterSelectorIcon_C_10, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSelectorNew_C, Widget_CharacterSelectorIcon_C_11, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSelectorNew_C, SelectedCharacterIndex, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSelectorNew_C, UnknownData_EXFS, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSelectorNew_C, CacheCharacterList, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSelectorNew_C, Role, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSelectorNew_C, UnknownData_940F, 0x02D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSelectorNew_C, OnClickButton, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSelectorNew_C, SlotNum, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSelectorNew_C, MaxColumn, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSelectorNew_C, OnHover, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_CharacterSelectorNew_C, OnUnHover, 0x0308);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_CharacterSelectorNew_C, 0x0318);
		}

		// class AZBingCat_PreviewItem_Medkit_C : public AZBingCat_PreviewItemBase_C
		TEST_METHOD(BlueprintGeneratedClass__ZBingCat_PreviewItem_Medkit__ZBingCat_PreviewItem_Medkit_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AZBingCat_PreviewItem_Medkit_C, 0x0350);
		}

		// class UNavArea_Hunter_C : public UNavArea
		TEST_METHOD(BlueprintGeneratedClass__NavArea_Hunter__NavArea_Hunter_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea_Hunter_C, 0x0050);
		}

		// class AProjectileDropItemActor_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__ProjectileDropItemActor__ProjectileDropItemActor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectileDropItemActor_C, UberGraphFrame, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectileDropItemActor_C, Billboard, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectileDropItemActor_C, SetterPivot, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectileDropItemActor_C, Box, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectileDropItemActor_C, ProjectileMovement, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectileDropItemActor_C, BoxExtent, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectileDropItemActor_C, bIsShouldNotMove, 0x0374);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AProjectileDropItemActor_C, 0x0375);
		}

		// class UIPickable_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__IPickable__IPickable_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIPickable_C, 0x0030);
		}

		// class UPickableConditionAlwayTrue_C : public UPickableConditionBase_C
		TEST_METHOD(BlueprintGeneratedClass__PickableConditionAlwayTrue__PickableConditionAlwayTrue_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPickableConditionAlwayTrue_C, 0x0030);
		}

		// class UWidget_ButtonImageNumber_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_ButtonImagenumber__Widget_ButtonImageNumber_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonImageNumber_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonImageNumber_C, Begin, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonImageNumber_C, UnHoverAnimation_Setting, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonImageNumber_C, HoverAnimation_Setting, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonImageNumber_C, UnHoverAnimation, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonImageNumber_C, HoverAnimation, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonImageNumber_C, Button_This, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonImageNumber_C, CanvasPanel_260, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonImageNumber_C, HorizontalBox_155, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonImageNumber_C, IMG_End, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonImageNumber_C, IMG_Front, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonImageNumber_C, TextBlock_2, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonImageNumber_C, TextBlock_Number, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonImageNumber_C, Text, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonImageNumber_C, AutoSize, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonImageNumber_C, bUpperCase, 0x02C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonImageNumber_C, UnknownData_B8NP, 0x02CA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonImageNumber_C, Size, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonImageNumber_C, UnknownData_38C5, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonImageNumber_C, OnClicked, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonImageNumber_C, FontSize, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonImageNumber_C, UnHoverAlpha, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonImageNumber_C, HoverAlpha, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonImageNumber_C, IsHaveFrontImg, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonImageNumber_C, IsHaveEndImg, 0x02F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonImageNumber_C, UnknownData_L16F, 0x02F6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonImageNumber_C, ImageFrontBrush, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonImageNumber_C, ImageEndBrush, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonImageNumber_C, PaddingFront, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonImageNumber_C, PaddingEnd, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonImageNumber_C, Style, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonImageNumber_C, Font, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonImageNumber_C, AnimationType, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonImageNumber_C, UnknownData_SUPD, 0x06E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonImageNumber_C, ImageEndTransform, 0x06EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonImageNumber_C, ImageFrontTransform, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonImageNumber_C, Number, 0x0724);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_ButtonImageNumber_C, PaddingNumberEnd, 0x0728);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_ButtonImageNumber_C, 0x0730);
		}

		// class UVisual : public UObject
		TEST_METHOD(Class__UMG__Visual)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisual, 0x0030);
		}

		// class UWidget : public UVisual
		TEST_METHOD(Class__UMG__Widget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, Slot, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, bIsEnabledDelegate, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, ToolTipText, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, ToolTipTextDelegate, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, ToolTipWidget, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, ToolTipWidgetDelegate, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, VisibilityDelegate, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, RenderTransform, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, RenderTransformPivot, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, Cursor, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, Clipping, 0x00BE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, Visibility, 0x00BF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, RenderOpacity, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, UnknownData_OKHL, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, Navigation, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, FlowDirectionPreference, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, UnknownData_B88C, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, NativeBindings, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, UnknownData_40DH, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget, 0x0118);
		}

		// class UAsyncTaskDownloadImage : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UMG__AsyncTaskDownloadImage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTaskDownloadImage, OnSuccess, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTaskDownloadImage, OnFail, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncTaskDownloadImage, 0x0058);
		}

		// class UPanelWidget : public UWidget
		TEST_METHOD(Class__UMG__PanelWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPanelWidget, Slots, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPanelWidget, UnknownData_3ZRJ, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPanelWidget, 0x0130);
		}

		// class UContentWidget : public UPanelWidget
		TEST_METHOD(Class__UMG__ContentWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UContentWidget, 0x0130);
		}

		// class UBackgroundBlur : public UContentWidget
		TEST_METHOD(Class__UMG__BackgroundBlur)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, Padding, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, HorizontalAlignment, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, VerticalAlignment, 0x0141);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, bApplyAlphaToBlur, 0x0142);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, UnknownData_RU29, 0x0143);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, BlurStrength, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, bOverrideAutoRadiusCalculation, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, UnknownData_DVIT, 0x0149);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, BlurRadius, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, LowQualityFallbackBrush, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, UnknownData_S328, 0x01D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBackgroundBlur, 0x01E8);
		}

		// class UPanelSlot : public UVisual
		TEST_METHOD(Class__UMG__PanelSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPanelSlot, Parent, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPanelSlot, Content, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPanelSlot, 0x0040);
		}

		// class UBackgroundBlurSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__BackgroundBlurSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlurSlot, Padding, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlurSlot, HorizontalAlignment, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlurSlot, VerticalAlignment, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlurSlot, UnknownData_GBF1, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBackgroundBlurSlot, 0x0068);
		}

		// class UPropertyBinding : public UObject
		TEST_METHOD(Class__UMG__PropertyBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyBinding, SourceObject, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyBinding, SourcePath, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyBinding, DestinationProperty, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyBinding, 0x0070);
		}

		// class UBoolBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__BoolBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoolBinding, 0x0070);
		}

		// class UBorder : public UContentWidget
		TEST_METHOD(Class__UMG__Border)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, HorizontalAlignment, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, VerticalAlignment, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, UnknownData_BCBI, 0x0133);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, ContentColorAndOpacity, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, ContentColorAndOpacityDelegate, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, Padding, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, UnknownData_QOMI, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, Background, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, BackgroundDelegate, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, BrushColor, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, BrushColorDelegate, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, DesiredSizeScale, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, bFlipForRightToLeftFlowDirection, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, UnknownData_G49H, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, OnMouseButtonDownEvent, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, OnMouseButtonUpEvent, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, OnMouseMoveEvent, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, OnMouseDoubleClickEvent, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, UnknownData_NZFU, 0x026C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBorder, 0x0280);
		}

		// class UBorderSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__BorderSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorderSlot, Padding, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorderSlot, HorizontalAlignment, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorderSlot, VerticalAlignment, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorderSlot, UnknownData_GC8X, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBorderSlot, 0x0068);
		}

		// class UBrushBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__BrushBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBinding, UnknownData_UB92, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushBinding, 0x0078);
		}

		// class UButton : public UContentWidget
		TEST_METHOD(Class__UMG__Button)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, Style, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, WidgetStyle, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, ColorAndOpacity, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, BackgroundColor, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, ClickMethod, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, TouchMethod, 0x03D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, PressMethod, 0x03D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, IsFocusable, 0x03D3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, UnknownData_QE9Z, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, OnClicked, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, OnPressed, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, OnReleased, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, OnHovered, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, OnUnhovered, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, UnknownData_M2WQ, 0x0428);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UButton, 0x0438);
		}

		// class UButtonSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__ButtonSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonSlot, Padding, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonSlot, HorizontalAlignment, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonSlot, VerticalAlignment, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonSlot, UnknownData_A47H, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UButtonSlot, 0x0068);
		}

		// class UCanvasPanel : public UPanelWidget
		TEST_METHOD(Class__UMG__CanvasPanel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanel, UnknownData_CH3N, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCanvasPanel, 0x0140);
		}

		// class UCanvasPanelSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__CanvasPanelSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, LayoutData, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, bAutoSize, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, UnknownData_BHC1, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, ZOrder, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, UnknownData_KG93, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCanvasPanelSlot, 0x0078);
		}

		// class UCheckBox : public UContentWidget
		TEST_METHOD(Class__UMG__CheckBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, CheckedState, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_5YUW, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, CheckedStateDelegate, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_NDOA, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, WidgetStyle, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, Style, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UncheckedImage, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UncheckedHoveredImage, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UncheckedPressedImage, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, CheckedImage, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, CheckedHoveredImage, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, CheckedPressedImage, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UndeterminedImage, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UndeterminedHoveredImage, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UndeterminedPressedImage, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, HorizontalAlignment, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_1SF3, 0x0719);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, Padding, 0x071C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_KI65, 0x072C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, BorderBackgroundColor, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, IsFocusable, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_S38V, 0x0759);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, OnCheckStateChanged, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_0RCL, 0x0770);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheckBox, 0x0780);
		}

		// class UCheckedStateBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__CheckedStateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckedStateBinding, UnknownData_DX7J, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheckedStateBinding, 0x0078);
		}

		// class UCircularThrobber : public UWidget
		TEST_METHOD(Class__UMG__CircularThrobber)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, NumberOfPieces, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, Period, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, Radius, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, UnknownData_FG3Y, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, PieceImage, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, Image, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, bEnableRadius, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, UnknownData_P714, 0x01B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCircularThrobber, 0x01D0);
		}

		// class UColorBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__ColorBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UColorBinding, UnknownData_Y0WT, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UColorBinding, 0x0078);
		}

		// class UComboBox : public UWidget
		TEST_METHOD(Class__UMG__ComboBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBox, Items, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBox, OnGenerateWidgetEvent, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBox, bIsFocusable, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBox, UnknownData_CJRC, 0x0139);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComboBox, 0x0150);
		}

		// class UComboBoxString : public UWidget
		TEST_METHOD(Class__UMG__ComboBoxString)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, DefaultOptions, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, SelectedOption, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, WidgetStyle, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, ItemStyle, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, ContentPadding, 0x0BC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, MaxListHeight, 0x0BD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, HasDownArrow, 0x0BDC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, EnableGamepadNavigationMode, 0x0BDD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, UnknownData_MFG5, 0x0BDE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, Font, 0x0BE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, ForegroundColor, 0x0C30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, bIsFocusable, 0x0C58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, UnknownData_L7CN, 0x0C59);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, OnGenerateWidgetEvent, 0x0C5C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, UnknownData_99HX, 0x0C6C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, OnSelectionChanged, 0x0C70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, OnOpening, 0x0C80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, UnknownData_YG1D, 0x0C90);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComboBoxString, 0x0CD0);
		}

		// class UDragDropOperation : public UObject
		TEST_METHOD(Class__UMG__DragDropOperation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, Tag, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, Payload, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, DefaultDragVisual, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, Pivot, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, UnknownData_VSHF, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, Offset, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, UnknownData_DA1X, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, OnDrop, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, OnDragCancelled, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, OnDragged, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDragDropOperation, 0x0090);
		}

		// class UDynamicEntryBox : public UWidget
		TEST_METHOD(Class__UMG__DynamicEntryBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBox, EntryBoxType, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBox, UnknownData_QYZO, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBox, EntrySpacing, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBox, UnknownData_LMS1, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBox, SpacingPattern, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBox, EntrySizeRule, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBox, EntryHorizontalAlignment, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBox, EntryVerticalAlignment, 0x0141);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBox, UnknownData_W298, 0x0142);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBox, MaxElementSize, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBox, UnknownData_SYD0, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBox, EntryWidgetClass, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBox, UnknownData_LXS9, 0x0160);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicEntryBox, 0x01E8);
		}

		// class UEditableText : public UWidget
		TEST_METHOD(Class__UMG__EditableText)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, Text, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, TextDelegate, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, HintText, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, HintTextDelegate, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, WidgetStyle, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, Style, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, BackgroundImageSelected, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, BackgroundImageComposing, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, CaretImage, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, Font, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, ColorAndOpacity, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, IsReadOnly, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, IsPassword, 0x0419);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, UnknownData_1513, 0x041A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, MinimumDesiredWidth, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, IsCaretMovedWhenGainFocus, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, SelectAllTextWhenFocused, 0x0421);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, RevertTextOnEscape, 0x0422);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, ClearKeyboardFocusOnCommit, 0x0423);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, SelectAllTextOnCommit, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, AllowContextMenu, 0x0425);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, KeyboardType, 0x0426);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, VirtualKeyboardOptions, 0x0427);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, VirtualKeyboardDismissAction, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, Justification, 0x0429);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, ShapedTextOptions, 0x042A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, UnknownData_JVGO, 0x042D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, OnTextChanged, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, OnTextCommitted, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, UnknownData_70AD, 0x0450);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableText, 0x0460);
		}

		// class UEditableTextBox : public UWidget
		TEST_METHOD(Class__UMG__EditableTextBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, Text, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, TextDelegate, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, WidgetStyle, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, Style, 0x0930);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, HintText, 0x0938);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, HintTextDelegate, 0x0950);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, Font, 0x0960);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, ForegroundColor, 0x09B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, BackgroundColor, 0x09C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, ReadOnlyForegroundColor, 0x09D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, IsReadOnly, 0x09E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, IsPassword, 0x09E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, UnknownData_IRYL, 0x09E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, MinimumDesiredWidth, 0x09E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, Padding, 0x09E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, IsCaretMovedWhenGainFocus, 0x09F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, SelectAllTextWhenFocused, 0x09F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, RevertTextOnEscape, 0x09FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, ClearKeyboardFocusOnCommit, 0x09FB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, SelectAllTextOnCommit, 0x09FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, AllowContextMenu, 0x09FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, KeyboardType, 0x09FE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, VirtualKeyboardOptions, 0x09FF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, VirtualKeyboardDismissAction, 0x0A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, Justification, 0x0A01);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, ShapedTextOptions, 0x0A02);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, UnknownData_I3Y9, 0x0A05);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, OnTextChanged, 0x0A08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, OnTextCommitted, 0x0A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, UnknownData_XHJQ, 0x0A28);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableTextBox, 0x0A38);
		}

		// class UExpandableArea : public UWidget
		TEST_METHOD(Class__UMG__ExpandableArea)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, UnknownData_Z68O, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, Style, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, BorderBrush, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, BorderColor, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, bIsExpanded, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, UnknownData_YZ8T, 0x02F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, MaxHeight, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, HeaderPadding, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, AreaPadding, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, OnExpansionChanged, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, HeaderContent, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, BodyContent, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, UnknownData_9OVQ, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExpandableArea, 0x0348);
		}

		// class UFloatBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__FloatBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFloatBinding, 0x0070);
		}

		// class UGridPanel : public UPanelWidget
		TEST_METHOD(Class__UMG__GridPanel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridPanel, ColumnFill, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridPanel, RowFill, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridPanel, UnknownData_S46Q, 0x0150);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGridPanel, 0x0160);
		}

		// class UGridSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__GridSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, Padding, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, HorizontalAlignment, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, VerticalAlignment, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, UnknownData_LPB6, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, Row, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, RowSpan, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, Column, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, ColumnSpan, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, Layer, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, Nudge, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, UnknownData_U2J3, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGridSlot, 0x0078);
		}

		// class UHorizontalBox : public UPanelWidget
		TEST_METHOD(Class__UMG__HorizontalBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBox, UnknownData_5GL9, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHorizontalBox, 0x0140);
		}

		// class UHorizontalBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__HorizontalBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, Padding, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, Size, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, HorizontalAlignment, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, VerticalAlignment, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, UnknownData_H9LM, 0x005A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHorizontalBoxSlot, 0x0068);
		}

		// class UImage : public UWidget
		TEST_METHOD(Class__UMG__Image)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, Brush, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, BrushDelegate, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, ColorAndOpacity, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, ColorAndOpacityDelegate, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, bFlipForRightToLeftFlowDirection, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, UnknownData_1XFS, 0x01D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, OnMouseButtonDownEvent, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, UnknownData_BP10, 0x01E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImage, 0x0220);
		}

		// class UInputKeySelector : public UWidget
		TEST_METHOD(Class__UMG__InputKeySelector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, WidgetStyle, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, TextStyle, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, SelectedKey, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, Font, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, Margin, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, ColorAndOpacity, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, KeySelectionText, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, NoKeySpecifiedText, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, bAllowModifierKeys, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, bAllowGamepadKeys, 0x06B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, UnknownData_SSXE, 0x06BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, EscapeKeys, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, OnKeySelected, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, OnIsSelectingKeyChanged, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, UnknownData_0D3M, 0x06F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputKeySelector, 0x0700);
		}

		// class UInt32Binding : public UPropertyBinding
		TEST_METHOD(Class__UMG__Int32Binding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInt32Binding, 0x0070);
		}

		// class UInvalidationBox : public UContentWidget
		TEST_METHOD(Class__UMG__InvalidationBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInvalidationBox, bCanCache, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInvalidationBox, CacheRelativeTransforms, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInvalidationBox, UnknownData_R4HM, 0x0132);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInvalidationBox, 0x0148);
		}

		// class UNativeUserListEntry : public UInterface
		TEST_METHOD(Class__UMG__NativeUserListEntry)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNativeUserListEntry, 0x0030);
		}

		// class UUserListEntry : public UNativeUserListEntry
		TEST_METHOD(Class__UMG__UserListEntry)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserListEntry, 0x0030);
		}

		// class UUserObjectListEntry : public UUserListEntry
		TEST_METHOD(Class__UMG__UserObjectListEntry)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserObjectListEntry, 0x0030);
		}

		// class UListViewBase : public UWidget
		TEST_METHOD(Class__UMG__ListViewBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, EntryWidgetClass, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, BP_OnEntryGenerated, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, BP_OnEntryReleased, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, UnknownData_RC95, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UListViewBase, 0x0220);
		}

		// class UListView : public UListViewBase
		TEST_METHOD(Class__UMG__ListView)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, UnknownData_Y06A, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, SelectionMode, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, ConsumeMouseWheel, 0x02C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, bClearSelectionOnClick, 0x02CA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, bIsFocusable, 0x02CB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, EntrySpacing, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, bReturnFocusToSelection, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, UnknownData_FCQ7, 0x02D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, ListItems, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, UnknownData_K1SQ, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnItemClicked, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnItemDoubleClicked, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnItemIsHoveredChanged, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnItemSelectionChanged, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnItemScrolledIntoView, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UListView, 0x0348);
		}

		// class UListViewDesignerPreviewItem : public UObject
		TEST_METHOD(Class__UMG__ListViewDesignerPreviewItem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UListViewDesignerPreviewItem, 0x0030);
		}

		// class UMenuAnchor : public UContentWidget
		TEST_METHOD(Class__UMG__MenuAnchor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, MenuClass, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, OnGetMenuContentEvent, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, Placement, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, ShouldDeferPaintingAfterWindowContent, 0x0149);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, UseApplicationMenuStack, 0x014A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, UnknownData_B946, 0x014B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, OnMenuOpenChanged, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, UnknownData_2BD2, 0x0160);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMenuAnchor, 0x0170);
		}

		// class UMouseCursorBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__MouseCursorBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMouseCursorBinding, 0x0070);
		}

		// class UMovieScene2DTransformSection : public UMovieSceneSection
		TEST_METHOD(Class__UMG__MovieScene2DTransformSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, TransformMask, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, UnknownData_5UIU, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, Translation, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, Rotation, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, Scale, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, Shear, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, UnknownData_BUD4, 0x0550);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene2DTransformSection, 0x0558);
		}

		// class UMovieScene2DTransformTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__UMG__MovieScene2DTransformTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene2DTransformTrack, 0x0090);
		}

		// class UMovieSceneMarginSection : public UMovieSceneSection
		TEST_METHOD(Class__UMG__MovieSceneMarginSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMarginSection, TopCurve, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMarginSection, LeftCurve, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMarginSection, RightCurve, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMarginSection, BottomCurve, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMarginSection, 0x0368);
		}

		// class UMovieSceneMarginTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__UMG__MovieSceneMarginTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMarginTrack, 0x0090);
		}

		// class UMovieSceneWidgetMaterialTrack : public UMovieSceneMaterialTrack
		TEST_METHOD(Class__UMG__MovieSceneWidgetMaterialTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneWidgetMaterialTrack, BrushPropertyNamePath, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneWidgetMaterialTrack, TrackName, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneWidgetMaterialTrack, 0x0088);
		}

		// class UTextLayoutWidget : public UWidget
		TEST_METHOD(Class__UMG__TextLayoutWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, ShapedTextOptions, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, Justification, 0x011B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, WrappingPolicy, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, UnknownData_79E5, 0x011E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, WrapTextAt, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, Margin, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, LineHeightPercentage, 0x0134);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextLayoutWidget, 0x0138);
		}

		// class UMultiLineEditableText : public UTextLayoutWidget
		TEST_METHOD(Class__UMG__MultiLineEditableText)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, Text, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, HintText, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, HintTextDelegate, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, WidgetStyle, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, bIsReadOnly, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, UnknownData_4H2V, 0x03E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, Font, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, SelectAllTextWhenFocused, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, ClearTextSelectionOnFocusLoss, 0x0439);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, RevertTextOnEscape, 0x043A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, ClearKeyboardFocusOnCommit, 0x043B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, AllowContextMenu, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, VirtualKeyboardOptions, 0x043D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, VirtualKeyboardDismissAction, 0x043E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, UnknownData_GOUO, 0x043F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, OnTextChanged, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, OnTextCommitted, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, UnknownData_8S3P, 0x0460);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMultiLineEditableText, 0x0470);
		}

		// class UMultiLineEditableTextBox : public UTextLayoutWidget
		TEST_METHOD(Class__UMG__MultiLineEditableTextBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, Text, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, HintText, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, HintTextDelegate, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, WidgetStyle, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, TextStyle, 0x0968);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, bIsReadOnly, 0x0BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, AllowContextMenu, 0x0BD1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, VirtualKeyboardOptions, 0x0BD2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, VirtualKeyboardDismissAction, 0x0BD3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, UnknownData_CUNR, 0x0BD4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, Style, 0x0BD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, Font, 0x0BE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, ForegroundColor, 0x0C30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, BackgroundColor, 0x0C40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, ReadOnlyForegroundColor, 0x0C50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, OnTextChanged, 0x0C60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, OnTextCommitted, 0x0C70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, UnknownData_4USF, 0x0C80);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMultiLineEditableTextBox, 0x0C90);
		}

		// class UNamedSlot : public UContentWidget
		TEST_METHOD(Class__UMG__NamedSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNamedSlot, UnknownData_1FXL, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNamedSlot, 0x0140);
		}

		// class UNamedSlotInterface : public UInterface
		TEST_METHOD(Class__UMG__NamedSlotInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNamedSlotInterface, 0x0030);
		}

		// class UNativeWidgetHost : public UWidget
		TEST_METHOD(Class__UMG__NativeWidgetHost)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNativeWidgetHost, UnknownData_JGSB, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNativeWidgetHost, 0x0128);
		}

		// class UOverlay : public UPanelWidget
		TEST_METHOD(Class__UMG__Overlay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlay, UnknownData_P87H, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOverlay, 0x0140);
		}

		// class UOverlaySlot : public UPanelSlot
		TEST_METHOD(Class__UMG__OverlaySlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, UnknownData_X1T0, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, Padding, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, HorizontalAlignment, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, VerticalAlignment, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, UnknownData_DYS7, 0x005A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOverlaySlot, 0x0060);
		}

		// class UProgressBar : public UWidget
		TEST_METHOD(Class__UMG__ProgressBar)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, WidgetStyle, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, Style, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, BackgroundImage, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, FillImage, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, MarqueeImage, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, Percent, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, BarFillType, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, bIsMarquee, 0x02DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, UnknownData_3ZJ3, 0x02DE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, BorderPadding, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, PercentDelegate, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, FillColorAndOpacity, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, FillColorAndOpacityDelegate, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, UnknownData_M10B, 0x0318);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProgressBar, 0x0328);
		}

		// class URetainerBox : public UContentWidget
		TEST_METHOD(Class__UMG__RetainerBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, RenderOnInvalidation, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, RenderOnPhase, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, UnknownData_VWEK, 0x0132);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, Phase, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, PhaseCount, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, UnknownData_XRX8, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, EffectMaterial, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, TextureParameter, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, UnknownData_SYO3, 0x0150);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URetainerBox, 0x0160);
		}

		// class URichTextBlock : public UTextLayoutWidget
		TEST_METHOD(Class__UMG__RichTextBlock)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, Text, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, TextStyleSet, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, DecoratorClasses, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, UnknownData_R1XY, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, InstanceDecorators, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, UnknownData_TGZZ, 0x03F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URichTextBlock, 0x0400);
		}

		// class URichTextBlockDecorator : public UObject
		TEST_METHOD(Class__UMG__RichTextBlockDecorator)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URichTextBlockDecorator, 0x0030);
		}

		// class URichTextBlockImageDecorator : public URichTextBlockDecorator
		TEST_METHOD(Class__UMG__RichTextBlockImageDecorator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlockImageDecorator, ImageSet, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URichTextBlockImageDecorator, 0x0038);
		}

		// class USafeZone : public UContentWidget
		TEST_METHOD(Class__UMG__SafeZone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZone, PadLeft, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZone, PadRight, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZone, PadTop, 0x0132);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZone, PadBottom, 0x0133);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZone, UnknownData_W2YB, 0x0134);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USafeZone, 0x0148);
		}

		// class USafeZoneSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__SafeZoneSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, bIsTitleSafe, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, UnknownData_1OPC, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, SafeAreaScale, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, HAlign, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, VAlign, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, UnknownData_R41B, 0x0056);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, Padding, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USafeZoneSlot, 0x0068);
		}

		// class UScaleBox : public UContentWidget
		TEST_METHOD(Class__UMG__ScaleBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, Stretch, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, StretchDirection, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, UnknownData_JN1M, 0x0132);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, UserSpecifiedScale, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, IgnoreInheritedScale, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, bSingleLayoutPass, 0x0139);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, UnknownData_SKIS, 0x013A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScaleBox, 0x0150);
		}

		// class UScaleBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__ScaleBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBoxSlot, Padding, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBoxSlot, HorizontalAlignment, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBoxSlot, VerticalAlignment, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBoxSlot, UnknownData_MFVB, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScaleBoxSlot, 0x0068);
		}

		// class UScrollBar : public UWidget
		TEST_METHOD(Class__UMG__ScrollBar)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, WidgetStyle, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, Style, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, bAlwaysShowScrollbar, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, bAlwaysShowScrollbarTrack, 0x05F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, Orientation, 0x05F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, UnknownData_ROXD, 0x05F3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, Thickness, 0x05F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, UnknownData_I3KJ, 0x05FC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBar, 0x0610);
		}

		// class UScrollBox : public UPanelWidget
		TEST_METHOD(Class__UMG__ScrollBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, WidgetStyle, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, WidgetBarStyle, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, Style, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, BarStyle, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, Orientation, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, ScrollBarVisibility, 0x0839);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, ConsumeMouseWheel, 0x083A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, UnknownData_2F8G, 0x083B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, ScrollbarThickness, 0x083C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, AlwaysShowScrollbar, 0x0844);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, AlwaysShowScrollbarTrack, 0x0845);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, AllowOverscroll, 0x0846);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, NavigationDestination, 0x0847);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, NavigationScrollPadding, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, bAllowRightClickDragScrolling, 0x084C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, UnknownData_YNS0, 0x084D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, OnUserScrolled, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, UnknownData_EH1S, 0x0860);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBox, 0x0878);
		}

		// class UScrollBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__ScrollBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxSlot, Padding, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxSlot, HorizontalAlignment, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxSlot, VerticalAlignment, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxSlot, UnknownData_0K6Z, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBoxSlot, 0x0060);
		}

		// class USizeBox : public UContentWidget
		TEST_METHOD(Class__UMG__SizeBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, UnknownData_RBAQ, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, WidthOverride, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, HeightOverride, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MinDesiredWidth, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MinDesiredHeight, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MaxDesiredWidth, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MaxDesiredHeight, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MaxAspectRatio, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, UnknownData_YX1Z, 0x0150);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USizeBox, 0x0160);
		}

		// class USizeBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__SizeBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBoxSlot, Padding, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBoxSlot, HorizontalAlignment, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBoxSlot, VerticalAlignment, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBoxSlot, UnknownData_FOQW, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USizeBoxSlot, 0x0068);
		}

		// class USlateBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__UMG__SlateBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateBlueprintLibrary, 0x0030);
		}

		// class USlateVectorArtData : public UObject
		TEST_METHOD(Class__UMG__SlateVectorArtData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateVectorArtData, VertexData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateVectorArtData, IndexData, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateVectorArtData, Material, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateVectorArtData, ExtentMin, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateVectorArtData, ExtentMax, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateVectorArtData, 0x0068);
		}

		// class USlider : public UWidget
		TEST_METHOD(Class__UMG__Slider)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, Value, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, ValueDelegate, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, UnknownData_8SWM, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, WidgetStyle, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, Orientation, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, UnknownData_0JI4, 0x0471);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, SliderBarColor, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, SliderHandleColor, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, IndentHandle, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, Locked, 0x0495);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, MouseUsesStep, 0x0496);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, RequiresControllerLock, 0x0497);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, StepSize, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, IsFocusable, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, UnknownData_XIZL, 0x049D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnMouseCaptureBegin, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnMouseCaptureEnd, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnControllerCaptureBegin, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnControllerCaptureEnd, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnValueChanged, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, UnknownData_Q67D, 0x04F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlider, 0x0500);
		}

		// class USpacer : public UWidget
		TEST_METHOD(Class__UMG__Spacer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpacer, Size, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpacer, UnknownData_RUWU, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpacer, 0x0130);
		}

		// class USpinBox : public UWidget
		TEST_METHOD(Class__UMG__SpinBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Value, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, ValueDelegate, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_TXR0, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, WidgetStyle, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Style, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Delta, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, SliderExponent, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Font, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Justification, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_IXEA, 0x0479);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MinDesiredWidth, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, ClearKeyboardFocusOnCommit, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, SelectAllTextOnCommit, 0x0481);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_1S36, 0x0482);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, ForegroundColor, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, OnValueChanged, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, OnValueCommitted, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, OnBeginSliderMovement, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, OnEndSliderMovement, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_54K6, 0x04F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MinValue, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MaxValue, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MinSliderValue, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MaxSliderValue, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_LDDK, 0x0504);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpinBox, 0x0518);
		}

		// class UTextBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__TextBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBinding, UnknownData_W5DP, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextBinding, 0x0078);
		}

		// class UTextBlock : public UTextLayoutWidget
		TEST_METHOD(Class__UMG__TextBlock)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, Text, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, TextDelegate, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ColorAndOpacity, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ColorAndOpacityDelegate, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, Font, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, StrikeBrush, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ShadowOffset, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ShadowColorAndOpacity, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ShadowColorAndOpacityDelegate, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, MinDesiredWidth, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, bWrapWithInvalidationPanel, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, bAutoWrapText, 0x029D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, bSimpleTextMode, 0x029E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, UnknownData_FQF1, 0x029F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextBlock, 0x02B0);
		}

		// class UThrobber : public UWidget
		TEST_METHOD(Class__UMG__Throbber)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, NumberOfPieces, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, bAnimateHorizontally, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, bAnimateVertically, 0x011D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, bAnimateOpacity, 0x011E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, UnknownData_3WCJ, 0x011F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, PieceImage, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, Image, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, UnknownData_46QK, 0x01B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UThrobber, 0x01C0);
		}

		// class UTileView : public UListView
		TEST_METHOD(Class__UMG__TileView)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, EntryHeight, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, EntryWidth, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, TileAlignment, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, bWrapHorizontalNavigation, 0x0351);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, UnknownData_3R1F, 0x0352);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTileView, 0x0368);
		}

		// class UTreeView : public UListView
		TEST_METHOD(Class__UMG__TreeView)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTreeView, UnknownData_HO5I, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTreeView, BP_OnGetItemChildren, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTreeView, BP_OnItemExpansionChanged, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTreeView, UnknownData_BC7V, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTreeView, 0x03A0);
		}

		// class UUMGSequencePlayer : public UObject
		TEST_METHOD(Class__UMG__UMGSequencePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequencePlayer, UnknownData_YYN1, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequencePlayer, Animation, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequencePlayer, UnknownData_0VBO, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGSequencePlayer, 0x06F8);
		}

		// class UUniformGridPanel : public UPanelWidget
		TEST_METHOD(Class__UMG__UniformGridPanel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridPanel, SlotPadding, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridPanel, MinDesiredSlotWidth, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridPanel, MinDesiredSlotHeight, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridPanel, UnknownData_TCW7, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUniformGridPanel, 0x0158);
		}

		// class UUniformGridSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__UniformGridSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, HorizontalAlignment, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, VerticalAlignment, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, UnknownData_QFBK, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, Row, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, Column, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, UnknownData_TP22, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUniformGridSlot, 0x0058);
		}

		// class UUserWidget : public UWidget
		TEST_METHOD(Class__UMG__UserWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, UnknownData_RP3H, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, ColorAndOpacity, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, ColorAndOpacityDelegate, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, ForegroundColor, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, ForegroundColorDelegate, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, Padding, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, ActiveSequencePlayers, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, StoppedSequencePlayers, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, NamedSlotBindings, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, WidgetTree, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, Priority, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, UnknownData_EZJ7, 0x01C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, TickFrequency, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, UnknownData_26HX, 0x01D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, InputComponent, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, AnimationCallbacks, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, UnknownData_53VU, 0x01F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserWidget, 0x0240);
		}

		// class UVerticalBox : public UPanelWidget
		TEST_METHOD(Class__UMG__VerticalBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBox, UnknownData_HD71, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVerticalBox, 0x0140);
		}

		// class UVerticalBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__VerticalBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, Padding, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, Size, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, HorizontalAlignment, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, VerticalAlignment, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, UnknownData_JPZQ, 0x005A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVerticalBoxSlot, 0x0068);
		}

		// class UViewport : public UContentWidget
		TEST_METHOD(Class__UMG__Viewport)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UViewport, BackgroundColor, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UViewport, UnknownData_573R, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UViewport, 0x0168);
		}

		// class UVisibilityBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__VisibilityBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisibilityBinding, 0x0070);
		}

		// class UWidgetAnimation : public UMovieSceneSequence
		TEST_METHOD(Class__UMG__WidgetAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, MovieScene, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, AnimationBindings, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, bLegacyFinishOnStop, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, UnknownData_XANL, 0x0369);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, DisplayLabel, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetAnimation, 0x0380);
		}

		// class UWidgetAnimationDelegateBinding : public UDynamicBlueprintBinding
		TEST_METHOD(Class__UMG__WidgetAnimationDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimationDelegateBinding, WidgetAnimationDelegateBindings, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetAnimationDelegateBinding, 0x0040);
		}

		// class UWidgetBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__WidgetBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetBinding, 0x0070);
		}

		// class UWidgetBlueprintGeneratedClass : public UBlueprintGeneratedClass
		TEST_METHOD(Class__UMG__WidgetBlueprintGeneratedClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, WidgetTree, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, UnknownData_RKZ8, 0x0309);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, Bindings, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, Animations, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, NamedSlots, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, TemplateAsset, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, Template, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetBlueprintGeneratedClass, 0x0370);
		}

		// class UWidgetBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__UMG__WidgetBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetBlueprintLibrary, 0x0030);
		}

		// class UWidgetComponent : public UMeshComponent
		TEST_METHOD(Class__UMG__WidgetComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, Space, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, TimingPolicy, 0x05A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_64ZE, 0x05A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, WidgetClass, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, DrawSize, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bManuallyRedraw, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bRedrawRequested, 0x05B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_3LWW, 0x05BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, RedrawTime, 0x05BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_AS6O, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, CurrentDrawSize, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bDrawAtDesiredSize, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_V03P, 0x05D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, Pivot, 0x05D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bReceiveHardwareInput, 0x05DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bWindowFocusable, 0x05DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bApplyGammaCorrection, 0x05DE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_QTB8, 0x05DF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, OwnerPlayer, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, BackgroundColor, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, TintColorAndOpacity, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, OpacityFromTexture, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, BlendMode, 0x060C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bIsTwoSided, 0x060D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, TickWhenOffscreen, 0x060E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_RWSX, 0x060F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, Widget, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_MNV7, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, BodySetup, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, TranslucentMaterial, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, TranslucentMaterial_OneSided, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, OpaqueMaterial, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, OpaqueMaterial_OneSided, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, MaskedMaterial, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, MaskedMaterial_OneSided, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, RenderTarget, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, MaterialInstance, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bAddedToScreen, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bEditTimeUsable, 0x0681);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_P05S, 0x0682);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, SharedLayerName, 0x0684);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, LayerZOrder, 0x068C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, GeometryMode, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_SI8Z, 0x0691);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, CylinderArcAngle, 0x0694);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_IYED, 0x0698);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetComponent, 0x06C0);
		}

		// class UWidgetInteractionComponent : public USceneComponent
		TEST_METHOD(Class__UMG__WidgetInteractionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, OnHoveredWidgetChanged, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_6NZT, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, VirtualUserIndex, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, PointerIndex, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, TraceChannel, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_2L7P, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, InteractionDistance, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, InteractionSource, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, bEnableHitTesting, 0x0289);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, bShowDebug, 0x028A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_50B9, 0x028B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, DebugColor, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_QB3K, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, CustomHitResult, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, LocalHitLocation, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, LastLocalHitLocation, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, HoveredWidgetComponent, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, LastHitResult, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, bIsHoveredWidgetInteractable, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, bIsHoveredWidgetFocusable, 0x0441);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, bIsHoveredWidgetHitTestVisible, 0x0442);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_MB1P, 0x0443);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetInteractionComponent, 0x0450);
		}

		// class UWidgetLayoutLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__UMG__WidgetLayoutLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetLayoutLibrary, 0x0030);
		}

		// class UWidgetNavigation : public UObject
		TEST_METHOD(Class__UMG__WidgetNavigation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Up, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Down, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Left, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Right, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Next, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Previous, 0x00E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetNavigation, 0x0108);
		}

		// class UWidgetSwitcher : public UPanelWidget
		TEST_METHOD(Class__UMG__WidgetSwitcher)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcher, ActiveWidgetIndex, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcher, UnknownData_6YNH, 0x0134);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetSwitcher, 0x0148);
		}

		// class UWidgetSwitcherSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__WidgetSwitcherSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcherSlot, Padding, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcherSlot, HorizontalAlignment, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcherSlot, VerticalAlignment, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcherSlot, UnknownData_FP6O, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetSwitcherSlot, 0x0060);
		}

		// class UWidgetTree : public UObject
		TEST_METHOD(Class__UMG__WidgetTree)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetTree, RootWidget, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetTree, 0x0038);
		}

		// class UWindowTitleBarArea : public UContentWidget
		TEST_METHOD(Class__UMG__WindowTitleBarArea)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarArea, bWindowButtonsEnabled, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarArea, bDoubleClickTogglesFullscreen, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarArea, UnknownData_PUW2, 0x0132);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWindowTitleBarArea, 0x0150);
		}

		// class UWindowTitleBarAreaSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__WindowTitleBarAreaSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarAreaSlot, Padding, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarAreaSlot, HorizontalAlignment, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarAreaSlot, VerticalAlignment, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarAreaSlot, UnknownData_SJUS, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWindowTitleBarAreaSlot, 0x0068);
		}

		// class UWrapBox : public UPanelWidget
		TEST_METHOD(Class__UMG__WrapBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, InnerSlotPadding, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, WrapWidth, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, bExplicitWrapWidth, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, UnknownData_AYNN, 0x013D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWrapBox, 0x0150);
		}

		// class UWrapBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__WrapBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, Padding, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, bFillEmptySpace, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, UnknownData_H19T, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, FillSpanWhenLessThan, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, HorizontalAlignment, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, VerticalAlignment, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, UnknownData_XSU0, 0x005A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWrapBoxSlot, 0x0068);
		}

		// class ATeleportBase_C : public AInteractionBase_C
		TEST_METHOD(BlueprintGeneratedClass__TeleportBase__TeleportBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATeleportBase_C, UnknownData_49Q0, 0x06C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATeleportBase_C, UberGraphFrame, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATeleportBase_C, SnapLookAt, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATeleportBase_C, SnapLocation, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATeleportBase_C, StaticMesh1, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATeleportBase_C, StaticMesh2, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATeleportBase_C, Box, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATeleportBase_C, P_FireCandle021, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATeleportBase_C, P_FireCandle02, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATeleportBase_C, Arrow, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATeleportBase_C, TargetPoint, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATeleportBase_C, Timeline_0_Alpha_B4F9094D4F8AB86A078DBEB616D1C306, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATeleportBase_C, Timeline_0__Direction_B4F9094D4F8AB86A078DBEB616D1C306, 0x072C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATeleportBase_C, UnknownData_NYUP, 0x072D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATeleportBase_C, Timeline_1, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATeleportBase_C, SearchTeleport, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATeleportBase_C, IsInitialize, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATeleportBase_C, UnknownData_XHY9, 0x0749);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATeleportBase_C, progressTime, 0x074C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATeleportBase_C, SlateBrushNormalCantPlace, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATeleportBase_C, SlateBrushHoverCantPlace, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATeleportBase_C, IsSpawned, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATeleportBase_C, UnknownData_7BIL, 0x0861);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATeleportBase_C, Character, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATeleportBase_C, IndicatorPlace, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATeleportBase_C, IndicatorCantPlace, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATeleportBase_C, SpawnTargetActors, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATeleportBase_C, Lights, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATeleportBase_C, OnRespawn, 0x08A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATeleportBase_C, 0x08B0);
		}

		// class ARitualRope_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__RitualRope__RitualRope_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualRope_C, UberGraphFrame, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualRope_C, PreviewMaterial, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualRope_C, SplineRope, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualRope_C, Scene, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualRope_C, SplineMeshes, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualRope_C, MaterialRope, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualRope_C, Scale, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualRope_C, Axis, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualRope_C, CastShadow, 0x0381);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualRope_C, UnknownData_PRCB, 0x0382);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualRope_C, LineCurve, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualRope_C, NumberOfLineCycle, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualRope_C, RandomStream, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualRope_C, MinCurve, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualRope_C, MaxCurve, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualRope_C, IsRandom, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualRope_C, UnknownData_L2XO, 0x03AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualRope_C, LineSegment, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualRope_C, Round, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualRope_C, UnknownData_VSLG, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualRope_C, RedRopeMaterial, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualRope_C, DissolveDuration, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualRope_C, UnknownData_04IN, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualRope_C, SplineGenActors, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualRope_C, Pointer, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualRope_C, IsLoop, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualRope_C, StartVisible, 0x03F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualRope_C, UnknownData_DHZK, 0x03FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualRope_C, RitualOwner, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualRope_C, Socket, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitualRope_C, CacheSpline, 0x0410);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARitualRope_C, 0x0420);
		}

		// class ACameraRig_Crane : public AActor
		TEST_METHOD(Class__CinematicCamera__CameraRig_Crane)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CranePitch, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CraneYaw, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CraneArmLength, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, bLockMountPitch, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, bLockMountYaw, 0x0345);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, UnknownData_F5GW, 0x0346);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, TransformComponent, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CraneYawControl, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CranePitchControl, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CraneCameraMount, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACameraRig_Crane, 0x0368);
		}

		// class ACameraRig_Rail : public AActor
		TEST_METHOD(Class__CinematicCamera__CameraRig_Rail)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, CurrentPositionOnRail, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, bLockOrientationToRail, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, UnknownData_GEFD, 0x033D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, TransformComponent, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, RailSplineComponent, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, RailCameraMount, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACameraRig_Rail, 0x0358);
		}

		// class ACineCameraActor : public ACameraActor
		TEST_METHOD(Class__CinematicCamera__CineCameraActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACineCameraActor, LookatTrackingSettings, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACineCameraActor, UnknownData_S59P, 0x08F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACineCameraActor, 0x0900);
		}

		// class UCineCameraComponent : public UCameraComponent
		TEST_METHOD(Class__CinematicCamera__CineCameraComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, FilmbackSettings, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, LensSettings, 0x080C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, UnknownData_HQVE, 0x0824);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, FocusSettings, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, CurrentFocalLength, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, CurrentAperture, 0x0884);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, CurrentFocusDistance, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, UnknownData_MD5V, 0x088C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, FilmbackPresets, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, LensPresets, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, DefaultFilmbackPresetName, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, DefaultLensPresetName, 0x08C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, DefaultLensFocalLength, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, DefaultLensFStop, 0x08DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCineCameraComponent, 0x08E0);
		}

		// class UGA_HolyWater_C : public UGA_ProjectileSurvivorBase_C
		TEST_METHOD(BlueprintGeneratedClass__GA_HolyWater__GA_HolyWater_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_HolyWater_C, 0x04E8);
		}

		// class UIngamePlayerDataBase_C : public UHSHObject
		TEST_METHOD(BlueprintGeneratedClass__IngamePlayerDataBase__IngamePlayerDataBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngamePlayerDataBase_C, UberGraphFrame, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngamePlayerDataBase_C, GameState, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngamePlayerDataBase_C, OnSendInteractSlateBrush, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngamePlayerDataBase_C, OnGameplayEffectApply, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIngamePlayerDataBase_C, 0x0068);
		}

		// class UGE_Buff_SpawnCat_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Buff_SpawnCat__GE_Buff_SpawnCat_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Buff_SpawnCat_C, 0x05F8);
		}

		// class UInputCoreTypes : public UObject
		TEST_METHOD(Class__InputCore__InputCoreTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputCoreTypes, 0x0030);
		}

		// class ARitual_ReleaseGhost_C : public ARitualBase_C
		TEST_METHOD(BlueprintGeneratedClass__Ritual_ReleaseGhost__Ritual_ReleaseGhost_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitual_ReleaseGhost_C, UberGraphFrame, 0x0A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitual_ReleaseGhost_C, NailEffect, 0x0A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitual_ReleaseGhost_C, Incense, 0x0A68);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitual_ReleaseGhost_C, IKIncensePointer, 0x0A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitual_ReleaseGhost_C, Nail, 0x0A78);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitual_ReleaseGhost_C, Decal1, 0x0A80);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitual_ReleaseGhost_C, IKSkullNailPointer, 0x0A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitual_ReleaseGhost_C, SM_MERGED_RitualStand, 0x0A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitual_ReleaseGhost_C, ParticlePoint, 0x0A98);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitual_ReleaseGhost_C, BarrierAudio, 0x0AA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitual_ReleaseGhost_C, PrayingAudio, 0x0AA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitual_ReleaseGhost_C, Particle, 0x0AB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitual_ReleaseGhost_C, PointLight, 0x0AB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitual_ReleaseGhost_C, NailOnHead, 0x0AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitual_ReleaseGhost_C, IKHeadGhostPointer, 0x0AC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitual_ReleaseGhost_C, SkeletalMesh, 0x0AD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitual_ReleaseGhost_C, Tutorial, 0x0AD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitual_ReleaseGhost_C, Scene1, 0x0AE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitual_ReleaseGhost_C, FallenGhost_RopeAlpha_7889F4A940C21DE35114FD906E5E6A51, 0x0AE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitual_ReleaseGhost_C, FallenGhost_Alpha_7889F4A940C21DE35114FD906E5E6A51, 0x0AEC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitual_ReleaseGhost_C, FallenGhost__Direction_7889F4A940C21DE35114FD906E5E6A51, 0x0AF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitual_ReleaseGhost_C, UnknownData_6XV3, 0x0AF1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitual_ReleaseGhost_C, FallenGhost, 0x0AF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitual_ReleaseGhost_C, Timeline_3_Alpha_E1F07F114A07D5FBBE66C3B08D20113F, 0x0B00);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitual_ReleaseGhost_C, Timeline_3__Direction_E1F07F114A07D5FBBE66C3B08D20113F, 0x0B04);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitual_ReleaseGhost_C, UnknownData_OHWU, 0x0B05);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitual_ReleaseGhost_C, Timeline_4, 0x0B08);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitual_ReleaseGhost_C, Timeline_2_GhostDissolve_5D44D4E04E0A6385EB8CB89BFE914805, 0x0B10);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitual_ReleaseGhost_C, Timeline_2__Direction_5D44D4E04E0A6385EB8CB89BFE914805, 0x0B14);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitual_ReleaseGhost_C, UnknownData_KQ0H, 0x0B15);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitual_ReleaseGhost_C, Timeline_3, 0x0B18);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitual_ReleaseGhost_C, Timeline_1_GhostAlpha_5F26118E4C222F14BD8B40ADE7893C52, 0x0B20);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitual_ReleaseGhost_C, Timeline_1_RopeAlpha_5F26118E4C222F14BD8B40ADE7893C52, 0x0B24);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitual_ReleaseGhost_C, Timeline_1__Direction_5F26118E4C222F14BD8B40ADE7893C52, 0x0B28);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitual_ReleaseGhost_C, UnknownData_5OGJ, 0x0B29);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitual_ReleaseGhost_C, Timeline_2, 0x0B30);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitual_ReleaseGhost_C, IndexPlace, 0x0B38);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitual_ReleaseGhost_C, UnknownData_2T3X, 0x0B3C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitual_ReleaseGhost_C, Redrope, 0x0B40);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitual_ReleaseGhost_C, PlaceStart, 0x0B50);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitual_ReleaseGhost_C, ProgressPlaceTimeSecond, 0x0B60);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitual_ReleaseGhost_C, IKLocation, 0x0B64);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitual_ReleaseGhost_C, FallenPose, 0x0B70);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitual_ReleaseGhost_C, StabPose, 0x0B78);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitual_ReleaseGhost_C, Sound, 0x0B80);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitual_ReleaseGhost_C, PairSounds, 0x0B88);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitual_ReleaseGhost_C, HunterPairSounds, 0x0B98);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitual_ReleaseGhost_C, HunterScreamSound, 0x0BA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitual_ReleaseGhost_C, bIsPrayingSoundActive, 0x0BB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitual_ReleaseGhost_C, UnknownData_L9TT, 0x0BB1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARitual_ReleaseGhost_C, State, 0x0BB4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARitual_ReleaseGhost_C, 0x0BB8);
		}

		// class ULocalizationSettings : public UObject
		TEST_METHOD(Class__Localization__LocalizationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalizationSettings, EngineTargetSet, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalizationSettings, EngineTargetsSettings, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalizationSettings, GameTargetSet, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalizationSettings, GameTargetsSettings, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalizationSettings, 0x0060);
		}

		// class ULocalizationTargetSet : public UObject
		TEST_METHOD(Class__Localization__LocalizationTargetSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalizationTargetSet, TargetObjects, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalizationTargetSet, 0x0040);
		}

		// class ULocalizationTarget : public UObject
		TEST_METHOD(Class__Localization__LocalizationTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalizationTarget, Settings, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalizationTarget, 0x01A0);
		}

		// class UGE_ApplicationRequirement_RazorBlade_C : public UGameplayEffectCustomApplicationRequirement
		TEST_METHOD(BlueprintGeneratedClass__GE_ApplicationRequirement_RazorBlade__GE_ApplicationRequirement_RazorBlade_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_ApplicationRequirement_RazorBlade_C, 0x0030);
		}

		// class UGameLiftClientObject : public UObject
		TEST_METHOD(Class__GameLift__GameLiftClientObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameLiftClientObject, UnknownData_SBHC, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameLiftClientObject, 0x0038);
		}

		// class UGameLiftUtils : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__GameLift__GameLiftUtils)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameLiftUtils, 0x0030);
		}

		// class UGE_StatusHunterLimitAttribute_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_StatusHunterLimitAttribute__GE_StatusHunterLimitAttribute_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_StatusHunterLimitAttribute_C, 0x05F8);
		}

		// class UGE_EnergyDrink_Infinite_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_EnergyDrink_Infinite__GE_EnergyDrink_Infinite_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_EnergyDrink_Infinite_C, 0x05F8);
		}

		// class ASecretPortalBase_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__SecretPortalBase__SecretPortalBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecretPortalBase_C, UberGraphFrame, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecretPortalBase_C, Scene, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecretPortalBase_C, ownerPortal, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecretPortalBase_C, bIsOpen, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASecretPortalBase_C, 0x0359);
		}

		// class UDatasmithObjectTemplate : public UObject
		TEST_METHOD(Class__DatasmithContent__DatasmithObjectTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithObjectTemplate, UnknownData_U977, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithObjectTemplate, 0x0038);
		}

		// class UDatasmithActorTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithActorTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithActorTemplate, Layers, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithActorTemplate, Tags, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithActorTemplate, 0x00D8);
		}

		// class ADatasmithAreaLightActor : public AActor
		TEST_METHOD(Class__DatasmithContent__DatasmithAreaLightActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, LightType, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, LightShape, 0x0339);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, UnknownData_NDUD, 0x033A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, Dimensions, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, Intensity, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, IntensityUnits, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, UnknownData_6WX1, 0x0349);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, Color, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, Temperature, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, IESTexture, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, bUseIESBrightness, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, UnknownData_2W4M, 0x0369);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, IESBrightnessScale, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, Rotation, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, SourceRadius, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, SourceLength, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, AttenuationRadius, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, SpotlightInnerAngle, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, SpotlightOuterAngle, 0x038C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADatasmithAreaLightActor, 0x0390);
		}

		// class UDatasmithAreaLightActorTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithAreaLightActorTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, LightType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, LightShape, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, UnknownData_QRG0, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, Dimensions, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, Color, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, Intensity, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, IntensityUnits, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, UnknownData_KEMV, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, Temperature, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, IESTexture, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, bUseIESBrightness, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, UnknownData_UVRS, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, IESBrightnessScale, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, Rotation, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, SourceRadius, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, SourceLength, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, AttenuationRadius, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithAreaLightActorTemplate, 0x00A8);
		}

		// class UDatasmithAssetImportData : public UAssetImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithAssetImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithAssetImportData, 0x0030);
		}

		// class UDatasmithStaticMeshImportData : public UDatasmithAssetImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithStaticMeshImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithStaticMeshImportData, 0x0030);
		}

		// class UDatasmithStaticMeshCADImportData : public UDatasmithStaticMeshImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithStaticMeshCADImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithStaticMeshCADImportData, 0x0030);
		}

		// class UDatasmithSceneImportData : public UAssetImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithSceneImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithSceneImportData, 0x0030);
		}

		// class UDatasmithCADImportSceneData : public UDatasmithSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithCADImportSceneData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithCADImportSceneData, 0x0030);
		}

		// class UDatasmithMDLSceneImportData : public UDatasmithSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithMDLSceneImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithMDLSceneImportData, 0x0030);
		}

		// class UDatasmithGLTFSceneImportData : public UDatasmithSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithGLTFSceneImportData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithGLTFSceneImportData, Generator, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithGLTFSceneImportData, Version, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithGLTFSceneImportData, UnknownData_MLD8, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithGLTFSceneImportData, Author, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithGLTFSceneImportData, License, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithGLTFSceneImportData, Source, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithGLTFSceneImportData, 0x0078);
		}

		// class UDatasmithStaticMeshGLTFImportData : public UDatasmithStaticMeshImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithStaticMeshGLTFImportData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshGLTFImportData, SourceMeshName, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithStaticMeshGLTFImportData, 0x0040);
		}

		// class UDatasmithDeltaGenAssetImportData : public UDatasmithAssetImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithDeltaGenAssetImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithDeltaGenAssetImportData, 0x0030);
		}

		// class UDatasmithDeltaGenSceneImportData : public UDatasmithSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithDeltaGenSceneImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithDeltaGenSceneImportData, 0x0030);
		}

		// class UDatasmithVREDAssetImportData : public UDatasmithAssetImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithVREDAssetImportData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDAssetImportData, UnknownData_0UFB, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithVREDAssetImportData, 0x0038);
		}

		// class UDatasmithVREDSceneImportData : public UDatasmithSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithVREDSceneImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithVREDSceneImportData, 0x0030);
		}

		// class UDatasmithAssetUserData : public UAssetUserData
		TEST_METHOD(Class__DatasmithContent__DatasmithAssetUserData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAssetUserData, MetaData, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithAssetUserData, 0x0080);
		}

		// class UDatasmithCineCameraActorTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithCineCameraActorTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraActorTemplate, LookatTrackingSettings, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithCineCameraActorTemplate, 0x0068);
		}

		// class UDatasmithCineCameraComponentTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithCineCameraComponentTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, FilmbackSettings, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, LensSettings, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, FocusSettings, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, CurrentFocalLength, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, CurrentAperture, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, UnknownData_HCDL, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, PostProcessSettings, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithCineCameraComponentTemplate, 0x00A0);
		}

		// class UDatasmithContentBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__DatasmithContent__DatasmithContentBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithContentBlueprintLibrary, 0x0030);
		}

		// class UDatasmithImportOptions : public UObject
		TEST_METHOD(Class__DatasmithContent__DatasmithImportOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, SearchPackagePolicy, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, MaterialConflictPolicy, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, TextureConflictPolicy, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, StaticMeshActorImportPolicy, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, LightImportPolicy, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, CameraImportPolicy, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, OtherActorImportPolicy, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, MaterialQuality, 0x0037);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, UnknownData_W1UA, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, BaseOptions, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, TessellationOptions, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, ReimportOptions, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, UnknownData_MNDJ, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, Filename, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, FilePath, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, UnknownData_VOQ7, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithImportOptions, 0x0090);
		}

		// class UDatasmithLandscapeTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithLandscapeTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLandscapeTemplate, LandscapeMaterial, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLandscapeTemplate, StaticLightingLOD, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLandscapeTemplate, UnknownData_CA7V, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithLandscapeTemplate, 0x0048);
		}

		// class UDatasmithLightComponentTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithLightComponentTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, UnknownData_Q90D, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, UnknownData_B66Q, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, Intensity, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, Temperature, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, IESBrightnessScale, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, LightColor, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, UnknownData_ES05, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, LightFunctionMaterial, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, IESTexture, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithLightComponentTemplate, 0x0070);
		}

		// class UDatasmithMaterialInstanceTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithMaterialInstanceTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithMaterialInstanceTemplate, ScalarParameterValues, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithMaterialInstanceTemplate, VectorParameterValues, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithMaterialInstanceTemplate, TextureParameterValues, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithMaterialInstanceTemplate, StaticParameters, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithMaterialInstanceTemplate, 0x0178);
		}

		// class UDatasmithPointLightComponentTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithPointLightComponentTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPointLightComponentTemplate, IntensityUnits, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPointLightComponentTemplate, UnknownData_05FP, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPointLightComponentTemplate, SourceRadius, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPointLightComponentTemplate, SourceLength, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPointLightComponentTemplate, AttenuationRadius, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithPointLightComponentTemplate, 0x0048);
		}

		// class UDatasmithPostProcessVolumeTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithPostProcessVolumeTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPostProcessVolumeTemplate, UnknownData_37QF, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPostProcessVolumeTemplate, Settings, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPostProcessVolumeTemplate, UnknownData_NUQO, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithPostProcessVolumeTemplate, 0x0090);
		}

		// class UDatasmithScene : public UObject
		TEST_METHOD(Class__DatasmithContent__DatasmithScene)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithScene, 0x0030);
		}

		// class ADatasmithSceneActor : public AActor
		TEST_METHOD(Class__DatasmithContent__DatasmithSceneActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithSceneActor, Scene, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithSceneActor, RelatedActors, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADatasmithSceneActor, 0x0390);
		}

		// class UDatasmithSceneComponentTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithSceneComponentTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, UnknownData_Q09E, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, RelativeTransform, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, Mobility, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, UnknownData_MSCM, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, AttachParent, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, Tags, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithSceneComponentTemplate, 0x00F0);
		}

		// class UDatasmithSkyLightComponentTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithSkyLightComponentTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSkyLightComponentTemplate, SourceType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSkyLightComponentTemplate, UnknownData_KMFW, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSkyLightComponentTemplate, CubemapResolution, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSkyLightComponentTemplate, Cubemap, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithSkyLightComponentTemplate, 0x0048);
		}

		// class UDatasmithSpotLightComponentTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithSpotLightComponentTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSpotLightComponentTemplate, InnerConeAngle, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSpotLightComponentTemplate, OuterConeAngle, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithSpotLightComponentTemplate, 0x0040);
		}

		// class UDatasmithStaticMeshComponentTemplate : public UDatasmithSceneComponentTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithStaticMeshComponentTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshComponentTemplate, StaticMesh, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshComponentTemplate, OverrideMaterials, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshComponentTemplate, UnknownData_AQ8P, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithStaticMeshComponentTemplate, 0x0110);
		}

		// class UDatasmithStaticMeshTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithStaticMeshTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshTemplate, SectionInfoMap, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshTemplate, LightMapCoordinateIndex, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshTemplate, LightMapResolution, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshTemplate, BuildSettings, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshTemplate, StaticMaterials, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithStaticMeshTemplate, 0x00B0);
		}

		// class UUdpMessagingSettings : public UObject
		TEST_METHOD(Class__UdpMessaging__UdpMessagingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, EnableTransport, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, UnknownData_L5QE, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, UnicastEndpoint, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, MulticastEndpoint, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, MulticastTimeToLive, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, UnknownData_U1ZF, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, StaticEndpoints, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, EnableTunnel, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, UnknownData_RI4K, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, TunnelUnicastEndpoint, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, TunnelMulticastEndpoint, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, RemoteTunnelEndpoints, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUdpMessagingSettings, 0x00A8);
		}

		// class USQObjective_ReleaseGhost_C : public UQuestObjective_C
		TEST_METHOD(BlueprintGeneratedClass__SQObjective_ReleaseGhost__SQObjective_ReleaseGhost_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USQObjective_ReleaseGhost_C, UberGraphFrame, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USQObjective_ReleaseGhost_C, PrimaryAssetIDs, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USQObjective_ReleaseGhost_C, IsSuccess, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USQObjective_ReleaseGhost_C, UnknownData_WXJU, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::USQObjective_ReleaseGhost_C, Ceremony, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USQObjective_ReleaseGhost_C, SuccessCount, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USQObjective_ReleaseGhost_C, UnknownData_CKKS, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::USQObjective_ReleaseGhost_C, RitualState, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USQObjective_ReleaseGhost_C, 0x0088);
		}

		// class ULevelSequence : public UMovieSceneSequence
		TEST_METHOD(Class__LevelSequence__LevelSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, MovieScene, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, ObjectReferences, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, BindingReferences, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, PossessedObjects, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, DirectorClass, 0x0498);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequence, 0x04A0);
		}

		// class UDefaultLevelSequenceInstanceData : public UObject
		TEST_METHOD(Class__LevelSequence__DefaultLevelSequenceInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultLevelSequenceInstanceData, UnknownData_MCW4, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultLevelSequenceInstanceData, TransformOriginActor, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultLevelSequenceInstanceData, TransformOrigin, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDefaultLevelSequenceInstanceData, 0x0070);
		}

		// class ULevelSequenceMetaData : public UInterface
		TEST_METHOD(Class__LevelSequence__LevelSequenceMetaData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceMetaData, 0x0030);
		}

		// class ULevelSequenceBurnInInitSettings : public UObject
		TEST_METHOD(Class__LevelSequence__LevelSequenceBurnInInitSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceBurnInInitSettings, 0x0030);
		}

		// class ULevelSequenceBurnInOptions : public UObject
		TEST_METHOD(Class__LevelSequence__LevelSequenceBurnInOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnInOptions, bUseBurnIn, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnInOptions, UnknownData_GVTA, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnInOptions, BurnInClass, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnInOptions, Settings, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceBurnInOptions, 0x0058);
		}

		// class ALevelSequenceActor : public AActor
		TEST_METHOD(Class__LevelSequence__LevelSequenceActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, UnknownData_8RTZ, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, PlaybackSettings, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, UnknownData_VP3T, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, SequencePlayer, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, LevelSequence, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, AdditionalEventReceivers, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, BurnInOptions, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, BindingOverrides, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, UnknownData_KIZB, 0x03A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, DefaultInstanceData, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, BurnInInstance, 0x03B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelSequenceActor, 0x03B8);
		}

		// class ULevelSequenceBurnIn : public UUserWidget
		TEST_METHOD(Class__LevelSequence__LevelSequenceBurnIn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnIn, FrameInformation, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnIn, LevelSequenceActor, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceBurnIn, 0x02E0);
		}

		// class ULevelSequenceDirector : public UObject
		TEST_METHOD(Class__LevelSequence__LevelSequenceDirector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceDirector, Player, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceDirector, 0x0038);
		}

		// class ULegacyLevelSequenceDirectorBlueprint : public UBlueprint
		TEST_METHOD(Class__LevelSequence__LegacyLevelSequenceDirectorBlueprint)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULegacyLevelSequenceDirectorBlueprint, 0x00E0);
		}

		// class ULevelSequencePlayer : public UMovieSceneSequencePlayer
		TEST_METHOD(Class__LevelSequence__LevelSequencePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequencePlayer, OnCameraCut, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequencePlayer, UnknownData_YGHQ, 0x07E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequencePlayer, 0x0910);
		}

		// class UGE_Buff_SuddenDeathSurvivor_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Buff_SuddenDeathSurvivor__GE_Buff_SuddenDeathSurvivor_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Buff_SuddenDeathSurvivor_C, 0x05F8);
		}

		// class UPhray_Hunter_AnimBP_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Phray_Hunter_AnimBP__Phray_Hunter_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, UnknownData_NZ87, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, AnimGraphNode_SaveCachedPose_FD45762141C4386A432274AC07F7DD8A, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, AnimGraphNode_Slot_AECDFC974CA669BD518B01B5626F35F1, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, AnimGraphNode_UseCachedPose_D72F1DAC46E1D8FA1A28D8AE5BB0B7E0, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, AnimGraphNode_SaveCachedPose_CB78D15F4B39189FC0D0059846643B13, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, AnimGraphNode_LayeredBoneBlend_BE9E37024B9C5AF513BC4180A6D4A54E, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, AnimGraphNode_UseCachedPose_6DF6BCAA4060111C6E36989D1F7CA3D3, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, AnimGraphNode_UseCachedPose_C3610C874DAE63C6099A31A3D05E56AD, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, AnimGraphNode_BlendListByBool_34BA70A54722507782D742990E51FFD8, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, AnimGraphNode_UseCachedPose_BDDEB4574D6C3FA7ADD5C086942629D7, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, AnimGraphNode_SaveCachedPose_69132C534F16D065F08EE093A6DF03D2, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, AnimGraphNode_LocalToComponentSpace_AB8FFF6C43ED058B70DD38A7C9FE3D5D, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, AnimGraphNode_Root_F235C72F46E4DC06B3A3D8AD3FCA3A19, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, AnimGraphNode_ComponentToLocalSpace_02845C0F49291C114C32578F9F496C28, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, AnimGraphNode_ModifyBone_82B679CA47DF46E85CC3FA98BB700114, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, AnimGraphNode_TwoBoneIK_159F49514B8AAA768C9875AF6A0047AC, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, AnimGraphNode_TwoBoneIK_0BD766FF4F96FAC1B7C334817E8ADDA6, 0x0A30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, AnimGraphNode_ModifyBone_F3ECB4114AB5B4594D3315BE11422E59, 0x0C10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, AnimGraphNode_ModifyBone_323EE0694BA0ECEC5A154F89905C98E7, 0x0D18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, AnimGraphNode_SaveCachedPose_682361B94A6ADCE45F325A8F910DB68B, 0x0E20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, AnimGraphNode_UseCachedPose_8B39C8984EAA0D72C3D89C9490857571, 0x0ED8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, AnimGraphNode_UseCachedPose_BC11DD8D4FDC85DC451161AE5CA703E1, 0x0F00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, UnknownData_W5Q2, 0x0F28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, AnimGraphNode_TwoBoneIK_9492B3684707F82F2CF516B64866FAAF, 0x0F30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, AnimGraphNode_TwoBoneIK_A08466CB481DBEA6CB491FA1377359BA, 0x1110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, AnimGraphNode_UseCachedPose_E30045374702B2F5B9E4FCA1859AFDD9, 0x12F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, AnimGraphNode_BlendListByBool_330F2C3B45214EBECD3EF7947A3BBFAB, 0x1318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, AnimGraphNode_TransitionResult_037511374EAFF27AF9ED6896758A2A73, 0x13B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, AnimGraphNode_SequencePlayer_B79600DD4F7037E419440994F9E181C3, 0x13E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, AnimGraphNode_StateResult_C37877C94E443B282C1554A6DAA0612D, 0x1458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, AnimGraphNode_TransitionResult_A302ECA3459686C7E914C4A5A24675BA, 0x1478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, AnimGraphNode_TransitionResult_4B8EC88B40BC171C1F5CD79F08EBBDDE, 0x14A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, AnimGraphNode_TransitionResult_1F596B72499BAB824B5B799DDEF0689E, 0x14C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, AnimGraphNode_TransitionResult_B34A96DA4B212763E0E62D923EFD3D08, 0x14F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, AnimGraphNode_TransitionResult_16CEC9C64C79ECD0D3E553A84A615ED0, 0x1518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, AnimGraphNode_TransitionResult_3EC73BCE42F2CAC2DD0FBCAEAF2A58F1, 0x1540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, AnimGraphNode_TransitionResult_71890C714E8DBB46CC244C91464E1A78, 0x1568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, AnimGraphNode_TransitionResult_FE758EDE4A9C0B29C24C399592D2BBD5, 0x1590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, AnimGraphNode_SequencePlayer_1B6DC7BA440E3B6F908D02AC8A4E0CFE, 0x15B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, AnimGraphNode_StateResult_9E97908D425E487293D05D810201D9A5, 0x1630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, AnimGraphNode_SequencePlayer_87E81C584813953DDC8553B3B073E65F, 0x1650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, AnimGraphNode_StateResult_11A9E8C54D7ABDD95A9506AA59C3A588, 0x16C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, AnimGraphNode_StateResult_93731A3341C41491BD49C1BA99968BD4, 0x16E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, AnimGraphNode_TransitionResult_EBEABB2A42B00350E7478A85DA490C5C, 0x1708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, AnimGraphNode_TransitionResult_28D66CF74EE19CF08DEEBFA43C501CD9, 0x1730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, AnimGraphNode_BlendSpacePlayer_0B4128BB44A3587949E28585E769D41D, 0x1758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, AnimGraphNode_BlendSpacePlayer_BCD79D1B4C225AC0DA7B2FAF8CAE26CA, 0x1838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, AnimGraphNode_ApplyAdditive_46761BB64FC505BD1884A4BB79EE608D, 0x1918);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, AnimGraphNode_StateResult_1C9FA3354DBA6CA2579B41822D1B078A, 0x19E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, AnimGraphNode_RandomPlayer_53A9E5DD442F937DB93205A4B0870338, 0x1A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, AnimGraphNode_StateResult_BF80B19547B75C45962C7492EAB425BA, 0x1A68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, AnimGraphNode_StateMachine_F19D86404B66368766487DA4685AA73A, 0x1A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, AnimGraphNode_StateResult_86832B8F42C70D6E352FC294FC98FAC2, 0x1B38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, AnimGraphNode_StateMachine_550AEA2F4961A201F2EC50ABDD3BB35D, 0x1B58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, AnimGraphNode_StateResult_D6626C664EBE98F17B643E9376075369, 0x1C08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, AnimGraphNode_TransitionResult_65B09EA94874A11EE237AF8F7966C1B8, 0x1C28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, AnimGraphNode_TransitionResult_D6398E7F430163D195B55DB4CA6F7C57, 0x1C50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, AnimGraphNode_BlendSpacePlayer_6BBB957B443406521CF227B2F8BC4394, 0x1C78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, AnimGraphNode_BlendListByBool_B3B9E682438D0CE1D22CE78ED55ECF55, 0x1D58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, AnimGraphNode_BlendSpacePlayer_362CC1394F53F230A7C5B891E10B83EA, 0x1DF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, AnimGraphNode_BlendSpacePlayer_FD1660014603CD97A56A6AA75FECA30A, 0x1ED8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, AnimGraphNode_ApplyAdditive_B5660FB64A2ED9A8385DBD9FD1DA7D87, 0x1FB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, AnimGraphNode_StateResult_060C9A16413AC97F47423D85484A8258, 0x2080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, AnimGraphNode_RandomPlayer_E8C698174441BF16129D7D8F640A7EB8, 0x20A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, AnimGraphNode_StateResult_0ACD7B8F4004410150814EAB1BE391CD, 0x2108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, AnimGraphNode_StateMachine_9733288347E4B144B3A288BEBEE75E6F, 0x2128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, AnimGraphNode_StateResult_549C85D044DA0D1EE0B539B4BB9E2501, 0x21D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, AnimGraphNode_StateMachine_DF7708184A7F901C788794B67102659B, 0x21F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, AnimGraphNode_StateResult_7EFDB07349AF896607F6638D69A6AAA5, 0x22A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, AnimGraphNode_StateMachine_7E0BF18B4A91146663F36590AB128212, 0x22C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, AnimGraphNode_StateResult_2865A78D4C0C0F9EC070DDA3BCE10CFC, 0x2378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, AnimGraphNode_StateMachine_85C79BA2446AAB14A42D14A8AC5B790E, 0x2398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, AnimGraphNode_RotationOffsetBlendSpace_C76FC50247889C92074F8AA0AD32E85B, 0x2448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, AnimGraphNode_Slot_6589DB0449FD86E3AAC208973CCDFD2B, 0x25D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, AnimGraphNode_SaveCachedPose_FCCEC03848325A84797E97A1AA11F31A, 0x2618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, AnimGraphNode_UseCachedPose_5D4A35EB4A80832591F80A9F933F4743, 0x26D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, AnimGraphNode_LayeredBoneBlend_8EC10B784BAB761B66E40C8254142AF7, 0x26F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, AnimGraphNode_UseCachedPose_52261C6F46BCE4DB43FDC79BDD9023CE, 0x27B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, MoveForward, 0x27D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, MoveRight, 0x27DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, Pitch, 0x27E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, Roll, 0x27E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, Yaw, 0x27E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, RotationLastTick, 0x27EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, YawDelta, 0x27F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, IsAccelerating, 0x27FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, FullBody, 0x27FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, IsAttackHit, 0x27FE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, IsDie, 0x27FF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, IsSearch, 0x2800);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, UnknownData_XUKS, 0x2801);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, Hunter_Ref, 0x2808);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, FootLeftJointLoc, 0x2810);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, FootRightJointLoc, 0x281C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, IK_LeftFoot_Alpha, 0x2828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, IK_RightFoot_Alpha, 0x282C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, RightFootEffectorLoc, 0x2830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, LeftFootEffectorLoc, 0x2834);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, IKAdjustOffset, 0x2838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, RightFootRotation, 0x283C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, LeftFootRotation, 0x2848);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, IKTraceDistance, 0x2854);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, IKFeetInterpSpeed, 0x2858);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, DeltaSeconds, 0x285C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, HipsOffest, 0x2860);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, IKHipsInterpSpeed, 0x2864);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, IKCapsuleHalfHeight, 0x2868);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, HandRightEffectorLoc, 0x286C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, HandLeftEffectorLoc, 0x2878);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, IKLeftHand_Alpha, 0x2884);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, IKRightHand_Alpha, 0x2888);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, bIsEnableIK, 0x288C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, UnknownData_6STF, 0x288D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, Speed, 0x2890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, HandLeftJointLoc, 0x2894);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, HandRightJointLoc, 0x28A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, EnableRightHankIK, 0x28AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, OnStateChanged, 0x28AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, bIsChangeStateRecently, 0x28AE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhray_Hunter_AnimBP_C, bIsAiming, 0x28AF);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhray_Hunter_AnimBP_C, 0x28B0);
		}

		// class UNamedInterfaces : public UObject
		TEST_METHOD(Class__OnlineSubsystem__NamedInterfaces)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNamedInterfaces, NamedInterfaces, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNamedInterfaces, NamedInterfaceDefs, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNamedInterfaces, UnknownData_TEYN, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNamedInterfaces, 0x0068);
		}

		// class UTurnBasedMatchInterface : public UInterface
		TEST_METHOD(Class__OnlineSubsystem__TurnBasedMatchInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTurnBasedMatchInterface, 0x0030);
		}

		// class ANavigationData : public AActor
		TEST_METHOD(Class__NavigationSystem__NavigationData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, UnknownData_3G6G, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, RenderingComp, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, NavDataConfig, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, UnknownData_E6VN, 0x03B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, RuntimeGeneration, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, UnknownData_SSZX, 0x03B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, ObservedPathsTickInterval, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, DataVersion, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, UnknownData_FDWP, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, SupportedAreas, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, UnknownData_A270, 0x04A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavigationData, 0x04F8);
		}

		// class AAbstractNavData : public ANavigationData
		TEST_METHOD(Class__NavigationSystem__AbstractNavData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAbstractNavData, 0x04F8);
		}

		// class UCrowdManagerBase : public UObject
		TEST_METHOD(Class__NavigationSystem__CrowdManagerBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCrowdManagerBase, 0x0030);
		}

		// class UNavArea : public UNavAreaBase
		TEST_METHOD(Class__NavigationSystem__NavArea)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavArea, DefaultCost, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavArea, FixedAreaEnteringCost, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavArea, DrawColor, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavArea, SupportedAgents, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavArea, UnknownData_8KO6, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea, 0x0050);
		}

		// class UNavArea_Default : public UNavArea
		TEST_METHOD(Class__NavigationSystem__NavArea_Default)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea_Default, 0x0050);
		}

		// class UNavArea_LowHeight : public UNavArea
		TEST_METHOD(Class__NavigationSystem__NavArea_LowHeight)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea_LowHeight, 0x0050);
		}

		// class UNavArea_Null : public UNavArea
		TEST_METHOD(Class__NavigationSystem__NavArea_Null)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea_Null, 0x0050);
		}

		// class UNavArea_Obstacle : public UNavArea
		TEST_METHOD(Class__NavigationSystem__NavArea_Obstacle)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea_Obstacle, 0x0050);
		}

		// class UNavAreaMeta : public UNavArea
		TEST_METHOD(Class__NavigationSystem__NavAreaMeta)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavAreaMeta, 0x0050);
		}

		// class UNavAreaMeta_SwitchByAgent : public UNavAreaMeta
		TEST_METHOD(Class__NavigationSystem__NavAreaMeta_SwitchByAgent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent0Area, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent1Area, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent2Area, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent3Area, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent4Area, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent5Area, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent6Area, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent7Area, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent8Area, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent9Area, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent10Area, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent11Area, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent12Area, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent13Area, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent14Area, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent15Area, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavAreaMeta_SwitchByAgent, 0x00D0);
		}

		// class UNavCollision : public UNavCollisionBase
		TEST_METHOD(Class__NavigationSystem__NavCollision)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollision, UnknownData_TV6A, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollision, CylinderCollision, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollision, BoxCollision, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollision, AreaClass, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollision, UnknownData_0SCT, 0x00D9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavCollision, 0x0108);
		}

		// class ANavigationGraph : public ANavigationData
		TEST_METHOD(Class__NavigationSystem__NavigationGraph)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavigationGraph, 0x04F8);
		}

		// class ANavigationGraphNode : public AActor
		TEST_METHOD(Class__NavigationSystem__NavigationGraphNode)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavigationGraphNode, 0x0338);
		}

		// class UNavigationGraphNodeComponent : public USceneComponent
		TEST_METHOD(Class__NavigationSystem__NavigationGraphNodeComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationGraphNodeComponent, Node, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationGraphNodeComponent, NextNodeComponent, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationGraphNodeComponent, PrevNodeComponent, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationGraphNodeComponent, 0x0280);
		}

		// class UNavigationInvokerComponent : public UActorComponent
		TEST_METHOD(Class__NavigationSystem__NavigationInvokerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationInvokerComponent, TileGenerationRadius, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationInvokerComponent, TileRemovalRadius, 0x0104);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationInvokerComponent, 0x0108);
		}

		// class UNavigationPath : public UObject
		TEST_METHOD(Class__NavigationSystem__NavigationPath)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationPath, PathUpdatedNotifier, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationPath, PathPoints, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationPath, RecalculateOnInvalidation, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationPath, UnknownData_KAHB, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationPath, 0x0090);
		}

		// class UNavigationPathGenerator : public UInterface
		TEST_METHOD(Class__NavigationSystem__NavigationPathGenerator)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationPathGenerator, 0x0030);
		}

		// class UNavigationQueryFilter : public UObject
		TEST_METHOD(Class__NavigationSystem__NavigationQueryFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationQueryFilter, Areas, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationQueryFilter, IncludeFlags, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationQueryFilter, ExcludeFlags, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationQueryFilter, UnknownData_SPI7, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationQueryFilter, 0x0050);
		}

		// class UNavigationSystemV1 : public UNavigationSystemBase
		TEST_METHOD(Class__NavigationSystem__NavigationSystemV1)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, MainNavData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, AbstractNavData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, CrowdManagerClass, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_77FG, 0x006A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, DataGatheringMode, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_SKSS, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_8TOR, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, ActiveTilesUpdateInterval, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, SupportedAgents, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, DirtyAreasUpdateFreq, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_T3SF, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, NavDataSet, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, NavDataRegistrationQueue, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_BZMK, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, OnNavDataRegisteredEvent, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, OnNavigationGenerationFinishedDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_D24X, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, OperationMode, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_JQZI, 0x01FD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationSystemV1, 0x0438);
		}

		// class UNavigationSystemModuleConfig : public UNavigationSystemConfig
		TEST_METHOD(Class__NavigationSystem__NavigationSystemModuleConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemModuleConfig, UnknownData_FMJ3, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationSystemModuleConfig, 0x0058);
		}

		// class ANavigationTestingActor : public AActor
		TEST_METHOD(Class__NavigationSystem__NavigationTestingActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_NBRU, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, CapsuleComponent, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, InvokerComponent, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_CNXE, 0x0359);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, NavAgentProps, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, QueryingExtent, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_CR6C, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, MyNavData, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, ProjectedLocation, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_UKMW, 0x03B6);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, CostDisplayMode, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_JVGO, 0x03B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, TextCanvasOffset, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_KAJW, 0x03C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, PathfindingTime, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, PathCost, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, PathfindingSteps, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_3S40, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, OtherActor, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, FilterClass, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, ShowStepIndex, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, OffsetFromCornersDistance, 0x03EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_WUZ1, 0x03F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavigationTestingActor, 0x0420);
		}

		// class UNavLinkComponent : public UPrimitiveComponent
		TEST_METHOD(Class__NavigationSystem__NavLinkComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkComponent, UnknownData_43OR, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkComponent, Links, 0x0580);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkComponent, 0x0590);
		}

		// class UNavRelevantComponent : public UActorComponent
		TEST_METHOD(Class__NavigationSystem__NavRelevantComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavRelevantComponent, UnknownData_QOOO, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavRelevantComponent, UnknownData_S3IG, 0x0125);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavRelevantComponent, CachedNavParent, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavRelevantComponent, 0x0130);
		}

		// class UNavLinkCustomComponent : public UNavRelevantComponent
		TEST_METHOD(Class__NavigationSystem__NavLinkCustomComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_141U, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, NavLinkUserId, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_T7SS, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, EnabledAreaClass, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, DisabledAreaClass, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, LinkRelativeStart, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, LinkRelativeEnd, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, LinkDirection, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_V5EA, 0x0169);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_JXYC, 0x016D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, ObstacleOffset, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, ObstacleExtent, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, ObstacleAreaClass, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, BroadcastRadius, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, BroadcastInterval, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, BroadcastChannel, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_TMP5, 0x0199);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkCustomComponent, 0x01D8);
		}

		// class UNavLinkCustomInterface : public UInterface
		TEST_METHOD(Class__NavigationSystem__NavLinkCustomInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkCustomInterface, 0x0030);
		}

		// class UNavLinkHostInterface : public UInterface
		TEST_METHOD(Class__NavigationSystem__NavLinkHostInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkHostInterface, 0x0030);
		}

		// class UNavLinkRenderingComponent : public UPrimitiveComponent
		TEST_METHOD(Class__NavigationSystem__NavLinkRenderingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkRenderingComponent, UnknownData_XMA3, 0x0578);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkRenderingComponent, 0x0580);
		}

		// class UNavLinkTrivial : public UNavLinkDefinition
		TEST_METHOD(Class__NavigationSystem__NavLinkTrivial)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkTrivial, 0x0058);
		}

		// class ANavMeshBoundsVolume : public AVolume
		TEST_METHOD(Class__NavigationSystem__NavMeshBoundsVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavMeshBoundsVolume, SupportedAgents, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavMeshBoundsVolume, UnknownData_8GNT, 0x0374);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavMeshBoundsVolume, 0x0378);
		}

		// class UNavMeshRenderingComponent : public UPrimitiveComponent
		TEST_METHOD(Class__NavigationSystem__NavMeshRenderingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMeshRenderingComponent, UnknownData_XQRI, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMeshRenderingComponent, UnknownData_56WM, 0x0580);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavMeshRenderingComponent, 0x05F0);
		}

		// class UNavModifierComponent : public UNavRelevantComponent
		TEST_METHOD(Class__NavigationSystem__NavModifierComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavModifierComponent, AreaClass, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavModifierComponent, FailsafeExtent, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavModifierComponent, UnknownData_HL03, 0x0145);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavModifierComponent, 0x0158);
		}

		// class ANavModifierVolume : public AVolume
		TEST_METHOD(Class__NavigationSystem__NavModifierVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavModifierVolume, UnknownData_1QSD, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavModifierVolume, AreaClass, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavModifierVolume, 0x0380);
		}

		// class UNavNodeInterface : public UInterface
		TEST_METHOD(Class__NavigationSystem__NavNodeInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavNodeInterface, 0x0030);
		}

		// class ANavSystemConfigOverride : public AActor
		TEST_METHOD(Class__NavigationSystem__NavSystemConfigOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavSystemConfigOverride, NavigationSystemConfig, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavSystemConfigOverride, UnknownData_X515, 0x0341);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavSystemConfigOverride, 0x0348);
		}

		// class UNavTestRenderingComponent : public UPrimitiveComponent
		TEST_METHOD(Class__NavigationSystem__NavTestRenderingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavTestRenderingComponent, UnknownData_ID2Q, 0x0578);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavTestRenderingComponent, 0x0580);
		}

		// class URecastFilter_UseDefaultArea : public UNavigationQueryFilter
		TEST_METHOD(Class__NavigationSystem__RecastFilter_UseDefaultArea)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URecastFilter_UseDefaultArea, 0x0050);
		}

		// class ARecastNavMesh : public ANavigationData
		TEST_METHOD(Class__NavigationSystem__RecastNavMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, UnknownData_Z0K6, 0x04FB);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, DrawOffset, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, UnknownData_IP9P, 0x0501);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, TilePoolSize, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, TileSizeUU, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, CellSize, 0x050C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, CellHeight, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, AgentRadius, 0x0514);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, AgentHeight, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, AgentMaxHeight, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, AgentMaxSlope, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, AgentMaxStepHeight, 0x0524);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, MinRegionArea, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, MergeRegionSize, 0x052C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, MaxSimplificationError, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, MaxSimultaneousTileGenerationJobsCount, 0x0534);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, TileNumberHardLimit, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, PolyRefTileBits, 0x053C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, PolyRefNavPolyBits, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, PolyRefSaltBits, 0x0544);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, NavMeshOriginOffset, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, DefaultDrawDistance, 0x0554);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, DefaultMaxSearchNodes, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, DefaultMaxHierarchicalSearchNodes, 0x055C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, RegionPartitioning, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, LayerPartitioning, 0x0561);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, UnknownData_Z0C7, 0x0562);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, RegionChunkSplits, 0x0564);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, LayerChunkSplits, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, UnknownData_41VY, 0x056E);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, TileSetUpdateInterval, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, HeuristicScale, 0x0574);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, VerticalDeviationFromGroundCompensation, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, UnknownData_4OAZ, 0x057C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARecastNavMesh, 0x05B0);
		}

		// class URecastNavMeshDataChunk : public UNavigationDataChunk
		TEST_METHOD(Class__NavigationSystem__RecastNavMeshDataChunk)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URecastNavMeshDataChunk, UnknownData_J228, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URecastNavMeshDataChunk, 0x0048);
		}

		// class UGE_GeneralStamina_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_GeneralStamina__GE_GeneralStamina_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_GeneralStamina_C, 0x05F8);
		}

		// class UGE_Buff_Immune_Cooldown_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Buff_Immune_Cooldown__GE_Buff_Immune_Cooldown_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Buff_Immune_Cooldown_C, 0x05F8);
		}

		// class ACableActor : public AActor
		TEST_METHOD(Class__CableComponent__CableActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACableActor, CableComponent, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACableActor, 0x0340);
		}

		// class UCableComponent : public UMeshComponent
		TEST_METHOD(Class__CableComponent__CableComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, bAttachStart, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, bAttachEnd, 0x05A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, UnknownData_0RKH, 0x05A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, AttachEndTo, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, AttachEndToSocketName, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, EndLocation, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, CableLength, 0x05D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, NumSegments, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, SubstepTime, 0x05DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, SolverIterations, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, bEnableStiffness, 0x05E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, bEnableCollision, 0x05E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, UnknownData_6RKQ, 0x05E6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, CollisionFriction, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, CableForce, 0x05EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, CableGravityScale, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, CableWidth, 0x05FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, NumSides, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, TileMaterial, 0x0604);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, UnknownData_6GWR, 0x0608);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCableComponent, 0x0620);
		}

		// class UWidget_StorePanel_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_StorePanel__Widget_StorePanel_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StorePanel_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StorePanel_C, SetSpacer, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StorePanel_C, Loop, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StorePanel_C, BeginPanel, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StorePanel_C, BlackFade, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StorePanel_C, CanvasPanel_Loadding, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StorePanel_C, CanvasPanel_SubContent, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StorePanel_C, Header_CrystalStore, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StorePanel_C, Header_DirectStore, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StorePanel_C, Header_Discount, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StorePanel_C, Header_Features, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StorePanel_C, Header_TokenStore, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StorePanel_C, Image_2, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StorePanel_C, Image_3, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StorePanel_C, Image_4, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StorePanel_C, Image_5, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StorePanel_C, Image_8, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StorePanel_C, Image_9, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StorePanel_C, Image_162, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StorePanel_C, Image_201, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StorePanel_C, Image_203, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StorePanel_C, Image_497, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StorePanel_C, Image_606, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StorePanel_C, LoadingScreen, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StorePanel_C, Text_Cuztomize, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StorePanel_C, TextBlock_4, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StorePanel_C, TextBlock_9, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StorePanel_C, TextBlock_12, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StorePanel_C, TextBlock_14, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StorePanel_C, TextBlock_24, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StorePanel_C, TextBlock_26, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StorePanel_C, Widget_ButtonChoiceRole_DirectStore, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StorePanel_C, Widget_ButtonChoiceTab_TokenStore, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StorePanel_C, Widget_CharacterStore, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StorePanel_C, Widget_CrystalStore, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StorePanel_C, Widget_DirectStore, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StorePanel_C, Widget_DiscountStore, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StorePanel_C, Widget_FeaturesStore, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StorePanel_C, Widget_StoreItemDeprecate, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StorePanel_C, Widget_StoreList, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StorePanel_C, Widget_StoreToken, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StorePanel_C, Widget_Text_C_2, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StorePanel_C, Widget_Text_C_3, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StorePanel_C, Widget_Text_C_4, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StorePanel_C, WidgetSwitcher_Header, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StorePanel_C, WidgetSwitcher_Subcontent, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StorePanel_C, WidgetSwitcher_SubMenu, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StorePanel_C, OnSetting, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StorePanel_C, OnExit, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StorePanel_C, OnFindMatch, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StorePanel_C, OnLootbox, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StorePanel_C, WidgetManager, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StorePanel_C, IsCalling, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StorePanel_C, UnknownData_1H93, 0x0409);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StorePanel_C, RefActivePanel, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StorePanel_C, RefStoreGrid, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StorePanel_C, IsSetSpacer, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StorePanel_C, UnknownData_10R4, 0x0421);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StorePanel_C, CustomizeProduct, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StorePanel_C, NavigateFromCustomize, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StorePanel_C, UnknownData_FNEW, 0x04C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StorePanel_C, PreviewingItem, 0x04D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_StorePanel_C, 0x0570);
		}

		// class UQuestComponent_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__QuestComponent__QuestComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestComponent_C, UberGraphFrame, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestComponent_C, QuestID, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestComponent_C, bInitialize, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestComponent_C, bIsQuestComplete, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestComponent_C, UnknownData_YL1P, 0x0122);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestComponent_C, Portal, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestComponent_C, QuestObjective, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestComponent_C, Controller, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestComponent_C, QuestDetailsNew, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQuestComponent_C, 0x0158);
		}

		// class UGE_Buff_Panic_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Buff_Panic__GE_Buff_Panic_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Buff_Panic_C, 0x05F8);
		}

		// class UWidget_StoreGrid_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Widget_StoreGrid__Widget_StoreGrid_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreGrid_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreGrid_C, ScrollBox_310, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreGrid_C, UniformGridPanel_Product, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreGrid_C, DebugProduct, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreGrid_C, FillBlankSlot, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreGrid_C, grid, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreGrid_C, WidgetProduct, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreGrid_C, PreferCurrency, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreGrid_C, bShowPlayerHave, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreGrid_C, bShowTooltip, 0x0282);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreGrid_C, UnknownData_N58O, 0x0283);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreGrid_C, Cache, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreGrid_C, bIsLatest, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreGrid_C, UnknownData_MSRQ, 0x0299);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreGrid_C, ProductBG, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreGrid_C, ImageSize, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreGrid_C, ImagePosition, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreGrid_C, Width, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreGrid_C, UnknownData_NCAE, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreGrid_C, CacheEndDate, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreGrid_C, PreviewProduct, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget_StoreGrid_C, StoreType, 0x03F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget_StoreGrid_C, 0x03F1);
		}

		// class UChaseAudioComponent_C : public UChaseAudioComponentNative
		TEST_METHOD(BlueprintGeneratedClass__ChaseAudioComponent__ChaseAudioComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaseAudioComponent_C, UberGraphFrame, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaseAudioComponent_C, AudioChase_Loop_Cache, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaseAudioComponent_C, AudioChase_Begin_Cache, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaseAudioComponent_C, FadeIn, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaseAudioComponent_C, FadeOut, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaseAudioComponent_C, AudioChase_Heart_Cache, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaseAudioComponent_C, MaxHeartBeatVol, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaseAudioComponent_C, EyeLenght, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaseAudioComponent_C, EyeBound, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaseAudioComponent_C, MinHeartBeatVol, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaseAudioComponent_C, OnTriggerChasing, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaseAudioComponent_C, OnTriggerEscape, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaseAudioComponent_C, ChaseTime, 0x0198);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaseAudioComponent_C, 0x019C);
		}

		// class UGE_Debuff_PhaseShiftStun_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Debuff_PhaseShiftStun__GE_Debuff_PhaseShiftStun_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Debuff_PhaseShiftStun_C, 0x05F8);
		}

		// class UGE_WeaponPrayPhaseShift_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_WeaponPrayPhaseShift__GE_WeaponPrayPhaseShift_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_WeaponPrayPhaseShift_C, 0x05F8);
		}

		// class UQuestObjective_C : public UQuestObjectiveBase
		TEST_METHOD(BlueprintGeneratedClass__QuestObjective__QuestObjective_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQuestObjective_C, 0x0038);
		}

		// class UIngamePlayerDataSurvivor_C : public UIngamePlayerDataBase_C
		TEST_METHOD(BlueprintGeneratedClass__IngamePlayerDataSurvivor__IngamePlayerDataSurvivor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngamePlayerDataSurvivor_C, UberGraphFrame, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngamePlayerDataSurvivor_C, survivor, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngamePlayerDataSurvivor_C, OnTakeDamage, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngamePlayerDataSurvivor_C, Opacity, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngamePlayerDataSurvivor_C, ScreenFX_Delay, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngamePlayerDataSurvivor_C, DecreaseAlphaTime, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngamePlayerDataSurvivor_C, bScreenFX, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngamePlayerDataSurvivor_C, UnknownData_2SID, 0x009D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngamePlayerDataSurvivor_C, OnDecreaseScreenOpacity, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngamePlayerDataSurvivor_C, OnSetItem, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngamePlayerDataSurvivor_C, QuestDetailNew, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngamePlayerDataSurvivor_C, OnUpdateQuestDetailsNew, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngamePlayerDataSurvivor_C, QuestDetails, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIngamePlayerDataSurvivor_C, OnUpdateQuestDetails, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIngamePlayerDataSurvivor_C, 0x0100);
		}

		// class UDetectValueComponent_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__DetectValueComponent__DetectValueComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDetectValueComponent_C, UberGraphFrame, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDetectValueComponent_C, 0x0110);
		}

		// class UGE_Debuff_DecreaseDodgeStamina_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Debuff_DecreaseDodgeStamina__GE_Debuff_DecreaseDodgeStamina_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Debuff_DecreaseDodgeStamina_C, 0x05F8);
		}

		// class ALD_Skin_TouristJap_Songkran_C : public ALD_Skin_TouristJap_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_TouristJap_Songkran__LD_Skin_TouristJap_Songkran_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_TouristJap_Songkran_C, 0x0532);
		}

		// class UAchievementComponent_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__AchievementComponent__AchievementComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementComponent_C, UberGraphFrame, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementComponent_C, DT_Achievement, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementComponent_C, IsInitialize, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAchievementComponent_C, 0x0121);
		}

		// class ALD_Skin_Vanz_A_FisherYellow_C : public ALD_Skin_Vanz_D_Default_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Vanz_A_FisherYellow__LD_Skin_Vanz_A_FisherYellow_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Vanz_A_FisherYellow_C, 0x0532);
		}

		// class ALD_Skin_Jane_D_Default_C : public ALD_Skin_Base_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Skin_Jane_D_Default__LD_Skin_Jane_D_Default_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Skin_Jane_D_Default_C, 0x0532);
		}

		// class UFemale_Lobby_ABP_C : public USurvivor_Lobby_ABP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__Female_Lobby_ABP__Female_Lobby_ABP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFemale_Lobby_ABP_C, 0x0A1A);
		}

		// class UGA_TrapSurvivorTest_C : public UGA_TrapSurvivorBase_C
		TEST_METHOD(BlueprintGeneratedClass__GA_TrapSurvivorTest__GA_TrapSurvivorTest_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_TrapSurvivorTest_C, 0x04C0);
		}

		// class UGA_TrapSurvivorSigilScrollTutorial_C : public UGA_TrapSurvivorBase_C
		TEST_METHOD(BlueprintGeneratedClass__GA_TrapSurvivorSigilScrollTutorial__GA_TrapSurvivorSigilScrollTutorial_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_TrapSurvivorSigilScrollTutorial_C, 0x04C0);
		}

		// class UGA_WeaponSurvivorHolyKnife_C : public UGA_WeaponSurvivorBase_C
		TEST_METHOD(BlueprintGeneratedClass__GA_WeaponSurvivorHolyKnife__GA_WeaponSurvivorHolyKnife_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_WeaponSurvivorHolyKnife_C, 0x04D5);
		}

		// class UNS_AbilityComponent_C : public UAnimNotifyState
		TEST_METHOD(BlueprintGeneratedClass__NS_AbilityComponent__NS_AbilityComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNS_AbilityComponent_C, Tag, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNS_AbilityComponent_C, 0x0058);
		}

		// class UGA_MagicRice_C : public UGA_ProjectileSurvivorBase_C
		TEST_METHOD(BlueprintGeneratedClass__GA_MagicRice__GA_MagicRice_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_MagicRice_C, 0x04E8);
		}

		// class ALD_Back_Sur_Magic_00005_C : public ALD_Back_Sur_Base_C
		TEST_METHOD(BlueprintGeneratedClass__LD_Back_Sur_Magic_00005__LD_Back_Sur_Magic_00005_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALD_Back_Sur_Magic_00005_C, 0x055C);
		}

		// class UNS_HideItemInHandWithDurability_C : public UAnimNotifyState
		TEST_METHOD(BlueprintGeneratedClass__NS_HideItemInHandwithDurability__NS_HideItemInHandWithDurability_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNS_HideItemInHandWithDurability_C, LessEqualThanThis, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNS_HideItemInHandWithDurability_C, 0x003C);
		}

		// class UITraceable_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__ITraceable__ITraceable_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UITraceable_C, 0x0030);
		}

		// class AZBingCat_PreviewItem_Sigil_C : public AZBingCat_PreviewItemBase_C
		TEST_METHOD(BlueprintGeneratedClass__ZBingCat_PreviewItem_Sigil__ZBingCat_PreviewItem_Sigil_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AZBingCat_PreviewItem_Sigil_C, 0x0350);
		}

		// class AZBingCat_PreviewItem_Chaplet_C : public AZBingCat_PreviewItemBase_C
		TEST_METHOD(BlueprintGeneratedClass__ZBingCat_PreviewItem_Chaplet__ZBingCat_PreviewItem_Chaplet_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AZBingCat_PreviewItem_Chaplet_C, 0x0350);
		}

		// class UOptionDisplaySaveGame_C : public USaveGame
		TEST_METHOD(BlueprintGeneratedClass__OptionDisplaySaveGame__OptionDisplaySaveGame_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionDisplaySaveGame_C, UberGraphFrame, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionDisplaySaveGame_C, CurrentValue, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionDisplaySaveGame_C, DefualtValue, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOptionDisplaySaveGame_C, 0x0070);
		}

		// class UGE_Buff_ImmuneAutoGuard_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Buff_ImmuneAutoGuard__GE_Buff_ImmuneAutoGuard_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Buff_ImmuneAutoGuard_C, 0x05F8);
		}

		// class UGE_PP_Aurabase_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_PP_Aurabase__GE_PP_Aurabase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGE_PP_Aurabase_C, InArea, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGE_PP_Aurabase_C, Distance, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGE_PP_Aurabase_C, UnknownData_GKZH, 0x0604);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGE_PP_Aurabase_C, Query, 0x0608);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_PP_Aurabase_C, 0x0650);
		}

		// class UGA_TrapSurvivorSigilScroll_C : public UGA_TrapSurvivorBase_C
		TEST_METHOD(BlueprintGeneratedClass__GA_TrapSurvivorSigilScroll__GA_TrapSurvivorSigilScroll_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_TrapSurvivorSigilScroll_C, 0x04C0);
		}

		// struct FGameplayAbilitySpecHandle
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayAbilitySpecHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilitySpecHandle, Handle, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayAbilitySpecHandle, 0x0004);
		}

		// struct FVector_NetQuantize100 : public FVector
		TEST_METHOD(ScriptStruct__Engine__Vector_NetQuantize100)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector_NetQuantize100, 0x000C);
		}

		// struct FRepAttachment
		TEST_METHOD(ScriptStruct__Engine__RepAttachment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, AttachParent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, LocationOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, RelativeScale3D, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, RotationOffset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, AttachSocket, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, UnknownData_Q8M3, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, AttachComponent, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRepAttachment, 0x0040);
		}

		// struct FPredictionKey
		TEST_METHOD(ScriptStruct__GameplayAbilities__PredictionKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictionKey, Current, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictionKey, Base, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictionKey, UnknownData_ICSL, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictionKey, PredictiveConnection, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictionKey, bIsStale, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictionKey, bIsServerInitiated, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictionKey, UnknownData_Q6XV, 0x0012);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPredictionKey, 0x0018);
		}

		// struct FRepMovement
		TEST_METHOD(ScriptStruct__Engine__RepMovement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, LinearVelocity, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, AngularVelocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, Location, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, Rotation, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, LocationQuantizationLevel, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, VelocityQuantizationLevel, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, RotationQuantizationLevel, 0x0033);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRepMovement, 0x0034);
		}

		// struct FGameplayAbilityTargetDataHandle
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayAbilityTargetDataHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityTargetDataHandle, UnknownData_NIX1, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayAbilityTargetDataHandle, 0x0020);
		}

		// struct FGameplayAbilities_FServerAbilityRPCBatch
		TEST_METHOD(ScriptStruct__GameplayAbilities__ServerAbilityRPCBatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAbilityRPCBatch, AbilitySpecHandle, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAbilityRPCBatch, UnknownData_63PL, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAbilityRPCBatch, PredictionKey, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAbilityRPCBatch, TargetData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAbilityRPCBatch, InputPressed, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAbilityRPCBatch, Ended, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAbilityRPCBatch, Started, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAbilityRPCBatch, UnknownData_VOG8, 0x0043);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerAbilityRPCBatch, 0x0048);
		}

		// struct FKShapeElem
		TEST_METHOD(ScriptStruct__Engine__KShapeElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, UnknownData_HVPN, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, RestOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, Name, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, UnknownData_L7A4, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, UnknownData_J89M, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKShapeElem, 0x0030);
		}

		// struct FReplicatedPredictionKeyItem : public FFastArraySerializerItem
		TEST_METHOD(ScriptStruct__GameplayAbilities__ReplicatedPredictionKeyItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedPredictionKeyItem, UnknownData_MAE0, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedPredictionKeyItem, PredictionKey, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReplicatedPredictionKeyItem, 0x0028);
		}

		// struct FReplicatedPredictionKeyMap : public FFastArraySerializer
		TEST_METHOD(ScriptStruct__GameplayAbilities__ReplicatedPredictionKeyMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedPredictionKeyMap, PredictionKeys, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReplicatedPredictionKeyMap, 0x00C0);
		}

		// struct FMinimalReplicationTagCountMap
		TEST_METHOD(ScriptStruct__GameplayAbilities__MinimalReplicationTagCountMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalReplicationTagCountMap, UnknownData_Y9S8, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalReplicationTagCountMap, Owner, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalReplicationTagCountMap, UnknownData_CY92, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMinimalReplicationTagCountMap, 0x0060);
		}

		// struct FKSphereElem : public FKShapeElem
		TEST_METHOD(ScriptStruct__Engine__KSphereElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphereElem, Center, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphereElem, Radius, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKSphereElem, 0x0040);
		}

		// struct FKBoxElem : public FKShapeElem
		TEST_METHOD(ScriptStruct__Engine__KBoxElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, Center, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, Rotation, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, X, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, Y, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, Z, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, UnknownData_N930, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKBoxElem, 0x0058);
		}

		// struct FGameplayEffectContextHandle
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayEffectContextHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectContextHandle, UnknownData_11SP, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayEffectContextHandle, 0x0018);
		}

		// struct FGameplayCueParameters
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayCueParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueParameters, NormalizedMagnitude, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueParameters, RawMagnitude, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueParameters, EffectContext, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueParameters, MatchedTagName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueParameters, OriginalTag, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueParameters, AggregatedSourceTags, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueParameters, AggregatedTargetTags, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueParameters, Location, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueParameters, Normal, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueParameters, Instigator, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueParameters, EffectCauser, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueParameters, SourceObject, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueParameters, PhysicalMaterial, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueParameters, GameplayEffectLevel, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueParameters, AbilityLevel, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueParameters, TargetAttachComponent, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayCueParameters, 0x00B8);
		}

		// struct FKSphylElem : public FKShapeElem
		TEST_METHOD(ScriptStruct__Engine__KSphylElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphylElem, Center, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphylElem, Rotation, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphylElem, Radius, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphylElem, Length, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKSphylElem, 0x0050);
		}

		// struct FKConvexElem : public FKShapeElem
		TEST_METHOD(ScriptStruct__Engine__KConvexElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, VertexData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, ElemBox, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, UnknownData_L4NR, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, Transform, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, UnknownData_4FHW, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKConvexElem, 0x00A0);
		}

		// struct FKTaperedCapsuleElem : public FKShapeElem
		TEST_METHOD(ScriptStruct__Engine__KTaperedCapsuleElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, Center, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, Rotation, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, Radius0, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, Radius1, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, Length, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, UnknownData_3B32, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKTaperedCapsuleElem, 0x0058);
		}

		// struct FKAggregateGeom
		TEST_METHOD(ScriptStruct__Engine__KAggregateGeom)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, SphereElems, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, BoxElems, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, SphylElems, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, ConvexElems, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, TaperedCapsuleElems, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, UnknownData_GDMZ, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKAggregateGeom, 0x0058);
		}

		// struct FActiveGameplayCue : public FFastArraySerializerItem
		TEST_METHOD(ScriptStruct__GameplayAbilities__ActiveGameplayCue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveGameplayCue, GameplayCueTag, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveGameplayCue, UnknownData_V08U, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveGameplayCue, PredictionKey, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveGameplayCue, Parameters, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveGameplayCue, bPredictivelyRemoved, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveGameplayCue, UnknownData_KP54, 0x00E9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveGameplayCue, 0x00F0);
		}

		// struct FAnimationGroupReference
		TEST_METHOD(ScriptStruct__Engine__AnimationGroupReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationGroupReference, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationGroupReference, GroupRole, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationGroupReference, UnknownData_95WM, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationGroupReference, 0x000C);
		}

		// struct FActiveGameplayCueContainer : public FFastArraySerializer
		TEST_METHOD(ScriptStruct__GameplayAbilities__ActiveGameplayCueContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveGameplayCueContainer, GameplayCues, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveGameplayCueContainer, UnknownData_MPIH, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveGameplayCueContainer, Owner, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveGameplayCueContainer, 0x00D0);
		}

		// struct FRootMotionMovementParams
		TEST_METHOD(ScriptStruct__Engine__RootMotionMovementParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, bHasRootMotion, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, UnknownData_6ZP0, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, BlendWeight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, UnknownData_3O4C, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, RootMotionTransform, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionMovementParams, 0x0040);
		}

		// struct FGameplayAttribute
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayAttribute)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAttribute, AttributeName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAttribute, Attribute, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAttribute, AttributeOwner, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayAttribute, 0x0020);
		}

		// struct FAnimGroupInstance
		TEST_METHOD(ScriptStruct__Engine__AnimGroupInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimGroupInstance, UnknownData_YNHL, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimGroupInstance, 0x0070);
		}

		// struct FGameplayEffectModifiedAttribute
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayEffectModifiedAttribute)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectModifiedAttribute, Attribute, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectModifiedAttribute, TotalMagnitude, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectModifiedAttribute, UnknownData_X8DS, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayEffectModifiedAttribute, 0x0028);
		}

		// struct FAnimTickRecord
		TEST_METHOD(ScriptStruct__Engine__AnimTickRecord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimTickRecord, SourceAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimTickRecord, UnknownData_2HZZ, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimTickRecord, 0x0048);
		}

		// struct FGameplayEffectAttributeCaptureDefinition
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayEffectAttributeCaptureDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectAttributeCaptureDefinition, AttributeToCapture, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectAttributeCaptureDefinition, AttributeSource, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectAttributeCaptureDefinition, bSnapshot, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectAttributeCaptureDefinition, UnknownData_D6VV, 0x0022);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayEffectAttributeCaptureDefinition, 0x0028);
		}

		// struct FMarkerSyncAnimPosition
		TEST_METHOD(ScriptStruct__Engine__MarkerSyncAnimPosition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncAnimPosition, PreviousMarkerName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncAnimPosition, NextMarkerName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncAnimPosition, PositionBetweenMarkers, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMarkerSyncAnimPosition, 0x0014);
		}

		// struct FBlendFilter
		TEST_METHOD(ScriptStruct__Engine__BlendFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendFilter, UnknownData_7FP9, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendFilter, 0x0078);
		}

		// struct FGameplayEffectAttributeCaptureSpec
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayEffectAttributeCaptureSpec)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectAttributeCaptureSpec, BackingDefinition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectAttributeCaptureSpec, UnknownData_A4K7, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayEffectAttributeCaptureSpec, 0x0038);
		}

		// struct FBlendSampleData
		TEST_METHOD(ScriptStruct__Engine__BlendSampleData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, SampleDataIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, UnknownData_ITZF, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, Animation, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, TotalWeight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, Time, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, PreviousTime, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, SamplePlayRate, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, UnknownData_ZK0O, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendSampleData, 0x0040);
		}

		// struct FGameplayEffectAttributeCaptureSpecContainer
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayEffectAttributeCaptureSpecContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectAttributeCaptureSpecContainer, SourceAttributes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectAttributeCaptureSpecContainer, TargetAttributes, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectAttributeCaptureSpecContainer, bHasNonSnapshottedAttributes, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectAttributeCaptureSpecContainer, UnknownData_JDWP, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayEffectAttributeCaptureSpecContainer, 0x0028);
		}

		// struct FTagContainerAggregator
		TEST_METHOD(ScriptStruct__GameplayAbilities__TagContainerAggregator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTagContainerAggregator, CapturedActorTags, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTagContainerAggregator, CapturedSpecTags, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTagContainerAggregator, ScopedTags, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTagContainerAggregator, UnknownData_G60K, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTagContainerAggregator, 0x0088);
		}

		// struct FModifierSpec
		TEST_METHOD(ScriptStruct__GameplayAbilities__ModifierSpec)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FModifierSpec, EvaluatedMagnitude, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FModifierSpec, 0x0004);
		}

		// struct FScalableFloat
		TEST_METHOD(ScriptStruct__GameplayAbilities__ScalableFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalableFloat, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalableFloat, UnknownData_BVQM, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalableFloat, Curve, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalableFloat, UnknownData_NRIB, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScalableFloat, 0x0020);
		}

		// struct FGameplayAbilitySpecDef
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayAbilitySpecDef)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilitySpecDef, Ability, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilitySpecDef, LevelScalableFloat, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilitySpecDef, InputID, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilitySpecDef, RemovalPolicy, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilitySpecDef, UnknownData_4NXN, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilitySpecDef, SourceObject, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilitySpecDef, UnknownData_JWB3, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilitySpecDef, AssignedHandle, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilitySpecDef, UnknownData_NUS1, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayAbilitySpecDef, 0x0090);
		}

		// struct FGameplayEffectSpec
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayEffectSpec)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectSpec, Def, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectSpec, ModifiedAttributes, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectSpec, CapturedRelevantAttributes, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectSpec, UnknownData_II6V, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectSpec, Duration, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectSpec, Period, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectSpec, ChanceToApplyToTarget, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectSpec, UnknownData_MNRC, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectSpec, CapturedSourceTags, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectSpec, CapturedTargetTags, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectSpec, DynamicGrantedTags, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectSpec, DynamicAssetTags, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectSpec, Modifiers, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectSpec, StackCount, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectSpec, UnknownData_57H3, 0x01C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectSpec, GrantedAbilitySpecs, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectSpec, UnknownData_9W2C, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectSpec, EffectContext, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectSpec, Level, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectSpec, UnknownData_HGIZ, 0x0294);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayEffectSpec, 0x0298);
		}

		// struct FAnimationRecordingSettings
		TEST_METHOD(ScriptStruct__Engine__AnimationRecordingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, bRecordInWorldSpace, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, bRemoveRootAnimation, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, bAutoSaveAsset, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, UnknownData_3HSM, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, SampleRate, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, Length, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, InterpMode, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, TangentMode, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, UnknownData_9T8G, 0x000E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationRecordingSettings, 0x0010);
		}

		// struct FComponentSpacePose
		TEST_METHOD(ScriptStruct__Engine__ComponentSpacePose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentSpacePose, Transforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentSpacePose, names, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentSpacePose, 0x0020);
		}

		// struct FLocalSpacePose
		TEST_METHOD(ScriptStruct__Engine__LocalSpacePose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalSpacePose, Transforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalSpacePose, names, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocalSpacePose, 0x0020);
		}

		// struct FNamedTransform
		TEST_METHOD(ScriptStruct__Engine__NamedTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedTransform, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedTransform, Name, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedTransform, UnknownData_Y5WT, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedTransform, 0x0040);
		}

		// struct FNamedColor
		TEST_METHOD(ScriptStruct__Engine__NamedColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedColor, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedColor, Name, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedColor, 0x000C);
		}

		// struct FNamedVector
		TEST_METHOD(ScriptStruct__Engine__NamedVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedVector, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedVector, Name, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedVector, 0x0014);
		}

		// struct FActiveGameplayEffect : public FFastArraySerializerItem
		TEST_METHOD(ScriptStruct__GameplayAbilities__ActiveGameplayEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveGameplayEffect, UnknownData_JCTG, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveGameplayEffect, Spec, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveGameplayEffect, PredictionKey, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveGameplayEffect, StartServerWorldTime, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveGameplayEffect, CachedStartServerWorldTime, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveGameplayEffect, StartWorldTime, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveGameplayEffect, bIsInhibited, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveGameplayEffect, UnknownData_QMRW, 0x02D5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveGameplayEffect, 0x0370);
		}

		// struct FNamedFloat
		TEST_METHOD(ScriptStruct__Engine__NamedFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFloat, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFloat, Name, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedFloat, 0x000C);
		}

		// struct FAnimParentNodeAssetOverride
		TEST_METHOD(ScriptStruct__Engine__AnimParentNodeAssetOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimParentNodeAssetOverride, NewAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimParentNodeAssetOverride, ParentNodeGuid, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimParentNodeAssetOverride, 0x0018);
		}

		// struct FActiveGameplayEffectsContainer : public FFastArraySerializer
		TEST_METHOD(ScriptStruct__GameplayAbilities__ActiveGameplayEffectsContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveGameplayEffectsContainer, UnknownData_IFQE, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveGameplayEffectsContainer, GameplayEffects_Internal, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveGameplayEffectsContainer, UnknownData_GWAW, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveGameplayEffectsContainer, ApplicationImmunityQueryEffects, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveGameplayEffectsContainer, UnknownData_842E, 0x0420);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveGameplayEffectsContainer, 0x0438);
		}

		// struct FAnimGroupInfo
		TEST_METHOD(ScriptStruct__Engine__AnimGroupInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimGroupInfo, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimGroupInfo, Color, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimGroupInfo, 0x0018);
		}

		// struct FAnimBlueprintDebugData
		TEST_METHOD(ScriptStruct__Engine__AnimBlueprintDebugData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintDebugData, UnknownData_X7JO, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimBlueprintDebugData, 0x0001);
		}

		// struct FGameplayAbilityLocalAnimMontage
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayAbilityLocalAnimMontage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityLocalAnimMontage, AnimMontage, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityLocalAnimMontage, PlayBit, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityLocalAnimMontage, UnknownData_GIPP, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityLocalAnimMontage, PredictionKey, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityLocalAnimMontage, AnimatingAbility, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayAbilityLocalAnimMontage, 0x0030);
		}

		// struct FAnimationFrameSnapshot
		TEST_METHOD(ScriptStruct__Engine__AnimationFrameSnapshot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationFrameSnapshot, UnknownData_C9RO, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationFrameSnapshot, 0x0001);
		}

		// struct FStateMachineDebugData
		TEST_METHOD(ScriptStruct__Engine__StateMachineDebugData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStateMachineDebugData, UnknownData_9PWC, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStateMachineDebugData, 0x00B0);
		}

		// struct FAnimSegment
		TEST_METHOD(ScriptStruct__Engine__AnimSegment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, AnimReference, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, StartPos, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, AnimStartTime, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, AnimEndTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, AnimPlayRate, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, LoopingCount, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, UnknownData_THEX, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSegment, 0x0020);
		}

		// struct FGameplayAbilityRepAnimMontage
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayAbilityRepAnimMontage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityRepAnimMontage, AnimMontage, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityRepAnimMontage, PlayRate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityRepAnimMontage, Position, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityRepAnimMontage, BlendTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityRepAnimMontage, NextSectionID, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityRepAnimMontage, UnknownData_8E77, 0x0016);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityRepAnimMontage, PredictionKey, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayAbilityRepAnimMontage, 0x0030);
		}

		// struct FAnimTrack
		TEST_METHOD(ScriptStruct__Engine__AnimTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimTrack, AnimSegments, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimTrack, 0x0010);
		}

		// struct FRootMotionExtractionStep
		TEST_METHOD(ScriptStruct__Engine__RootMotionExtractionStep)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionExtractionStep, AnimSequence, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionExtractionStep, StartPosition, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionExtractionStep, EndPosition, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionExtractionStep, 0x0010);
		}

		// struct FGameplayAttributeData
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayAttributeData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAttributeData, UnknownData_FH37, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAttributeData, BaseValue, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAttributeData, CurrentValue, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayAttributeData, 0x0010);
		}

		// struct FSmartName
		TEST_METHOD(ScriptStruct__Engine__SmartName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSmartName, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSmartName, UnknownData_XURN, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSmartName, 0x000C);
		}

		// struct FAnimCurveBase
		TEST_METHOD(ScriptStruct__Engine__AnimCurveBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveBase, LastObservedName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveBase, Name, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveBase, CurveTypeFlags, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimCurveBase, 0x0018);
		}

		// struct FAttributeMetaData : public FTableRowBase
		TEST_METHOD(ScriptStruct__GameplayAbilities__AttributeMetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributeMetaData, BaseValue, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributeMetaData, MinValue, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributeMetaData, MaxValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributeMetaData, UnknownData_9ZFZ, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributeMetaData, DerivedAttributeInfo, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributeMetaData, bCanStack, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributeMetaData, UnknownData_P95A, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAttributeMetaData, 0x0030);
		}

		// struct FKeyHandleMap
		TEST_METHOD(ScriptStruct__Engine__KeyHandleMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyHandleMap, UnknownData_TGOI, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKeyHandleMap, 0x0060);
		}

		// struct FIndexedCurve
		TEST_METHOD(ScriptStruct__Engine__IndexedCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIndexedCurve, UnknownData_PHTC, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIndexedCurve, KeyHandlesToIndices, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIndexedCurve, 0x0068);
		}

		// struct FRealCurve : public FIndexedCurve
		TEST_METHOD(ScriptStruct__Engine__RealCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRealCurve, PreInfinityExtrap, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRealCurve, PostInfinityExtrap, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRealCurve, UnknownData_KJ7V, 0x006A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRealCurve, DefaultValue, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRealCurve, 0x0070);
		}

		// struct FGameplayAbilityTargetData
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayAbilityTargetData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityTargetData, UnknownData_1H7W, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayAbilityTargetData, 0x0008);
		}

		// struct FGameplayAbilityTargetData_SingleTargetHit : public FGameplayAbilityTargetData
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayAbilityTargetData_SingleTargetHit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityTargetData_SingleTargetHit, HitResult, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayAbilityTargetData_SingleTargetHit, 0x0090);
		}

		// struct FGameplayAbilityTargetingLocationInfo
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayAbilityTargetingLocationInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityTargetingLocationInfo, UnknownData_XBGF, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityTargetingLocationInfo, LocationType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityTargetingLocationInfo, UnknownData_R163, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityTargetingLocationInfo, LiteralTransform, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityTargetingLocationInfo, SourceActor, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityTargetingLocationInfo, SourceComponent, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityTargetingLocationInfo, SourceAbility, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityTargetingLocationInfo, SourceSocketName, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayAbilityTargetingLocationInfo, 0x0070);
		}

		// struct FRichCurveKey
		TEST_METHOD(ScriptStruct__Engine__RichCurveKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, InterpMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, TangentMode, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, TangentWeightMode, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, UnknownData_G49A, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, Time, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, Value, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, ArriveTangent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, ArriveTangentWeight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, LeaveTangent, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, LeaveTangentWeight, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRichCurveKey, 0x001C);
		}

		// struct FGameplayAbilityTargetData_ActorArray : public FGameplayAbilityTargetData
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayAbilityTargetData_ActorArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityTargetData_ActorArray, UnknownData_ZDD1, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityTargetData_ActorArray, SourceLocation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityTargetData_ActorArray, TargetActorArray, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayAbilityTargetData_ActorArray, 0x0090);
		}

		// struct FRichCurve : public FRealCurve
		TEST_METHOD(ScriptStruct__Engine__RichCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurve, Keys, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRichCurve, 0x0080);
		}

		// struct FGameplayAbilityTargetData_LocationInfo : public FGameplayAbilityTargetData
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayAbilityTargetData_LocationInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityTargetData_LocationInfo, UnknownData_Y2DL, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityTargetData_LocationInfo, SourceLocation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityTargetData_LocationInfo, TargetLocation, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayAbilityTargetData_LocationInfo, 0x00F0);
		}

		// struct FFloatCurve : public FAnimCurveBase
		TEST_METHOD(ScriptStruct__Engine__FloatCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatCurve, FloatCurve, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatCurve, 0x0098);
		}

		// struct FRawCurveTracks
		TEST_METHOD(ScriptStruct__Engine__RawCurveTracks)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawCurveTracks, FloatCurves, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawCurveTracks, 0x0010);
		}

		// struct FVectorCurve : public FAnimCurveBase
		TEST_METHOD(ScriptStruct__Engine__VectorCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorCurve, FloatCurves, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorCurve, 0x0198);
		}

		// struct FGameplayAbilitySpecHandleAndPredictionKey
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayAbilitySpecHandleAndPredictionKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilitySpecHandleAndPredictionKey, AbilityHandle, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilitySpecHandleAndPredictionKey, PredictionKeyAtCreation, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayAbilitySpecHandleAndPredictionKey, 0x0008);
		}

		// struct FAbilityTaskDebugMessage
		TEST_METHOD(ScriptStruct__GameplayAbilities__AbilityTaskDebugMessage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAbilityTaskDebugMessage, FromTask, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAbilityTaskDebugMessage, Message, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAbilityTaskDebugMessage, 0x0018);
		}

		// struct FTransformCurve : public FAnimCurveBase
		TEST_METHOD(ScriptStruct__Engine__TransformCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformCurve, TranslationCurve, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformCurve, RotationCurve, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformCurve, ScaleCurve, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformCurve, 0x04E0);
		}

		// struct FAbilityEndedData
		TEST_METHOD(ScriptStruct__GameplayAbilities__AbilityEndedData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAbilityEndedData, AbilityThatEnded, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAbilityEndedData, AbilitySpecHandle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAbilityEndedData, bReplicateEndAbility, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAbilityEndedData, bWasCancelled, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAbilityEndedData, UnknownData_Z5Z9, 0x000E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAbilityEndedData, 0x0010);
		}

		// struct FSlotEvaluationPose
		TEST_METHOD(ScriptStruct__Engine__SlotEvaluationPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotEvaluationPose, AdditiveType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotEvaluationPose, UnknownData_AYKL, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotEvaluationPose, Weight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotEvaluationPose, UnknownData_XQR7, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlotEvaluationPose, 0x0040);
		}

		// struct FMinimalGameplayCueReplicationProxy
		TEST_METHOD(ScriptStruct__GameplayAbilities__MinimalGameplayCueReplicationProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalGameplayCueReplicationProxy, UnknownData_M2HQ, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalGameplayCueReplicationProxy, Owner, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalGameplayCueReplicationProxy, UnknownData_UMLW, 0x01C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMinimalGameplayCueReplicationProxy, 0x01D0);
		}

		// struct FA2Pose
		TEST_METHOD(ScriptStruct__Engine__A2Pose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FA2Pose, Bones, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FA2Pose, 0x0010);
		}

		// struct FA2CSPose : public FA2Pose
		TEST_METHOD(ScriptStruct__Engine__A2CSPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FA2CSPose, UnknownData_D333, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FA2CSPose, ComponentSpaceFlags, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FA2CSPose, 0x0028);
		}

		// struct FGameplayCueTag
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayCueTag)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueTag, GameplayCueTag, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayCueTag, 0x0008);
		}

		// struct FQueuedDrawDebugItem
		TEST_METHOD(ScriptStruct__Engine__QueuedDrawDebugItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, ItemType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, UnknownData_ILVO, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, StartLoc, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, EndLoc, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Center, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Rotation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Radius, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Size, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Segments, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Color, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, bPersistentLines, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, UnknownData_OW72, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, LifeTime, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Thickness, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Message, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, TextScale, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQueuedDrawDebugItem, 0x0068);
		}

		// struct FGameplayCueNotifyData
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayCueNotifyData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueNotifyData, GameplayCueTag, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueNotifyData, GameplayCueNotifyObj, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueNotifyData, LoadedGameplayCueClass, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueNotifyData, UnknownData_ERVD, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayCueNotifyData, 0x0030);
		}

		// struct FGameplayCueTranslationLink
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayCueTranslationLink)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueTranslationLink, RulesCDO, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueTranslationLink, UnknownData_MJ5D, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayCueTranslationLink, 0x0018);
		}

		// struct FGameplayCueTranslatorNodeIndex
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayCueTranslatorNodeIndex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueTranslatorNodeIndex, Index, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayCueTranslatorNodeIndex, 0x0004);
		}

		// struct FGameplayCueTranslatorNode
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayCueTranslatorNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueTranslatorNode, Links, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueTranslatorNode, CachedIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueTranslatorNode, CachedGameplayTag, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueTranslatorNode, CachedGameplayTagName, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueTranslatorNode, UnknownData_3T4E, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayCueTranslatorNode, 0x0078);
		}

		// struct FAnimLinkableElement
		TEST_METHOD(ScriptStruct__Engine__AnimLinkableElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, UnknownData_XESS, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, LinkedMontage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, SlotIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, SegmentIndex, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, LinkMethod, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, CachedLinkMethod, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, UnknownData_N8LA, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, SegmentBeginTime, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, SegmentLength, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, LinkValue, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, LinkedSequence, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimLinkableElement, 0x0030);
		}

		// struct FGameplayCueTranslationManager
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayCueTranslationManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueTranslationManager, TranslationLUT, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueTranslationManager, TranslationNameToIndexMap, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueTranslationManager, TagManager, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueTranslationManager, UnknownData_I9D6, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayCueTranslationManager, 0x0080);
		}

		// struct FActiveGameplayEffectQuery
		TEST_METHOD(ScriptStruct__GameplayAbilities__ActiveGameplayEffectQuery)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveGameplayEffectQuery, UnknownData_KEKC, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveGameplayEffectQuery, 0x0070);
		}

		// struct FGameplayEffectSpecHandle
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayEffectSpecHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectSpecHandle, UnknownData_U8VO, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayEffectSpecHandle, 0x0010);
		}

		// struct FGameplayEventData
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayEventData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEventData, EventTag, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEventData, Instigator, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEventData, Target, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEventData, OptionalObject, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEventData, OptionalObject2, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEventData, ContextHandle, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEventData, InstigatorTags, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEventData, TargetTags, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEventData, EventMagnitude, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEventData, UnknownData_EMIZ, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEventData, TargetData, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayEventData, 0x00A8);
		}

		// struct FAnimNotifyEvent : public FAnimLinkableElement
		TEST_METHOD(ScriptStruct__Engine__AnimNotifyEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, DisplayTime, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, TriggerTimeOffset, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, EndTriggerTimeOffset, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, TriggerWeightThreshold, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, NotifyName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, Notify, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, NotifyStateClass, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, Duration, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, UnknownData_WBJ7, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, EndLink, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, bConvertedFromBranchingPoint, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, MontageTickType, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, UnknownData_XN7X, 0x0092);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, NotifyTriggerChance, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, NotifyFilterType, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, UnknownData_6H56, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, NotifyFilterLOD, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, bTriggerOnDedicatedServer, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, bTriggerOnFollower, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, UnknownData_6INN, 0x00A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, TrackIndex, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, UnknownData_O6I8, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNotifyEvent, 0x00B8);
		}

		// struct FGameplayTargetDataFilter
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayTargetDataFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTargetDataFilter, UnknownData_QFMX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTargetDataFilter, SelfActor, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTargetDataFilter, SelfFilter, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTargetDataFilter, UnknownData_WF88, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTargetDataFilter, RequiredActorClass, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTargetDataFilter, bReverseFilter, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTargetDataFilter, UnknownData_YWRT, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTargetDataFilter, 0x0028);
		}

		// struct FGameplayTargetDataFilterHandle
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayTargetDataFilterHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTargetDataFilterHandle, UnknownData_9K9P, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTargetDataFilterHandle, 0x0010);
		}

		// struct FActiveGameplayEffectHandle
		TEST_METHOD(ScriptStruct__GameplayAbilities__ActiveGameplayEffectHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveGameplayEffectHandle, Handle, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveGameplayEffectHandle, bPassedFiltersAndWasExecuted, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveGameplayEffectHandle, UnknownData_8X7K, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveGameplayEffectHandle, 0x0008);
		}

		// struct FAttributeDefaults
		TEST_METHOD(ScriptStruct__GameplayAbilities__AttributeDefaults)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributeDefaults, Attributes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributeDefaults, DefaultStartingTable, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAttributeDefaults, 0x0010);
		}

		// struct FAlphaBlend
		TEST_METHOD(ScriptStruct__Engine__AlphaBlend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlphaBlend, CustomCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlphaBlend, BlendTime, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlphaBlend, UnknownData_EUC6, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlphaBlend, BlendOption, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlphaBlend, UnknownData_SQQH, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAlphaBlend, 0x0030);
		}

		// struct FGameplayAbilityActivationInfo
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayAbilityActivationInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityActivationInfo, ActivationMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityActivationInfo, UnknownData_C4AJ, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityActivationInfo, PredictionKeyWhenActivated, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayAbilityActivationInfo, 0x0020);
		}

		// struct FAnimMontageInstance
		TEST_METHOD(ScriptStruct__Engine__AnimMontageInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, Montage, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_E8K2, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, bPlaying, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_1P00, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, DefaultBlendTimeMultiplier, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_MB7W, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, NextSections, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, PrevSections, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_QG0D, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, ActiveStateBranchingPoints, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, Position, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, PlayRate, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, Blend, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_7L6V, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, DisableRootMotionCount, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_0B6S, 0x0184);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimMontageInstance, 0x01A8);
		}

		// struct FGameplayAbilitySpec : public FFastArraySerializerItem
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayAbilitySpec)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilitySpec, Handle, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilitySpec, Ability, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilitySpec, Level, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilitySpec, InputID, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilitySpec, SourceObject, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilitySpec, ActiveCount, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilitySpec, UnknownData_ULC1, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilitySpec, ActivationInfo, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilitySpec, NonReplicatedInstances, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilitySpec, ReplicatedInstances, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilitySpec, GameplayEffectHandle, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilitySpec, UnknownData_6LUJ, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayAbilitySpec, 0x00C8);
		}

		// struct FGameplayAbilitySpecContainer : public FFastArraySerializer
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayAbilitySpecContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilitySpecContainer, Items, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilitySpecContainer, Owner, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayAbilitySpecContainer, 0x00C8);
		}

		// struct FBranchingPointMarker
		TEST_METHOD(ScriptStruct__Engine__BranchingPointMarker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPointMarker, NotifyIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPointMarker, TriggerTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPointMarker, NotifyEventType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPointMarker, UnknownData_5T89, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBranchingPointMarker, 0x000C);
		}

		// struct FGameplayEffectQuery
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayEffectQuery)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectQuery, UnknownData_7FKM, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectQuery, CustomMatchDelegate_BP, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectQuery, OwningTagQuery, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectQuery, EffectTagQuery, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectQuery, SourceTagQuery, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectQuery, ModifyingAttribute, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectQuery, EffectSource, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectQuery, EffectDefinition, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectQuery, UnknownData_IF45, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayEffectQuery, 0x0138);
		}

		// struct FBranchingPoint : public FAnimLinkableElement
		TEST_METHOD(ScriptStruct__Engine__BranchingPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPoint, EventName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPoint, DisplayTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPoint, TriggerTimeOffset, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBranchingPoint, 0x0040);
		}

		// struct FGameplayEffectSpecForRPC
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayEffectSpecForRPC)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectSpecForRPC, Def, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectSpecForRPC, ModifiedAttributes, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectSpecForRPC, EffectContext, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectSpecForRPC, AggregatedSourceTags, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectSpecForRPC, AggregatedTargetTags, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectSpecForRPC, Level, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectSpecForRPC, AbilityLevel, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayEffectSpecForRPC, 0x0078);
		}

		// struct FSlotAnimationTrack
		TEST_METHOD(ScriptStruct__Engine__SlotAnimationTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotAnimationTrack, SlotName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotAnimationTrack, AnimTrack, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlotAnimationTrack, 0x0018);
		}

		// struct FCompositeSection : public FAnimLinkableElement
		TEST_METHOD(ScriptStruct__Engine__CompositeSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, SectionName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, startTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, NextSectionName, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, UnknownData_GVAH, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, MetaData, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompositeSection, 0x0058);
		}

		// struct FGameplayEffectRemovalInfo
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayEffectRemovalInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectRemovalInfo, bPrematureRemoval, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectRemovalInfo, UnknownData_T3EO, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectRemovalInfo, StackCount, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectRemovalInfo, EffectContext, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayEffectRemovalInfo, 0x0020);
		}

		// struct FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_Base)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Base, UnknownData_3RPR, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Base, 0x0010);
		}

		// struct FPoseLinkBase
		TEST_METHOD(ScriptStruct__Engine__PoseLinkBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseLinkBase, LinkID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseLinkBase, UnknownData_W0W8, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseLinkBase, 0x0010);
		}

		// struct FAbilityTriggerData
		TEST_METHOD(ScriptStruct__GameplayAbilities__AbilityTriggerData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAbilityTriggerData, TriggerTag, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAbilityTriggerData, TriggerSource, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAbilityTriggerData, UnknownData_HDWI, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAbilityTriggerData, 0x000C);
		}

		// struct FPoseLink : public FPoseLinkBase
		TEST_METHOD(ScriptStruct__Engine__PoseLink)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseLink, 0x0010);
		}

		// struct FInputScaleBias
		TEST_METHOD(ScriptStruct__Engine__InputScaleBias)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBias, Scale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBias, Bias, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputScaleBias, 0x0008);
		}

		// struct FGameplayAbilityActorInfo
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayAbilityActorInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityActorInfo, UnknownData_XWHO, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityActorInfo, OwnerActor, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityActorInfo, AvatarActor, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityActorInfo, PlayerController, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityActorInfo, AbilitySystemComponent, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityActorInfo, SkeletalMeshComponent, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityActorInfo, AnimInstance, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityActorInfo, MovementComponent, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayAbilityActorInfo, 0x0040);
		}

		// struct FAnimNode_ApplyMeshSpaceAdditive : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_ApplyMeshSpaceAdditive)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, Base, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, Additive, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, Alpha, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, AlphaScaleBias, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, LODThreshold, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, UnknownData_89IT, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ApplyMeshSpaceAdditive, 0x0048);
		}

		// struct FAnimNode_SaveCachedPose : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_SaveCachedPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SaveCachedPose, Pose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SaveCachedPose, CachePoseName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SaveCachedPose, UnknownData_MIA4, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SaveCachedPose, 0x00B8);
		}

		// struct FGameplayAbilityBindInfo
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayAbilityBindInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityBindInfo, Command, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityBindInfo, UnknownData_08EE, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityBindInfo, GameplayAbilityClass, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayAbilityBindInfo, 0x0010);
		}

		// struct FAnimNode_AssetPlayerBase : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_AssetPlayerBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, GroupIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, GroupRole, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, bIgnoreForRelevancyTest, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, UnknownData_HZDH, 0x0016);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, BlendWeight, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, InternalTimeAccumulator, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, UnknownData_3MG5, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_AssetPlayerBase, 0x0030);
		}

		// struct FWorldReticleParameters
		TEST_METHOD(ScriptStruct__GameplayAbilities__WorldReticleParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldReticleParameters, AOEScale, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWorldReticleParameters, 0x000C);
		}

		// struct FGameplayCueObjectLibrary
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayCueObjectLibrary)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueObjectLibrary, Paths, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueObjectLibrary, UnknownData_Z3H0, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueObjectLibrary, ActorObjectLibrary, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueObjectLibrary, StaticObjectLibrary, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueObjectLibrary, CueSet, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueObjectLibrary, UnknownData_JI4M, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueObjectLibrary, bShouldSyncScan, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueObjectLibrary, bShouldAsyncLoad, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueObjectLibrary, bShouldSyncLoad, 0x004E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueObjectLibrary, bHasBeenInitialized, 0x004F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayCueObjectLibrary, 0x0050);
		}

		// struct FInputRange
		TEST_METHOD(ScriptStruct__Engine__InputRange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputRange, Min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputRange, Max, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputRange, 0x0008);
		}

		// struct FInputScaleBiasClamp
		TEST_METHOD(ScriptStruct__Engine__InputScaleBiasClamp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, bMapRange, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, bClampResult, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, bInterpResult, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, UnknownData_TNUG, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, InRange, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, OutRange, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, Scale, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, Bias, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, ClampMin, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, ClampMax, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, InterpSpeedIncreasing, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, InterpSpeedDecreasing, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, UnknownData_Z1LC, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputScaleBiasClamp, 0x0030);
		}

		// struct FGameplayCuePendingExecute
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayCuePendingExecute)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCuePendingExecute, UnknownData_UCPT, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCuePendingExecute, PredictionKey, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCuePendingExecute, PayloadType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCuePendingExecute, UnknownData_HWTE, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCuePendingExecute, OwningComponent, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCuePendingExecute, FromSpec, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCuePendingExecute, CueParameters, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayCuePendingExecute, 0x0170);
		}

		// struct FPreallocationInfo
		TEST_METHOD(ScriptStruct__GameplayAbilities__PreallocationInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreallocationInfo, UnknownData_P223, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreallocationInfo, ClassesNeedingPreallocation, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreallocationInfo, UnknownData_4LZP, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPreallocationInfo, 0x0068);
		}

		// struct FAttributeBasedFloat
		TEST_METHOD(ScriptStruct__GameplayAbilities__AttributeBasedFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributeBasedFloat, Coefficient, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributeBasedFloat, PreMultiplyAdditiveValue, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributeBasedFloat, PostMultiplyAdditiveValue, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributeBasedFloat, BackingAttribute, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributeBasedFloat, AttributeCurve, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributeBasedFloat, AttributeCalculationType, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributeBasedFloat, FinalChannel, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributeBasedFloat, UnknownData_7XBM, 0x009A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributeBasedFloat, SourceTagFilter, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributeBasedFloat, TargetTagFilter, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAttributeBasedFloat, 0x00E0);
		}

		// struct FAnimNode_SequencePlayer : public FAnimNode_AssetPlayerBase
		TEST_METHOD(ScriptStruct__Engine__AnimNode_SequencePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, Sequence, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, PlayRateBasis, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, PlayRate, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, PlayRateScaleBiasClamp, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, StartPosition, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, bLoopAnimation, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, UnknownData_WJSE, 0x0075);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SequencePlayer, 0x0078);
		}

		// struct FAnimNode_StateMachine : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_StateMachine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, StateMachineIndexInClass, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, MaxTransitionsPerFrame, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, bSkipFirstUpdateTransition, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, bReinitializeOnBecomingRelevant, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, UnknownData_0ESU, 0x001A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_StateMachine, 0x00B0);
		}

		// struct FCustomCalculationBasedFloat
		TEST_METHOD(ScriptStruct__GameplayAbilities__CustomCalculationBasedFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomCalculationBasedFloat, CalculationClassMagnitude, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomCalculationBasedFloat, Coefficient, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomCalculationBasedFloat, PreMultiplyAdditiveValue, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomCalculationBasedFloat, PostMultiplyAdditiveValue, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomCalculationBasedFloat, FinalLookupCurve, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomCalculationBasedFloat, 0x0078);
		}

		// struct FAnimationPotentialTransition
		TEST_METHOD(ScriptStruct__Engine__AnimationPotentialTransition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationPotentialTransition, UnknownData_HX3J, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationPotentialTransition, 0x0030);
		}

		// struct FAnimationActiveTransitionEntry
		TEST_METHOD(ScriptStruct__Engine__AnimationActiveTransitionEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationActiveTransitionEntry, UnknownData_PXLU, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationActiveTransitionEntry, BlendProfile, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationActiveTransitionEntry, UnknownData_03MC, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationActiveTransitionEntry, 0x00C8);
		}

		// struct FSetByCallerFloat
		TEST_METHOD(ScriptStruct__GameplayAbilities__SetByCallerFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSetByCallerFloat, DataName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSetByCallerFloat, DataTag, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSetByCallerFloat, 0x0010);
		}

		// struct FGameplayEffectModifierMagnitude
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayEffectModifierMagnitude)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectModifierMagnitude, MagnitudeCalculationType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectModifierMagnitude, UnknownData_G6SO, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectModifierMagnitude, ScalableFloatMagnitude, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectModifierMagnitude, AttributeBasedMagnitude, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectModifierMagnitude, CustomMagnitude, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectModifierMagnitude, SetByCallerMagnitude, 0x0180);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayEffectModifierMagnitude, 0x0190);
		}

		// struct FAnimNode_SubInput : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_SubInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SubInput, UnknownData_XAHU, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SubInput, 0x0048);
		}

		// struct FAnimNode_SubInstance : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_SubInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SubInstance, InPose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SubInstance, InstanceClass, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SubInstance, Tag, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SubInstance, SourcePropertyNames, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SubInstance, DestPropertyNames, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SubInstance, InstanceToRun, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SubInstance, InstanceProperties, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SubInstance, SubInstanceProperties, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SubInstance, UnknownData_QWGG, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SubInstance, 0x0098);
		}

		// struct FGameplayModEvaluationChannelSettings
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayModEvaluationChannelSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayModEvaluationChannelSettings, Channel, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayModEvaluationChannelSettings, 0x0001);
		}

		// struct FGameplayTagRequirements
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayTagRequirements)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagRequirements, RequireTags, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagRequirements, IgnoreTags, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagRequirements, 0x0040);
		}

		// struct FGameplayModifierInfo
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayModifierInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayModifierInfo, Attribute, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayModifierInfo, ModifierOp, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayModifierInfo, UnknownData_IMBC, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayModifierInfo, Magnitude, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayModifierInfo, ModifierMagnitude, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayModifierInfo, EvaluationChannelSettings, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayModifierInfo, UnknownData_N1KH, 0x01D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayModifierInfo, SourceTags, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayModifierInfo, TargetTags, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayModifierInfo, 0x0260);
		}

		// struct FAnimNode_TransitionPoseEvaluator : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_TransitionPoseEvaluator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, UnknownData_5PMP, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, FramesToCachePose, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, UnknownData_E1VK, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, DataSource, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, EvaluatorMode, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, UnknownData_TCS2, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TransitionPoseEvaluator, 0x0058);
		}

		// struct FAnimNode_TransitionResult : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_TransitionResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionResult, bCanEnterTransition, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionResult, UnknownData_OPEX, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TransitionResult, 0x0028);
		}

		// struct FGameplayEffectCue
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayEffectCue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectCue, MagnitudeAttribute, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectCue, MinLevel, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectCue, MaxLevel, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectCue, GameplayCueTags, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayEffectCue, 0x0048);
		}

		// struct FAnimNode_UseCachedPose : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_UseCachedPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_UseCachedPose, LinkToCachingNode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_UseCachedPose, CachePoseName, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_UseCachedPose, 0x0028);
		}

		// struct FInheritedTagContainer
		TEST_METHOD(ScriptStruct__GameplayAbilities__InheritedTagContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInheritedTagContainer, CombinedTags, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInheritedTagContainer, Added, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInheritedTagContainer, Removed, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInheritedTagContainer, 0x0060);
		}

		// struct FExposedValueCopyRecord
		TEST_METHOD(ScriptStruct__Engine__ExposedValueCopyRecord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, SourcePropertyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, SourceSubPropertyName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, SourceArrayIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, bInstanceIsTarget, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, PostCopyOperation, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, CopyType, 0x0016);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, UnknownData_SDH4, 0x0017);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, DestProperty, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, DestArrayIndex, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, Size, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, CachedSourceProperty, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, CachedSourceStructSubProperty, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExposedValueCopyRecord, 0x0038);
		}

		// struct FGameplayEffectExecutionScopedModifierInfo
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayEffectExecutionScopedModifierInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectExecutionScopedModifierInfo, CapturedAttribute, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectExecutionScopedModifierInfo, ModifierOp, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectExecutionScopedModifierInfo, UnknownData_A7XW, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectExecutionScopedModifierInfo, ModifierMagnitude, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectExecutionScopedModifierInfo, EvaluationChannelSettings, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectExecutionScopedModifierInfo, UnknownData_3FWU, 0x01C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectExecutionScopedModifierInfo, SourceTags, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectExecutionScopedModifierInfo, TargetTags, 0x0208);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayEffectExecutionScopedModifierInfo, 0x0248);
		}

		// struct FExposedValueHandler
		TEST_METHOD(ScriptStruct__Engine__ExposedValueHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueHandler, BoundFunction, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueHandler, CopyRecords, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueHandler, Function, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueHandler, ValueHandlerNodeProperty, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueHandler, UnknownData_O7FR, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExposedValueHandler, 0x0030);
		}

		// struct FConditionalGameplayEffect
		TEST_METHOD(ScriptStruct__GameplayAbilities__ConditionalGameplayEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConditionalGameplayEffect, EffectClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConditionalGameplayEffect, RequiredSourceTags, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConditionalGameplayEffect, 0x0028);
		}

		// struct FGameplayEffectExecutionDefinition
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayEffectExecutionDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectExecutionDefinition, CalculationClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectExecutionDefinition, PassedInTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectExecutionDefinition, CalculationModifiers, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectExecutionDefinition, ConditionalGameplayEffectClasses, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectExecutionDefinition, ConditionalGameplayEffects, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayEffectExecutionDefinition, 0x0058);
		}

		// struct FAnimNode_ConvertLocalToComponentSpace : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_ConvertLocalToComponentSpace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ConvertLocalToComponentSpace, LocalPose, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ConvertLocalToComponentSpace, 0x0020);
		}

		// struct FGameplayModifierEvaluatedData
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayModifierEvaluatedData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayModifierEvaluatedData, Attribute, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayModifierEvaluatedData, ModifierOp, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayModifierEvaluatedData, UnknownData_L66T, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayModifierEvaluatedData, Magnitude, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayModifierEvaluatedData, Handle, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayModifierEvaluatedData, IsValid, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayModifierEvaluatedData, UnknownData_8HIB, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayModifierEvaluatedData, 0x0038);
		}

		// struct FComponentSpacePoseLink : public FPoseLinkBase
		TEST_METHOD(ScriptStruct__Engine__ComponentSpacePoseLink)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentSpacePoseLink, 0x0010);
		}

		// struct FAnimNode_ConvertComponentToLocalSpace : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_ConvertComponentToLocalSpace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ConvertComponentToLocalSpace, ComponentPose, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ConvertComponentToLocalSpace, 0x0020);
		}

		// struct FCompressedSegment
		TEST_METHOD(ScriptStruct__Engine__CompressedSegment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedSegment, UnknownData_K8KN, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompressedSegment, 0x0010);
		}

		// struct FCompressedTrack
		TEST_METHOD(ScriptStruct__Engine__CompressedTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedTrack, ByteStream, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedTrack, Times, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedTrack, Mins, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedTrack, Ranges, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompressedTrack, 0x0038);
		}

		// struct FGameplayEffectCustomExecutionOutput
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayEffectCustomExecutionOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectCustomExecutionOutput, OutputModifiers, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectCustomExecutionOutput, UnknownData_3YUZ, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayEffectCustomExecutionOutput, 0x0018);
		}

		// struct FCurveTrack
		TEST_METHOD(ScriptStruct__Engine__CurveTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveTrack, CurveName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveTrack, CurveWeights, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveTrack, 0x0018);
		}

		// struct FScaleTrack
		TEST_METHOD(ScriptStruct__Engine__ScaleTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScaleTrack, ScaleKeys, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScaleTrack, Times, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScaleTrack, 0x0020);
		}

		// struct FGameplayEffectCustomExecutionParameters
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayEffectCustomExecutionParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectCustomExecutionParameters, UnknownData_0CF1, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayEffectCustomExecutionParameters, 0x00A8);
		}

		// struct FGameplayEffectContext
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayEffectContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectContext, UnknownData_PR4N, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectContext, Instigator, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectContext, EffectCauser, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectContext, AbilityCDO, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectContext, AbilityInstanceNotReplicated, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectContext, AbilityLevel, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectContext, SourceObject, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectContext, InstigatorAbilitySystemComponent, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectContext, UnknownData_TEZ1, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectContext, Actors, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectContext, UnknownData_JEB2, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectContext, WorldOrigin, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectContext, UnknownData_CX80, 0x006D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayEffectContext, 0x0070);
		}

		// struct FRotationTrack
		TEST_METHOD(ScriptStruct__Engine__RotationTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationTrack, RotKeys, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationTrack, Times, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRotationTrack, 0x0020);
		}

		// struct FTranslationTrack
		TEST_METHOD(ScriptStruct__Engine__TranslationTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTranslationTrack, PosKeys, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTranslationTrack, Times, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTranslationTrack, 0x0020);
		}

		// struct FTrackToSkeletonMap
		TEST_METHOD(ScriptStruct__Engine__TrackToSkeletonMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackToSkeletonMap, BoneTreeIndex, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTrackToSkeletonMap, 0x0004);
		}

		// struct FRawAnimSequenceTrack
		TEST_METHOD(ScriptStruct__Engine__RawAnimSequenceTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawAnimSequenceTrack, PosKeys, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawAnimSequenceTrack, RotKeys, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawAnimSequenceTrack, ScaleKeys, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawAnimSequenceTrack, 0x0030);
		}

		// struct FAnimSequenceTrackContainer
		TEST_METHOD(ScriptStruct__Engine__AnimSequenceTrackContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSequenceTrackContainer, AnimationTracks, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSequenceTrackContainer, TrackNames, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSequenceTrackContainer, 0x0020);
		}

		// struct FAnimSetMeshLinkup
		TEST_METHOD(ScriptStruct__Engine__AnimSetMeshLinkup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSetMeshLinkup, BoneToTrackTable, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSetMeshLinkup, 0x0010);
		}

		// struct FAnimInstanceProxy
		TEST_METHOD(ScriptStruct__Engine__AnimInstanceProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimInstanceProxy, UnknownData_ZJYY, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimInstanceProxy, 0x0710);
		}

		// struct FGameplayTagReponsePair
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayTagReponsePair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagReponsePair, Tag, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagReponsePair, ResponseGameplayEffect, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagReponsePair, ResponseGameplayEffects, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagReponsePair, SoftCountCap, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagReponsePair, UnknownData_BE9K, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagReponsePair, 0x0028);
		}

		// struct FAnimSingleNodeInstanceProxy : public FAnimInstanceProxy
		TEST_METHOD(ScriptStruct__Engine__AnimSingleNodeInstanceProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSingleNodeInstanceProxy, UnknownData_QMCC, 0x0710);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSingleNodeInstanceProxy, 0x0860);
		}

		// struct FAnimNode_SingleNode : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_SingleNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SingleNode, SourcePose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SingleNode, UnknownData_958U, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SingleNode, 0x0030);
		}

		// struct FGameplayTagResponseTableEntry
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayTagResponseTableEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagResponseTableEntry, Positive, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagResponseTableEntry, Negative, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagResponseTableEntry, 0x0050);
		}

		// struct FBakedStateExitTransition
		TEST_METHOD(ScriptStruct__Engine__BakedStateExitTransition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, CanTakeDelegateIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, CustomResultNodeIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, TransitionIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, bDesiredTransitionReturnValue, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, bAutomaticRemainingTimeRule, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, UnknownData_E8K0, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, PoseEvaluatorLinks, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBakedStateExitTransition, 0x0020);
		}

		// struct FBakedAnimationState
		TEST_METHOD(ScriptStruct__Engine__BakedAnimationState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, StateName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, Transitions, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, StateRootNodeIndex, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, StartNotify, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, EndNotify, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, FullyBlendedNotify, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, bIsAConduit, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, UnknownData_KRNC, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, EntryRuleNodeIndex, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, PlayerNodeIndices, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, bAlwaysResetOnEntry, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, UnknownData_ZGRC, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBakedAnimationState, 0x0048);
		}

		// struct FAnimationStateBase
		TEST_METHOD(ScriptStruct__Engine__AnimationStateBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateBase, StateName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationStateBase, 0x0008);
		}

		// struct FAnimationTransitionBetweenStates : public FAnimationStateBase
		TEST_METHOD(ScriptStruct__Engine__AnimationTransitionBetweenStates)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, PreviousState, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, NextState, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, CrossfadeDuration, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, StartNotify, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, EndNotify, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, InterruptNotify, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, BlendMode, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, UnknownData_9VR8, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, CustomCurve, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, BlendProfile, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, LogicType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, UnknownData_HVHE, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationTransitionBetweenStates, 0x0040);
		}

		// struct FBakedAnimationStateMachine
		TEST_METHOD(ScriptStruct__Engine__BakedAnimationStateMachine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, MachineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, InitialState, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, UnknownData_0083, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, States, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, Transitions, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, UnknownData_Z6V4, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBakedAnimationStateMachine, 0x0038);
		}

		// struct FAnimationTransitionRule
		TEST_METHOD(ScriptStruct__Engine__AnimationTransitionRule)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionRule, RuleToExecute, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionRule, TransitionReturnVal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionRule, UnknownData_615L, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionRule, TransitionIndex, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationTransitionRule, 0x0010);
		}

		// struct FAnimationState : public FAnimationStateBase
		TEST_METHOD(ScriptStruct__Engine__AnimationState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, Transitions, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, StateRootNodeIndex, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, StartNotify, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, EndNotify, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, FullyBlendedNotify, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationState, 0x0028);
		}

		// struct FAnimSyncMarker
		TEST_METHOD(ScriptStruct__Engine__AnimSyncMarker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSyncMarker, MarkerName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSyncMarker, Time, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSyncMarker, 0x000C);
		}

		// struct FMarkerSyncData
		TEST_METHOD(ScriptStruct__Engine__MarkerSyncData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncData, AuthoredSyncMarkers, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncData, UnknownData_BYZO, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMarkerSyncData, 0x0020);
		}

		// struct FAnimNotifyTrack
		TEST_METHOD(ScriptStruct__Engine__AnimNotifyTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyTrack, TrackName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyTrack, TrackColor, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyTrack, UnknownData_3VVT, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNotifyTrack, 0x0038);
		}

		// struct FPerBoneBlendWeight
		TEST_METHOD(ScriptStruct__Engine__PerBoneBlendWeight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneBlendWeight, SourceIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneBlendWeight, BlendWeight, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerBoneBlendWeight, 0x0008);
		}

		// struct FPerBoneBlendWeights
		TEST_METHOD(ScriptStruct__Engine__PerBoneBlendWeights)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneBlendWeights, BoneBlendWeights, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerBoneBlendWeights, 0x0010);
		}

		// struct FAssetImportInfo
		TEST_METHOD(ScriptStruct__Engine__AssetImportInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetImportInfo, UnknownData_3507, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetImportInfo, 0x0001);
		}

		// struct FDirectoryPath
		TEST_METHOD(ScriptStruct__Engine__DirectoryPath)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectoryPath, Path, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDirectoryPath, 0x0010);
		}

		// struct FPrimaryAssetRules
		TEST_METHOD(ScriptStruct__Engine__PrimaryAssetRules)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, Priority, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, bApplyRecursively, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, UnknownData_R4QZ, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, ChunkId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, CookRule, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, UnknownData_0TI7, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetRules, 0x0010);
		}

		// struct FPrimaryAssetRulesCustomOverride
		TEST_METHOD(ScriptStruct__Engine__PrimaryAssetRulesCustomOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesCustomOverride, PrimaryAssetType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesCustomOverride, FilterDirectory, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesCustomOverride, FilterString, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesCustomOverride, Rules, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetRulesCustomOverride, 0x0038);
		}

		// struct FPrimaryAssetRulesOverride
		TEST_METHOD(ScriptStruct__Engine__PrimaryAssetRulesOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesOverride, PrimaryAssetId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesOverride, Rules, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetRulesOverride, 0x0020);
		}

		// struct FAssetManagerRedirect
		TEST_METHOD(ScriptStruct__Engine__AssetManagerRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetManagerRedirect, Old, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetManagerRedirect, New, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetManagerRedirect, 0x0020);
		}

		// struct FPrimaryAssetTypeInfo
		TEST_METHOD(ScriptStruct__Engine__PrimaryAssetTypeInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, PrimaryAssetType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, AssetBaseClass, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, AssetBaseClassLoaded, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, bHasBlueprintClasses, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, bIsEditorOnly, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, UnknownData_W9YB, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, Directories, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, SpecificAssets, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, Rules, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, AssetScanPaths, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, bIsDynamicAsset, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, UnknownData_7FWV, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, NumberOfAssets, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetTypeInfo, 0x0088);
		}

		// struct FAssetMapping
		TEST_METHOD(ScriptStruct__Engine__AssetMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetMapping, SourceAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetMapping, TargetAsset, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetMapping, 0x0010);
		}

		// struct FActorComponentDuplicatedObjectData
		TEST_METHOD(ScriptStruct__Engine__ActorComponentDuplicatedObjectData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentDuplicatedObjectData, UnknownData_TCDZ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorComponentDuplicatedObjectData, 0x0010);
		}

		// struct FActorComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__ActorComponentInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, UnknownData_GZJ5, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, SourceComponentTemplate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, SourceComponentCreationMethod, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, UnknownData_5DHM, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, SourceComponentTypeSerializedIndex, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, SavedProperties, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, DuplicatedObjects, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, ReferencedObjects, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, ReferencedNames, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorComponentInstanceData, 0x0058);
		}

		// struct FSceneComponentInstanceData : public FActorComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__SceneComponentInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSceneComponentInstanceData, AttachedInstanceComponents, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSceneComponentInstanceData, 0x00A8);
		}

		// struct FAtmospherePrecomputeInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__AtmospherePrecomputeInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeInstanceData, UnknownData_3QWB, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAtmospherePrecomputeInstanceData, 0x0288);
		}

		// struct FAtmospherePrecomputeParameters
		TEST_METHOD(ScriptStruct__Engine__AtmospherePrecomputeParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, DensityHeight, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, DecayHeight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, MaxScatteringOrder, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, TransmittanceTexWidth, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, TransmittanceTexHeight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, IrradianceTexWidth, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, IrradianceTexHeight, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, InscatterAltitudeSampleNum, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, InscatterMuNum, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, InscatterMuSNum, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, InscatterNuNum, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAtmospherePrecomputeParameters, 0x002C);
		}

		// struct FAudioQualitySettings
		TEST_METHOD(ScriptStruct__Engine__AudioQualitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioQualitySettings, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioQualitySettings, MaxChannels, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioQualitySettings, UnknownData_HGIG, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioQualitySettings, 0x0020);
		}

		// struct FInteriorSettings
		TEST_METHOD(ScriptStruct__Engine__InteriorSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, bIsWorldSettings, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, UnknownData_UC1W, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, ExteriorVolume, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, ExteriorTime, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, ExteriorLPF, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, ExteriorLPFTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, InteriorVolume, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, InteriorTime, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, InteriorLPF, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, InteriorLPFTime, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInteriorSettings, 0x0024);
		}

		// struct FReverbSettings
		TEST_METHOD(ScriptStruct__Engine__ReverbSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, bApplyReverb, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, UnknownData_IY7L, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, ReverbEffect, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, ReverbPluginEffect, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, Volume, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, FadeTime, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReverbSettings, 0x0020);
		}

		// struct FFilePath
		TEST_METHOD(ScriptStruct__Engine__FilePath)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilePath, FilePath, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFilePath, 0x0010);
		}

		// struct FLaunchOnTestSettings
		TEST_METHOD(ScriptStruct__Engine__LaunchOnTestSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLaunchOnTestSettings, LaunchOnTestmap, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLaunchOnTestSettings, DeviceID, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLaunchOnTestSettings, 0x0020);
		}

		// struct FEditorMapPerformanceTestDefinition
		TEST_METHOD(ScriptStruct__Engine__EditorMapPerformanceTestDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorMapPerformanceTestDefinition, PerformanceTestmap, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorMapPerformanceTestDefinition, TestTimer, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorMapPerformanceTestDefinition, UnknownData_SPQ2, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditorMapPerformanceTestDefinition, 0x0020);
		}

		// struct FImportFactorySettingValues
		TEST_METHOD(ScriptStruct__Engine__ImportFactorySettingValues)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportFactorySettingValues, SettingName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportFactorySettingValues, Value, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FImportFactorySettingValues, 0x0020);
		}

		// struct FEditorImportWorkflowDefinition
		TEST_METHOD(ScriptStruct__Engine__EditorImportWorkflowDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportWorkflowDefinition, ImportFilePath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportWorkflowDefinition, FactorySettings, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditorImportWorkflowDefinition, 0x0020);
		}

		// struct FBuildPromotionImportWorkflowSettings
		TEST_METHOD(ScriptStruct__Engine__BuildPromotionImportWorkflowSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, Diffuse, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, Normal, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, StaticMesh, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, ReimportStaticMesh, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, BlendShapeMesh, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, MorphMesh, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, SkeletalMesh, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, Animation, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, Sound, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, SurroundSound, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, OtherAssetsToImport, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuildPromotionImportWorkflowSettings, 0x0150);
		}

		// struct FBuildPromotionOpenAssetSettings
		TEST_METHOD(ScriptStruct__Engine__BuildPromotionOpenAssetSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, BlueprintAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, MaterialAsset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, ParticleSystemAsset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, SkeletalMeshAsset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, StaticMeshAsset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, TextureAsset, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuildPromotionOpenAssetSettings, 0x0060);
		}

		// struct FBuildPromotionNewProjectSettings
		TEST_METHOD(ScriptStruct__Engine__BuildPromotionNewProjectSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionNewProjectSettings, NewProjectFolderOverride, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionNewProjectSettings, NewProjectNameOverride, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuildPromotionNewProjectSettings, 0x0020);
		}

		// struct FBuildPromotionTestSettings
		TEST_METHOD(ScriptStruct__Engine__BuildPromotionTestSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, DefaultStaticMeshAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, ImportWorkflow, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, OpenAssets, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, NewProjectSettings, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, SourceControlMaterial, 0x01E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuildPromotionTestSettings, 0x01F0);
		}

		// struct FBlueprintEditorPromotionSettings
		TEST_METHOD(ScriptStruct__Engine__BlueprintEditorPromotionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintEditorPromotionSettings, FirstMeshPath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintEditorPromotionSettings, SecondMeshPath, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintEditorPromotionSettings, DefaultParticleAsset, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintEditorPromotionSettings, 0x0030);
		}

		// struct FParticleEditorPromotionSettings
		TEST_METHOD(ScriptStruct__Engine__ParticleEditorPromotionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEditorPromotionSettings, DefaultParticleAsset, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleEditorPromotionSettings, 0x0010);
		}

		// struct FMaterialEditorPromotionSettings
		TEST_METHOD(ScriptStruct__Engine__MaterialEditorPromotionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialEditorPromotionSettings, DefaultMaterialAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialEditorPromotionSettings, DefaultDiffuseTexture, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialEditorPromotionSettings, DefaultNormalTexture, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialEditorPromotionSettings, 0x0030);
		}

		// struct FEditorImportExportTestDefinition
		TEST_METHOD(ScriptStruct__Engine__EditorImportExportTestDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, ImportFilePath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, ExportFileExtension, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, bSkipExport, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, UnknownData_X12W, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, FactorySettings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditorImportExportTestDefinition, 0x0038);
		}

		// struct FExternalToolDefinition
		TEST_METHOD(ScriptStruct__Engine__ExternalToolDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, ToolName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, ExecutablePath, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, CommandLineOptions, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, WorkingDirectory, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, ScriptExtension, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, ScriptDirectory, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExternalToolDefinition, 0x0060);
		}

		// struct FNavAvoidanceData
		TEST_METHOD(ScriptStruct__Engine__NavAvoidanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAvoidanceData, UnknownData_F0OO, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavAvoidanceData, 0x003C);
		}

		// struct FBoneReference
		TEST_METHOD(ScriptStruct__Engine__BoneReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneReference, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneReference, UnknownData_KM7F, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneReference, 0x0010);
		}

		// struct FBlendProfileBoneEntry
		TEST_METHOD(ScriptStruct__Engine__BlendProfileBoneEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendProfileBoneEntry, BoneReference, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendProfileBoneEntry, BlendScale, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendProfileBoneEntry, 0x0014);
		}

		// struct FPerBoneInterpolation
		TEST_METHOD(ScriptStruct__Engine__PerBoneInterpolation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneInterpolation, BoneReference, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneInterpolation, InterpolationSpeedPerSec, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerBoneInterpolation, 0x0014);
		}

		// struct FEditorElement
		TEST_METHOD(ScriptStruct__Engine__EditorElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorElement, Indices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorElement, Weights, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditorElement, 0x0018);
		}

		// struct FGridBlendSample
		TEST_METHOD(ScriptStruct__Engine__GridBlendSample)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGridBlendSample, GridElement, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGridBlendSample, BlendWeight, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGridBlendSample, 0x001C);
		}

		// struct FBlendSample
		TEST_METHOD(ScriptStruct__Engine__BlendSample)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSample, Animation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSample, SampleValue, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSample, RateScale, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendSample, 0x0018);
		}

		// struct FBlendParameter
		TEST_METHOD(ScriptStruct__Engine__BlendParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, Min, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, Max, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, GridNum, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, UnknownData_60RZ, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendParameter, 0x0020);
		}

		// struct FInterpolationParameter
		TEST_METHOD(ScriptStruct__Engine__InterpolationParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpolationParameter, InterpolationTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpolationParameter, InterpolationType, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpolationParameter, UnknownData_3UUD, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpolationParameter, 0x0008);
		}

		// struct FBPEditorBookmarkNode
		TEST_METHOD(ScriptStruct__Engine__BPEditorBookmarkNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPEditorBookmarkNode, NodeGuid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPEditorBookmarkNode, ParentGuid, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPEditorBookmarkNode, DisplayName, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPEditorBookmarkNode, 0x0038);
		}

		// struct FEditedDocumentInfo
		TEST_METHOD(ScriptStruct__Engine__EditedDocumentInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, EditedObjectPath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, SavedViewOffset, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, SavedZoomAmount, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, UnknownData_DNS0, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, EditedObject, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditedDocumentInfo, 0x0030);
		}

		// struct FBPInterfaceDescription
		TEST_METHOD(ScriptStruct__Engine__BPInterfaceDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPInterfaceDescription, Interface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPInterfaceDescription, Graphs, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPInterfaceDescription, 0x0018);
		}

		// struct FEdGraphTerminalType
		TEST_METHOD(ScriptStruct__Engine__EdGraphTerminalType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, TerminalCategory, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, TerminalSubCategory, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, TerminalSubCategoryObject, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, bTerminalIsConst, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, bTerminalIsWeakPointer, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, UnknownData_KQXW, 0x001A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphTerminalType, 0x001C);
		}

		// struct FSimpleMemberReference
		TEST_METHOD(ScriptStruct__Engine__SimpleMemberReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleMemberReference, MemberParent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleMemberReference, MemberName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleMemberReference, MemberGuid, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSimpleMemberReference, 0x0020);
		}

		// struct FEdGraphPinType
		TEST_METHOD(ScriptStruct__Engine__EdGraphPinType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinCategory, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinSubCategory, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinSubCategoryObject, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinSubCategoryMemberReference, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinValueType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, ContainerType, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, UnknownData_OOYT, 0x0056);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphPinType, 0x0058);
		}

		// struct FBPVariableMetaDataEntry
		TEST_METHOD(ScriptStruct__Engine__BPVariableMetaDataEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableMetaDataEntry, DataKey, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableMetaDataEntry, DataValue, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPVariableMetaDataEntry, 0x0018);
		}

		// struct FBPVariableDescription
		TEST_METHOD(ScriptStruct__Engine__BPVariableDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, VarName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, VarGuid, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, VarType, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, FriendlyName, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, Category, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, PropertyFlags, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, RepNotifyFunc, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, ReplicationCondition, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, UnknownData_DUL0, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, MetaDataArray, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, DefaultValue, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPVariableDescription, 0x00D0);
		}

		// struct FBlueprintMacroCosmeticInfo
		TEST_METHOD(ScriptStruct__Engine__BlueprintMacroCosmeticInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintMacroCosmeticInfo, UnknownData_UA7W, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintMacroCosmeticInfo, 0x0001);
		}

		// struct FCompilerNativizationOptions
		TEST_METHOD(ScriptStruct__Engine__CompilerNativizationOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, PlatformName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, ServerOnlyPlatform, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, ClientOnlyPlatform, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, bExcludeMonolithicHeaders, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, UnknownData_H8JX, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, ExcludedModules, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, ExcludedAssets, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, ExcludedFolderPaths, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompilerNativizationOptions, 0x0080);
		}

		// struct FEventGraphFastCallPair
		TEST_METHOD(ScriptStruct__Engine__EventGraphFastCallPair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventGraphFastCallPair, FunctionToPatch, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventGraphFastCallPair, EventGraphCallOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventGraphFastCallPair, UnknownData_SSA6, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEventGraphFastCallPair, 0x0010);
		}

		// struct FBlueprintDebugData
		TEST_METHOD(ScriptStruct__Engine__BlueprintDebugData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintDebugData, UnknownData_QUH8, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintDebugData, 0x0001);
		}

		// struct FPointerToUberGraphFrame
		TEST_METHOD(ScriptStruct__Engine__PointerToUberGraphFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointerToUberGraphFrame, UnknownData_CKFZ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPointerToUberGraphFrame, 0x0010);
		}

		// struct FDebuggingInfoForSingleFunction
		TEST_METHOD(ScriptStruct__Engine__DebuggingInfoForSingleFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebuggingInfoForSingleFunction, UnknownData_4LY4, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebuggingInfoForSingleFunction, 0x0190);
		}

		// struct FNodeToCodeAssociation
		TEST_METHOD(ScriptStruct__Engine__NodeToCodeAssociation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeToCodeAssociation, UnknownData_D3P8, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeToCodeAssociation, 0x0014);
		}

		// struct FAnimCurveType
		TEST_METHOD(ScriptStruct__Engine__AnimCurveType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveType, UnknownData_E9XL, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimCurveType, 0x0002);
		}

		// struct FBookmarkBaseJumpToSettings
		TEST_METHOD(ScriptStruct__Engine__BookmarkBaseJumpToSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBookmarkBaseJumpToSettings, UnknownData_83QL, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBookmarkBaseJumpToSettings, 0x0001);
		}

		// struct FBookmarkJumpToSettings : public FBookmarkBaseJumpToSettings
		TEST_METHOD(ScriptStruct__Engine__BookmarkJumpToSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBookmarkJumpToSettings, 0x0001);
		}

		// struct FBookmark2DJumpToSettings
		TEST_METHOD(ScriptStruct__Engine__Bookmark2DJumpToSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBookmark2DJumpToSettings, UnknownData_97R0, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBookmark2DJumpToSettings, 0x0001);
		}

		// struct FBuilderPoly
		TEST_METHOD(ScriptStruct__Engine__BuilderPoly)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuilderPoly, VertexIndices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuilderPoly, Direction, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuilderPoly, ItemName, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuilderPoly, PolyFlags, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuilderPoly, 0x0020);
		}

		// struct FCachedAnimTransitionData
		TEST_METHOD(ScriptStruct__Engine__CachedAnimTransitionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimTransitionData, StateMachineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimTransitionData, FromStateName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimTransitionData, ToStateName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimTransitionData, UnknownData_56KP, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedAnimTransitionData, 0x0024);
		}

		// struct FCachedAnimRelevancyData
		TEST_METHOD(ScriptStruct__Engine__CachedAnimRelevancyData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimRelevancyData, StateMachineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimRelevancyData, StateName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimRelevancyData, UnknownData_V66H, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedAnimRelevancyData, 0x001C);
		}

		// struct FCachedAnimAssetPlayerData
		TEST_METHOD(ScriptStruct__Engine__CachedAnimAssetPlayerData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimAssetPlayerData, StateMachineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimAssetPlayerData, StateName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimAssetPlayerData, UnknownData_CI1H, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedAnimAssetPlayerData, 0x0018);
		}

		// struct FCachedAnimStateData
		TEST_METHOD(ScriptStruct__Engine__CachedAnimStateData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimStateData, StateMachineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimStateData, StateName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimStateData, UnknownData_YSJM, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedAnimStateData, 0x001C);
		}

		// struct FCachedAnimStateArray
		TEST_METHOD(ScriptStruct__Engine__CachedAnimStateArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimStateArray, States, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimStateArray, UnknownData_E1NP, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedAnimStateArray, 0x0018);
		}

		// struct FPooledCameraShakes
		TEST_METHOD(ScriptStruct__Engine__PooledCameraShakes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPooledCameraShakes, PooledShakes, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPooledCameraShakes, 0x0010);
		}

		// struct FDummySpacerCameraTypes
		TEST_METHOD(ScriptStruct__Engine__DummySpacerCameraTypes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDummySpacerCameraTypes, UnknownData_K6Z5, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDummySpacerCameraTypes, 0x0001);
		}

		// struct FCanvasIcon
		TEST_METHOD(ScriptStruct__Engine__CanvasIcon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, Texture, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, U, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, V, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, UL, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, VL, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCanvasIcon, 0x0018);
		}

		// struct FWrappedStringElement
		TEST_METHOD(ScriptStruct__Engine__WrappedStringElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWrappedStringElement, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWrappedStringElement, LineExtent, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWrappedStringElement, 0x0018);
		}

		// struct FTextSizingParameters
		TEST_METHOD(ScriptStruct__Engine__TextSizingParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawY, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawXL, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawYL, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, Scaling, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawFont, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, SpacingAdjust, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextSizingParameters, 0x0028);
		}

		// struct FChildActorAttachedActorInfo
		TEST_METHOD(ScriptStruct__Engine__ChildActorAttachedActorInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorAttachedActorInfo, Actor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorAttachedActorInfo, SocketName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorAttachedActorInfo, RelativeTransform, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChildActorAttachedActorInfo, 0x0040);
		}

		// struct FChildActorComponentInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__ChildActorComponentInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorComponentInstanceData, ChildActorName, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorComponentInstanceData, AttachedActors, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorComponentInstanceData, UnknownData_D0JN, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChildActorComponentInstanceData, 0x00D0);
		}

		// struct FResponseChannel
		TEST_METHOD(ScriptStruct__Engine__ResponseChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FResponseChannel, Channel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FResponseChannel, Response, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FResponseChannel, UnknownData_J7Z7, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FResponseChannel, 0x000C);
		}

		// struct FCustomProfile
		TEST_METHOD(ScriptStruct__Engine__CustomProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomProfile, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomProfile, CustomResponses, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomProfile, 0x0018);
		}

		// struct FCustomChannelSetup
		TEST_METHOD(ScriptStruct__Engine__CustomChannelSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, Channel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, UnknownData_CFHA, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, Name, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, DefaultResponse, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, bTraceType, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, bStaticObject, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, UnknownData_PVE9, 0x000F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomChannelSetup, 0x0010);
		}

		// struct FCollisionResponseTemplate
		TEST_METHOD(ScriptStruct__Engine__CollisionResponseTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, CollisionEnabled, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, UnknownData_BB12, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, ObjectTypeName, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, UnknownData_TR1K, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, CustomResponses, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, HelpMessage, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, bCanModify, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, UnknownData_MB7M, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionResponseTemplate, 0x0060);
		}

		// struct FBlueprintComponentDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintComponentDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentDelegateBinding, ComponentPropertyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentDelegateBinding, DelegatePropertyName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentDelegateBinding, FunctionNameToBind, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintComponentDelegateBinding, 0x0018);
		}

		// struct FAutoCompleteNode
		TEST_METHOD(ScriptStruct__Engine__AutoCompleteNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteNode, IndexChar, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteNode, UnknownData_FJD6, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteNode, AutoCompleteListIndices, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteNode, UnknownData_VQLW, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutoCompleteNode, 0x0028);
		}

		// struct FConstraintDrive
		TEST_METHOD(ScriptStruct__Engine__ConstraintDrive)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDrive, Stiffness, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDrive, Damping, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDrive, MaxForce, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDrive, UnknownData_3IF8, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintDrive, 0x0010);
		}

		// struct FAngularDriveConstraint
		TEST_METHOD(ScriptStruct__Engine__AngularDriveConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, TwistDrive, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, SwingDrive, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, SlerpDrive, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, OrientationTarget, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, AngularVelocityTarget, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, AngularDriveMode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, UnknownData_XUGH, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAngularDriveConstraint, 0x004C);
		}

		// struct FLinearDriveConstraint
		TEST_METHOD(ScriptStruct__Engine__LinearDriveConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, PositionTarget, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, VelocityTarget, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, XDrive, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, YDrive, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, ZDrive, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, UnknownData_4R16, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLinearDriveConstraint, 0x004C);
		}

		// struct FConstraintBaseParams
		TEST_METHOD(ScriptStruct__Engine__ConstraintBaseParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintBaseParams, Stiffness, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintBaseParams, Damping, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintBaseParams, Restitution, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintBaseParams, ContactDistance, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintBaseParams, UnknownData_K72M, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintBaseParams, 0x0014);
		}

		// struct FLinearConstraint : public FConstraintBaseParams
		TEST_METHOD(ScriptStruct__Engine__LinearConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearConstraint, limit, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearConstraint, XMotion, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearConstraint, YMotion, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearConstraint, ZMotion, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearConstraint, UnknownData_29EC, 0x001B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLinearConstraint, 0x001C);
		}

		// struct FConeConstraint : public FConstraintBaseParams
		TEST_METHOD(ScriptStruct__Engine__ConeConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConeConstraint, Swing1LimitDegrees, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConeConstraint, Swing2LimitDegrees, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConeConstraint, Swing1Motion, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConeConstraint, Swing2Motion, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConeConstraint, UnknownData_LA9X, 0x001E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConeConstraint, 0x0020);
		}

		// struct FTwistConstraint : public FConstraintBaseParams
		TEST_METHOD(ScriptStruct__Engine__TwistConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwistConstraint, TwistLimitDegrees, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwistConstraint, TwistMotion, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwistConstraint, UnknownData_8BC0, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTwistConstraint, 0x001C);
		}

		// struct FConstraintProfileProperties
		TEST_METHOD(ScriptStruct__Engine__ConstraintProfileProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, ProjectionLinearTolerance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, ProjectionAngularTolerance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, LinearBreakThreshold, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, AngularBreakThreshold, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, LinearLimit, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, ConeLimit, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, TwistLimit, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, LinearDrive, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, AngularDrive, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, UnknownData_3O7Q, 0x0101);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintProfileProperties, 0x0104);
		}

		// struct FConstraintInstance
		TEST_METHOD(ScriptStruct__Engine__ConstraintInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, UnknownData_V5TN, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, JointName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, ConstraintBone1, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, ConstraintBone2, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, Pos1, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, PriAxis1, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, SecAxis1, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, Pos2, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, PriAxis2, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, SecAxis2, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, AngularRotationOffset, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, UnknownData_1GJJ, 0x0085);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, ProfileInstance, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, UnknownData_UJ06, 0x0190);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintInstance, 0x01B8);
		}

		// struct FCullDistanceSizePair
		TEST_METHOD(ScriptStruct__Engine__CullDistanceSizePair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCullDistanceSizePair, Size, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCullDistanceSizePair, CullDistance, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCullDistanceSizePair, 0x0008);
		}

		// struct FRuntimeCurveLinearColor
		TEST_METHOD(ScriptStruct__Engine__RuntimeCurveLinearColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeCurveLinearColor, ColorCurves, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeCurveLinearColor, ExternalCurve, 0x0200);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRuntimeCurveLinearColor, 0x0208);
		}

		// struct FNamedCurveValue
		TEST_METHOD(ScriptStruct__Engine__NamedCurveValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedCurveValue, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedCurveValue, Value, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedCurveValue, 0x000C);
		}

		// struct FDataTableCategoryHandle
		TEST_METHOD(ScriptStruct__Engine__DataTableCategoryHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableCategoryHandle, DataTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableCategoryHandle, ColumnName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableCategoryHandle, RowContents, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDataTableCategoryHandle, 0x0018);
		}

		// struct FDataTableRowHandle
		TEST_METHOD(ScriptStruct__Engine__DataTableRowHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableRowHandle, DataTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableRowHandle, RowName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDataTableRowHandle, 0x0010);
		}

		// struct FDebugDisplayProperty
		TEST_METHOD(ScriptStruct__Engine__DebugDisplayProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugDisplayProperty, Obj, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugDisplayProperty, WithinClass, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugDisplayProperty, UnknownData_PZZ8, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebugDisplayProperty, 0x0020);
		}

		// struct FRollbackNetStartupActorInfo
		TEST_METHOD(ScriptStruct__Engine__RollbackNetStartupActorInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, UnknownData_U7NC, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, Archetype, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, UnknownData_CMXE, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, Level, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, UnknownData_PWUD, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, ObjReferences, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRollbackNetStartupActorInfo, 0x00A0);
		}

		// struct FLevelNameAndTime
		TEST_METHOD(ScriptStruct__Engine__LevelNameAndTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelNameAndTime, LevelName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelNameAndTime, LevelChangeTimeInMS, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelNameAndTime, UnknownData_7NWR, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelNameAndTime, 0x0018);
		}

		// struct FDialogueContext
		TEST_METHOD(ScriptStruct__Engine__DialogueContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContext, Speaker, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContext, Targets, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDialogueContext, 0x0018);
		}

		// struct FDialogueWaveParameter
		TEST_METHOD(ScriptStruct__Engine__DialogueWaveParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueWaveParameter, DialogueWave, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueWaveParameter, Context, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDialogueWaveParameter, 0x0020);
		}

		// struct FDialogueContextMapping
		TEST_METHOD(ScriptStruct__Engine__DialogueContextMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContextMapping, Context, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContextMapping, SoundWave, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContextMapping, LocalizationKeyFormat, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContextMapping, Proxy, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDialogueContextMapping, 0x0038);
		}

		// struct FDistributionLookupTable
		TEST_METHOD(ScriptStruct__Engine__DistributionLookupTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, Op, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, EntryCount, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, EntryStride, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, SubEntryStride, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, TimeScale, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, TimeBias, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, UnknownData_Z60C, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, Values, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, LockFlag, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, UnknownData_7D9W, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDistributionLookupTable, 0x0028);
		}

		// struct FRawDistribution
		TEST_METHOD(ScriptStruct__Engine__RawDistribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistribution, Table, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawDistribution, 0x0028);
		}

		// struct FRawDistributionFloat : public FRawDistribution
		TEST_METHOD(ScriptStruct__Engine__RawDistributionFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionFloat, MinValue, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionFloat, MaxValue, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionFloat, Distribution, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawDistributionFloat, 0x0038);
		}

		// struct FRawDistributionVector : public FRawDistribution
		TEST_METHOD(ScriptStruct__Engine__RawDistributionVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, MinValue, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, MaxValue, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, MinValueVec, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, MaxValueVec, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, Distribution, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawDistributionVector, 0x0050);
		}

		// struct FGraphReference
		TEST_METHOD(ScriptStruct__Engine__GraphReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGraphReference, MacroGraph, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGraphReference, GraphBlueprint, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGraphReference, GraphGuid, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGraphReference, 0x0020);
		}

		// struct FEdGraphPinReference
		TEST_METHOD(ScriptStruct__Engine__EdGraphPinReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinReference, OwningNode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinReference, PinId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphPinReference, 0x0018);
		}

		// struct FEdGraphSchemaAction
		TEST_METHOD(ScriptStruct__Engine__EdGraphSchemaAction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, UnknownData_QX5E, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, MenuDescription, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, TooltipDescription, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, Category, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, Keywords, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, Grouping, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, SectionID, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, MenuDescriptionArray, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, FullSearchTitlesArray, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, FullSearchKeywordsArray, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, FullSearchCategoryArray, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, LocalizedMenuDescriptionArray, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, LocalizedFullSearchTitlesArray, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, LocalizedFullSearchKeywordsArray, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, LocalizedFullSearchCategoryArray, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, SearchText, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphSchemaAction, 0x0100);
		}

		// struct FEdGraphSchemaAction_NewNode : public FEdGraphSchemaAction
		TEST_METHOD(ScriptStruct__Engine__EdGraphSchemaAction_NewNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction_NewNode, NodeTemplate, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphSchemaAction_NewNode, 0x0108);
		}

		// struct FPluginRedirect
		TEST_METHOD(ScriptStruct__Engine__PluginRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPluginRedirect, OldPluginName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPluginRedirect, NewPluginName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPluginRedirect, 0x0020);
		}

		// struct FStructRedirect
		TEST_METHOD(ScriptStruct__Engine__StructRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructRedirect, OldStructName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructRedirect, NewStructName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructRedirect, 0x0010);
		}

		// struct FClassRedirect
		TEST_METHOD(ScriptStruct__Engine__ClassRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, ObjectName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, OldClassName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, NewClassName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, OldSubobjName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, NewSubobjName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, NewClassClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, NewClassPackage, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, InstanceOnly, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, UnknownData_4LI9, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClassRedirect, 0x003C);
		}

		// struct FGameNameRedirect
		TEST_METHOD(ScriptStruct__Engine__GameNameRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameNameRedirect, OldGameName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameNameRedirect, NewGameName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameNameRedirect, 0x0010);
		}

		// struct FScreenMessageString
		TEST_METHOD(ScriptStruct__Engine__ScreenMessageString)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, ScreenMessage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, DisplayColor, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, TimeToDisplay, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, CurrentTimeDisplayed, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, TextScale, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, UnknownData_RCGN, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScreenMessageString, 0x0030);
		}

		// struct FDropNoteInfo
		TEST_METHOD(ScriptStruct__Engine__DropNoteInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDropNoteInfo, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDropNoteInfo, Rotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDropNoteInfo, Comment, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDropNoteInfo, 0x0028);
		}

		// struct FStatColorMapEntry
		TEST_METHOD(ScriptStruct__Engine__StatColorMapEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapEntry, In, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapEntry, Out, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStatColorMapEntry, 0x0008);
		}

		// struct FStatColorMapping
		TEST_METHOD(ScriptStruct__Engine__StatColorMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapping, StatName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapping, ColorMap, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapping, UnknownData_TW7X, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStatColorMapping, 0x0028);
		}

		// struct FURL
		TEST_METHOD(ScriptStruct__Engine__URL)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Protocol, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Host, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Port, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, valid, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Map, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, RedirectURL, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Op, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Portal, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FURL, 0x0068);
		}

		// struct FFullyLoadedPackagesInfo
		TEST_METHOD(ScriptStruct__Engine__FullyLoadedPackagesInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, FullyLoadType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, UnknownData_USP4, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, Tag, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, PackagesToLoad, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, LoadedObjects, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFullyLoadedPackagesInfo, 0x0038);
		}

		// struct FLevelStreamingStatus
		TEST_METHOD(ScriptStruct__Engine__LevelStreamingStatus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelStreamingStatus, PackageName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelStreamingStatus, UnknownData_71II, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelStreamingStatus, LODIndex, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelStreamingStatus, 0x0010);
		}

		// struct FNamedNetDriver
		TEST_METHOD(ScriptStruct__Engine__NamedNetDriver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedNetDriver, NetDriver, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedNetDriver, UnknownData_1UZ5, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedNetDriver, 0x0010);
		}

		// struct FWorldContext
		TEST_METHOD(ScriptStruct__Engine__WorldContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, UnknownData_F979, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, LastURL, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, LastRemoteURL, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, PendingNetGame, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, PackagesToFullyLoad, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, UnknownData_9014, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, LoadedLevelsForPendingMapChange, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, UnknownData_S95X, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, ObjectReferencers, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, PendingLevelStreamingStatusUpdates, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, GameViewport, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, OwningGameInstance, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, ActiveNetDrivers, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, UnknownData_IIV4, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWorldContext, 0x0270);
		}

		// struct FNetDriverDefinition
		TEST_METHOD(ScriptStruct__Engine__NetDriverDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetDriverDefinition, DefName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetDriverDefinition, DriverClassName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetDriverDefinition, DriverClassNameFallback, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNetDriverDefinition, 0x0018);
		}

		// struct FExposureSettings
		TEST_METHOD(ScriptStruct__Engine__ExposureSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposureSettings, FixedEV100, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposureSettings, bFixed, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposureSettings, UnknownData_95TC, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExposureSettings, 0x0008);
		}

		// struct FTickPrerequisite
		TEST_METHOD(ScriptStruct__Engine__TickPrerequisite)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickPrerequisite, UnknownData_JKWF, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTickPrerequisite, 0x0010);
		}

		// struct FDepthFieldGlowInfo
		TEST_METHOD(ScriptStruct__Engine__DepthFieldGlowInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthFieldGlowInfo, UnknownData_3A07, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthFieldGlowInfo, GlowColor, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthFieldGlowInfo, GlowOuterRadius, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthFieldGlowInfo, GlowInnerRadius, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDepthFieldGlowInfo, 0x0024);
		}

		// struct FFontRenderInfo
		TEST_METHOD(ScriptStruct__Engine__FontRenderInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontRenderInfo, UnknownData_BMKE, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontRenderInfo, GlowInfo, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontRenderInfo, 0x0028);
		}

		// struct FCollectionReference
		TEST_METHOD(ScriptStruct__Engine__CollectionReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionReference, CollectionName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollectionReference, 0x0008);
		}

		// struct FComponentReference
		TEST_METHOD(ScriptStruct__Engine__ComponentReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentReference, OtherActor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentReference, ComponentProperty, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentReference, UnknownData_24C2, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentReference, 0x0018);
		}

		// struct FConstrainComponentPropName
		TEST_METHOD(ScriptStruct__Engine__ConstrainComponentPropName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstrainComponentPropName, ComponentName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstrainComponentPropName, 0x0008);
		}

		// struct FDamageEvent
		TEST_METHOD(ScriptStruct__Engine__DamageEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamageEvent, UnknownData_6D0O, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamageEvent, DamageTypeClass, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDamageEvent, 0x0010);
		}

		// struct FRadialDamageParams
		TEST_METHOD(ScriptStruct__Engine__RadialDamageParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, BaseDamage, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, MinimumDamage, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, InnerRadius, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, OuterRadius, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, DamageFalloff, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRadialDamageParams, 0x0014);
		}

		// struct FVector_NetQuantize : public FVector
		TEST_METHOD(ScriptStruct__Engine__Vector_NetQuantize)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector_NetQuantize, 0x000C);
		}

		// struct FVector_NetQuantizeNormal : public FVector
		TEST_METHOD(ScriptStruct__Engine__Vector_NetQuantizeNormal)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector_NetQuantizeNormal, 0x000C);
		}

		// struct FHitResult
		TEST_METHOD(ScriptStruct__Engine__HitResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, UnknownData_T182, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, FaceIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Time, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Distance, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Location, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, ImpactPoint, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Normal, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, ImpactNormal, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, TraceStart, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, TraceEnd, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, PenetrationDepth, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Item, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, PhysMaterial, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Actor, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Component, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, BoneName, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, MyBoneName, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHitResult, 0x0088);
		}

		// struct FRadialDamageEvent : public FDamageEvent
		TEST_METHOD(ScriptStruct__Engine__RadialDamageEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageEvent, Params, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageEvent, Origin, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageEvent, ComponentHits, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRadialDamageEvent, 0x0040);
		}

		// struct FPointDamageEvent : public FDamageEvent
		TEST_METHOD(ScriptStruct__Engine__PointDamageEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointDamageEvent, Damage, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointDamageEvent, ShotDirection, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointDamageEvent, HitInfo, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPointDamageEvent, 0x00A8);
		}

		// struct FMeshBuildSettings
		TEST_METHOD(ScriptStruct__Engine__MeshBuildSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, UnknownData_PUNA, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, MinLightmapResolution, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, SrcLightmapIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, DstLightmapIndex, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, BuildScale, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, BuildScale3D, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, DistanceFieldResolutionScale, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, UnknownData_PVS4, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, DistanceFieldReplacementMesh, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshBuildSettings, 0x0030);
		}

		// struct FPOV
		TEST_METHOD(ScriptStruct__Engine__POV)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPOV, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPOV, Rotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPOV, FOV, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPOV, 0x001C);
		}

		// struct FAnimUpdateRateParameters
		TEST_METHOD(ScriptStruct__Engine__AnimUpdateRateParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, UnknownData_NTU8, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, ShiftBucket, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, UnknownData_O5P3, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, UpdateRate, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, EvaluationRate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, TickedPoseOffestTime, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, AdditionalTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, UnknownData_57ET, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, BaseNonRenderedUpdateRate, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, MaxEvalRateForInterpolation, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, BaseVisibleDistanceFactorThesholds, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, LODToFrameSkipMap, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, SkippedUpdateFrames, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, SkippedEvalFrames, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimUpdateRateParameters, 0x0088);
		}

		// struct FAnimSlotDesc
		TEST_METHOD(ScriptStruct__Engine__AnimSlotDesc)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotDesc, SlotName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotDesc, NumChannels, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSlotDesc, 0x000C);
		}

		// struct FAnimSlotInfo
		TEST_METHOD(ScriptStruct__Engine__AnimSlotInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotInfo, SlotName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotInfo, ChannelWeights, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSlotInfo, 0x0018);
		}

		// struct FMTDResult
		TEST_METHOD(ScriptStruct__Engine__MTDResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMTDResult, Direction, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMTDResult, Distance, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMTDResult, 0x0010);
		}

		// struct FOverlapResult
		TEST_METHOD(ScriptStruct__Engine__OverlapResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlapResult, Actor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlapResult, Component, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlapResult, UnknownData_1KXP, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlapResult, UnknownData_AIUW, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOverlapResult, 0x0018);
		}

		// struct FPrimitiveMaterialRef
		TEST_METHOD(ScriptStruct__Engine__PrimitiveMaterialRef)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveMaterialRef, Primitive, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveMaterialRef, Decal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveMaterialRef, ElementIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveMaterialRef, UnknownData_50LI, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimitiveMaterialRef, 0x0018);
		}

		// struct FSwarmDebugOptions
		TEST_METHOD(ScriptStruct__Engine__SwarmDebugOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSwarmDebugOptions, UnknownData_MAVT, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSwarmDebugOptions, 0x0004);
		}

		// struct FLightmassDebugOptions
		TEST_METHOD(ScriptStruct__Engine__LightmassDebugOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDebugOptions, UnknownData_QPB6, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDebugOptions, CoplanarTolerance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDebugOptions, UnknownData_C6I2, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDebugOptions, ExecutionTimeDivisor, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassDebugOptions, 0x0010);
		}

		// struct FLightmassLightSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassLightSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassLightSettings, IndirectLightingSaturation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassLightSettings, ShadowExponent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassLightSettings, bUseAreaShadowsForStationaryLight, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassLightSettings, UnknownData_W4A8, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassLightSettings, 0x000C);
		}

		// struct FLightmassPointLightSettings : public FLightmassLightSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassPointLightSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassPointLightSettings, 0x000C);
		}

		// struct FBasedPosition
		TEST_METHOD(ScriptStruct__Engine__BasedPosition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, Base, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, Position, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, CachedBaseLocation, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, CachedBaseRotation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, CachedTransPosition, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBasedPosition, 0x0038);
		}

		// struct FFractureEffect
		TEST_METHOD(ScriptStruct__Engine__FractureEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFractureEffect, ParticleSystem, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFractureEffect, Sound, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFractureEffect, 0x0010);
		}

		// struct FRigidBodyContactInfo
		TEST_METHOD(ScriptStruct__Engine__RigidBodyContactInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, ContactPosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, ContactNormal, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, ContactPenetration, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, UnknownData_3AXS, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, PhysMaterial, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigidBodyContactInfo, 0x0030);
		}

		// struct FCollisionImpactData
		TEST_METHOD(ScriptStruct__Engine__CollisionImpactData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionImpactData, ContactInfos, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionImpactData, TotalNormalImpulse, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionImpactData, TotalFrictionImpulse, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionImpactData, 0x0028);
		}

		// struct FRigidBodyErrorCorrection
		TEST_METHOD(ScriptStruct__Engine__RigidBodyErrorCorrection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, PingExtrapolation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, PingLimit, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, ErrorPerLinearDifference, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, ErrorPerAngularDifference, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, MaxRestoredStateError, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, MaxLinearHardSnapDistance, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, PositionLerp, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, AngleLerp, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, LinearVelocityCoefficient, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, AngularVelocityCoefficient, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, ErrorAccumulationSeconds, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, ErrorAccumulationDistanceSq, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, ErrorAccumulationSimilarity, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigidBodyErrorCorrection, 0x0034);
		}

		// struct FRigidBodyState
		TEST_METHOD(ScriptStruct__Engine__RigidBodyState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, UnknownData_LLEV, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, Quaternion, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, LinVel, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, AngVel, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, Flags, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, UnknownData_8MO9, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigidBodyState, 0x0040);
		}

		// struct FRuntimeFloatCurve
		TEST_METHOD(ScriptStruct__Engine__RuntimeFloatCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeFloatCurve, EditorCurveData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeFloatCurve, ExternalCurve, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRuntimeFloatCurve, 0x0088);
		}

		// struct FForceFeedbackChannelDetails
		TEST_METHOD(ScriptStruct__Engine__ForceFeedbackChannelDetails)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackChannelDetails, UnknownData_R5AY, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackChannelDetails, Curve, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForceFeedbackChannelDetails, 0x0090);
		}

		// struct FPredictProjectilePathPointData
		TEST_METHOD(ScriptStruct__Engine__PredictProjectilePathPointData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathPointData, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathPointData, Velocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathPointData, Time, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPredictProjectilePathPointData, 0x001C);
		}

		// struct FPredictProjectilePathResult
		TEST_METHOD(ScriptStruct__Engine__PredictProjectilePathResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathResult, PathData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathResult, LastTraceDestination, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathResult, HitResult, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathResult, UnknownData_QCPM, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPredictProjectilePathResult, 0x00B8);
		}

		// struct FPredictProjectilePathParams
		TEST_METHOD(ScriptStruct__Engine__PredictProjectilePathParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, StartLocation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, LaunchVelocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, bTraceWithCollision, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, UnknownData_BYYK, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, ProjectileRadius, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, MaxSimTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, bTraceWithChannel, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, TraceChannel, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, UnknownData_KPEH, 0x0026);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, ObjectTypes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, ActorsToIgnore, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, SimFrequency, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, OverrideGravityZ, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, DrawDebugType, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, UnknownData_UWNR, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, DrawDebugTime, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, bTraceComplex, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, UnknownData_EZUK, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPredictProjectilePathParams, 0x0060);
		}

		// struct FActiveHapticFeedbackEffect
		TEST_METHOD(ScriptStruct__Engine__ActiveHapticFeedbackEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveHapticFeedbackEffect, HapticEffect, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveHapticFeedbackEffect, UnknownData_YZHS, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveHapticFeedbackEffect, 0x0018);
		}

		// struct FHapticFeedbackDetails_Curve
		TEST_METHOD(ScriptStruct__Engine__HapticFeedbackDetails_Curve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHapticFeedbackDetails_Curve, Frequency, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHapticFeedbackDetails_Curve, Amplitude, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHapticFeedbackDetails_Curve, 0x0110);
		}

		// struct FClusterNode
		TEST_METHOD(ScriptStruct__Engine__ClusterNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, BoundMin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, FirstChild, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, BoundMax, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, LastChild, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, FirstInstance, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, LastInstance, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, MinInstanceScale, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, MaxInstanceScale, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClusterNode, 0x0040);
		}

		// struct FClusterNode_DEPRECATED
		TEST_METHOD(ScriptStruct__Engine__ClusterNode_DEPRECATED)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, BoundMin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, FirstChild, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, BoundMax, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, LastChild, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, FirstInstance, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, LastInstance, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClusterNode_DEPRECATED, 0x0028);
		}

		// struct FHLODProxyMesh
		TEST_METHOD(ScriptStruct__Engine__HLODProxyMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHLODProxyMesh, LODActor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHLODProxyMesh, UnknownData_ATHH, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHLODProxyMesh, StaticMesh, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHLODProxyMesh, Key, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHLODProxyMesh, 0x0030);
		}

		// struct FImportanceTexture
		TEST_METHOD(ScriptStruct__Engine__ImportanceTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, Size, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, NumMips, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, UnknownData_V6RD, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, MarginalCDF, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, ConditionalCDF, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, TextureData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, Texture, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, Weighting, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, UnknownData_7W0P, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FImportanceTexture, 0x0050);
		}

		// struct FComponentKey
		TEST_METHOD(ScriptStruct__Engine__ComponentKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentKey, OwnerClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentKey, SCSVariableName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentKey, AssociatedGuid, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentKey, 0x0020);
		}

		// struct FBlueprintComponentChangedPropertyInfo
		TEST_METHOD(ScriptStruct__Engine__BlueprintComponentChangedPropertyInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentChangedPropertyInfo, PropertyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentChangedPropertyInfo, ArrayIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentChangedPropertyInfo, UnknownData_DMYD, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentChangedPropertyInfo, PropertyScope, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintComponentChangedPropertyInfo, 0x0018);
		}

		// struct FBlueprintCookedComponentInstancingData
		TEST_METHOD(ScriptStruct__Engine__BlueprintCookedComponentInstancingData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintCookedComponentInstancingData, bIsValid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintCookedComponentInstancingData, UnknownData_CNGN, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintCookedComponentInstancingData, ChangedPropertyList, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintCookedComponentInstancingData, UnknownData_HFXA, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintCookedComponentInstancingData, 0x0050);
		}

		// struct FComponentOverrideRecord
		TEST_METHOD(ScriptStruct__Engine__ComponentOverrideRecord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentOverrideRecord, ComponentClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentOverrideRecord, ComponentTemplate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentOverrideRecord, ComponentKey, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentOverrideRecord, CookedComponentInstancingData, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentOverrideRecord, 0x0080);
		}

		// struct FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputDelegateBinding, UnknownData_AN1C, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputDelegateBinding, 0x0004);
		}

		// struct FBlueprintInputActionDelegateBinding : public FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputActionDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputActionDelegateBinding, InputActionName, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputActionDelegateBinding, InputKeyEvent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputActionDelegateBinding, UnknownData_OD6Y, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputActionDelegateBinding, FunctionNameToBind, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputActionDelegateBinding, 0x0018);
		}

		// struct FBlueprintInputAxisDelegateBinding : public FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputAxisDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisDelegateBinding, InputAxisName, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisDelegateBinding, FunctionNameToBind, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputAxisDelegateBinding, 0x0014);
		}

		// struct FBlueprintInputAxisKeyDelegateBinding : public FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputAxisKeyDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisKeyDelegateBinding, UnknownData_84H3, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisKeyDelegateBinding, AxisKey, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisKeyDelegateBinding, FunctionNameToBind, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputAxisKeyDelegateBinding, 0x0028);
		}

		// struct FCachedKeyToActionInfo
		TEST_METHOD(ScriptStruct__Engine__CachedKeyToActionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedKeyToActionInfo, PlayerInput, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedKeyToActionInfo, UnknownData_3XAT, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedKeyToActionInfo, 0x0070);
		}

		// struct FBlueprintInputKeyDelegateBinding : public FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputKeyDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, UnknownData_LXCS, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, InputChord, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, InputKeyEvent, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, UnknownData_1YF5, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, FunctionNameToBind, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, UnknownData_1WCB, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputKeyDelegateBinding, 0x0038);
		}

		// struct FBlueprintInputTouchDelegateBinding : public FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputTouchDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputTouchDelegateBinding, InputKeyEvent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputTouchDelegateBinding, UnknownData_HWSN, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputTouchDelegateBinding, FunctionNameToBind, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputTouchDelegateBinding, 0x0010);
		}

		// struct FInstancedStaticMeshLightMapInstanceData
		TEST_METHOD(ScriptStruct__Engine__InstancedStaticMeshLightMapInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshLightMapInstanceData, Transform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshLightMapInstanceData, MapBuildDataIds, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInstancedStaticMeshLightMapInstanceData, 0x0040);
		}

		// struct FInstancedStaticMeshInstanceData
		TEST_METHOD(ScriptStruct__Engine__InstancedStaticMeshInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshInstanceData, Transform, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInstancedStaticMeshInstanceData, 0x0040);
		}

		// struct FInstancedStaticMeshComponentInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__InstancedStaticMeshComponentInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshComponentInstanceData, StaticMesh, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshComponentInstanceData, CachedStaticLighting, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshComponentInstanceData, PerInstanceSMData, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshComponentInstanceData, UnknownData_5V5Y, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshComponentInstanceData, InstancingRandomSeed, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshComponentInstanceData, UnknownData_AFBJ, 0x0124);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInstancedStaticMeshComponentInstanceData, 0x0130);
		}

		// struct FIntegralKey
		TEST_METHOD(ScriptStruct__Engine__IntegralKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralKey, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntegralKey, 0x0008);
		}

		// struct FIntegralCurve : public FIndexedCurve
		TEST_METHOD(ScriptStruct__Engine__IntegralCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralCurve, Keys, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralCurve, DefaultValue, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralCurve, bUseDefaultValueBeforeFirstKey, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralCurve, UnknownData_7HOT, 0x007D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntegralCurve, 0x0080);
		}

		// struct FCurveEdEntry
		TEST_METHOD(ScriptStruct__Engine__CurveEdEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, CurveObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, CurveColor, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, UnknownData_4UXF, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, CurveName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, bHideCurve, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, bColorCurve, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, bFloatingPointColorCurve, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, bClamp, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, ClampLow, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, ClampHigh, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveEdEntry, 0x0038);
		}

		// struct FCurveEdTab
		TEST_METHOD(ScriptStruct__Engine__CurveEdTab)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, TabName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, Curves, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, ViewStartInput, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, ViewEndInput, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, ViewStartOutput, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, ViewEndOutput, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveEdTab, 0x0030);
		}

		// struct FInterpEdSelKey
		TEST_METHOD(ScriptStruct__Engine__InterpEdSelKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpEdSelKey, Group, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpEdSelKey, Track, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpEdSelKey, KeyIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpEdSelKey, UnsnappedPosition, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpEdSelKey, 0x0018);
		}

		// struct FCameraPreviewInfo
		TEST_METHOD(ScriptStruct__Engine__CameraPreviewInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, PawnClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, AnimSeq, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, Location, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, Rotation, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, PawnInst, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraPreviewInfo, 0x0030);
		}

		// struct FSubTrackGroup
		TEST_METHOD(ScriptStruct__Engine__SubTrackGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubTrackGroup, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubTrackGroup, TrackIndices, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubTrackGroup, UnknownData_9SCI, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubTrackGroup, 0x0028);
		}

		// struct FSupportedSubTrackInfo
		TEST_METHOD(ScriptStruct__Engine__SupportedSubTrackInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedSubTrackInfo, SupportedClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedSubTrackInfo, SubTrackName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedSubTrackInfo, GroupIndex, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedSubTrackInfo, UnknownData_9EIX, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSupportedSubTrackInfo, 0x0020);
		}

		// struct FAnimControlTrackKey
		TEST_METHOD(ScriptStruct__Engine__AnimControlTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, startTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, UnknownData_NY1A, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, AnimSeq, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, AnimStartOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, AnimEndOffset, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, AnimPlayRate, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, UnknownData_7IYM, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimControlTrackKey, 0x0020);
		}

		// struct FBoolTrackKey
		TEST_METHOD(ScriptStruct__Engine__BoolTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoolTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoolTrackKey, UnknownData_2VIT, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoolTrackKey, 0x0008);
		}

		// struct FDirectorTrackCut
		TEST_METHOD(ScriptStruct__Engine__DirectorTrackCut)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectorTrackCut, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectorTrackCut, TransitionTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectorTrackCut, TargetCamGroup, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectorTrackCut, ShotNumber, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDirectorTrackCut, 0x0014);
		}

		// struct FEventTrackKey
		TEST_METHOD(ScriptStruct__Engine__EventTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventTrackKey, EventName, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEventTrackKey, 0x000C);
		}

		// struct FInterpLookupPoint
		TEST_METHOD(ScriptStruct__Engine__InterpLookupPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpLookupPoint, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpLookupPoint, Time, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpLookupPoint, 0x000C);
		}

		// struct FInterpLookupTrack
		TEST_METHOD(ScriptStruct__Engine__InterpLookupTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpLookupTrack, Points, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpLookupTrack, 0x0010);
		}

		// struct FParticleReplayTrackKey
		TEST_METHOD(ScriptStruct__Engine__ParticleReplayTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleReplayTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleReplayTrackKey, Duration, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleReplayTrackKey, ClipIDNumber, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleReplayTrackKey, 0x000C);
		}

		// struct FSoundTrackKey
		TEST_METHOD(ScriptStruct__Engine__SoundTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, Volume, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, Pitch, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, UnknownData_X6PG, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, Sound, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundTrackKey, 0x0018);
		}

		// struct FToggleTrackKey
		TEST_METHOD(ScriptStruct__Engine__ToggleTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FToggleTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FToggleTrackKey, ToggleAction, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FToggleTrackKey, UnknownData_P412, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FToggleTrackKey, 0x0008);
		}

		// struct FVisibilityTrackKey
		TEST_METHOD(ScriptStruct__Engine__VisibilityTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVisibilityTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVisibilityTrackKey, Action, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVisibilityTrackKey, ActiveCondition, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVisibilityTrackKey, UnknownData_YFF9, 0x0006);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVisibilityTrackKey, 0x0008);
		}

		// struct FVectorSpringState
		TEST_METHOD(ScriptStruct__Engine__VectorSpringState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorSpringState, UnknownData_1T3P, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorSpringState, 0x0018);
		}

		// struct FFloatSpringState
		TEST_METHOD(ScriptStruct__Engine__FloatSpringState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatSpringState, UnknownData_SYYX, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatSpringState, 0x0008);
		}

		// struct FDrawToRenderTargetContext
		TEST_METHOD(ScriptStruct__Engine__DrawToRenderTargetContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDrawToRenderTargetContext, RenderTarget, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDrawToRenderTargetContext, UnknownData_XUW3, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDrawToRenderTargetContext, 0x0010);
		}

		// struct FLatentActionManager
		TEST_METHOD(ScriptStruct__Engine__LatentActionManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionManager, UnknownData_KNYR, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLatentActionManager, 0x0060);
		}

		// struct FLayerActorStats
		TEST_METHOD(ScriptStruct__Engine__LayerActorStats)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerActorStats, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerActorStats, Total, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerActorStats, UnknownData_VAV8, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLayerActorStats, 0x0010);
		}

		// struct FReplicatedStaticActorDestructionInfo
		TEST_METHOD(ScriptStruct__Engine__ReplicatedStaticActorDestructionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedStaticActorDestructionInfo, UnknownData_WUKE, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedStaticActorDestructionInfo, ObjClass, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReplicatedStaticActorDestructionInfo, 0x0028);
		}

		// struct FMaterialProxySettings
		TEST_METHOD(ScriptStruct__Engine__MaterialProxySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, TextureSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, GutterSpace, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, MetallicConstant, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, RoughnessConstant, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, SpecularConstant, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, OpacityConstant, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, OpacityMaskConstant, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, AmbientOcclusionConstant, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, TextureSizingType, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, MaterialMergeType, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, BlendMode, 0x0026);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, DiffuseTextureSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, NormalTextureSize, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, MetallicTextureSize, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, RoughnessTextureSize, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, SpecularTextureSize, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, EmissiveTextureSize, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, OpacityTextureSize, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, OpacityMaskTextureSize, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, AmbientOcclusionTextureSize, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialProxySettings, 0x0070);
		}

		// struct FLevelSimplificationDetails
		TEST_METHOD(ScriptStruct__Engine__LevelSimplificationDetails)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bCreatePackagePerAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, UnknownData_9JOR, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, DetailsPercentage, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, StaticMeshMaterialSettings, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bOverrideLandscapeExportLOD, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, UnknownData_20FZ, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, LandscapeExportLOD, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, LandscapeMaterialSettings, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bBakeFoliageToLandscape, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bBakeGrassToLandscape, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateMeshNormalMap, 0x00F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateMeshMetallicMap, 0x00F3);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateMeshRoughnessMap, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateMeshSpecularMap, 0x00F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateLandscapeNormalMap, 0x00F6);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateLandscapeMetallicMap, 0x00F7);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateLandscapeRoughnessMap, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateLandscapeSpecularMap, 0x00F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, UnknownData_ZQ2P, 0x00FA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSimplificationDetails, 0x00FC);
		}

		// struct FStreamableTextureInstance
		TEST_METHOD(ScriptStruct__Engine__StreamableTextureInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamableTextureInstance, UnknownData_7M1O, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStreamableTextureInstance, 0x0028);
		}

		// struct FDynamicTextureInstance : public FStreamableTextureInstance
		TEST_METHOD(ScriptStruct__Engine__DynamicTextureInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicTextureInstance, Texture, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicTextureInstance, bAttached, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicTextureInstance, UnknownData_4ETY, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicTextureInstance, OriginalRadius, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDynamicTextureInstance, 0x0038);
		}

		// struct FPrecomputedLightInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__PrecomputedLightInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedLightInstanceData, UnknownData_YEZ1, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedLightInstanceData, Transform, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedLightInstanceData, LightGuid, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedLightInstanceData, PreviewShadowMapChannel, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedLightInstanceData, UnknownData_7537, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrecomputedLightInstanceData, 0x0100);
		}

		// struct FBatchedPoint
		TEST_METHOD(ScriptStruct__Engine__BatchedPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, Color, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, PointSize, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, RemainingLifeTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, DepthPriority, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, UnknownData_I917, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBatchedPoint, 0x0028);
		}

		// struct FBatchedLine
		TEST_METHOD(ScriptStruct__Engine__BatchedLine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, Start, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, End, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, Color, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, Thickness, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, RemainingLifeTime, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, DepthPriority, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, UnknownData_35K4, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBatchedLine, 0x0034);
		}

		// struct FClientReceiveData
		TEST_METHOD(ScriptStruct__Engine__ClientReceiveData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, LocalPC, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, MessageType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, MessageIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, UnknownData_BO13, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, MessageString, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, RelatedPlayerState_2, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, RelatedPlayerState_3, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, OptionalObject, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientReceiveData, 0x0040);
		}

		// struct FParameterGroupData
		TEST_METHOD(ScriptStruct__Engine__ParameterGroupData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterGroupData, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterGroupData, GroupSortPriority, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterGroupData, UnknownData_W5AG, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParameterGroupData, 0x0018);
		}

		// struct FMaterialParameterCollectionInfo
		TEST_METHOD(ScriptStruct__Engine__MaterialParameterCollectionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterCollectionInfo, StateId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterCollectionInfo, ParameterCollection, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialParameterCollectionInfo, 0x0018);
		}

		// struct FMaterialFunctionInfo
		TEST_METHOD(ScriptStruct__Engine__MaterialFunctionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialFunctionInfo, StateId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialFunctionInfo, Function, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialFunctionInfo, 0x0018);
		}

		// struct FMaterialSpriteElement
		TEST_METHOD(ScriptStruct__Engine__MaterialSpriteElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, Material, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, DistanceToOpacityCurve, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, UnknownData_4TDS, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, BaseSizeX, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, BaseSizeY, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, UnknownData_J4WQ, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, DistanceToSizeCurve, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialSpriteElement, 0x0028);
		}

		// struct FExpressionInput
		TEST_METHOD(ScriptStruct__Engine__ExpressionInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionInput, OutputIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionInput, ExpressionName, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExpressionInput, 0x000C);
		}

		// struct FCustomInput
		TEST_METHOD(ScriptStruct__Engine__CustomInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomInput, InputName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomInput, Input, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomInput, UnknownData_MNR3, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomInput, 0x001C);
		}

		// struct FExpressionOutput
		TEST_METHOD(ScriptStruct__Engine__ExpressionOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionOutput, OutputName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExpressionOutput, 0x0008);
		}

		// struct FFunctionExpressionOutput
		TEST_METHOD(ScriptStruct__Engine__FunctionExpressionOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionOutput, ExpressionOutput, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionOutput, ExpressionOutputId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionOutput, Output, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFunctionExpressionOutput, 0x0020);
		}

		// struct FFunctionExpressionInput
		TEST_METHOD(ScriptStruct__Engine__FunctionExpressionInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionInput, ExpressionInput, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionInput, ExpressionInputId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionInput, Input, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionInput, UnknownData_BNSL, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFunctionExpressionInput, 0x0030);
		}

		// struct FScalarParameterAtlasInstanceData
		TEST_METHOD(ScriptStruct__Engine__ScalarParameterAtlasInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterAtlasInstanceData, bIsUsedAsAtlasPosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterAtlasInstanceData, UnknownData_GI9V, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterAtlasInstanceData, Curve, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterAtlasInstanceData, Atlas, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScalarParameterAtlasInstanceData, 0x0058);
		}

		// struct FCollectionParameterBase
		TEST_METHOD(ScriptStruct__Engine__CollectionParameterBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionParameterBase, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionParameterBase, ID, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollectionParameterBase, 0x0018);
		}

		// struct FCollectionVectorParameter : public FCollectionParameterBase
		TEST_METHOD(ScriptStruct__Engine__CollectionVectorParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionVectorParameter, DefaultValue, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollectionVectorParameter, 0x0028);
		}

		// struct FCollectionScalarParameter : public FCollectionParameterBase
		TEST_METHOD(ScriptStruct__Engine__CollectionScalarParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionScalarParameter, DefaultValue, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollectionScalarParameter, 0x001C);
		}

		// struct FInterpGroupActorInfo
		TEST_METHOD(ScriptStruct__Engine__InterpGroupActorInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpGroupActorInfo, ObjectName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpGroupActorInfo, Actors, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpGroupActorInfo, 0x0018);
		}

		// struct FCameraCutInfo
		TEST_METHOD(ScriptStruct__Engine__CameraCutInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCutInfo, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCutInfo, Timestamp, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraCutInfo, 0x0010);
		}

		// struct FMemberReference
		TEST_METHOD(ScriptStruct__Engine__MemberReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, MemberParent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, MemberScope, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, MemberName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, MemberGuid, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, bSelfContext, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, bWasDeprecated, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, UnknownData_YGCB, 0x0032);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMemberReference, 0x0038);
		}

		// struct FMeshInstancingSettings
		TEST_METHOD(ScriptStruct__Engine__MeshInstancingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, ActorClassToUse, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, InstanceReplacementThreshold, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, MeshReplacementMethod, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, bSkipMeshesWithVertexColors, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, bUseHLODVolumes, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, UnknownData_EV9D, 0x000F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshInstancingSettings, 0x0010);
		}

		// struct FMeshReductionSettings
		TEST_METHOD(ScriptStruct__Engine__MeshReductionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, PercentTriangles, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, PercentVertices, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, MaxDeviation, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, PixelError, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, WeldingThreshold, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, HardAngleThreshold, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, BaseLODModel, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, SilhouetteImportance, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, TextureImportance, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, ShadingImportance, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, TerminationCriterion, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, VisibilityAggressiveness, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, VertexColorImportance, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, UnknownData_KPZW, 0x0023);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshReductionSettings, 0x0024);
		}

		// struct FPurchaseInfo
		TEST_METHOD(ScriptStruct__Engine__PurchaseInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseInfo, Identifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseInfo, DisplayName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseInfo, DisplayDescription, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseInfo, DisplayPrice, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPurchaseInfo, 0x0040);
		}

		// struct FNameCurveKey
		TEST_METHOD(ScriptStruct__Engine__NameCurveKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameCurveKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameCurveKey, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNameCurveKey, 0x000C);
		}

		// struct FNameCurve : public FIndexedCurve
		TEST_METHOD(ScriptStruct__Engine__NameCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameCurve, Keys, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNameCurve, 0x0078);
		}

		// struct FMovementProperties
		TEST_METHOD(ScriptStruct__Engine__MovementProperties)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovementProperties, 0x0001);
		}

		// struct FNavAgentProperties : public FMovementProperties
		TEST_METHOD(ScriptStruct__Engine__NavAgentProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, UnknownData_S2DU, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, AgentRadius, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, AgentHeight, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, AgentStepHeight, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, NavWalkingSearchHeightScale, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, UnknownData_1RHJ, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, PreferredNavData, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavAgentProperties, 0x0030);
		}

		// struct FNavDataConfig : public FNavAgentProperties
		TEST_METHOD(ScriptStruct__Engine__NavDataConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, Name, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, Color, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, DefaultQueryExtent, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, NavigationDataClass, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, NavigationDataClassName, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavDataConfig, 0x0068);
		}

		// struct FNavAgentSelector
		TEST_METHOD(ScriptStruct__Engine__NavAgentSelector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentSelector, UnknownData_WARD, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavAgentSelector, 0x0004);
		}

		// struct FNavigationLinkBase
		TEST_METHOD(ScriptStruct__Engine__NavigationLinkBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, LeftProjectHeight, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, MaxFallDownLength, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, Direction, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, UnknownData_JBZM, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, SnapRadius, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, SnapHeight, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, SupportedAgents, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, UnknownData_E83S, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, UnknownData_YPBL, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, AreaClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, UnknownData_0MUO, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationLinkBase, 0x0038);
		}

		// struct FNavigationSegmentLink : public FNavigationLinkBase
		TEST_METHOD(ScriptStruct__Engine__NavigationSegmentLink)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationSegmentLink, LeftStart, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationSegmentLink, LeftEnd, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationSegmentLink, RightStart, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationSegmentLink, RightEnd, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationSegmentLink, 0x0068);
		}

		// struct FNavigationLink : public FNavigationLinkBase
		TEST_METHOD(ScriptStruct__Engine__NavigationLink)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLink, Left, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLink, Right, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationLink, 0x0050);
		}

		// struct FPacketSimulationSettings
		TEST_METHOD(ScriptStruct__Engine__PacketSimulationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLoss, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLossMaxSize, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLossMinSize, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktOrder, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktDup, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLag, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLagVariance, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPacketSimulationSettings, 0x001C);
		}

		// struct FNodeItem
		TEST_METHOD(ScriptStruct__Engine__NodeItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeItem, ParentName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeItem, UnknownData_UYGT, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeItem, Transform, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeItem, 0x0040);
		}

		// struct FParticleBurst
		TEST_METHOD(ScriptStruct__Engine__ParticleBurst)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleBurst, Count, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleBurst, CountLow, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleBurst, Time, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleBurst, 0x000C);
		}

		// struct FParticleRandomSeedInfo
		TEST_METHOD(ScriptStruct__Engine__ParticleRandomSeedInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleRandomSeedInfo, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleRandomSeedInfo, UnknownData_AYJA, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleRandomSeedInfo, RandomSeeds, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleRandomSeedInfo, 0x0020);
		}

		// struct FParticleCurvePair
		TEST_METHOD(ScriptStruct__Engine__ParticleCurvePair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleCurvePair, CurveName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleCurvePair, CurveObject, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleCurvePair, 0x0018);
		}

		// struct FBeamModifierOptions
		TEST_METHOD(ScriptStruct__Engine__BeamModifierOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBeamModifierOptions, UnknownData_ZIPC, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBeamModifierOptions, 0x0004);
		}

		// struct FParticleEvent_GenerateInfo
		TEST_METHOD(ScriptStruct__Engine__ParticleEvent_GenerateInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, UnknownData_YI1B, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, Frequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, ParticleFrequency, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, UnknownData_GBHX, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, CustomName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, ParticleModuleEventsToSendToGame, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleEvent_GenerateInfo, 0x0028);
		}

		// struct FLocationBoneSocketInfo
		TEST_METHOD(ScriptStruct__Engine__LocationBoneSocketInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationBoneSocketInfo, BoneSocketName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationBoneSocketInfo, Offset, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocationBoneSocketInfo, 0x0014);
		}

		// struct FOrbitOptions
		TEST_METHOD(ScriptStruct__Engine__OrbitOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrbitOptions, UnknownData_JYL6, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOrbitOptions, 0x0004);
		}

		// struct FEmitterDynamicParameter
		TEST_METHOD(ScriptStruct__Engine__EmitterDynamicParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, ParamName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, UnknownData_AXLN, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, ValueMethod, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, UnknownData_JZ5P, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, UnknownData_DQKL, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, ParamValue, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEmitterDynamicParameter, 0x0050);
		}

		// struct FBeamTargetData
		TEST_METHOD(ScriptStruct__Engine__BeamTargetData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBeamTargetData, TargetName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBeamTargetData, TargetPercentage, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBeamTargetData, 0x000C);
		}

		// struct FGPUSpriteResourceData
		TEST_METHOD(ScriptStruct__Engine__GPUSpriteResourceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, QuantizedColorSamples, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, QuantizedMiscSamples, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, QuantizedSimulationAttrSamples, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ColorScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ColorBias, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, MiscScale, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, MiscBias, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, SimulationAttrCurveScale, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, SimulationAttrCurveBias, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, SubImageSize, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, SizeBySpeed, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ConstantAcceleration, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitOffsetBase, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitOffsetRange, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitFrequencyBase, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitFrequencyRange, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitPhaseBase, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitPhaseRange, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, GlobalVectorFieldScale, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, GlobalVectorFieldTightness, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, PerParticleVectorFieldScale, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, PerParticleVectorFieldBias, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, DragCoefficientScale, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, DragCoefficientBias, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ResilienceScale, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ResilienceBias, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionRadiusScale, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionRadiusBias, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionTimeBias, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionRandomSpread, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionRandomDistribution, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OneMinusFriction, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, RotationRateScale, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CameraMotionBlurAmount, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ScreenAlignment, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, LockAxisFlag, 0x0145);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, UnknownData_KGIW, 0x0146);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, PivotOffset, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, UnknownData_IXDF, 0x0151);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, MinFacingCameraBlendDistance, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, MaxFacingCameraBlendDistance, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, UnknownData_TKZF, 0x015C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGPUSpriteResourceData, 0x0160);
		}

		// struct FGPUSpriteLocalVectorFieldInfo
		TEST_METHOD(ScriptStruct__Engine__GPUSpriteLocalVectorFieldInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, Field, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, UnknownData_FRYK, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, Transform, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, MinInitialRotation, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, MaxInitialRotation, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, RotationRate, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, Intensity, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, Tightness, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, UnknownData_BRCK, 0x006D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGPUSpriteLocalVectorFieldInfo, 0x0070);
		}

		// struct FFloatDistribution
		TEST_METHOD(ScriptStruct__Engine__FloatDistribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatDistribution, Table, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatDistribution, 0x0028);
		}

		// struct FGPUSpriteEmitterInfo
		TEST_METHOD(ScriptStruct__Engine__GPUSpriteEmitterInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, RequiredModule, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, SpawnModule, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, SpawnPerUnitModule, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, SpawnModules, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_WEGD, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, LocalVectorField, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, VectorFieldScale, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DragCoefficient, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, PointAttractorStrength, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, Resilience, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, ConstantAcceleration, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, PointAttractorPosition, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, PointAttractorRadiusSq, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, OrbitOffsetBase, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, OrbitOffsetRange, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, InvMaxSize, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, InvRotationRateScale, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, MaxLifetime, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, MaxParticleCount, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, ScreenAlignment, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, LockAxisFlag, 0x0189);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_ZQXD, 0x018A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_08CB, 0x018D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, CollisionMode, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_AI64, 0x0191);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_337S, 0x0195);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, MinFacingCameraBlendDistance, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, MaxFacingCameraBlendDistance, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DynamicColor, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DynamicAlpha, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DynamicColorScale, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DynamicAlphaScale, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_28SY, 0x02B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGPUSpriteEmitterInfo, 0x02C0);
		}

		// struct FNamedEmitterMaterial
		TEST_METHOD(ScriptStruct__Engine__NamedEmitterMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedEmitterMaterial, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedEmitterMaterial, Material, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedEmitterMaterial, 0x0010);
		}

		// struct FLODSoloTrack
		TEST_METHOD(ScriptStruct__Engine__LODSoloTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLODSoloTrack, SoloEnableSetting, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLODSoloTrack, 0x0010);
		}

		// struct FParticleSystemLOD
		TEST_METHOD(ScriptStruct__Engine__ParticleSystemLOD)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSystemLOD, UnknownData_13YG, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleSystemLOD, 0x0001);
		}

		// struct FParticleSysParam
		TEST_METHOD(ScriptStruct__Engine__ParticleSysParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, ParamType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, UnknownData_XCFG, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Scalar, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Scalar_Low, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Vector, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Vector_Low, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Color, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Actor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Material, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, UnknownData_9E72, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleSysParam, 0x0080);
		}

		// struct FTickFunction
		TEST_METHOD(ScriptStruct__Engine__TickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, UnknownData_MZNB, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, TickGroup, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, EndTickGroup, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, UnknownData_WNVH, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, UnknownData_MWRO, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, TickInterval, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, UnknownData_YUXE, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTickFunction, 0x0050);
		}

		// struct FParticleSystemWorldManagerTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__ParticleSystemWorldManagerTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSystemWorldManagerTickFunction, UnknownData_FID3, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleSystemWorldManagerTickFunction, 0x0058);
		}

		// struct FParticleSystemReplayFrame
		TEST_METHOD(ScriptStruct__Engine__ParticleSystemReplayFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSystemReplayFrame, UnknownData_N6S4, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleSystemReplayFrame, 0x0010);
		}

		// struct FParticleEmitterReplayFrame
		TEST_METHOD(ScriptStruct__Engine__ParticleEmitterReplayFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEmitterReplayFrame, UnknownData_79LL, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleEmitterReplayFrame, 0x0010);
		}

		// struct FPhysicalAnimationData
		TEST_METHOD(ScriptStruct__Engine__PhysicalAnimationData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, BodyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, UnknownData_VDD6, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, OrientationStrength, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, AngularVelocityStrength, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, PositionStrength, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, VelocityStrength, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, MaxLinearForce, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, MaxAngularForce, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicalAnimationData, 0x0024);
		}

		// struct FTireFrictionScalePair
		TEST_METHOD(ScriptStruct__Engine__TireFrictionScalePair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTireFrictionScalePair, TireType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTireFrictionScalePair, FrictionScale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTireFrictionScalePair, UnknownData_6VH6, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTireFrictionScalePair, 0x0010);
		}

		// struct FPhysicalAnimationProfile
		TEST_METHOD(ScriptStruct__Engine__PhysicalAnimationProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationProfile, ProfileName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationProfile, PhysicalAnimationData, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicalAnimationProfile, 0x002C);
		}

		// struct FPhysicsConstraintProfileHandle
		TEST_METHOD(ScriptStruct__Engine__PhysicsConstraintProfileHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsConstraintProfileHandle, ProfileProperties, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsConstraintProfileHandle, ProfileName, 0x0104);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicsConstraintProfileHandle, 0x010C);
		}

		// struct FPhysicalSurfaceName
		TEST_METHOD(ScriptStruct__Engine__PhysicalSurfaceName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalSurfaceName, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalSurfaceName, UnknownData_UOCI, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalSurfaceName, Name, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicalSurfaceName, 0x000C);
		}

		// struct FWeightedBlendable
		TEST_METHOD(ScriptStruct__Engine__WeightedBlendable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightedBlendable, Weight, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightedBlendable, UnknownData_8B8T, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightedBlendable, Object, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeightedBlendable, 0x0010);
		}

		// struct FWeightedBlendables
		TEST_METHOD(ScriptStruct__Engine__WeightedBlendables)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightedBlendables, Array, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeightedBlendables, 0x0010);
		}

		// struct FPostProcessSettings
		TEST_METHOD(ScriptStruct__Engine__PostProcessSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_YV0Q, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_D8GA, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_HWCT, 0x001B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_OMFL, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomMethod, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureMethod, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldMethod, 0x0023);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, WhiteTemp, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, WhiteTint, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_AMOZ, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorSaturation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorContrast, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGamma, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGain, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorOffset, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorSaturationShadows, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorContrastShadows, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGammaShadows, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGainShadows, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorOffsetShadows, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorSaturationMidtones, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorContrastMidtones, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGammaMidtones, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGainMidtones, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorOffsetMidtones, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorSaturationHighlights, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorContrastHighlights, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGammaHighlights, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGainHighlights, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorOffsetHighlights, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorCorrectionHighlightsMin, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorCorrectionShadowsMax, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BlueCorrection, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ExpandGamut, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmSlope, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmToe, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmShoulder, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmBlackClip, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmWhiteClip, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmWhitePoint, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmShadowTint, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmShadowTintBlend, 0x01B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmShadowTintAmount, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmSaturation, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmChannelMixerRed, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmChannelMixerGreen, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmChannelMixerBlue, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmContrast, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmToeAmount, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmHealAmount, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmDynamicRange, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, SceneColorTint, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, SceneFringeIntensity, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ChromaticAberrationStartOffset, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomIntensity, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomThreshold, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomSizeScale, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom1Size, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom2Size, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom3Size, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom4Size, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom5Size, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom6Size, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom1Tint, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom2Tint, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom3Tint, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom4Tint, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom5Tint, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom6Tint, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionSize, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionTexture, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionCenterUV, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionPreFilterMin, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionPreFilterMax, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionPreFilterMult, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionBufferScale, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomDirtMask, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomDirtMaskIntensity, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomDirtMaskTint, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientCubemapTint, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientCubemapIntensity, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientCubemap, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, CameraShutterSpeed, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, CameraISO, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFstop, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldMinFstop, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldBladeCount, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureBias, 0x030C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureBiasCurve, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureLowPercent, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureHighPercent, 0x031C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureMinBrightness, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureMaxBrightness, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureSpeedUp, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureSpeedDown, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, HistogramLogMin, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, HistogramLogMax, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureCalibrationConstant, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareIntensity, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareTint, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareBokehSize, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareThreshold, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareBokehShape, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareTints, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, VignetteIntensity, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, GrainJitter, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, GrainIntensity, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionIntensity, 0x03EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionStaticFraction, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionRadius, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_V6LE, 0x03F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionFadeDistance, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionFadeRadius, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionDistance, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionPower, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionBias, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionQuality, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionMipBlend, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionMipScale, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionMipThreshold, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingAOSamplesPerPixel, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, IndirectLightingColor, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, IndirectLightingIntensity, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_SZX0, 0x0439);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingGIMaxBounces, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingGISamplesPerPixel, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGradingIntensity, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGradingLUT, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldSensorWidth, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFocalDistance, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldDepthBlurAmount, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldDepthBlurRadius, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFocalRegion, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldNearTransitionRegion, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFarTransitionRegion, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldScale, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldMaxBokehSize, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldNearBlurSize, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFarBlurSize, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldOcclusion, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldBokehShape, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldColorThreshold, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldSizeThreshold, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldSkyFocusDistance, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldVignetteSize, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, MotionBlurAmount, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, MotionBlurMax, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, MotionBlurPerObjectSize, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVIntensity, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVVplInjectionBias, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSize, 0x04AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSecondaryOcclusionIntensity, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSecondaryBounceIntensity, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVGeometryVolumeBias, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVEmissiveInjectionIntensity, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVDirectionalOcclusionIntensity, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVDirectionalOcclusionRadius, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVDiffuseOcclusionExponent, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSpecularOcclusionExponent, 0x04CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVDiffuseOcclusionIntensity, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSpecularOcclusionIntensity, 0x04D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ReflectionsType, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_ZE2R, 0x04D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ScreenSpaceReflectionIntensity, 0x04DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ScreenSpaceReflectionQuality, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ScreenSpaceReflectionMaxRoughness, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingReflectionsMaxRoughness, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingReflectionsMaxBounces, 0x04EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingReflectionsSamplesPerPixel, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingReflectionsShadows, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, TranslucencyType, 0x04F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_9N7C, 0x04F6);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingTranslucencyMaxRoughness, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingTranslucencyRefractionRays, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingTranslucencySamplesPerPixel, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingTranslucencyShadows, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_ALTM, 0x0506);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, PathTracingMaxBounces, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, PathTracingSamplesPerPixel, 0x050C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVFadeRange, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVDirectionalOcclusionFadeRange, 0x0514);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ScreenPercentage, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_1BTQ, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, WeightedBlendables, 0x0520);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPostProcessSettings, 0x0530);
		}

		// struct FMinimalViewInfo
		TEST_METHOD(ScriptStruct__Engine__MinimalViewInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, Rotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, FOV, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, DesiredFOV, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, OrthoWidth, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, OrthoNearClipPlane, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, OrthoFarClipPlane, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, AspectRatio, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, UnknownData_QPVW, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, ProjectionMode, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, UnknownData_6WSA, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, PostProcessBlendWeight, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, UnknownData_CDK1, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, PostProcessSettings, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, OffCenterProjectionOffset, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, UnknownData_JW8N, 0x0578);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMinimalViewInfo, 0x0580);
		}

		// struct FTViewTarget
		TEST_METHOD(ScriptStruct__Engine__TViewTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, Target, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, UnknownData_L2DM, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, POV, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, PlayerState, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, UnknownData_POMT, 0x0598);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTViewTarget, 0x05A0);
		}

		// struct FCameraCacheEntry
		TEST_METHOD(ScriptStruct__Engine__CameraCacheEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCacheEntry, Timestamp, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCacheEntry, UnknownData_01JI, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCacheEntry, POV, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraCacheEntry, 0x0590);
		}

		// struct FKeyBind
		TEST_METHOD(ScriptStruct__Engine__KeyBind)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyBind, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyBind, Command, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyBind, UnknownData_2YVF, 0x002A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKeyBind, 0x0030);
		}

		// struct FPlayerMuteList
		TEST_METHOD(ScriptStruct__Engine__PlayerMuteList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerMuteList, UnknownData_UZN7, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerMuteList, bHasVoiceHandshakeCompleted, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerMuteList, UnknownData_6HCM, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerMuteList, VoiceChannelIdx, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerMuteList, 0x0038);
		}

		// struct FPoseData
		TEST_METHOD(ScriptStruct__Engine__PoseData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseData, LocalSpacePose, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseData, TrackToBufferIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseData, CurveData, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseData, 0x0070);
		}

		// struct FPoseDataContainer
		TEST_METHOD(ScriptStruct__Engine__PoseDataContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDataContainer, PoseNames, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDataContainer, Tracks, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDataContainer, TrackMap, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDataContainer, Poses, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDataContainer, Curves, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseDataContainer, 0x0090);
		}

		// struct FPreviewAttachedObjectPair
		TEST_METHOD(ScriptStruct__Engine__PreviewAttachedObjectPair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewAttachedObjectPair, AttachedObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewAttachedObjectPair, Object, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewAttachedObjectPair, AttachedTo, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPreviewAttachedObjectPair, 0x0038);
		}

		// struct FPreviewAssetAttachContainer
		TEST_METHOD(ScriptStruct__Engine__PreviewAssetAttachContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewAssetAttachContainer, AttachedObjects, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPreviewAssetAttachContainer, 0x0010);
		}

		// struct FPreviewMeshCollectionEntry
		TEST_METHOD(ScriptStruct__Engine__PreviewMeshCollectionEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewMeshCollectionEntry, SkeletalMesh, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPreviewMeshCollectionEntry, 0x0028);
		}

		// struct FPrimitiveComponentInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__PrimitiveComponentInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveComponentInstanceData, UnknownData_IY4E, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveComponentInstanceData, ComponentTransform, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveComponentInstanceData, VisibilityId, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveComponentInstanceData, UnknownData_UW76, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveComponentInstanceData, LODParent, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimitiveComponentInstanceData, 0x00F0);
		}

		// struct FSpriteCategoryInfo
		TEST_METHOD(ScriptStruct__Engine__SpriteCategoryInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteCategoryInfo, Category, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteCategoryInfo, DisplayName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteCategoryInfo, Description, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpriteCategoryInfo, 0x0038);
		}

		// struct FCompressedRichCurve
		TEST_METHOD(ScriptStruct__Engine__CompressedRichCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedRichCurve, UnknownData_HE3B, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompressedRichCurve, 0x0018);
		}

		// struct FRigTransformConstraint
		TEST_METHOD(ScriptStruct__Engine__RigTransformConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigTransformConstraint, TranformType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigTransformConstraint, UnknownData_DNDE, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigTransformConstraint, ParentSpace, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigTransformConstraint, Weight, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigTransformConstraint, 0x0010);
		}

		// struct FTransformBaseConstraint
		TEST_METHOD(ScriptStruct__Engine__TransformBaseConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformBaseConstraint, TransformConstraints, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformBaseConstraint, 0x0010);
		}

		// struct FTransformBase
		TEST_METHOD(ScriptStruct__Engine__TransformBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformBase, Node, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformBase, Constraints, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformBase, 0x0028);
		}

		// struct FNode
		TEST_METHOD(ScriptStruct__Engine__Node)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, ParentName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, Transform, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, DisplayName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, bAdvanced, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, UnknownData_0WB6, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNode, 0x0060);
		}

		// struct FRootMotionSourceStatus
		TEST_METHOD(ScriptStruct__Engine__RootMotionSourceStatus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceStatus, Flags, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSourceStatus, 0x0001);
		}

		// struct FRootMotionFinishVelocitySettings
		TEST_METHOD(ScriptStruct__Engine__RootMotionFinishVelocitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionFinishVelocitySettings, Mode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionFinishVelocitySettings, UnknownData_JQ25, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionFinishVelocitySettings, SetVelocity, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionFinishVelocitySettings, ClampVelocity, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionFinishVelocitySettings, 0x0014);
		}

		// struct FRootMotionSourceSettings
		TEST_METHOD(ScriptStruct__Engine__RootMotionSourceSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceSettings, Flags, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSourceSettings, 0x0001);
		}

		// struct FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, UnknownData_3YXT, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, Priority, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, LocalID, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, AccumulateMode, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, UnknownData_VJYX, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, InstanceName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, startTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, CurrentTime, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, PreviousTime, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, Duration, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, Status, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, Settings, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, bInLocalSpace, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, UnknownData_KNKM, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, RootMotionParams, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, FinishVelocityParams, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, UnknownData_GG79, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource, 0x0098);
		}

		// struct FRootMotionSource_JumpForce : public FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource_JumpForce)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, Rotation, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, Distance, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, Height, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, bDisableTimeout, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, UnknownData_OHXZ, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, PathOffsetCurve, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, TimeMappingCurve, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, UnknownData_GOGV, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource_JumpForce, 0x00D0);
		}

		// struct FRootMotionSource_MoveToDynamicForce : public FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource_MoveToDynamicForce)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, StartLocation, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, InitialTargetLocation, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, TargetLocation, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, bRestrictSpeedToExpected, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, UnknownData_CXCS, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, PathOffsetCurve, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, TimeMappingCurve, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource_MoveToDynamicForce, 0x00D0);
		}

		// struct FRootMotionSource_MoveToForce : public FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource_MoveToForce)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToForce, StartLocation, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToForce, TargetLocation, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToForce, bRestrictSpeedToExpected, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToForce, UnknownData_TYEN, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToForce, PathOffsetCurve, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource_MoveToForce, 0x00C0);
		}

		// struct FRootMotionSource_RadialForce : public FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource_RadialForce)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, Location, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, UnknownData_T3KR, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, LocationActor, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, Radius, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, Strength, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, bIsPush, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, bNoZForce, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, UnknownData_VQEP, 0x00BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, StrengthDistanceFalloff, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, StrengthOverTime, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, bUseFixedWorldDirection, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, UnknownData_TPVQ, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, FixedWorldDirection, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource_RadialForce, 0x00E0);
		}

		// struct FRootMotionSource_ConstantForce : public FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource_ConstantForce)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_ConstantForce, Force, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_ConstantForce, UnknownData_NIGN, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_ConstantForce, StrengthOverTime, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource_ConstantForce, 0x00B0);
		}

		// struct FCameraExposureSettings
		TEST_METHOD(ScriptStruct__Engine__CameraExposureSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, Method, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, UnknownData_ZJO1, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, LowPercent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, HighPercent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, MinBrightness, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, MaxBrightness, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, SpeedUp, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, SpeedDown, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, Bias, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, BiasCurve, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, HistogramLogMin, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, HistogramLogMax, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, CalibrationConstant, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, UnknownData_VO5X, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraExposureSettings, 0x0038);
		}

		// struct FGaussianSumBloomSettings
		TEST_METHOD(ScriptStruct__Engine__GaussianSumBloomSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Intensity, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, threshold, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, SizeScale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter1Size, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter2Size, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter3Size, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter4Size, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter5Size, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter6Size, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter1Tint, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter2Tint, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter3Tint, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter4Tint, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter5Tint, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter6Tint, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGaussianSumBloomSettings, 0x0084);
		}

		// struct FConvolutionBloomSettings
		TEST_METHOD(ScriptStruct__Engine__ConvolutionBloomSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, Texture, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, Size, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, CenterUV, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, PreFilterMin, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, PreFilterMax, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, PreFilterMult, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, BufferScale, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, UnknownData_CEB8, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConvolutionBloomSettings, 0x0028);
		}

		// struct FLensBloomSettings
		TEST_METHOD(ScriptStruct__Engine__LensBloomSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensBloomSettings, GaussianSum, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensBloomSettings, UnknownData_D6NS, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensBloomSettings, Convolution, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensBloomSettings, Method, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensBloomSettings, UnknownData_BW9L, 0x00B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLensBloomSettings, 0x00B8);
		}

		// struct FLensImperfectionSettings
		TEST_METHOD(ScriptStruct__Engine__LensImperfectionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensImperfectionSettings, DirtMask, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensImperfectionSettings, DirtMaskIntensity, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensImperfectionSettings, DirtMaskTint, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensImperfectionSettings, UnknownData_NG2I, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLensImperfectionSettings, 0x0020);
		}

		// struct FLensSettings
		TEST_METHOD(ScriptStruct__Engine__LensSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensSettings, Bloom, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensSettings, Imperfections, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensSettings, ChromaticAberration, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensSettings, UnknownData_PVSS, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLensSettings, 0x00E0);
		}

		// struct FFilmStockSettings
		TEST_METHOD(ScriptStruct__Engine__FilmStockSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilmStockSettings, Slope, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilmStockSettings, Toe, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilmStockSettings, Shoulder, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilmStockSettings, BlackClip, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilmStockSettings, WhiteClip, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFilmStockSettings, 0x0014);
		}

		// struct FColorGradePerRangeSettings
		TEST_METHOD(ScriptStruct__Engine__ColorGradePerRangeSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradePerRangeSettings, Saturation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradePerRangeSettings, Contrast, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradePerRangeSettings, Gamma, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradePerRangeSettings, Gain, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradePerRangeSettings, Offset, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColorGradePerRangeSettings, 0x0050);
		}

		// struct FColorGradingSettings
		TEST_METHOD(ScriptStruct__Engine__ColorGradingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, Global, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, Shadows, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, Midtones, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, Highlights, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, ShadowsMax, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, HighlightsMin, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, UnknownData_8Q99, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColorGradingSettings, 0x0150);
		}

		// struct FEngineShowFlagsSetting
		TEST_METHOD(ScriptStruct__Engine__EngineShowFlagsSetting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineShowFlagsSetting, ShowFlagName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineShowFlagsSetting, Enabled, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineShowFlagsSetting, UnknownData_T35V, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineShowFlagsSetting, 0x0018);
		}

		// struct FSimpleCurveKey
		TEST_METHOD(ScriptStruct__Engine__SimpleCurveKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleCurveKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleCurveKey, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSimpleCurveKey, 0x0008);
		}

		// struct FSimpleCurve : public FRealCurve
		TEST_METHOD(ScriptStruct__Engine__SimpleCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleCurve, InterpMode, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleCurve, UnknownData_8HQ3, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleCurve, Keys, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSimpleCurve, 0x0088);
		}

		// struct FClothPhysicsProperties_Legacy
		TEST_METHOD(ScriptStruct__Engine__ClothPhysicsProperties_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, VerticalResistance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, HorizontalResistance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, BendResistance, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, ShearResistance, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, Friction, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, Damping, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, TetherStiffness, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, TetherLimit, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, Drag, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, StiffnessFrequency, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, GravityScale, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, MassScale, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, InertiaBlend, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, SelfCollisionThickness, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, SelfCollisionSquashScale, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, SelfCollisionStiffness, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, SolverFrequency, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, FiberCompression, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, FiberExpansion, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, FiberResistance, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothPhysicsProperties_Legacy, 0x0050);
		}

		// struct FClothingAssetData_Legacy
		TEST_METHOD(ScriptStruct__Engine__ClothingAssetData_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, AssetName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, ApexFileName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, bClothPropertiesChanged, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, UnknownData_HW4K, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, PhysicsProperties, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, UnknownData_RZGG, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothingAssetData_Legacy, 0x0078);
		}

		// struct FSkeletalMeshClothBuildParams
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshClothBuildParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, TargetAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, TargetLod, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, bRemapParameters, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, UnknownData_VGUI, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, AssetName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, LODIndex, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, SourceSection, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, bRemoveFromMesh, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, UnknownData_TZK9, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, PhysicsAsset, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshClothBuildParams, 0x0058);
		}

		// struct FBoneMirrorExport
		TEST_METHOD(ScriptStruct__Engine__BoneMirrorExport)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorExport, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorExport, SourceBoneName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorExport, BoneFlipAxis, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorExport, UnknownData_ZU3B, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneMirrorExport, 0x0014);
		}

		// struct FSkeletalMeshComponentClothTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshComponentClothTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshComponentClothTickFunction, UnknownData_5F3U, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshComponentClothTickFunction, 0x0058);
		}

		// struct FSkeletalMeshComponentEndPhysicsTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshComponentEndPhysicsTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshComponentEndPhysicsTickFunction, UnknownData_48GN, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshComponentEndPhysicsTickFunction, 0x0058);
		}

		// struct FBoneFilter
		TEST_METHOD(ScriptStruct__Engine__BoneFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneFilter, bExcludeSelf, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneFilter, UnknownData_SMXQ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneFilter, BoneName, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneFilter, 0x000C);
		}

		// struct FPerPlatformFloat
		TEST_METHOD(ScriptStruct__Engine__PerPlatformFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerPlatformFloat, Default, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerPlatformFloat, 0x0004);
		}

		// struct FSkeletalMeshOptimizationSettings
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshOptimizationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, TerminationCriterion, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, UnknownData_5EZH, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, NumOfTrianglesPercentage, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, NumOfVertPercentage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, MaxNumOfTriangles, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, MaxNumOfVerts, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, MaxDeviationPercentage, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, ReductionMethod, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, SilhouetteImportance, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, TextureImportance, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, ShadingImportance, 0x001B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, SkinningImportance, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, UnknownData_PZ4U, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, WeldingThreshold, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, NormalsThreshold, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, MaxBonesPerVertex, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, UnknownData_UIJJ, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, VolumeImportance, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, UnknownData_4NX8, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, BaseLOD, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshOptimizationSettings, 0x003C);
		}

		// struct FSkeletalMeshLODGroupSettings
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshLODGroupSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, ScreenSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, LODHysteresis, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, BoneFilterActionOption, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, UnknownData_N5BP, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, BoneList, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, BonesToPrioritize, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, WeightOfPrioritization, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, UnknownData_3BXD, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, BakePose, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, ReductionSettings, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, UnknownData_91IR, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshLODGroupSettings, 0x0080);
		}

		// struct FNameMapping
		TEST_METHOD(ScriptStruct__Engine__NameMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameMapping, NodeName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameMapping, BoneName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNameMapping, 0x0010);
		}

		// struct FRigConfiguration
		TEST_METHOD(ScriptStruct__Engine__RigConfiguration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigConfiguration, Rig, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigConfiguration, BoneMappingTable, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigConfiguration, 0x0018);
		}

		// struct FBoneReductionSetting
		TEST_METHOD(ScriptStruct__Engine__BoneReductionSetting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneReductionSetting, BonesToRemove, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneReductionSetting, 0x0010);
		}

		// struct FReferencePose
		TEST_METHOD(ScriptStruct__Engine__ReferencePose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReferencePose, PoseName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReferencePose, ReferencePose, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReferencePose, 0x0018);
		}

		// struct FSkeletonToMeshLinkup
		TEST_METHOD(ScriptStruct__Engine__SkeletonToMeshLinkup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletonToMeshLinkup, SkeletonToMeshTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletonToMeshLinkup, MeshToSkeletonTable, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletonToMeshLinkup, 0x0020);
		}

		// struct FPrecomputedSkyLightInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__PrecomputedSkyLightInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedSkyLightInstanceData, LightGuid, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedSkyLightInstanceData, AverageBrightness, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedSkyLightInstanceData, UnknownData_7B0E, 0x00BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrecomputedSkyLightInstanceData, 0x0160);
		}

		// struct FSmartNameMapping
		TEST_METHOD(ScriptStruct__Engine__SmartNameMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSmartNameMapping, UnknownData_2UX1, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSmartNameMapping, 0x0060);
		}

		// struct FCurveMetaData
		TEST_METHOD(ScriptStruct__Engine__CurveMetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveMetaData, UnknownData_F3IH, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveMetaData, 0x0020);
		}

		// struct FPassiveSoundMixModifier
		TEST_METHOD(ScriptStruct__Engine__PassiveSoundMixModifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassiveSoundMixModifier, SoundMix, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassiveSoundMixModifier, MinVolumeThreshold, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassiveSoundMixModifier, MaxVolumeThreshold, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPassiveSoundMixModifier, 0x0010);
		}

		// struct FSoundClassProperties
		TEST_METHOD(ScriptStruct__Engine__SoundClassProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, Volume, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, Pitch, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, StereoBleed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, LFEBleed, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, VoiceCenterChannelVolume, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, RadioFilterVolume, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, RadioFilterVolumeThreshold, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, UnknownData_62CX, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, Default2DReverbSendAmount, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, UnknownData_R2VN, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, OutputTarget, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, UnknownData_5XOD, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundClassProperties, 0x002C);
		}

		// struct FSoundClassEditorData
		TEST_METHOD(ScriptStruct__Engine__SoundClassEditorData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassEditorData, UnknownData_L9B6, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundClassEditorData, 0x0008);
		}

		// struct FSoundNodeEditorData
		TEST_METHOD(ScriptStruct__Engine__SoundNodeEditorData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundNodeEditorData, UnknownData_JG2E, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundNodeEditorData, 0x0008);
		}

		// struct FSourceEffectChainEntry
		TEST_METHOD(ScriptStruct__Engine__SourceEffectChainEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChainEntry, Preset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChainEntry, UnknownData_860Z, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectChainEntry, 0x0010);
		}

		// struct FSoundGroup
		TEST_METHOD(ScriptStruct__Engine__SoundGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, SoundGroup, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, UnknownData_D2F9, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, DisplayName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, UnknownData_CN9S, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, DecompressedDuration, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundGroup, 0x0020);
		}

		// struct FSoundClassAdjuster
		TEST_METHOD(ScriptStruct__Engine__SoundClassAdjuster)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, SoundClassObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, VolumeAdjuster, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, PitchAdjuster, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, UnknownData_LABD, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, VoiceCenterChannelVolumeAdjuster, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundClassAdjuster, 0x0018);
		}

		// struct FAudioEQEffect
		TEST_METHOD(ScriptStruct__Engine__AudioEQEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, UnknownData_GNFW, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, FrequencyCenter0, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Gain0, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Bandwidth0, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, FrequencyCenter1, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Gain1, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Bandwidth1, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, FrequencyCenter2, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Gain2, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Bandwidth2, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, FrequencyCenter3, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Gain3, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Bandwidth3, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioEQEffect, 0x0038);
		}

		// struct FDistanceDatum
		TEST_METHOD(ScriptStruct__Engine__DistanceDatum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, FadeInDistanceStart, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, FadeInDistanceEnd, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, FadeOutDistanceStart, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, FadeOutDistanceEnd, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, Volume, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDistanceDatum, 0x0014);
		}

		// struct FModulatorContinuousParams
		TEST_METHOD(ScriptStruct__Engine__ModulatorContinuousParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, Default, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, MinInput, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, MaxInput, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, MinOutput, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, MaxOutput, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, ParamMode, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, UnknownData_4A3I, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FModulatorContinuousParams, 0x0020);
		}

		// struct FStreamedAudioPlatformData
		TEST_METHOD(ScriptStruct__Engine__StreamedAudioPlatformData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamedAudioPlatformData, UnknownData_S36I, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStreamedAudioPlatformData, 0x0020);
		}

		// struct FSplineCurves
		TEST_METHOD(ScriptStruct__Engine__SplineCurves)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, Rotation, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, Scale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, ReparamTable, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplineCurves, 0x0060);
		}

		// struct FSplineInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__SplineInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineInstanceData, bSplineHasBeenEdited, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineInstanceData, UnknownData_9NVF, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineInstanceData, SplineCurves, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineInstanceData, SplineCurvesPreUCS, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplineInstanceData, 0x0170);
		}

		// struct FSplineMeshInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__SplineMeshInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshInstanceData, StartPos, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshInstanceData, EndPos, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshInstanceData, StartTangent, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshInstanceData, EndTangent, 0x00CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplineMeshInstanceData, 0x00D8);
		}

		// struct FSplineMeshParams
		TEST_METHOD(ScriptStruct__Engine__SplineMeshParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartPos, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartTangent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartScale, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartRoll, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartOffset, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndPos, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndTangent, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndScale, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndRoll, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndOffset, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplineMeshParams, 0x0058);
		}

		// struct FMaterialRemapIndex
		TEST_METHOD(ScriptStruct__Engine__MaterialRemapIndex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialRemapIndex, ImportVersionKey, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialRemapIndex, UnknownData_JB0T, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialRemapIndex, MaterialRemap, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialRemapIndex, 0x0018);
		}

		// struct FMeshUVChannelInfo
		TEST_METHOD(ScriptStruct__Engine__MeshUVChannelInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshUVChannelInfo, bInitialized, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshUVChannelInfo, bOverrideDensities, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshUVChannelInfo, UnknownData_UHFQ, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshUVChannelInfo, LocalUVDensities, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshUVChannelInfo, 0x0014);
		}

		// struct FStaticMaterial
		TEST_METHOD(ScriptStruct__Engine__StaticMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterial, MaterialInterface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterial, MaterialSlotName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterial, ImportedMaterialSlotName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterial, UVChannelData, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterial, UnknownData_BEBI, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMaterial, 0x0030);
		}

		// struct FAssetEditorOrbitCameraPosition
		TEST_METHOD(ScriptStruct__Engine__AssetEditorOrbitCameraPosition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, bIsSet, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, UnknownData_ZJTD, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, CamOrbitPoint, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, CamOrbitZoom, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, CamOrbitRotation, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetEditorOrbitCameraPosition, 0x0028);
		}

		// struct FMeshSectionInfo
		TEST_METHOD(ScriptStruct__Engine__MeshSectionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfo, MaterialIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfo, bEnableCollision, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfo, bCastShadow, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfo, UnknownData_LPRQ, 0x0006);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshSectionInfo, 0x0008);
		}

		// struct FMeshSectionInfoMap
		TEST_METHOD(ScriptStruct__Engine__MeshSectionInfoMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfoMap, Map, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshSectionInfoMap, 0x0050);
		}

		// struct FStaticMeshSourceModel
		TEST_METHOD(ScriptStruct__Engine__StaticMeshSourceModel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, BuildSettings, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, ReductionSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, LODDistance, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, ScreenSize, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, UnknownData_YXCI, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, SourceImportFilename, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMeshSourceModel, 0x0070);
		}

		// struct FStaticMeshOptimizationSettings
		TEST_METHOD(ScriptStruct__Engine__StaticMeshOptimizationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, ReductionMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, UnknownData_KZ30, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, NumOfTrianglesPercentage, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, MaxDeviationPercentage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, WeldingThreshold, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, bRecalcNormals, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, UnknownData_ULJ9, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, NormalsThreshold, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, SilhouetteImportance, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, TextureImportance, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, ShadingImportance, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, UnknownData_ZDHD, 0x001B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMeshOptimizationSettings, 0x001C);
		}

		// struct FPaintedVertex
		TEST_METHOD(ScriptStruct__Engine__PaintedVertex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintedVertex, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintedVertex, UnknownData_15LM, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintedVertex, Normal, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintedVertex, Color, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintedVertex, UnknownData_FJNF, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaintedVertex, 0x0030);
		}

		// struct FStaticMeshVertexColorLODData
		TEST_METHOD(ScriptStruct__Engine__StaticMeshVertexColorLODData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshVertexColorLODData, PaintedVertices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshVertexColorLODData, VertexBufferColors, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshVertexColorLODData, LODIndex, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshVertexColorLODData, UnknownData_7IUZ, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMeshVertexColorLODData, 0x0028);
		}

		// struct FStreamingTextureBuildInfo
		TEST_METHOD(ScriptStruct__Engine__StreamingTextureBuildInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingTextureBuildInfo, PackedRelativeBox, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingTextureBuildInfo, TextureLevelIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingTextureBuildInfo, TexelFactor, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStreamingTextureBuildInfo, 0x000C);
		}

		// struct FStaticMeshComponentInstanceData : public FPrimitiveComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__StaticMeshComponentInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentInstanceData, StaticMesh, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentInstanceData, VertexColorLODs, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentInstanceData, CachedStaticLighting, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentInstanceData, StreamingTextureData, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentInstanceData, UnknownData_2MDL, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMeshComponentInstanceData, 0x0130);
		}

		// struct FStringCurveKey
		TEST_METHOD(ScriptStruct__Engine__StringCurveKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStringCurveKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStringCurveKey, UnknownData_7VMB, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStringCurveKey, Value, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStringCurveKey, 0x0018);
		}

		// struct FStringCurve : public FIndexedCurve
		TEST_METHOD(ScriptStruct__Engine__StringCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStringCurve, DefaultValue, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStringCurve, Keys, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStringCurve, 0x0088);
		}

		// struct FSubsurfaceProfileStruct
		TEST_METHOD(ScriptStruct__Engine__SubsurfaceProfileStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, ScatterRadius, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, SubsurfaceColor, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, FalloffColor, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, BoundaryColorBleed, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, ExtinctionScale, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, NormalScale, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, ScatteringDistribution, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, IOR, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, Roughness0, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, Roughness1, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, LobeMix, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubsurfaceProfileStruct, 0x0050);
		}

		// struct FTexturePlatformData
		TEST_METHOD(ScriptStruct__Engine__TexturePlatformData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTexturePlatformData, UnknownData_76W9, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTexturePlatformData, 0x0020);
		}

		// struct FTextureSource
		TEST_METHOD(ScriptStruct__Engine__TextureSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureSource, UnknownData_G3DV, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextureSource, 0x00A0);
		}

		// struct FStreamingTexturePrimitiveInfo
		TEST_METHOD(ScriptStruct__Engine__StreamingTexturePrimitiveInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingTexturePrimitiveInfo, Texture, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingTexturePrimitiveInfo, Bounds, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingTexturePrimitiveInfo, TexelFactor, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingTexturePrimitiveInfo, PackedRelativeBox, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingTexturePrimitiveInfo, UnknownData_RU8N, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStreamingTexturePrimitiveInfo, 0x0030);
		}

		// struct FTimelineEventEntry
		TEST_METHOD(ScriptStruct__Engine__TimelineEventEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineEventEntry, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineEventEntry, EventFunc, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimelineEventEntry, 0x0014);
		}

		// struct FTimelineVectorTrack
		TEST_METHOD(ScriptStruct__Engine__TimelineVectorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, VectorCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, InterpFunc, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, TrackName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, VectorPropertyName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, VectorProperty, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, UnknownData_HHQZ, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimelineVectorTrack, 0x0040);
		}

		// struct FTimelineFloatTrack
		TEST_METHOD(ScriptStruct__Engine__TimelineFloatTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, FloatCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, InterpFunc, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, TrackName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, FloatPropertyName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, FloatProperty, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, UnknownData_Q0H1, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimelineFloatTrack, 0x0040);
		}

		// struct FTimelineLinearColorTrack
		TEST_METHOD(ScriptStruct__Engine__TimelineLinearColorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, LinearColorCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, InterpFunc, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, TrackName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, LinearColorPropertyName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, LinearColorProperty, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, UnknownData_DIPR, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimelineLinearColorTrack, 0x0040);
		}

		// struct FTimeline
		TEST_METHOD(ScriptStruct__Engine__Timeline)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, LengthMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, UnknownData_WIFM, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, Length, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, PlayRate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, Position, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, events, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, InterpVectors, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, InterpFloats, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, InterpLinearColors, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, TimelinePostUpdateFunc, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, TimelineFinishedFunc, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, PropertySetObject, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, DirectionPropertyName, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, UnknownData_ZMDS, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, DirectionProperty, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimeline, 0x0098);
		}

		// struct FTTTrackBase
		TEST_METHOD(ScriptStruct__Engine__TTTrackBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTrackBase, UnknownData_MN8D, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTrackBase, TrackName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTrackBase, bIsExternalCurve, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTrackBase, UnknownData_ZSBB, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTTrackBase, 0x0018);
		}

		// struct FTTPropertyTrack : public FTTTrackBase
		TEST_METHOD(ScriptStruct__Engine__TTPropertyTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTPropertyTrack, PropertyName, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTPropertyTrack, 0x0020);
		}

		// struct FTTLinearColorTrack : public FTTPropertyTrack
		TEST_METHOD(ScriptStruct__Engine__TTLinearColorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTLinearColorTrack, CurveLinearColor, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTLinearColorTrack, 0x0028);
		}

		// struct FTTVectorTrack : public FTTPropertyTrack
		TEST_METHOD(ScriptStruct__Engine__TTVectorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTVectorTrack, CurveVector, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTVectorTrack, 0x0028);
		}

		// struct FTTFloatTrack : public FTTPropertyTrack
		TEST_METHOD(ScriptStruct__Engine__TTFloatTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTFloatTrack, CurveFloat, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTFloatTrack, 0x0028);
		}

		// struct FTTEventTrack : public FTTTrackBase
		TEST_METHOD(ScriptStruct__Engine__TTEventTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTEventTrack, FunctionName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTEventTrack, CurveKeys, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTEventTrack, 0x0028);
		}

		// struct FTimeStretchCurveInstance
		TEST_METHOD(ScriptStruct__Engine__TimeStretchCurveInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurveInstance, bHasValidData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurveInstance, UnknownData_HZHI, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimeStretchCurveInstance, 0x0030);
		}

		// struct FTimeStretchCurveMarker
		TEST_METHOD(ScriptStruct__Engine__TimeStretchCurveMarker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurveMarker, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurveMarker, Alpha, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimeStretchCurveMarker, 0x0010);
		}

		// struct FTimeStretchCurve
		TEST_METHOD(ScriptStruct__Engine__TimeStretchCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurve, SamplingRate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurve, CurveValueMinPrecision, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurve, Markers, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurve, Sum_dT_i_by_C_i, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurve, UnknownData_TQ4U, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimeStretchCurve, 0x0028);
		}

		// struct FTouchInputControl
		TEST_METHOD(ScriptStruct__Engine__TouchInputControl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, Image1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, Image2, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, Center, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, VisualSize, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, ThumbSize, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, InteractionSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, InputScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, MainInputKey, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, AltInputKey, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTouchInputControl, 0x0068);
		}

		// struct FHardwareCursorReference
		TEST_METHOD(ScriptStruct__Engine__HardwareCursorReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHardwareCursorReference, CursorPath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHardwareCursorReference, HotSpot, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHardwareCursorReference, 0x0010);
		}

		// struct FVirtualTextureLayer
		TEST_METHOD(ScriptStruct__Engine__VirtualTextureLayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureLayer, Format, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureLayer, bCompressed, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureLayer, bHasAlpha, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureLayer, CompressionSettings, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVirtualTextureLayer, 0x0004);
		}

		// struct FVoiceSettings
		TEST_METHOD(ScriptStruct__Engine__VoiceSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVoiceSettings, ComponentToAttachTo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVoiceSettings, AttenuationSettings, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVoiceSettings, SourceEffectChain, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVoiceSettings, 0x0018);
		}

		// struct FLevelStreamingWrapper
		TEST_METHOD(ScriptStruct__Engine__LevelStreamingWrapper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelStreamingWrapper, StreamingLevel, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelStreamingWrapper, 0x0008);
		}

		// struct FStreamingLevelsToConsider
		TEST_METHOD(ScriptStruct__Engine__StreamingLevelsToConsider)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingLevelsToConsider, StreamingLevels, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingLevelsToConsider, UnknownData_GAGL, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStreamingLevelsToConsider, 0x0028);
		}

		// struct FLevelCollection
		TEST_METHOD(ScriptStruct__Engine__LevelCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, UnknownData_338C, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, GameState, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, NetDriver, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, DemoNetDriver, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, PersistentLevel, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, Levels, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelCollection, 0x0078);
		}

		// struct FEndPhysicsTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__EndPhysicsTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEndPhysicsTickFunction, UnknownData_KPC5, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEndPhysicsTickFunction, 0x0058);
		}

		// struct FStartPhysicsTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__StartPhysicsTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStartPhysicsTickFunction, UnknownData_AFKY, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStartPhysicsTickFunction, 0x0058);
		}

		// struct FLevelViewportInfo
		TEST_METHOD(ScriptStruct__Engine__LevelViewportInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelViewportInfo, CamPosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelViewportInfo, CamRotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelViewportInfo, CamOrthoZoom, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelViewportInfo, CamUpdated, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelViewportInfo, UnknownData_75XY, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelViewportInfo, 0x0020);
		}

		// struct FPSCPoolElem
		TEST_METHOD(ScriptStruct__Engine__PSCPoolElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPoolElem, PSC, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPoolElem, UnknownData_Z44P, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPSCPoolElem, 0x0010);
		}

		// struct FPSCPool
		TEST_METHOD(ScriptStruct__Engine__PSCPool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPool, FreeElements, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPool, InUseComponents_Auto, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPool, InUseComponents_Manual, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPool, UnknownData_8UCA, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPSCPool, 0x0038);
		}

		// struct FWorldPSCPool
		TEST_METHOD(ScriptStruct__Engine__WorldPSCPool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldPSCPool, WorldParticleSystemPools, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldPSCPool, UnknownData_MPET, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWorldPSCPool, 0x0058);
		}

		// struct FBroadphaseSettings
		TEST_METHOD(ScriptStruct__Engine__BroadphaseSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, bUseMBPOnClient, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, bUseMBPOnServer, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, UnknownData_E6UN, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, MBPBounds, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, MBPNumSubdivs, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBroadphaseSettings, 0x0024);
		}

		// struct FMeshProxySettings
		TEST_METHOD(ScriptStruct__Engine__MeshProxySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, ScreenSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, VoxelSize, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, MaterialSettings, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, MergeDistance, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, UnresolvedGeometryColor, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, MaxRayCastDist, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, HardAngleThreshold, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, LightMapResolution, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, NormalCalculationMethod, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, LandscapeCullingPrecision, 0x008D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshProxySettings, 0x0090);
		}

		// struct FMeshMergingSettings
		TEST_METHOD(ScriptStruct__Engine__MeshMergingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, TargetLightMapResolution, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, OutputUVs, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, MaterialSettings, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, GutterSize, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, SpecificLOD, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, LODSelectionType, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, UnknownData_BD6A, 0x0087);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshMergingSettings, 0x0088);
		}

		// struct FHierarchicalSimplification
		TEST_METHOD(ScriptStruct__Engine__HierarchicalSimplification)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, TransitionScreenSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, OverrideDrawDistance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, UnknownData_5TJ4, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, ProxySetting, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, MergeSetting, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, DesiredBoundRadius, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, DesiredFillingPercentage, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, MinNumberOfActorsToBuild, 0x012C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHierarchicalSimplification, 0x0130);
		}

		// struct FNetViewer
		TEST_METHOD(ScriptStruct__Engine__NetViewer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, Connection, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, InViewer, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, ViewTarget, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, ViewLocation, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, ViewDir, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNetViewer, 0x0030);
		}

		// struct FLightmassWorldInfoSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassWorldInfoSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, StaticLightingLevelScale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, NumIndirectLightingBounces, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, NumSkyLightingBounces, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, IndirectLightingQuality, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, IndirectLightingSmoothness, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, EnvironmentColor, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, EnvironmentIntensity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, EmissiveBoost, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, DiffuseBoost, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, VolumeLightingMethod, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, UnknownData_SLH7, 0x0026);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, VolumetricLightmapDetailCellSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, VolumetricLightmapMaximumBrickMemoryMb, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, VolumetricLightmapSphericalHarmonicSmoothing, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, VolumeLightSamplePlacementScale, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, DirectIlluminationOcclusionFraction, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, IndirectIlluminationOcclusionFraction, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, OcclusionExponent, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, FullyOccludedSamplesFraction, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, MaxOcclusionDistance, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassWorldInfoSettings, 0x004C);
		}

		// struct FActorComponentTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__ActorComponentTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentTickFunction, UnknownData_LVQI, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorComponentTickFunction, 0x0058);
		}

		// struct FActorTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__ActorTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorTickFunction, UnknownData_I8HM, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorTickFunction, 0x0058);
		}

		// struct FDebugTextInfo
		TEST_METHOD(ScriptStruct__Engine__DebugTextInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, SrcActor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, SrcActorOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, SrcActorDesiredOffset, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, DebugText, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, TimeRemaining, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, Duration, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, TextColor, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, UnknownData_2HK0, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, OrigActorLocation, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, UnknownData_T8J6, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, Font, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, FontScale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, UnknownData_MK1Q, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebugTextInfo, 0x0060);
		}

		// struct FLightingChannels
		TEST_METHOD(ScriptStruct__Engine__LightingChannels)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightingChannels, 0x0001);
		}

		// struct FCollisionResponseContainer
		TEST_METHOD(ScriptStruct__Engine__CollisionResponseContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, WorldStatic, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, WorldDynamic, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, Pawn, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, Visibility, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, Camera, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, PhysicsBody, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, Vehicle, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, Destructible, 0x0007);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel1, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel2, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel3, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel4, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel5, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel6, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel1, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel2, 0x000F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel3, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel4, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel5, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel6, 0x0013);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel7, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel8, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel9, 0x0016);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel10, 0x0017);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel11, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel12, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel13, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel14, 0x001B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel15, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel16, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel17, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel18, 0x001F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionResponseContainer, 0x0020);
		}

		// struct FCollisionResponse
		TEST_METHOD(ScriptStruct__Engine__CollisionResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponse, ResponseToChannels, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponse, ResponseArray, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionResponse, 0x0030);
		}

		// struct FWalkableSlopeOverride
		TEST_METHOD(ScriptStruct__Engine__WalkableSlopeOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWalkableSlopeOverride, WalkableSlopeBehavior, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWalkableSlopeOverride, UnknownData_HTHP, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWalkableSlopeOverride, WalkableSlopeAngle, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWalkableSlopeOverride, UnknownData_JYIL, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWalkableSlopeOverride, 0x0010);
		}

		// struct FBodyInstance
		TEST_METHOD(ScriptStruct__Engine__BodyInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_YAQE, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, ObjectType, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_XTC6, 0x0007);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CollisionEnabled, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_PQ4Q, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, SleepFamily, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, DOFMode, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_CZCZ, 0x000F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CollisionProfileName, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_S908, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CollisionResponses, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, MaxDepenetrationVelocity, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, MassInKgOverride, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_RYRW, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, LinearDamping, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, AngularDamping, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CustomDOFPlaneNormal, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, COMNudge, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, MassScale, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, InertiaTensorScale, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_OGLX, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, WalkableSlopeOverride, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, PhysMaterialOverride, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, MaxAngularVelocity, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CustomSleepThresholdMultiplier, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, StabilizationThresholdMultiplier, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, PhysicsBlendWeight, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, PositionSolverIterationCount, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, VelocitySolverIterationCount, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_B5BE, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBodyInstance, 0x0148);
		}

		// struct FPrimitiveComponentPostPhysicsTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__PrimitiveComponentPostPhysicsTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveComponentPostPhysicsTickFunction, UnknownData_9HBK, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimitiveComponentPostPhysicsTickFunction, 0x0058);
		}

		// struct FSkelMeshComponentLODInfo
		TEST_METHOD(ScriptStruct__Engine__SkelMeshComponentLODInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkelMeshComponentLODInfo, HiddenMaterials, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkelMeshComponentLODInfo, UnknownData_2I7I, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkelMeshComponentLODInfo, 0x0020);
		}

		// struct FSkelMeshSkinWeightInfo
		TEST_METHOD(ScriptStruct__Engine__SkelMeshSkinWeightInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkelMeshSkinWeightInfo, Bones, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkelMeshSkinWeightInfo, Weights, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkelMeshSkinWeightInfo, 0x0028);
		}

		// struct FSkeletalMaterial
		TEST_METHOD(ScriptStruct__Engine__SkeletalMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMaterial, MaterialInterface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMaterial, MaterialSlotName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMaterial, UVChannelData, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMaterial, UnknownData_RBNN, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMaterial, 0x0028);
		}

		// struct FBoneMirrorInfo
		TEST_METHOD(ScriptStruct__Engine__BoneMirrorInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorInfo, SourceIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorInfo, BoneFlipAxis, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorInfo, UnknownData_JH8S, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneMirrorInfo, 0x0008);
		}

		// struct FSkeletalMeshLODInfo
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshLODInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, ScreenSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, LODHysteresis, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, LODMaterialMap, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, ReductionSettings, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, UnknownData_0WH0, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, BonesToRemove, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, BonesToPrioritize, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, WeightOfPrioritization, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, UnknownData_VGNX, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, BakePose, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, BakePoseOverride, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, SourceImportFilename, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, UnknownData_7TTB, 0x00A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshLODInfo, 0x00A8);
		}

		// struct FPerPlatformInt
		TEST_METHOD(ScriptStruct__Engine__PerPlatformInt)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerPlatformInt, Default, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerPlatformInt, 0x0004);
		}

		// struct FSkeletalMeshSamplingRegionMaterialFilter
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingRegionMaterialFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegionMaterialFilter, MaterialName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingRegionMaterialFilter, 0x0008);
		}

		// struct FSkeletalMeshSamplingRegionBoneFilter
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingRegionBoneFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegionBoneFilter, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegionBoneFilter, UnknownData_Z8TB, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingRegionBoneFilter, 0x000C);
		}

		// struct FSkeletalMeshSamplingRegion
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingRegion)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegion, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegion, LODIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegion, UnknownData_1V9Q, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegion, MaterialFilters, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegion, BoneFilters, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingRegion, 0x0030);
		}

		// struct FSkeletalMeshSamplingLODBuiltData
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingLODBuiltData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingLODBuiltData, UnknownData_XBAR, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingLODBuiltData, 0x0048);
		}

		// struct FSkeletalMeshSamplingRegionBuiltData
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingRegionBuiltData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegionBuiltData, UnknownData_X0JL, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingRegionBuiltData, 0x0078);
		}

		// struct FSkeletalMeshSamplingBuiltData
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingBuiltData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingBuiltData, WholeMeshBuiltData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingBuiltData, RegionBuiltData, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingBuiltData, 0x0020);
		}

		// struct FSkeletalMeshSamplingInfo
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingInfo, Regions, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingInfo, BuiltData, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingInfo, 0x0030);
		}

		// struct FSingleAnimationPlayData
		TEST_METHOD(ScriptStruct__Engine__SingleAnimationPlayData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, AnimToPlay, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, UnknownData_8MSM, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, SavedPosition, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, SavedPlayRate, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, UnknownData_NHM5, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSingleAnimationPlayData, 0x0018);
		}

		// struct FPoseSnapshot
		TEST_METHOD(ScriptStruct__Engine__PoseSnapshot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, LocalTransforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, BoneNames, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, SkeletalMeshName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, SnapshotName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, bIsValid, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, UnknownData_K0Y0, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseSnapshot, 0x0038);
		}

		// struct FAnimNotifyEventReference
		TEST_METHOD(ScriptStruct__Engine__AnimNotifyEventReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEventReference, UnknownData_2LHC, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEventReference, NotifySource, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNotifyEventReference, 0x0010);
		}

		// struct FAnimNotifyArray
		TEST_METHOD(ScriptStruct__Engine__AnimNotifyArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyArray, Notifies, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNotifyArray, 0x0010);
		}

		// struct FAnimNotifyQueue
		TEST_METHOD(ScriptStruct__Engine__AnimNotifyQueue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyQueue, UnknownData_U728, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyQueue, AnimNotifies, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyQueue, UnfilteredMontageAnimNotifies, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNotifyQueue, 0x0070);
		}

		// struct FSoundConcurrencySettings
		TEST_METHOD(ScriptStruct__Engine__SoundConcurrencySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, MaxCount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, UnknownData_64BP, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, ResolutionRule, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, UnknownData_0VLN, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, VolumeScale, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundConcurrencySettings, 0x0010);
		}

		// struct FSoundSubmixSendInfo
		TEST_METHOD(ScriptStruct__Engine__SoundSubmixSendInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, SendLevel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, UnknownData_WSU5, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, SoundSubmix, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundSubmixSendInfo, 0x0010);
		}

		// struct FSoundSourceBusSendInfo
		TEST_METHOD(ScriptStruct__Engine__SoundSourceBusSendInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, SendLevel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, UnknownData_ONB4, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, SoundSourceBus, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundSourceBusSendInfo, 0x0010);
		}

		// struct FUniqueNetIdRepl : public FUniqueNetIdWrapper
		TEST_METHOD(ScriptStruct__Engine__UniqueNetIdRepl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUniqueNetIdRepl, UnknownData_3JI8, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUniqueNetIdRepl, ReplicationBytes, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUniqueNetIdRepl, 0x0028);
		}

		// struct FChannelDefinition
		TEST_METHOD(ScriptStruct__Engine__ChannelDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, ChannelName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, ClassName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, ChannelClass, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, StaticChannelIndex, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, bTickOnCreate, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, bServerOpen, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, bClientOpen, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, bInitialServer, 0x001F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, bInitialClient, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, UnknownData_8XHX, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChannelDefinition, 0x0028);
		}

		// struct FBasedMovementInfo
		TEST_METHOD(ScriptStruct__Engine__BasedMovementInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, MovementBase, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, BoneName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, Location, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, Rotation, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, bServerHasBaseComponent, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, bRelativeRotation, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, bServerHasVelocity, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, UnknownData_WQHU, 0x002B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBasedMovementInfo, 0x0030);
		}

		// struct FVector_NetQuantize10 : public FVector
		TEST_METHOD(ScriptStruct__Engine__Vector_NetQuantize10)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector_NetQuantize10, 0x000C);
		}

		// struct FRootMotionSourceGroup
		TEST_METHOD(ScriptStruct__Engine__RootMotionSourceGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceGroup, UnknownData_92D8, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceGroup, LastAccumulatedSettings, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceGroup, UnknownData_MG3K, 0x00EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceGroup, LastPreAdditiveVelocity, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSourceGroup, 0x00F8);
		}

		// struct FRepRootMotionMontage
		TEST_METHOD(ScriptStruct__Engine__RepRootMotionMontage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, bIsActive, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, UnknownData_QJB4, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, AnimMontage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, Position, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, Location, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, Rotation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, UnknownData_KSBP, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, MovementBase, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, MovementBaseBoneName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, bRelativePosition, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, bRelativeRotation, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, UnknownData_5Q6G, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, AuthoritativeRootMotion, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, Acceleration, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, LinearVelocity, 0x014C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRepRootMotionMontage, 0x0158);
		}

		// struct FSimulatedRootMotionReplicatedMove
		TEST_METHOD(ScriptStruct__Engine__SimulatedRootMotionReplicatedMove)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulatedRootMotionReplicatedMove, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulatedRootMotionReplicatedMove, UnknownData_JGT4, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulatedRootMotionReplicatedMove, RootMotion, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSimulatedRootMotionReplicatedMove, 0x0160);
		}

		// struct FSplinePoint
		TEST_METHOD(ScriptStruct__Engine__SplinePoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, InputKey, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, Position, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, ArriveTangent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, LeaveTangent, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, Rotation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, Scale, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, Type, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, UnknownData_N2M2, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplinePoint, 0x0044);
		}

		// struct FAudioComponentParam
		TEST_METHOD(ScriptStruct__Engine__AudioComponentParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, ParamName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, FloatParam, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, BoolParam, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, UnknownData_FJL4, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, IntParam, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, UnknownData_MUSD, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, SoundWaveParam, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioComponentParam, 0x0020);
		}

		// struct FBaseAttenuationSettings
		TEST_METHOD(ScriptStruct__Engine__BaseAttenuationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, UnknownData_IBM2, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, DistanceAlgorithm, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, AttenuationShape, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, UnknownData_91BX, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, dBAttenuationAtMax, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, AttenuationShapeExtents, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, ConeOffset, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, FalloffDistance, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, UnknownData_OR3M, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, CustomAttenuationCurve, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBaseAttenuationSettings, 0x00B0);
		}

		// struct FSoundAttenuationPluginSettings
		TEST_METHOD(ScriptStruct__Engine__SoundAttenuationPluginSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationPluginSettings, SpatializationPluginSettingsArray, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationPluginSettings, OcclusionPluginSettingsArray, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationPluginSettings, ReverbPluginSettingsArray, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundAttenuationPluginSettings, 0x0030);
		}

		// struct FSoundAttenuationSettings : public FBaseAttenuationSettings
		TEST_METHOD(ScriptStruct__Engine__SoundAttenuationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, SpatializationAlgorithm, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, AbsorptionMethod, 0x00B3);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, OcclusionTraceChannel, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ReverbSendMethod, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, UnknownData_9N9X, 0x00B6);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, OmniRadius, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, StereoSpread, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, LPFRadiusMin, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, LPFRadiusMax, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, CustomLowpassAirAbsorptionCurve, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, CustomHighpassAirAbsorptionCurve, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, LPFFrequencyAtMin, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, LPFFrequencyAtMax, 0x01DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, HPFFrequencyAtMin, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, HPFFrequencyAtMax, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusAzimuth, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, NonFocusAzimuth, 0x01EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusDistanceScale, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, NonFocusDistanceScale, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusPriorityScale, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, NonFocusPriorityScale, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusVolumeAttenuation, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, NonFocusVolumeAttenuation, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusAttackInterpSpeed, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusReleaseInterpSpeed, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, OcclusionLowPassFilterFrequency, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, OcclusionVolumeAttenuation, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, OcclusionInterpolationTime, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ReverbWetLevelMin, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ReverbWetLevelMax, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ReverbDistanceMin, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ReverbDistanceMax, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ManualReverbSendLevel, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, CustomReverbSendCurve, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, PluginSettings, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundAttenuationSettings, 0x02E8);
		}

		// struct FSoundWaveSpectralData
		TEST_METHOD(ScriptStruct__Engine__SoundWaveSpectralData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralData, FrequencyHz, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralData, Magnitude, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralData, NormalizedMagnitude, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundWaveSpectralData, 0x000C);
		}

		// struct FFindFloorResult
		TEST_METHOD(ScriptStruct__Engine__FindFloorResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindFloorResult, UnknownData_VHV3, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindFloorResult, FloorDist, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindFloorResult, LineDist, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindFloorResult, HitResult, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFindFloorResult, 0x0094);
		}

		// struct FNavAvoidanceMask
		TEST_METHOD(ScriptStruct__Engine__NavAvoidanceMask)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavAvoidanceMask, 0x0004);
		}

		// struct FCharacterMovementComponentPostPhysicsTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__CharacterMovementComponentPostPhysicsTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterMovementComponentPostPhysicsTickFunction, UnknownData_VIO3, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterMovementComponentPostPhysicsTickFunction, 0x0058);
		}

		// struct FFOscillator
		TEST_METHOD(ScriptStruct__Engine__FOscillator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, Amplitude, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, Frequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, InitialOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, Waveform, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, UnknownData_0ZN7, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFOscillator, 0x000C);
		}

		// struct FROscillator
		TEST_METHOD(ScriptStruct__Engine__ROscillator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FROscillator, Pitch, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FROscillator, Yaw, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FROscillator, Roll, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FROscillator, 0x0024);
		}

		// struct FVOscillator
		TEST_METHOD(ScriptStruct__Engine__VOscillator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVOscillator, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVOscillator, Y, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVOscillator, Z, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVOscillator, 0x0024);
		}

		// struct FActiveForceFeedbackEffect
		TEST_METHOD(ScriptStruct__Engine__ActiveForceFeedbackEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveForceFeedbackEffect, ForceFeedbackEffect, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveForceFeedbackEffect, UnknownData_J7MW, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveForceFeedbackEffect, 0x0018);
		}

		// struct FViewTargetTransitionParams
		TEST_METHOD(ScriptStruct__Engine__ViewTargetTransitionParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, BlendTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, BlendFunction, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, UnknownData_PYQ3, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, BlendExp, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, UnknownData_8XS5, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FViewTargetTransitionParams, 0x0010);
		}

		// struct FUpdateLevelVisibilityLevelInfo
		TEST_METHOD(ScriptStruct__Engine__UpdateLevelVisibilityLevelInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelVisibilityLevelInfo, PackageName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelVisibilityLevelInfo, UnknownData_PY5W, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUpdateLevelVisibilityLevelInfo, 0x000C);
		}

		// struct FLatentActionInfo
		TEST_METHOD(ScriptStruct__Engine__LatentActionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionInfo, Linkage, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionInfo, UUID, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionInfo, ExecutionFunction, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionInfo, CallbackTarget, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLatentActionInfo, 0x0018);
		}

		// struct FUpdateLevelStreamingLevelStatus
		TEST_METHOD(ScriptStruct__Engine__UpdateLevelStreamingLevelStatus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelStreamingLevelStatus, PackageName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelStreamingLevelStatus, LODIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelStreamingLevelStatus, UnknownData_UUQC, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUpdateLevelStreamingLevelStatus, 0x0010);
		}

		// struct FForceFeedbackParameters
		TEST_METHOD(ScriptStruct__Engine__ForceFeedbackParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackParameters, Tag, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackParameters, bLooping, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackParameters, bIgnoreTimeDilation, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackParameters, bPlayWhilePaused, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackParameters, UnknownData_6SE0, 0x000B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForceFeedbackParameters, 0x000C);
		}

		// struct FStaticMeshComponentLODInfo
		TEST_METHOD(ScriptStruct__Engine__StaticMeshComponentLODInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentLODInfo, UnknownData_BVAE, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentLODInfo, PaintedVertices, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentLODInfo, UnknownData_LXO7, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMeshComponentLODInfo, 0x00A8);
		}

		// struct FLightmassPrimitiveSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassPrimitiveSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, UnknownData_AEXO, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, EmissiveLightFalloffExponent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, EmissiveLightExplicitInfluenceRadius, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, EmissiveBoost, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, DiffuseBoost, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, FullyOccludedSamplesFraction, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassPrimitiveSettings, 0x0018);
		}

		// struct FInstancedStaticMeshMappingInfo
		TEST_METHOD(ScriptStruct__Engine__InstancedStaticMeshMappingInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshMappingInfo, UnknownData_RLG8, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInstancedStaticMeshMappingInfo, 0x0008);
		}

		// struct FGeomSelection
		TEST_METHOD(ScriptStruct__Engine__GeomSelection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomSelection, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomSelection, Index, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomSelection, SelectionIndex, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeomSelection, 0x000C);
		}

		// struct FLightmassMaterialInterfaceSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassMaterialInterfaceSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassMaterialInterfaceSettings, UnknownData_I1RR, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassMaterialInterfaceSettings, EmissiveBoost, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassMaterialInterfaceSettings, DiffuseBoost, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassMaterialInterfaceSettings, ExportResolutionScale, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassMaterialInterfaceSettings, UnknownData_XJIC, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassMaterialInterfaceSettings, 0x0014);
		}

		// struct FMaterialTextureInfo
		TEST_METHOD(ScriptStruct__Engine__MaterialTextureInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialTextureInfo, SamplingScale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialTextureInfo, UVChannelIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialTextureInfo, TextureName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialTextureInfo, 0x0010);
		}

		// struct FMaterialParameterInfo
		TEST_METHOD(ScriptStruct__Engine__MaterialParameterInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterInfo, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterInfo, Association, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterInfo, UnknownData_I33H, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterInfo, Index, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialParameterInfo, 0x0010);
		}

		// struct FScalarParameterValue
		TEST_METHOD(ScriptStruct__Engine__ScalarParameterValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterValue, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterValue, ParameterValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterValue, ExpressionGUID, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScalarParameterValue, 0x0024);
		}

		// struct FVectorParameterValue
		TEST_METHOD(ScriptStruct__Engine__VectorParameterValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterValue, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterValue, ParameterValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterValue, ExpressionGUID, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorParameterValue, 0x0030);
		}

		// struct FTextureParameterValue
		TEST_METHOD(ScriptStruct__Engine__TextureParameterValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureParameterValue, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureParameterValue, ParameterValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureParameterValue, ExpressionGUID, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextureParameterValue, 0x0028);
		}

		// struct FFontParameterValue
		TEST_METHOD(ScriptStruct__Engine__FontParameterValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, FontValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, FontPage, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, ExpressionGUID, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, UnknownData_4129, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontParameterValue, 0x0030);
		}

		// struct FMaterialInstanceBasePropertyOverrides
		TEST_METHOD(ScriptStruct__Engine__MaterialInstanceBasePropertyOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, BlendMode, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, ShadingModel, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, OpacityMaskClipValue, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialInstanceBasePropertyOverrides, 0x0008);
		}

		// struct FStaticSwitchParameter
		TEST_METHOD(ScriptStruct__Engine__StaticSwitchParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticSwitchParameter, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticSwitchParameter, Value, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticSwitchParameter, bOverride, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticSwitchParameter, UnknownData_Y7YA, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticSwitchParameter, ExpressionGUID, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticSwitchParameter, 0x0024);
		}

		// struct FStaticComponentMaskParameter
		TEST_METHOD(ScriptStruct__Engine__StaticComponentMaskParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskParameter, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskParameter, R, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskParameter, G, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskParameter, B, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskParameter, A, 0x0013);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskParameter, bOverride, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskParameter, UnknownData_TE3F, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskParameter, ExpressionGUID, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticComponentMaskParameter, 0x0028);
		}

		// struct FStaticTerrainLayerWeightParameter
		TEST_METHOD(ScriptStruct__Engine__StaticTerrainLayerWeightParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticTerrainLayerWeightParameter, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticTerrainLayerWeightParameter, bOverride, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticTerrainLayerWeightParameter, UnknownData_6G1M, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticTerrainLayerWeightParameter, ExpressionGUID, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticTerrainLayerWeightParameter, WeightmapIndex, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticTerrainLayerWeightParameter, bWeightBasedBlend, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticTerrainLayerWeightParameter, UnknownData_YBKJ, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticTerrainLayerWeightParameter, 0x002C);
		}

		// struct FMaterialLayersFunctions
		TEST_METHOD(ScriptStruct__Engine__MaterialLayersFunctions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialLayersFunctions, Layers, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialLayersFunctions, Blends, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialLayersFunctions, LayerStates, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialLayersFunctions, KeyString, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialLayersFunctions, 0x0040);
		}

		// struct FStaticMaterialLayersParameter
		TEST_METHOD(ScriptStruct__Engine__StaticMaterialLayersParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterialLayersParameter, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterialLayersParameter, Value, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterialLayersParameter, bOverride, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterialLayersParameter, UnknownData_71CY, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterialLayersParameter, ExpressionGUID, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterialLayersParameter, UnknownData_K29H, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMaterialLayersParameter, 0x0068);
		}

		// struct FStaticParameterSet
		TEST_METHOD(ScriptStruct__Engine__StaticParameterSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterSet, StaticSwitchParameters, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterSet, StaticComponentMaskParameters, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterSet, TerrainLayerWeightParameters, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterSet, MaterialLayersParameters, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticParameterSet, 0x0040);
		}

		// struct FSoundWaveSpectralDataEntry
		TEST_METHOD(ScriptStruct__Engine__SoundWaveSpectralDataEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralDataEntry, Magnitude, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralDataEntry, NormalizedMagnitude, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundWaveSpectralDataEntry, 0x0008);
		}

		// struct FSoundWaveSpectralTimeData
		TEST_METHOD(ScriptStruct__Engine__SoundWaveSpectralTimeData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralTimeData, Data, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralTimeData, TimeSec, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralTimeData, UnknownData_RXED, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundWaveSpectralTimeData, 0x0018);
		}

		// struct FSoundWaveEnvelopeTimeData
		TEST_METHOD(ScriptStruct__Engine__SoundWaveEnvelopeTimeData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveEnvelopeTimeData, Amplitude, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveEnvelopeTimeData, TimeSec, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundWaveEnvelopeTimeData, 0x0008);
		}

		// struct FSubtitleCue
		TEST_METHOD(ScriptStruct__Engine__SubtitleCue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubtitleCue, Text, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubtitleCue, Time, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubtitleCue, UnknownData_2AV6, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubtitleCue, 0x0020);
		}

		// struct FBoneNode
		TEST_METHOD(ScriptStruct__Engine__BoneNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneNode, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneNode, ParentIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneNode, TranslationRetargetingMode, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneNode, UnknownData_55HT, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneNode, 0x0010);
		}

		// struct FVirtualBone
		TEST_METHOD(ScriptStruct__Engine__VirtualBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualBone, SourceBoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualBone, TargetBoneName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualBone, VirtualBoneName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVirtualBone, 0x0018);
		}

		// struct FSmartNameContainer
		TEST_METHOD(ScriptStruct__Engine__SmartNameContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSmartNameContainer, UnknownData_4Z07, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSmartNameContainer, 0x0050);
		}

		// struct FAnimSlotGroup
		TEST_METHOD(ScriptStruct__Engine__AnimSlotGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotGroup, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotGroup, SlotNames, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSlotGroup, 0x0018);
		}

		// struct FBranchFilter
		TEST_METHOD(ScriptStruct__Engine__BranchFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchFilter, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchFilter, BlendDepth, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBranchFilter, 0x000C);
		}

		// struct FInputBlendPose
		TEST_METHOD(ScriptStruct__Engine__InputBlendPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputBlendPose, BranchFilters, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputBlendPose, 0x0010);
		}

		// struct FCanvasUVTri
		TEST_METHOD(ScriptStruct__Engine__CanvasUVTri)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V0_Pos, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V0_UV, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V0_Color, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V1_Pos, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V1_UV, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V1_Color, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V2_Pos, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V2_UV, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V2_Color, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCanvasUVTri, 0x0060);
		}

		// struct FDelegateArray
		TEST_METHOD(ScriptStruct__Engine__DelegateArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateArray, Delegates, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDelegateArray, 0x0010);
		}

		// struct FRedirector
		TEST_METHOD(ScriptStruct__Engine__Redirector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRedirector, OldName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRedirector, NewName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRedirector, 0x0010);
		}

		// struct FTableRowBase
		TEST_METHOD(ScriptStruct__Engine__TableRowBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowBase, UnknownData_PDNO, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTableRowBase, 0x0008);
		}

		// struct FTextureLODGroup
		TEST_METHOD(ScriptStruct__Engine__TextureLODGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, Group, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, UnknownData_7BDO, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, LODBias, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, LODBias_Smaller, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, LODBias_Smallest, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, UnknownData_WZFT, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, NumStreamedMips, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MipGenSettings, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, UnknownData_HV89, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MinLODSize, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MaxLODSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MaxLODSize_Smaller, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MaxLODSize_Smallest, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, OptionalLODBias, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, OptionalMaxLODSize, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, UnknownData_BEQX, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MinMagFilter, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MipFilter, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextureLODGroup, 0x0050);
		}

		// struct FLightmassDirectionalLightSettings : public FLightmassLightSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassDirectionalLightSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDirectionalLightSettings, LightSourceAngle, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassDirectionalLightSettings, 0x0010);
		}

		// struct FExponentialHeightFogData
		TEST_METHOD(ScriptStruct__Engine__ExponentialHeightFogData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExponentialHeightFogData, FogDensity, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExponentialHeightFogData, FogHeightFalloff, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExponentialHeightFogData, FogHeightOffset, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExponentialHeightFogData, 0x000C);
		}

		// struct FFontCharacter
		TEST_METHOD(ScriptStruct__Engine__FontCharacter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, StartU, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, StartV, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, USize, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, VSize, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, TextureIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, UnknownData_4DVC, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, VerticalOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontCharacter, 0x0018);
		}

		// struct FFontImportOptionsData
		TEST_METHOD(ScriptStruct__Engine__FontImportOptionsData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, FontName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, Height, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_GRHU, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, CharacterSet, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_FGJ5, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, Chars, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnicodeRange, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, CharsFilePath, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, CharsFileWildcard, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_683Q, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ForegroundColor, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_JYH2, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, TexturePageWidth, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, TexturePageMaxHeight, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, XPadding, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, YPadding, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ExtendBoxTop, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ExtendBoxBottom, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ExtendBoxRight, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ExtendBoxLeft, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_EHBB, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, Kerning, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_5UNW, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, DistanceFieldScaleFactor, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, DistanceFieldScanRadiusScale, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_JHB7, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontImportOptionsData, 0x00B0);
		}

		// struct FForceFeedbackAttenuationSettings : public FBaseAttenuationSettings
		TEST_METHOD(ScriptStruct__Engine__ForceFeedbackAttenuationSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForceFeedbackAttenuationSettings, 0x00B0);
		}

		// struct FInputAxisProperties
		TEST_METHOD(ScriptStruct__Engine__InputAxisProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisProperties, DeadZone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisProperties, Sensitivity, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisProperties, Exponent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisProperties, UnknownData_TA3O, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputAxisProperties, 0x0010);
		}

		// struct FInputAxisConfigEntry
		TEST_METHOD(ScriptStruct__Engine__InputAxisConfigEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisConfigEntry, AxisKeyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisConfigEntry, AxisProperties, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputAxisConfigEntry, 0x0018);
		}

		// struct FInputActionKeyMapping
		TEST_METHOD(ScriptStruct__Engine__InputActionKeyMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputActionKeyMapping, ActionName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputActionKeyMapping, UnknownData_612R, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputActionKeyMapping, Key, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputActionKeyMapping, 0x0028);
		}

		// struct FInputAxisKeyMapping
		TEST_METHOD(ScriptStruct__Engine__InputAxisKeyMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisKeyMapping, AxisName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisKeyMapping, Scale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisKeyMapping, UnknownData_0Q11, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisKeyMapping, Key, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputAxisKeyMapping, 0x0028);
		}

		// struct FInterpControlPoint
		TEST_METHOD(ScriptStruct__Engine__InterpControlPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpControlPoint, PositionControlPoint, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpControlPoint, bPositionIsRelative, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpControlPoint, UnknownData_H4F9, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpControlPoint, 0x001C);
		}

		// struct FUserActivity
		TEST_METHOD(ScriptStruct__Engine__UserActivity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserActivity, ActionName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserActivity, UnknownData_1S6N, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUserActivity, 0x0018);
		}

		// struct FGenericStruct
		TEST_METHOD(ScriptStruct__Engine__GenericStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGenericStruct, Data, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGenericStruct, 0x0004);
		}

		// struct FCollisionProfileName
		TEST_METHOD(ScriptStruct__Engine__CollisionProfileName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionProfileName, Name, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionProfileName, 0x0008);
		}

		// struct FTimerHandle
		TEST_METHOD(ScriptStruct__Engine__TimerHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimerHandle, Handle, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimerHandle, 0x0008);
		}

		// struct FDebugFloatHistory
		TEST_METHOD(ScriptStruct__Engine__DebugFloatHistory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, Samples, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, MaxSamples, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, MinValue, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, MaxValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, bAutoAdjustMinMax, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, UnknownData_WNTI, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebugFloatHistory, 0x0020);
		}

		// struct FFormatArgumentData
		TEST_METHOD(ScriptStruct__Engine__FormatArgumentData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentValueType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, UnknownData_A6PR, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentValueInt, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentValueFloat, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentValueGender, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, UnknownData_HJIK, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFormatArgumentData, 0x0040);
		}

		// struct FMaterialInput
		TEST_METHOD(ScriptStruct__Engine__MaterialInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInput, OutputIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInput, ExpressionName, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialInput, 0x000C);
		}

		// struct FScalarMaterialInput : public FMaterialInput
		TEST_METHOD(ScriptStruct__Engine__ScalarMaterialInput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScalarMaterialInput, 0x000C);
		}

		// struct FVectorMaterialInput : public FMaterialInput
		TEST_METHOD(ScriptStruct__Engine__VectorMaterialInput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorMaterialInput, 0x000C);
		}

		// struct FColorMaterialInput : public FMaterialInput
		TEST_METHOD(ScriptStruct__Engine__ColorMaterialInput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColorMaterialInput, 0x000C);
		}

		// struct FMaterialAttributesInput : public FExpressionInput
		TEST_METHOD(ScriptStruct__Engine__MaterialAttributesInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialAttributesInput, PropertyConnectedBitmask, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialAttributesInput, 0x0010);
		}

		// struct FVectorDistribution
		TEST_METHOD(ScriptStruct__Engine__VectorDistribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorDistribution, Table, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorDistribution, 0x0028);
		}

		// struct FVector4Distribution
		TEST_METHOD(ScriptStruct__Engine__Vector4Distribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4Distribution, Table, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector4Distribution, 0x0028);
		}

		// struct FFloatRK4SpringInterpolator
		TEST_METHOD(ScriptStruct__Engine__FloatRK4SpringInterpolator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRK4SpringInterpolator, StiffnessConstant, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRK4SpringInterpolator, DampeningRatio, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatRK4SpringInterpolator, 0x0008);
		}

		// struct FVectorRK4SpringInterpolator
		TEST_METHOD(ScriptStruct__Engine__VectorRK4SpringInterpolator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorRK4SpringInterpolator, StiffnessConstant, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorRK4SpringInterpolator, DampeningRatio, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorRK4SpringInterpolator, 0x0008);
		}

		// struct FVector2MaterialInput : public FMaterialInput
		TEST_METHOD(ScriptStruct__Engine__Vector2MaterialInput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector2MaterialInput, 0x000C);
		}

		// struct FBranchingPointNotifyPayload
		TEST_METHOD(ScriptStruct__Engine__BranchingPointNotifyPayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPointNotifyPayload, UnknownData_HLBT, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBranchingPointNotifyPayload, 0x0020);
		}

		// struct FPlatformInterfaceData
		TEST_METHOD(ScriptStruct__Engine__PlatformInterfaceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, DataName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, Type, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, UnknownData_LH9Q, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, IntValue, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, FloatValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, UnknownData_2H7B, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, StringValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, ObjectValue, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlatformInterfaceData, 0x0030);
		}

		// struct FPlatformInterfaceDelegateResult
		TEST_METHOD(ScriptStruct__Engine__PlatformInterfaceDelegateResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceDelegateResult, bSuccessful, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceDelegateResult, UnknownData_VWHK, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceDelegateResult, Data, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlatformInterfaceDelegateResult, 0x0038);
		}

		// struct FFastArraySerializerItem
		TEST_METHOD(ScriptStruct__Engine__FastArraySerializerItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializerItem, ReplicationID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializerItem, ReplicationKey, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializerItem, MostRecentArrayReplicationKey, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFastArraySerializerItem, 0x000C);
		}

		// struct FCurveTableRowHandle
		TEST_METHOD(ScriptStruct__Engine__CurveTableRowHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveTableRowHandle, CurveTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveTableRowHandle, RowName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveTableRowHandle, 0x0010);
		}

		// struct FFastArraySerializer
		TEST_METHOD(ScriptStruct__Engine__FastArraySerializer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializer, UnknownData_P847, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFastArraySerializer, 0x00B0);
		}

		// struct FKeyHandleLookupTable
		TEST_METHOD(ScriptStruct__Engine__KeyHandleLookupTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyHandleLookupTable, UnknownData_69RM, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKeyHandleLookupTable, 0x0060);
		}

		// struct FPerPlatformBool
		TEST_METHOD(ScriptStruct__Engine__PerPlatformBool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerPlatformBool, Default, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerPlatformBool, 0x0001);
		}

		// struct FInputAlphaBoolBlend
		TEST_METHOD(ScriptStruct__Engine__InputAlphaBoolBlend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, BlendInTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, BlendOutTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, BlendOption, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, bInitialized, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, UnknownData_XRAQ, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, CustomCurve, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, AlphaBlend, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputAlphaBoolBlend, 0x0048);
		}

		// struct FAnimCurveParam
		TEST_METHOD(ScriptStruct__Engine__AnimCurveParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveParam, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveParam, UnknownData_XZTQ, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimCurveParam, 0x000C);
		}

		// struct FS_GameStatistic
		TEST_METHOD(UserDefinedStruct__S_GameStatistic__S_GameStatistic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_GameStatistic, PlayerID_66_E0CF65A84854CE61137E73AA3EC52BA1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_GameStatistic, UnknownData_RJMI, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_GameStatistic, GamesparkID_69_6E07DBB84E2FD52B903035B37B43B7E7, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_GameStatistic, Role_89_376EC68D4FEF5E49B775D8ACB2CF7FD2, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_GameStatistic, UnknownData_IP7U, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_GameStatistic, ItemsUsed_16_B3144A6A4F992F1C81909AA1C355A7A4, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_GameStatistic, ItemsSuccess_17_38ECAAF8479A3D6B73AE4EAA525F8C62, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_GameStatistic, ItemsEmpty_30_7F76044A4751BF1EAD3F8BAA1B837258, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_GameStatistic, CarryItem_42_ED5FCFD04E5D45A1521653BD38F20C69, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_GameStatistic, PingEnemyCount_20_024C649E4A6441EFD62BDB976704F121, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_GameStatistic, OpenChestCount_34_455259694953152D07D8C58DFCA8ACED, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_GameStatistic, ReviveCount_37_AB45317C426105C95BF59986F8998BE4, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_GameStatistic, Resurrect_53_395DE0BE4161AD1EC8113794157D6F38, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_GameStatistic, CloseEnemyTime_23_F09A451B43A91869301BEA953C3FCF6F, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_GameStatistic, FullHPTime_25_531C698545489EAF89ED1195B6CEDA33, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_GameStatistic, DamageDone_45_56D7C60C45BEEB4C80CEED9F5E2AEB0B, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_GameStatistic, DamageDoneCount_56_72CB5E3840ED7DC72CF8DAB3CE7A0016, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_GameStatistic, DamageReceive_47_9DCF64714681797C645EC4A7355652D5, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_GameStatistic, DamageReceiveCount_57_DC72316042D5725041DCF7A07D451699, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_GameStatistic, PerfectSuccess_50_9B1E826D427656766FF5BA9A6827E917, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_GameStatistic, DestroyedEnvir_62_CA0E133A4EBE54F7E4DB2D8A0A2ED9C6, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_GameStatistic, DestroyedEnvirWithSur_63_250B1C9C405B70E12EA2279AD43173CD, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_GameStatistic, DeathCount_72_B9F5C4434956E171A9FFC3A6862F3D99, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_GameStatistic, KillCount_105_7BDB78F04281B12CA90382A3AE273D35, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_GameStatistic, DamageTrapDone_79_33B5856846AE701E8F45BFA8DEFA154D, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_GameStatistic, DamageTrapDoneCount_81_5DBF4B3644429467E0E50BBABB9E572C, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_GameStatistic, DamageTrapReceive_86_2D49A55D4D6EE969001DA382725C36E0, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_GameStatistic, DamageTrapReceiveCount_85_BB813BF5498D4714D16756AF468F49D3, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_GameStatistic, IsHunterTerminated_94_F146C93842D29BEBCD91969E680C9739, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_GameStatistic, UnknownData_MEB5, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_GameStatistic, RemainingHP_99_9839729146FDA37EFFF45EB974B8E5CE, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_GameStatistic, RemainingHPTotal_125_BD683DA54B9F49FFDD9EE0ACBA12A33C, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_GameStatistic, IsLeaveGame_102_02ECB9D94D586777E8DCA5A155700797, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_GameStatistic, IsWin_108_30052F734E0A1B5EF3E1888C8B384596, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_GameStatistic, UnknownData_C572, 0x00BE);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_GameStatistic, FirstDieTime_112_FF1D855D412B7A09C1FEC29AA69EEADC, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_GameStatistic, SecondDieTime_119_B8C4910741D7076714FD1B938C935994, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_GameStatistic, RitualComplete_116_9C89686347255BA627159F8868627987, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_GameStatistic, RitualContribution_128_7E9E9AA6432C56C9C5C1F187B9D3FEB8, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_GameStatistic, UseActivePerk_122_60240B6F414A9AA3223E0695ADE43285, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_GameStatistic, 0x00D4);
		}

		// struct FMovieSceneBinding
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBinding, ObjectGuid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBinding, BindingName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBinding, Tracks, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneBinding, 0x0030);
		}

		// struct FMovieSceneObjectBindingID
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneObjectBindingID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectBindingID, SequenceID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectBindingID, Space, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectBindingID, UnknownData_518J, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectBindingID, Guid, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneObjectBindingID, 0x0018);
		}

		// struct FMovieSceneBindingOverrideData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneBindingOverrideData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBindingOverrideData, ObjectBindingID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBindingOverrideData, Object, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBindingOverrideData, bOverridesDefault, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBindingOverrideData, UnknownData_DH6N, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneBindingOverrideData, 0x0024);
		}

		// struct FOptionalMovieSceneBlendType
		TEST_METHOD(ScriptStruct__MovieScene__OptionalMovieSceneBlendType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOptionalMovieSceneBlendType, BlendType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOptionalMovieSceneBlendType, bIsValid, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOptionalMovieSceneBlendType, 0x0002);
		}

		// struct FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneChannel, UnknownData_XSAZ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneChannel, 0x0008);
		}

		// struct FMovieSceneByteChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneByteChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, Times, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, DefaultValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, bHasDefaultValue, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, UnknownData_37UP, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, Values, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, Enum, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, UnknownData_A5GM, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneByteChannel, 0x0098);
		}

		// struct FMovieSceneEmptyStruct
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEmptyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEmptyStruct, UnknownData_XL75, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEmptyStruct, 0x0001);
		}

		// struct FMovieSceneEvaluationGroupLUTIndex
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationGroupLUTIndex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationGroupLUTIndex, LUTOffset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationGroupLUTIndex, NumInitPtrs, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationGroupLUTIndex, NumEvalPtrs, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationGroupLUTIndex, 0x000C);
		}

		// struct FMovieSceneSequenceID
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceID, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceID, 0x0004);
		}

		// struct FMovieSceneTrackIdentifier
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackIdentifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackIdentifier, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackIdentifier, 0x0004);
		}

		// struct FMovieSceneEvaluationFieldTrackPtr
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationFieldTrackPtr)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldTrackPtr, SequenceID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldTrackPtr, TrackIdentifier, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationFieldTrackPtr, 0x0008);
		}

		// struct FMovieSceneSegmentIdentifier
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSegmentIdentifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSegmentIdentifier, IdentifierIndex, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSegmentIdentifier, 0x0004);
		}

		// struct FMovieSceneEvaluationFieldSegmentPtr : public FMovieSceneEvaluationFieldTrackPtr
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationFieldSegmentPtr)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldSegmentPtr, SegmentID, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationFieldSegmentPtr, 0x000C);
		}

		// struct FMovieSceneEvaluationGroup
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationGroup, LUTIndices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationGroup, SegmentPtrLUT, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationGroup, 0x0020);
		}

		// struct FMovieSceneEvaluationKey
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationKey, SequenceID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationKey, TrackIdentifier, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationKey, SectionIndex, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationKey, 0x000C);
		}

		// struct FMovieSceneOrderedEvaluationKey
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneOrderedEvaluationKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneOrderedEvaluationKey, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneOrderedEvaluationKey, EvaluationIndex, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneOrderedEvaluationKey, 0x0010);
		}

		// struct FMovieSceneEvaluationMetaData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationMetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationMetaData, ActiveSequences, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationMetaData, ActiveEntities, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationMetaData, SubTemplateSerialNumbers, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationMetaData, 0x0070);
		}

		// struct FMovieSceneFrameRange
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneFrameRange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFrameRange, UnknownData_DBVC, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFrameRange, 0x0010);
		}

		// struct FMovieSceneEvaluationField
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationField, Ranges, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationField, Groups, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationField, MetaData, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationField, 0x0030);
		}

		// struct FMovieSceneSubSectionFieldData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSubSectionFieldData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSectionFieldData, UnknownData_X952, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSubSectionFieldData, 0x0060);
		}

		// struct FMovieSceneTrackEvalOptions
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackEvalOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackEvalOptions, UnknownData_YRUK, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackEvalOptions, 0x0004);
		}

		// struct FMovieSceneSegment
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSegment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSegment, UnknownData_ZNHG, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSegment, 0x0058);
		}

		// struct FMovieSceneEvaluationTrackSegments
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationTrackSegments)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrackSegments, SegmentIdentifierToIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrackSegments, SortedSegments, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationTrackSegments, 0x0020);
		}

		// struct FSectionEvaluationDataTree
		TEST_METHOD(ScriptStruct__MovieScene__SectionEvaluationDataTree)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSectionEvaluationDataTree, UnknownData_7XRU, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSectionEvaluationDataTree, 0x0060);
		}

		// struct FMovieSceneEvalTemplatePtr
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvalTemplatePtr)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplatePtr, UnknownData_G332, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvalTemplatePtr, 0x0038);
		}

		// struct FMovieSceneTrackImplementationPtr
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackImplementationPtr)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackImplementationPtr, UnknownData_H612, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackImplementationPtr, 0x0038);
		}

		// struct FMovieSceneEvaluationTrack
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, ObjectBindingID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, EvaluationPriority, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, EvaluationMethod, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, UnknownData_MKQQ, 0x0013);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, Segments, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, SourceTrack, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, EvaluationTree, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, ChildTemplates, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, TrackTemplate, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, EvaluationGroup, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, UnknownData_3GVL, 0x00F1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationTrack, 0x00F8);
		}

		// struct FMovieSceneSequenceHierarchyNode
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceHierarchyNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchyNode, ParentID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchyNode, UnknownData_HYA9, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchyNode, Children, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceHierarchyNode, 0x0018);
		}

		// struct FMovieSceneSequenceTransform
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceTransform, TimeScale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceTransform, Offset, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceTransform, 0x000C);
		}

		// struct FMovieSceneSequenceInstanceDataPtr
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceInstanceDataPtr)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceInstanceDataPtr, UnknownData_Z7J9, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceInstanceDataPtr, 0x0018);
		}

		// struct FMovieSceneSubSequenceData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSubSequenceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, Sequence, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, RootToSequenceTransform, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, TickResolution, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, DeterministicSequenceID, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, PlayRange, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, PreRollRange, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, PostRollRange, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, HierarchicalBias, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, UnknownData_2ROW, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, InstanceData, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, UnknownData_44RZ, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, SubSectionSignature, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, OuterToInnerTransform, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, UnknownData_NXAY, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSubSequenceData, 0x00A8);
		}

		// struct FMovieSceneSequenceHierarchy
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceHierarchy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchy, SubSequences, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchy, Hierarchy, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceHierarchy, 0x00A0);
		}

		// struct FMovieSceneEvaluationTemplateSerialNumber
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationTemplateSerialNumber)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplateSerialNumber, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationTemplateSerialNumber, 0x0004);
		}

		// struct FMovieSceneTemplateGenerationLedger
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTemplateGenerationLedger)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTemplateGenerationLedger, LastTrackIdentifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTemplateGenerationLedger, UnknownData_0KM7, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTemplateGenerationLedger, TrackSignatureToTrackIdentifier, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTemplateGenerationLedger, SubSectionRanges, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTemplateGenerationLedger, 0x00A8);
		}

		// struct FMovieSceneTrackFieldData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackFieldData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackFieldData, UnknownData_GGOO, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackFieldData, 0x0060);
		}

		// struct FMovieSceneEvaluationTemplate
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, Tracks, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, UnknownData_2RI6, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, EvaluationField, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, Hierarchy, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, SequenceSignature, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, TemplateSerialNumber, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, UnknownData_1K4A, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, TemplateLedger, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, TrackFieldData, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, SubSectionFieldData, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationTemplate, 0x02F0);
		}

		// struct FMovieSceneEasingSettings
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEasingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, AutoEaseInDuration, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, AutoEaseOutDuration, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, EaseIn, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, bManualEaseIn, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, UnknownData_P3RL, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, ManualEaseInDuration, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, EaseOut, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, bManualEaseOut, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, UnknownData_8SSO, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, ManualEaseOutDuration, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEasingSettings, 0x0038);
		}

		// struct FMovieSceneMarkedFrame
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneMarkedFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarkedFrame, FrameNumber, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarkedFrame, UnknownData_CVAV, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarkedFrame, Label, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneMarkedFrame, 0x0018);
		}

		// struct FMovieSceneBoolChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneBoolChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, Times, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, DefaultValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, bHasDefaultValue, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, UnknownData_SRA3, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, Values, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, UnknownData_ZI7E, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneBoolChannel, 0x0090);
		}

		// struct FMovieSceneSequenceInstanceData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceInstanceData, UnknownData_P2IT, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceInstanceData, 0x0008);
		}

		// struct FMovieSceneEvaluationOperand
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationOperand)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationOperand, ObjectBindingID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationOperand, SequenceID, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationOperand, 0x0014);
		}

		// struct FMovieSceneTangentData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTangentData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, ArriveTangent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, LeaveTangent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, TangentWeightMode, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, UnknownData_73Q1, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, ArriveTangentWeight, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, LeaveTangentWeight, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTangentData, 0x0014);
		}

		// struct FMovieSceneFloatValue
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneFloatValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, InterpMode, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, TangentMode, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, UnknownData_GVPY, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, Tangent, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFloatValue, 0x001C);
		}

		// struct FMovieSceneKeyHandleMap : public FKeyHandleLookupTable
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneKeyHandleMap)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneKeyHandleMap, 0x0060);
		}

		// struct FMovieSceneFloatChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneFloatChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, PreInfinityExtrap, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, PostInfinityExtrap, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, UnknownData_D90X, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, Times, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, Values, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, DefaultValue, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, bHasDefaultValue, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, UnknownData_3DQS, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, KeyHandles, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, TickResolution, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFloatChannel, 0x00A0);
		}

		// struct FMovieSceneTrackLabels
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackLabels)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackLabels, Strings, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackLabels, 0x0010);
		}

		// struct FMovieSceneExpansionState
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneExpansionState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneExpansionState, bExpanded, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneExpansionState, 0x0001);
		}

		// struct FMovieSceneEditorData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEditorData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, ExpansionStates, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, ViewStart, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, ViewEnd, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, WorkStart, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, WorkEnd, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, MarkedFrames, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, WorkingRange, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, ViewRange, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEditorData, 0x00E0);
		}

		// struct FMovieSceneTimecodeSource
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTimecodeSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTimecodeSource, Timecode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTimecodeSource, DeltaFrame, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTimecodeSource, 0x0018);
		}

		// struct FMovieSceneSubSectionData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSubSectionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSectionData, Section, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSectionData, ObjectBindingID, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSectionData, Flags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSectionData, UnknownData_7LW2, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSubSectionData, 0x001C);
		}

		// struct FMovieSceneRootEvaluationTemplateInstance
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneRootEvaluationTemplateInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneRootEvaluationTemplateInstance, UnknownData_ILSC, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneRootEvaluationTemplateInstance, DirectorInstances, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneRootEvaluationTemplateInstance, UnknownData_O1UY, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneRootEvaluationTemplateInstance, 0x0300);
		}

		// struct FMovieSceneIntegerChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneIntegerChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, Times, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, DefaultValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, bHasDefaultValue, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, UnknownData_S2HT, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, Values, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, UnknownData_U38H, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneIntegerChannel, 0x0090);
		}

		// struct FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneKeyStruct, UnknownData_P93Q, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneKeyStruct, 0x0008);
		}

		// struct FMovieSceneKeyTimeStruct : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneKeyTimeStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneKeyTimeStruct, Time, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneKeyTimeStruct, UnknownData_H5UJ, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneKeyTimeStruct, 0x0028);
		}

		// struct FGeneratedMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieScene__GeneratedMovieSceneKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeneratedMovieSceneKeyStruct, UnknownData_D3E9, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeneratedMovieSceneKeyStruct, 0x0060);
		}

		// struct FMovieSceneObjectPathChannelKeyValue
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneObjectPathChannelKeyValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPathChannelKeyValue, SoftPtr, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPathChannelKeyValue, HardPtr, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneObjectPathChannelKeyValue, 0x0030);
		}

		// struct FMovieSceneObjectPathChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneObjectPathChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPathChannel, PropertyClass, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPathChannel, Times, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPathChannel, Values, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPathChannel, DefaultValue, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPathChannel, UnknownData_W2SD, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneObjectPathChannel, 0x00C0);
		}

		// struct FMovieScenePossessable
		TEST_METHOD(ScriptStruct__MovieScene__MovieScenePossessable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, Tags, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, Guid, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, Name, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, PossessedObjectClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, ParentGuid, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScenePossessable, 0x0048);
		}

		// struct FMovieScenePropertySectionData
		TEST_METHOD(ScriptStruct__MovieScene__MovieScenePropertySectionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertySectionData, PropertyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertySectionData, PropertyPath, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertySectionData, FunctionName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertySectionData, NotifyFunctionName, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScenePropertySectionData, 0x0028);
		}

		// struct FMovieSceneEvalTemplateBase
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvalTemplateBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplateBase, UnknownData_7CIY, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvalTemplateBase, 0x0010);
		}

		// struct FMovieSceneEvalTemplate : public FMovieSceneEvalTemplateBase
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvalTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplate, CompletionMode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplate, UnknownData_L2WO, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplate, SourceSectionPtr, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplate, UnknownData_HDW4, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvalTemplate, 0x0020);
		}

		// struct FMovieScenePropertySectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieScene__MovieScenePropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertySectionTemplate, PropertyData, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScenePropertySectionTemplate, 0x0048);
		}

		// struct FMovieSceneSectionEvalOptions
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSectionEvalOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionEvalOptions, bCanEditCompletionMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionEvalOptions, CompletionMode, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSectionEvalOptions, 0x0002);
		}

		// struct FMovieSceneSectionParameters
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSectionParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, StartFrameOffset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, TimeScale, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, HierarchicalBias, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, StartOffset, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, PrerollTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, PostrollTime, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSectionParameters, 0x0018);
		}

		// struct FSectionEvaluationData
		TEST_METHOD(ScriptStruct__MovieScene__SectionEvaluationData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSectionEvaluationData, ImplIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSectionEvaluationData, ForcedTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSectionEvaluationData, Flags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSectionEvaluationData, UnknownData_K43C, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSectionEvaluationData, 0x000C);
		}

		// struct FMovieSceneSequenceLoopCount
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceLoopCount)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceLoopCount, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceLoopCount, 0x0004);
		}

		// struct FMovieSceneSequencePlaybackSettings
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequencePlaybackSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, UnknownData_RS2M, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, LoopCount, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, PlayRate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, startTime, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, UnknownData_2E0V, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequencePlaybackSettings, 0x0014);
		}

		// struct FMovieSceneSequenceReplProperties
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceReplProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceReplProperties, LastKnownPosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceReplProperties, LastKnownStatus, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceReplProperties, UnknownData_OD17, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceReplProperties, LastKnownNumLoops, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceReplProperties, 0x0010);
		}

		// struct FMovieSceneSpawnable
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSpawnable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, SpawnTransform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, Tags, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, Guid, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, Name, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, ObjectTemplate, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, ChildPossessables, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, Ownership, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, UnknownData_HT0N, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, LevelName, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, UnknownData_F5WL, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSpawnable, 0x0090);
		}

		// struct FTestMovieSceneEvalTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieScene__TestMovieSceneEvalTemplate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTestMovieSceneEvalTemplate, 0x0020);
		}

		// struct FMovieSceneTrackDisplayOptions
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackDisplayOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackDisplayOptions, UnknownData_JQEX, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackDisplayOptions, 0x0004);
		}

		// struct FMovieSceneTrackImplementation : public FMovieSceneEvalTemplateBase
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackImplementation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackImplementation, 0x0010);
		}

		// struct FS_PingSoundList
		TEST_METHOD(UserDefinedStruct__S_PingSoundList__S_PingSoundList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_PingSoundList, Case_4_E8791AB74F72A1B3F76E80BAFF34A378, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_PingSoundList, UnknownData_VV4J, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_PingSoundList, Sound_5_210034074CDFDD9885B36AB55E794245, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_PingSoundList, _2D_7_3C2572FF47CA504FA532A3B3B19E113D, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_PingSoundList, 0x0011);
		}

		// struct FGSMatchedPlayer
		TEST_METHOD(ScriptStruct__GameSparks__GSMatchedPlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchedPlayer, HasLocation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchedPlayer, UnknownData_5BAN, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchedPlayer, Location, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchedPlayer, HasParticipantData, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchedPlayer, UnknownData_6ULL, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchedPlayer, ParticipantData, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchedPlayer, HasPlayerId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchedPlayer, UnknownData_AZSB, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchedPlayer, PlayerId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchedPlayer, HasSkill, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchedPlayer, UnknownData_NTMW, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchedPlayer, Skill, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchedPlayer, JSONString, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchedPlayer, JSONData, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSMatchedPlayer, 0x0058);
		}

		// struct FGSPendingMatch
		TEST_METHOD(ScriptStruct__GameSparks__GSPendingMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPendingMatch, HasId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPendingMatch, UnknownData_MQZ9, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPendingMatch, ID, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPendingMatch, HasMatchData, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPendingMatch, UnknownData_QAE2, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPendingMatch, MatchData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPendingMatch, HasMatchGroup, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPendingMatch, UnknownData_KH37, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPendingMatch, MatchGroup, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPendingMatch, HasMatchShortCode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPendingMatch, UnknownData_PUKL, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPendingMatch, MatchShortCode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPendingMatch, HasMatchedPlayers, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPendingMatch, UnknownData_A46Y, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPendingMatch, MatchedPlayers, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPendingMatch, HasSkill, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPendingMatch, UnknownData_UYS8, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPendingMatch, Skill, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPendingMatch, JSONString, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPendingMatch, JSONData, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSPendingMatch, 0x0090);
		}

		// struct FGSJoinPendingMatchResponse
		TEST_METHOD(ScriptStruct__GameSparks__GSJoinPendingMatchResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSJoinPendingMatchResponse, Errors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSJoinPendingMatchResponse, HasPendingMatch, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSJoinPendingMatchResponse, UnknownData_LJK2, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSJoinPendingMatchResponse, PendingMatch, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSJoinPendingMatchResponse, HasRequestId, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSJoinPendingMatchResponse, UnknownData_DE6J, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSJoinPendingMatchResponse, RequestId, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSJoinPendingMatchResponse, HasScriptData, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSJoinPendingMatchResponse, UnknownData_YCOT, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSJoinPendingMatchResponse, ScriptData, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSJoinPendingMatchResponse, JSONString, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSJoinPendingMatchResponse, JSONData, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSJoinPendingMatchResponse, 0x00E0);
		}

		// struct FGSPlayer
		TEST_METHOD(ScriptStruct__GameSparks__GSPlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayer, HasAchievements, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayer, UnknownData_36J7, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayer, Achievements, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayer, HasDisplayName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayer, UnknownData_372I, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayer, DisplayName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayer, HasExternalIds, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayer, UnknownData_RA88, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayer, ExternalIds, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayer, HasId, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayer, UnknownData_HRKP, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayer, ID, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayer, HasOnline, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayer, Online, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayer, HasScriptData, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayer, UnknownData_1AQU, 0x005B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayer, ScriptData, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayer, HasVirtualGoods, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayer, UnknownData_OR00, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayer, VirtualGoods, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayer, JSONString, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayer, JSONData, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSPlayer, 0x0098);
		}

		// struct FGSJoinTeamResponse
		TEST_METHOD(ScriptStruct__GameSparks__GSJoinTeamResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSJoinTeamResponse, Errors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSJoinTeamResponse, HasMembers, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSJoinTeamResponse, UnknownData_HI5L, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSJoinTeamResponse, Members, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSJoinTeamResponse, HasOwner, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSJoinTeamResponse, UnknownData_GTW4, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSJoinTeamResponse, Owner, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSJoinTeamResponse, HasRequestId, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSJoinTeamResponse, UnknownData_5D7P, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSJoinTeamResponse, RequestId, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSJoinTeamResponse, HasScriptData, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSJoinTeamResponse, UnknownData_VRAT, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSJoinTeamResponse, ScriptData, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSJoinTeamResponse, HasTeamId, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSJoinTeamResponse, UnknownData_K71N, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSJoinTeamResponse, TeamId, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSJoinTeamResponse, HasTeamName, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSJoinTeamResponse, UnknownData_2NOZ, 0x0101);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSJoinTeamResponse, TeamName, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSJoinTeamResponse, HasTeamType, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSJoinTeamResponse, UnknownData_ZHKZ, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSJoinTeamResponse, TeamType, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSJoinTeamResponse, JSONString, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSJoinTeamResponse, JSONData, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSJoinTeamResponse, 0x0148);
		}

		// struct FGSLeaderboardData
		TEST_METHOD(ScriptStruct__GameSparks__GSLeaderboardData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardData, HasCity, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardData, UnknownData_J49F, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardData, City, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardData, HasCountry, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardData, UnknownData_V075, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardData, Country, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardData, HasExternalIds, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardData, UnknownData_QD16, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardData, ExternalIds, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardData, HasRank, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardData, UnknownData_P1GZ, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardData, Rank, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardData, HasUserId, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardData, UnknownData_03II, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardData, UserId, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardData, HasUserName, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardData, UnknownData_WKEU, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardData, Username, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardData, HasWhen, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardData, UnknownData_H6HT, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardData, When, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardData, JSONString, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardData, JSONData, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSLeaderboardData, 0x00A8);
		}

		// struct FGSLeaderboardDataResponse
		TEST_METHOD(ScriptStruct__GameSparks__GSLeaderboardDataResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardDataResponse, Errors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardDataResponse, HasChallengeInstanceId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardDataResponse, UnknownData_ZUZW, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardDataResponse, ChallengeInstanceId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardDataResponse, HasData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardDataResponse, UnknownData_OH2X, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardDataResponse, Data, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardDataResponse, HasFirst, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardDataResponse, UnknownData_ULIV, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardDataResponse, First, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardDataResponse, HasLast, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardDataResponse, UnknownData_878A, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardDataResponse, Last, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardDataResponse, HasLeaderboardShortCode, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardDataResponse, UnknownData_C8X5, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardDataResponse, LeaderboardShortCode, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardDataResponse, HasRequestId, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardDataResponse, UnknownData_A3UU, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardDataResponse, RequestId, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardDataResponse, HasScriptData, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardDataResponse, UnknownData_SURP, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardDataResponse, ScriptData, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardDataResponse, JSONString, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardDataResponse, JSONData, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSLeaderboardDataResponse, 0x00C0);
		}

		// struct FGSLeaderboardsEntriesResponse
		TEST_METHOD(ScriptStruct__GameSparks__GSLeaderboardsEntriesResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardsEntriesResponse, Errors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardsEntriesResponse, HasRequestId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardsEntriesResponse, UnknownData_MMBZ, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardsEntriesResponse, RequestId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardsEntriesResponse, HasScriptData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardsEntriesResponse, UnknownData_1YII, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardsEntriesResponse, ScriptData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardsEntriesResponse, JSONString, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardsEntriesResponse, JSONData, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSLeaderboardsEntriesResponse, 0x0048);
		}

		// struct FGSLeaveTeamResponse
		TEST_METHOD(ScriptStruct__GameSparks__GSLeaveTeamResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaveTeamResponse, Errors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaveTeamResponse, HasMembers, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaveTeamResponse, UnknownData_VH8R, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaveTeamResponse, Members, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaveTeamResponse, HasOwner, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaveTeamResponse, UnknownData_Z29B, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaveTeamResponse, Owner, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaveTeamResponse, HasRequestId, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaveTeamResponse, UnknownData_PP48, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaveTeamResponse, RequestId, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaveTeamResponse, HasScriptData, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaveTeamResponse, UnknownData_DMT5, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaveTeamResponse, ScriptData, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaveTeamResponse, HasTeamId, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaveTeamResponse, UnknownData_M80B, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaveTeamResponse, TeamId, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaveTeamResponse, HasTeamName, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaveTeamResponse, UnknownData_371Y, 0x0101);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaveTeamResponse, TeamName, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaveTeamResponse, HasTeamType, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaveTeamResponse, UnknownData_M5DE, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaveTeamResponse, TeamType, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaveTeamResponse, JSONString, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaveTeamResponse, JSONData, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSLeaveTeamResponse, 0x0148);
		}

		// struct FGSAchievement
		TEST_METHOD(ScriptStruct__GameSparks__GSAchievement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAchievement, HasDescription, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAchievement, UnknownData_V4WN, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAchievement, Description, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAchievement, HasEarned, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAchievement, Earned, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAchievement, HasName, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAchievement, UnknownData_YT3N, 0x001B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAchievement, Name, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAchievement, HasPropertySet, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAchievement, UnknownData_GJOC, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAchievement, PropertySet, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAchievement, HasShortCode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAchievement, UnknownData_Z06D, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAchievement, ShortCode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAchievement, JSONString, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAchievement, JSONData, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSAchievement, 0x0070);
		}

		// struct FGSListAchievementsResponse
		TEST_METHOD(ScriptStruct__GameSparks__GSListAchievementsResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListAchievementsResponse, Errors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListAchievementsResponse, HasAchievements, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListAchievementsResponse, UnknownData_QFMS, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListAchievementsResponse, Achievements, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListAchievementsResponse, HasRequestId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListAchievementsResponse, UnknownData_Z3LN, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListAchievementsResponse, RequestId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListAchievementsResponse, HasScriptData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListAchievementsResponse, UnknownData_JR8O, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListAchievementsResponse, ScriptData, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListAchievementsResponse, JSONString, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListAchievementsResponse, JSONData, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSListAchievementsResponse, 0x0060);
		}

		// struct FGSBulkJob
		TEST_METHOD(ScriptStruct__GameSparks__GSBulkJob)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBulkJob, HasActualCount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBulkJob, UnknownData_L0JT, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBulkJob, ActualCount, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBulkJob, HasCompleted, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBulkJob, UnknownData_DMNY, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBulkJob, Completed, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBulkJob, HasCreated, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBulkJob, UnknownData_44YK, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBulkJob, Created, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBulkJob, HasData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBulkJob, UnknownData_4J7N, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBulkJob, Data, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBulkJob, HasDoneCount, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBulkJob, UnknownData_JEAT, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBulkJob, DoneCount, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBulkJob, HasErrorCount, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBulkJob, UnknownData_FKGC, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBulkJob, ErrorCount, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBulkJob, HasEstimatedCount, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBulkJob, UnknownData_ZCHL, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBulkJob, EstimatedCount, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBulkJob, HasId, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBulkJob, UnknownData_Z5SL, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBulkJob, ID, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBulkJob, HasModuleShortCode, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBulkJob, UnknownData_Z9W3, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBulkJob, ModuleShortCode, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBulkJob, HasPlayerQuery, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBulkJob, UnknownData_JRHM, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBulkJob, PlayerQuery, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBulkJob, HasScheduledTime, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBulkJob, UnknownData_H648, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBulkJob, ScheduledTime, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBulkJob, HasScript, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBulkJob, UnknownData_X6I9, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBulkJob, Script, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBulkJob, HasStarted, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBulkJob, UnknownData_IL55, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBulkJob, Started, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBulkJob, HasState, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBulkJob, UnknownData_11EA, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBulkJob, State, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBulkJob, JSONString, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBulkJob, JSONData, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSBulkJob, 0x0118);
		}

		// struct FGSListBulkJobsAdminResponse
		TEST_METHOD(ScriptStruct__GameSparks__GSListBulkJobsAdminResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListBulkJobsAdminResponse, Errors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListBulkJobsAdminResponse, HasBulkJobs, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListBulkJobsAdminResponse, UnknownData_ZYHJ, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListBulkJobsAdminResponse, BulkJobs, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListBulkJobsAdminResponse, HasRequestId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListBulkJobsAdminResponse, UnknownData_WN5N, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListBulkJobsAdminResponse, RequestId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListBulkJobsAdminResponse, HasScriptData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListBulkJobsAdminResponse, UnknownData_2DH1, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListBulkJobsAdminResponse, ScriptData, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListBulkJobsAdminResponse, JSONString, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListBulkJobsAdminResponse, JSONData, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSListBulkJobsAdminResponse, 0x0060);
		}

		// struct FGSPlayerDetail
		TEST_METHOD(ScriptStruct__GameSparks__GSPlayerDetail)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayerDetail, HasExternalIds, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayerDetail, UnknownData_QRLU, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayerDetail, ExternalIds, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayerDetail, HasId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayerDetail, UnknownData_MC71, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayerDetail, ID, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayerDetail, HasName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayerDetail, UnknownData_WUIO, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayerDetail, Name, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayerDetail, JSONString, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayerDetail, JSONData, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSPlayerDetail, 0x0058);
		}

		// struct FGSPlayerTurnCount
		TEST_METHOD(ScriptStruct__GameSparks__GSPlayerTurnCount)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayerTurnCount, HasCount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayerTurnCount, UnknownData_MO8E, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayerTurnCount, Count, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayerTurnCount, HasPlayerId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayerTurnCount, UnknownData_0B40, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayerTurnCount, PlayerId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayerTurnCount, JSONString, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayerTurnCount, JSONData, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSPlayerTurnCount, 0x0048);
		}

		// struct FGSChallenge
		TEST_METHOD(ScriptStruct__GameSparks__GSChallenge)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallenge, HasAccepted, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallenge, UnknownData_U49Q, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallenge, Accepted, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallenge, HasChallengeId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallenge, UnknownData_CPV5, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallenge, ChallengeId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallenge, HasChallengeMessage, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallenge, UnknownData_TJGP, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallenge, ChallengeMessage, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallenge, HasChallengeName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallenge, UnknownData_MSQZ, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallenge, ChallengeName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallenge, HasChallenged, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallenge, UnknownData_JA9F, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallenge, Challenged, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallenge, HasChallenger, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallenge, UnknownData_Z4TX, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallenge, Challenger, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallenge, HasCurrency1Wager, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallenge, UnknownData_5GCA, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallenge, Currency1Wager, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallenge, HasCurrency2Wager, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallenge, UnknownData_VSCR, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallenge, Currency2Wager, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallenge, HasCurrency3Wager, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallenge, UnknownData_O48F, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallenge, Currency3Wager, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallenge, HasCurrency4Wager, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallenge, UnknownData_Z7L1, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallenge, Currency4Wager, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallenge, HasCurrency5Wager, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallenge, UnknownData_FE9O, 0x00F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallenge, Currency5Wager, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallenge, HasCurrency6Wager, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallenge, UnknownData_MEN3, 0x0101);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallenge, Currency6Wager, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallenge, HasCurrencyWagers, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallenge, UnknownData_7J4Z, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallenge, CurrencyWagers, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallenge, HasDeclined, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallenge, UnknownData_BYA0, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallenge, Declined, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallenge, HasEndDate, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallenge, UnknownData_KLV5, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallenge, EndDate, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallenge, HasExpiryDate, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallenge, UnknownData_NVJB, 0x0149);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallenge, ExpiryDate, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallenge, HasMaxTurns, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallenge, UnknownData_HYBS, 0x0161);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallenge, MaxTurns, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallenge, HasNextPlayer, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallenge, UnknownData_ULAM, 0x0169);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallenge, NextPlayer, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallenge, HasScriptData, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallenge, UnknownData_ZHAU, 0x0181);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallenge, ScriptData, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallenge, HasShortCode, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallenge, UnknownData_4FL1, 0x0191);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallenge, ShortCode, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallenge, HasStartDate, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallenge, UnknownData_3ICM, 0x01A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallenge, StartDate, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallenge, HasState, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallenge, UnknownData_XMP0, 0x01C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallenge, State, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallenge, HasTurnCount, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallenge, UnknownData_3H5O, 0x01D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallenge, TurnCount, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallenge, JSONString, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallenge, JSONData, 0x0200);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSChallenge, 0x0208);
		}

		// struct FGSListChallengeResponse
		TEST_METHOD(ScriptStruct__GameSparks__GSListChallengeResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListChallengeResponse, Errors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListChallengeResponse, HasChallengeInstances, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListChallengeResponse, UnknownData_VMP2, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListChallengeResponse, ChallengeInstances, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListChallengeResponse, HasRequestId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListChallengeResponse, UnknownData_Q09I, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListChallengeResponse, RequestId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListChallengeResponse, HasScriptData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListChallengeResponse, UnknownData_ZAFM, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListChallengeResponse, ScriptData, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListChallengeResponse, JSONString, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListChallengeResponse, JSONData, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSListChallengeResponse, 0x0060);
		}

		// struct FGSChallengeType
		TEST_METHOD(ScriptStruct__GameSparks__GSChallengeType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeType, HasChallengeShortCode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeType, UnknownData_LB3M, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeType, ChallengeShortCode, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeType, HasDescription, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeType, UnknownData_8ULD, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeType, Description, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeType, HasGetleaderboardName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeType, UnknownData_RF5C, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeType, GetleaderboardName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeType, HasName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeType, UnknownData_0G1H, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeType, Name, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeType, HasTags, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeType, UnknownData_BKQO, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeType, Tags, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeType, JSONString, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeType, JSONData, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSChallengeType, 0x0090);
		}

		// struct FGSListChallengeTypeResponse
		TEST_METHOD(ScriptStruct__GameSparks__GSListChallengeTypeResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListChallengeTypeResponse, Errors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListChallengeTypeResponse, HasChallengeTemplates, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListChallengeTypeResponse, UnknownData_07JE, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListChallengeTypeResponse, ChallengeTemplates, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListChallengeTypeResponse, HasRequestId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListChallengeTypeResponse, UnknownData_I53I, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListChallengeTypeResponse, RequestId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListChallengeTypeResponse, HasScriptData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListChallengeTypeResponse, UnknownData_9HIC, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListChallengeTypeResponse, ScriptData, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListChallengeTypeResponse, JSONString, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListChallengeTypeResponse, JSONData, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSListChallengeTypeResponse, 0x0060);
		}

		// struct FGSListGameFriendsResponse
		TEST_METHOD(ScriptStruct__GameSparks__GSListGameFriendsResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListGameFriendsResponse, Errors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListGameFriendsResponse, HasFriends, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListGameFriendsResponse, UnknownData_M4ON, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListGameFriendsResponse, Friends, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListGameFriendsResponse, HasRequestId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListGameFriendsResponse, UnknownData_ZRHQ, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListGameFriendsResponse, RequestId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListGameFriendsResponse, HasScriptData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListGameFriendsResponse, UnknownData_DCOT, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListGameFriendsResponse, ScriptData, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListGameFriendsResponse, JSONString, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListGameFriendsResponse, JSONData, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSListGameFriendsResponse, 0x0060);
		}

		// struct FGSInvitableFriend
		TEST_METHOD(ScriptStruct__GameSparks__GSInvitableFriend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSInvitableFriend, HasDisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSInvitableFriend, UnknownData_F59V, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSInvitableFriend, DisplayName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSInvitableFriend, HasId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSInvitableFriend, UnknownData_HG32, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSInvitableFriend, ID, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSInvitableFriend, HasProfilePic, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSInvitableFriend, UnknownData_82WS, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSInvitableFriend, ProfilePic, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSInvitableFriend, JSONString, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSInvitableFriend, JSONData, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSInvitableFriend, 0x0060);
		}

		// struct FGSListInviteFriendsResponse
		TEST_METHOD(ScriptStruct__GameSparks__GSListInviteFriendsResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListInviteFriendsResponse, Errors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListInviteFriendsResponse, HasFriends, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListInviteFriendsResponse, UnknownData_KP6B, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListInviteFriendsResponse, Friends, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListInviteFriendsResponse, HasRequestId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListInviteFriendsResponse, UnknownData_IDOI, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListInviteFriendsResponse, RequestId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListInviteFriendsResponse, HasScriptData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListInviteFriendsResponse, UnknownData_5W87, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListInviteFriendsResponse, ScriptData, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListInviteFriendsResponse, JSONString, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListInviteFriendsResponse, JSONData, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSListInviteFriendsResponse, 0x0060);
		}

		// struct FGSLeaderboard
		TEST_METHOD(ScriptStruct__GameSparks__GSLeaderboard)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboard, HasDescription, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboard, UnknownData_OCYJ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboard, Description, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboard, HasName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboard, UnknownData_04ZU, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboard, Name, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboard, HasPropertySet, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboard, UnknownData_64RI, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboard, PropertySet, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboard, HasShortCode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboard, UnknownData_5U69, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboard, ShortCode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboard, JSONString, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboard, JSONData, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSLeaderboard, 0x0070);
		}

		// struct FGSListLeaderboardsResponse
		TEST_METHOD(ScriptStruct__GameSparks__GSListLeaderboardsResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListLeaderboardsResponse, Errors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListLeaderboardsResponse, HasLeaderboards, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListLeaderboardsResponse, UnknownData_2RCG, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListLeaderboardsResponse, Leaderboards, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListLeaderboardsResponse, HasRequestId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListLeaderboardsResponse, UnknownData_TGY6, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListLeaderboardsResponse, RequestId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListLeaderboardsResponse, HasScriptData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListLeaderboardsResponse, UnknownData_90TG, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListLeaderboardsResponse, ScriptData, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListLeaderboardsResponse, JSONString, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListLeaderboardsResponse, JSONData, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSListLeaderboardsResponse, 0x0060);
		}

		// struct FGSPlayerMessage
		TEST_METHOD(ScriptStruct__GameSparks__GSPlayerMessage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayerMessage, HasId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayerMessage, UnknownData_74R2, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayerMessage, ID, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayerMessage, HasMessage, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayerMessage, UnknownData_P9UL, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayerMessage, Message, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayerMessage, HasSeen, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayerMessage, Seen, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayerMessage, HasStatus, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayerMessage, UnknownData_YV0Y, 0x002B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayerMessage, Status, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayerMessage, HasWhen, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayerMessage, UnknownData_57SF, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayerMessage, When, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayerMessage, JSONString, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayerMessage, JSONData, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSPlayerMessage, 0x0070);
		}

		// struct FGSListMessageDetailResponse
		TEST_METHOD(ScriptStruct__GameSparks__GSListMessageDetailResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListMessageDetailResponse, Errors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListMessageDetailResponse, HasMessageList, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListMessageDetailResponse, UnknownData_9J66, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListMessageDetailResponse, MessageList, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListMessageDetailResponse, HasRequestId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListMessageDetailResponse, UnknownData_EQSO, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListMessageDetailResponse, RequestId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListMessageDetailResponse, HasScriptData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListMessageDetailResponse, UnknownData_B6V2, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListMessageDetailResponse, ScriptData, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListMessageDetailResponse, JSONString, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListMessageDetailResponse, JSONData, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSListMessageDetailResponse, 0x0060);
		}

		// struct FGSListMessageResponse
		TEST_METHOD(ScriptStruct__GameSparks__GSListMessageResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListMessageResponse, Errors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListMessageResponse, HasMessageList, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListMessageResponse, UnknownData_G3GG, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListMessageResponse, MessageList, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListMessageResponse, HasRequestId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListMessageResponse, UnknownData_UW4O, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListMessageResponse, RequestId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListMessageResponse, HasScriptData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListMessageResponse, UnknownData_830C, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListMessageResponse, ScriptData, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListMessageResponse, JSONString, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListMessageResponse, JSONData, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSListMessageResponse, 0x0060);
		}

		// struct FGSListMessageSummaryResponse
		TEST_METHOD(ScriptStruct__GameSparks__GSListMessageSummaryResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListMessageSummaryResponse, Errors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListMessageSummaryResponse, HasMessageList, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListMessageSummaryResponse, UnknownData_3TG9, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListMessageSummaryResponse, MessageList, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListMessageSummaryResponse, HasRequestId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListMessageSummaryResponse, UnknownData_BKPY, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListMessageSummaryResponse, RequestId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListMessageSummaryResponse, HasScriptData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListMessageSummaryResponse, UnknownData_RXM6, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListMessageSummaryResponse, ScriptData, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListMessageSummaryResponse, JSONString, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListMessageSummaryResponse, JSONData, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSListMessageSummaryResponse, 0x0060);
		}

		// struct FGSChatMessage
		TEST_METHOD(ScriptStruct__GameSparks__GSChatMessage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChatMessage, HasFromId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChatMessage, UnknownData_2XFN, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChatMessage, FromId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChatMessage, HasId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChatMessage, UnknownData_9HY1, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChatMessage, ID, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChatMessage, HasMessage, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChatMessage, UnknownData_Q4RF, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChatMessage, Message, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChatMessage, HasWhen, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChatMessage, UnknownData_PH1G, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChatMessage, When, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChatMessage, HasWho, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChatMessage, UnknownData_JOU5, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChatMessage, Who, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChatMessage, JSONString, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChatMessage, JSONData, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSChatMessage, 0x0090);
		}

		// struct FGSListTeamChatResponse
		TEST_METHOD(ScriptStruct__GameSparks__GSListTeamChatResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListTeamChatResponse, Errors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListTeamChatResponse, HasMessages, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListTeamChatResponse, UnknownData_I5B8, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListTeamChatResponse, Messages, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListTeamChatResponse, HasRequestId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListTeamChatResponse, UnknownData_EX7V, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListTeamChatResponse, RequestId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListTeamChatResponse, HasScriptData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListTeamChatResponse, UnknownData_SO5Z, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListTeamChatResponse, ScriptData, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListTeamChatResponse, JSONString, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListTeamChatResponse, JSONData, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSListTeamChatResponse, 0x0060);
		}

		// struct FGSTeam
		TEST_METHOD(ScriptStruct__GameSparks__GSTeam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeam, HasMembers, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeam, UnknownData_1EFG, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeam, Members, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeam, HasOwner, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeam, UnknownData_ZDEJ, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeam, Owner, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeam, HasTeamId, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeam, UnknownData_MBQM, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeam, TeamId, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeam, HasTeamName, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeam, UnknownData_0EGP, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeam, TeamName, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeam, HasTeamType, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeam, UnknownData_2HRM, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeam, TeamType, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeam, JSONString, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeam, JSONData, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSTeam, 0x0118);
		}

		// struct FGSListTeamsResponse
		TEST_METHOD(ScriptStruct__GameSparks__GSListTeamsResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListTeamsResponse, Errors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListTeamsResponse, HasRequestId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListTeamsResponse, UnknownData_SRN5, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListTeamsResponse, RequestId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListTeamsResponse, HasScriptData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListTeamsResponse, UnknownData_IYUY, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListTeamsResponse, ScriptData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListTeamsResponse, HasTeams, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListTeamsResponse, UnknownData_I1DI, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListTeamsResponse, Teams, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListTeamsResponse, JSONString, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListTeamsResponse, JSONData, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSListTeamsResponse, 0x0060);
		}

		// struct FGSPlayerTransactionItem
		TEST_METHOD(ScriptStruct__GameSparks__GSPlayerTransactionItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayerTransactionItem, HasAmount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayerTransactionItem, UnknownData_IKTG, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayerTransactionItem, Amount, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayerTransactionItem, HasNewValue, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayerTransactionItem, UnknownData_DB2G, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayerTransactionItem, NewValue, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayerTransactionItem, HasType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayerTransactionItem, UnknownData_40ZE, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayerTransactionItem, Type, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayerTransactionItem, JSONString, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayerTransactionItem, JSONData, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSPlayerTransactionItem, 0x0040);
		}

		// struct FGSPlayerTransaction
		TEST_METHOD(ScriptStruct__GameSparks__GSPlayerTransaction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayerTransaction, HasItems, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayerTransaction, UnknownData_JPPU, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayerTransaction, Items, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayerTransaction, HasOriginalRequestId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayerTransaction, UnknownData_JWX6, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayerTransaction, OriginalRequestId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayerTransaction, HasPlayerId, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayerTransaction, UnknownData_CS0I, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayerTransaction, PlayerId, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayerTransaction, HasReason, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayerTransaction, UnknownData_9RLC, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayerTransaction, Reason, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayerTransaction, HasRevokeDate, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayerTransaction, UnknownData_IAB3, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayerTransaction, RevokeDate, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayerTransaction, HasRevoked, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayerTransaction, Revoked, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayerTransaction, HasScript, 0x007A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayerTransaction, UnknownData_SPJN, 0x007B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayerTransaction, Script, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayerTransaction, HasScriptType, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayerTransaction, UnknownData_WBYY, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayerTransaction, ScriptType, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayerTransaction, HasTransactionId, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayerTransaction, UnknownData_VH8R, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayerTransaction, TransactionId, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayerTransaction, HasWhen, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayerTransaction, UnknownData_A4UT, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayerTransaction, When, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayerTransaction, JSONString, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPlayerTransaction, JSONData, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSPlayerTransaction, 0x00F0);
		}

		// struct FGSListTransactionsResponse
		TEST_METHOD(ScriptStruct__GameSparks__GSListTransactionsResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListTransactionsResponse, Errors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListTransactionsResponse, HasRequestId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListTransactionsResponse, UnknownData_4C74, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListTransactionsResponse, RequestId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListTransactionsResponse, HasScriptData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListTransactionsResponse, UnknownData_JE2E, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListTransactionsResponse, ScriptData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListTransactionsResponse, HasTransactionList, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListTransactionsResponse, UnknownData_J0ND, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListTransactionsResponse, TransactionList, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListTransactionsResponse, JSONString, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListTransactionsResponse, JSONData, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSListTransactionsResponse, 0x0060);
		}

		// struct FGSBundledGood
		TEST_METHOD(ScriptStruct__GameSparks__GSBundledGood)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBundledGood, HasQty, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBundledGood, UnknownData_1FHA, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBundledGood, Qty, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBundledGood, HasShortCode, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBundledGood, UnknownData_QB42, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBundledGood, ShortCode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBundledGood, JSONString, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBundledGood, JSONData, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSBundledGood, 0x0038);
		}

		// struct FGSVirtualGood
		TEST_METHOD(ScriptStruct__GameSparks__GSVirtualGood)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, HasWP8StoreProductId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, UnknownData_H2VY, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, WP8StoreProductId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, HasAmazonStoreProductId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, UnknownData_RN1P, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, AmazonStoreProductId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, HasBaseCurrency1Cost, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, UnknownData_G4MB, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, BaseCurrency1Cost, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, HasBaseCurrency2Cost, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, UnknownData_USKC, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, BaseCurrency2Cost, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, HasBaseCurrency3Cost, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, UnknownData_SKCD, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, BaseCurrency3Cost, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, HasBaseCurrency4Cost, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, UnknownData_3TGW, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, BaseCurrency4Cost, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, HasBaseCurrency5Cost, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, UnknownData_OPVX, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, BaseCurrency5Cost, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, HasBaseCurrency6Cost, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, UnknownData_61O0, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, BaseCurrency6Cost, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, HasBaseCurrencyCosts, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, UnknownData_OTQ6, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, BaseCurrencyCosts, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, HasBundledGoods, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, UnknownData_M6CZ, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, BundledGoods, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, HasCurrency1Cost, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, UnknownData_1X4R, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, Currency1Cost, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, HasCurrency2Cost, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, UnknownData_Q6GI, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, Currency2Cost, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, HasCurrency3Cost, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, UnknownData_5FSF, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, Currency3Cost, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, HasCurrency4Cost, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, UnknownData_908X, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, Currency4Cost, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, HasCurrency5Cost, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, UnknownData_V9KB, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, Currency5Cost, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, HasCurrency6Cost, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, UnknownData_1DTP, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, Currency6Cost, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, HasCurrencyCosts, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, UnknownData_PVXA, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, CurrencyCosts, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, HasDescription, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, UnknownData_CN0V, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, Description, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, HasDisabled, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, Disabled, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, HasGooglePlayProductId, 0x00E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, UnknownData_HMMG, 0x00E3);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, GooglePlayProductId, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, HasIosAppStoreProductId, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, UnknownData_YZFR, 0x00F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, IosAppStoreProductId, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, HasMaxQuantity, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, UnknownData_IM11, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, MaxQuantity, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, HasName, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, UnknownData_IJ1X, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, Name, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, HasPropertySet, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, UnknownData_U2LN, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, PropertySet, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, HasPsnStoreProductId, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, UnknownData_WA8X, 0x0141);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, PsnStoreProductId, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, HasSegmentedCurrency1Cost, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, UnknownData_EPB5, 0x0159);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, SegmentedCurrency1Cost, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, HasSegmentedCurrency2Cost, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, UnknownData_JFGS, 0x0161);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, SegmentedCurrency2Cost, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, HasSegmentedCurrency3Cost, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, UnknownData_O68W, 0x0169);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, SegmentedCurrency3Cost, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, HasSegmentedCurrency4Cost, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, UnknownData_O295, 0x0171);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, SegmentedCurrency4Cost, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, HasSegmentedCurrency5Cost, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, UnknownData_322O, 0x0179);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, SegmentedCurrency5Cost, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, HasSegmentedCurrency6Cost, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, UnknownData_M1GG, 0x0181);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, SegmentedCurrency6Cost, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, HasSegmentedCurrencyCosts, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, UnknownData_49QJ, 0x0189);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, SegmentedCurrencyCosts, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, HasShortCode, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, UnknownData_CM9G, 0x0199);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, ShortCode, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, HasSteamStoreProductId, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, UnknownData_NYCJ, 0x01B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, SteamStoreProductId, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, HasTags, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, UnknownData_XKHD, 0x01C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, Tags, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, HasType, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, UnknownData_GJMM, 0x01E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, Type, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, HasW8StoreProductId, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, UnknownData_KEJ2, 0x01F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, W8StoreProductId, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, JSONString, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSVirtualGood, JSONData, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSVirtualGood, 0x0228);
		}

		// struct FGSListVirtualGoodsResponse
		TEST_METHOD(ScriptStruct__GameSparks__GSListVirtualGoodsResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListVirtualGoodsResponse, Errors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListVirtualGoodsResponse, HasRequestId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListVirtualGoodsResponse, UnknownData_LI6P, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListVirtualGoodsResponse, RequestId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListVirtualGoodsResponse, HasScriptData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListVirtualGoodsResponse, UnknownData_9LVC, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListVirtualGoodsResponse, ScriptData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListVirtualGoodsResponse, HasVirtualGoods, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListVirtualGoodsResponse, UnknownData_R3J0, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListVirtualGoodsResponse, VirtualGoods, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListVirtualGoodsResponse, JSONString, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSListVirtualGoodsResponse, JSONData, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSListVirtualGoodsResponse, 0x0060);
		}

		// struct FGSLogChallengeEventResponse
		TEST_METHOD(ScriptStruct__GameSparks__GSLogChallengeEventResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLogChallengeEventResponse, Errors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLogChallengeEventResponse, HasRequestId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLogChallengeEventResponse, UnknownData_3QLA, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLogChallengeEventResponse, RequestId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLogChallengeEventResponse, HasScriptData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLogChallengeEventResponse, UnknownData_0PIX, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLogChallengeEventResponse, ScriptData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLogChallengeEventResponse, JSONString, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLogChallengeEventResponse, JSONData, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSLogChallengeEventResponse, 0x0048);
		}

		// struct FGSLogEventResponse
		TEST_METHOD(ScriptStruct__GameSparks__GSLogEventResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLogEventResponse, Errors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLogEventResponse, HasRequestId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLogEventResponse, UnknownData_OM4E, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLogEventResponse, RequestId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLogEventResponse, HasScriptData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLogEventResponse, UnknownData_VMO1, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLogEventResponse, ScriptData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLogEventResponse, JSONString, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLogEventResponse, JSONData, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSLogEventResponse, 0x0048);
		}

		// struct FGSMatchDetailsResponse
		TEST_METHOD(ScriptStruct__GameSparks__GSMatchDetailsResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchDetailsResponse, Errors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchDetailsResponse, HasAccessToken, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchDetailsResponse, UnknownData_5MPB, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchDetailsResponse, AccessToken, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchDetailsResponse, HasHost, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchDetailsResponse, UnknownData_4FES, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchDetailsResponse, Host, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchDetailsResponse, HasMatchData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchDetailsResponse, UnknownData_JED0, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchDetailsResponse, MatchData, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchDetailsResponse, HasMatchId, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchDetailsResponse, UnknownData_XK9B, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchDetailsResponse, MatchId, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchDetailsResponse, HasOpponents, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchDetailsResponse, UnknownData_T7E2, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchDetailsResponse, Opponents, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchDetailsResponse, HasPeerId, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchDetailsResponse, UnknownData_RQC3, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchDetailsResponse, PeerId, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchDetailsResponse, HasPlayerId, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchDetailsResponse, UnknownData_BFYS, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchDetailsResponse, PlayerId, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchDetailsResponse, HasPort, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchDetailsResponse, UnknownData_2OHW, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchDetailsResponse, Port, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchDetailsResponse, HasRequestId, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchDetailsResponse, UnknownData_XU5K, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchDetailsResponse, RequestId, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchDetailsResponse, HasScriptData, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchDetailsResponse, UnknownData_94Y4, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchDetailsResponse, ScriptData, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchDetailsResponse, JSONString, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchDetailsResponse, JSONData, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSMatchDetailsResponse, 0x00E0);
		}

		// struct FGSMatchmakingResponse
		TEST_METHOD(ScriptStruct__GameSparks__GSMatchmakingResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchmakingResponse, Errors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchmakingResponse, HasRequestId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchmakingResponse, UnknownData_59N5, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchmakingResponse, RequestId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchmakingResponse, HasScriptData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchmakingResponse, UnknownData_1HJV, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchmakingResponse, ScriptData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchmakingResponse, JSONString, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchmakingResponse, JSONData, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSMatchmakingResponse, 0x0048);
		}

		// struct FGSPushRegistrationResponse
		TEST_METHOD(ScriptStruct__GameSparks__GSPushRegistrationResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPushRegistrationResponse, Errors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPushRegistrationResponse, HasRegistrationId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPushRegistrationResponse, UnknownData_KIV8, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPushRegistrationResponse, RegistrationId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPushRegistrationResponse, HasRequestId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPushRegistrationResponse, UnknownData_0X3J, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPushRegistrationResponse, RequestId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPushRegistrationResponse, HasScriptData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPushRegistrationResponse, UnknownData_6PIF, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPushRegistrationResponse, ScriptData, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPushRegistrationResponse, JSONString, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPushRegistrationResponse, JSONData, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSPushRegistrationResponse, 0x0060);
		}

		// struct FGSRegistrationResponse
		TEST_METHOD(ScriptStruct__GameSparks__GSRegistrationResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSRegistrationResponse, Errors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSRegistrationResponse, HasAuthToken, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSRegistrationResponse, UnknownData_3NLB, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSRegistrationResponse, AuthToken, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSRegistrationResponse, HasDisplayName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSRegistrationResponse, UnknownData_263Y, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSRegistrationResponse, DisplayName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSRegistrationResponse, HasNewPlayer, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSRegistrationResponse, NewPlayer, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSRegistrationResponse, HasRequestId, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSRegistrationResponse, UnknownData_9SNL, 0x003B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSRegistrationResponse, RequestId, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSRegistrationResponse, HasScriptData, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSRegistrationResponse, UnknownData_SN7M, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSRegistrationResponse, ScriptData, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSRegistrationResponse, HasSwitchSummary, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSRegistrationResponse, UnknownData_5EUG, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSRegistrationResponse, SwitchSummary, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSRegistrationResponse, HasUserId, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSRegistrationResponse, UnknownData_ELJT, 0x0101);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSRegistrationResponse, UserId, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSRegistrationResponse, JSONString, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSRegistrationResponse, JSONData, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSRegistrationResponse, 0x0130);
		}

		// struct FGSRevokePurchaseGoodsResponse
		TEST_METHOD(ScriptStruct__GameSparks__GSRevokePurchaseGoodsResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSRevokePurchaseGoodsResponse, Errors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSRevokePurchaseGoodsResponse, HasRequestId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSRevokePurchaseGoodsResponse, UnknownData_11US, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSRevokePurchaseGoodsResponse, RequestId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSRevokePurchaseGoodsResponse, HasRevokedGoods, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSRevokePurchaseGoodsResponse, UnknownData_BYH5, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSRevokePurchaseGoodsResponse, RevokedGoods, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSRevokePurchaseGoodsResponse, HasScriptData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSRevokePurchaseGoodsResponse, UnknownData_DFUZ, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSRevokePurchaseGoodsResponse, ScriptData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSRevokePurchaseGoodsResponse, JSONString, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSRevokePurchaseGoodsResponse, JSONData, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSRevokePurchaseGoodsResponse, 0x0058);
		}

		// struct FGSScheduleBulkJobAdminResponse
		TEST_METHOD(ScriptStruct__GameSparks__GSScheduleBulkJobAdminResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSScheduleBulkJobAdminResponse, Errors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSScheduleBulkJobAdminResponse, HasEstimatedCount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSScheduleBulkJobAdminResponse, UnknownData_ICP4, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSScheduleBulkJobAdminResponse, EstimatedCount, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSScheduleBulkJobAdminResponse, HasJobId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSScheduleBulkJobAdminResponse, UnknownData_PWVO, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSScheduleBulkJobAdminResponse, JobId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSScheduleBulkJobAdminResponse, HasRequestId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSScheduleBulkJobAdminResponse, UnknownData_GPRT, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSScheduleBulkJobAdminResponse, RequestId, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSScheduleBulkJobAdminResponse, HasScriptData, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSScheduleBulkJobAdminResponse, UnknownData_F2LD, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSScheduleBulkJobAdminResponse, ScriptData, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSScheduleBulkJobAdminResponse, JSONString, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSScheduleBulkJobAdminResponse, JSONData, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSScheduleBulkJobAdminResponse, 0x0068);
		}

		// struct FGSSendFriendMessageResponse
		TEST_METHOD(ScriptStruct__GameSparks__GSSendFriendMessageResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSendFriendMessageResponse, Errors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSendFriendMessageResponse, HasRequestId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSendFriendMessageResponse, UnknownData_PHET, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSendFriendMessageResponse, RequestId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSendFriendMessageResponse, HasScriptData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSendFriendMessageResponse, UnknownData_LEWW, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSendFriendMessageResponse, ScriptData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSendFriendMessageResponse, JSONString, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSendFriendMessageResponse, JSONData, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSSendFriendMessageResponse, 0x0048);
		}

		// struct FGSSendTeamChatMessageResponse
		TEST_METHOD(ScriptStruct__GameSparks__GSSendTeamChatMessageResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSendTeamChatMessageResponse, Errors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSendTeamChatMessageResponse, HasRequestId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSendTeamChatMessageResponse, UnknownData_MFZ9, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSendTeamChatMessageResponse, RequestId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSendTeamChatMessageResponse, HasScriptData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSendTeamChatMessageResponse, UnknownData_YQH0, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSendTeamChatMessageResponse, ScriptData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSendTeamChatMessageResponse, JSONString, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSendTeamChatMessageResponse, JSONData, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSSendTeamChatMessageResponse, 0x0048);
		}

		// struct FGSSocialDisconnectResponse
		TEST_METHOD(ScriptStruct__GameSparks__GSSocialDisconnectResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSocialDisconnectResponse, Errors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSocialDisconnectResponse, HasRequestId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSocialDisconnectResponse, UnknownData_9QDZ, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSocialDisconnectResponse, RequestId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSocialDisconnectResponse, HasScriptData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSocialDisconnectResponse, UnknownData_EP5B, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSocialDisconnectResponse, ScriptData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSocialDisconnectResponse, JSONString, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSocialDisconnectResponse, JSONData, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSSocialDisconnectResponse, 0x0048);
		}

		// struct FGSSocialStatus
		TEST_METHOD(ScriptStruct__GameSparks__GSSocialStatus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSocialStatus, HasActive, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSocialStatus, Active, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSocialStatus, HasExpires, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSocialStatus, UnknownData_LEUH, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSocialStatus, Expires, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSocialStatus, HasSystemId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSocialStatus, UnknownData_JS2V, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSocialStatus, SystemId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSocialStatus, JSONString, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSocialStatus, JSONData, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSSocialStatus, 0x0048);
		}

		// struct FGSSocialStatusResponse
		TEST_METHOD(ScriptStruct__GameSparks__GSSocialStatusResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSocialStatusResponse, Errors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSocialStatusResponse, HasRequestId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSocialStatusResponse, UnknownData_5HD9, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSocialStatusResponse, RequestId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSocialStatusResponse, HasScriptData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSocialStatusResponse, UnknownData_JC3X, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSocialStatusResponse, ScriptData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSocialStatusResponse, HasStatuses, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSocialStatusResponse, UnknownData_THXV, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSocialStatusResponse, Statuses, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSocialStatusResponse, JSONString, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSocialStatusResponse, JSONData, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSSocialStatusResponse, 0x0060);
		}

		// struct FGSUpdateMessageResponse
		TEST_METHOD(ScriptStruct__GameSparks__GSUpdateMessageResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSUpdateMessageResponse, Errors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSUpdateMessageResponse, HasRequestId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSUpdateMessageResponse, UnknownData_F06U, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSUpdateMessageResponse, RequestId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSUpdateMessageResponse, HasScriptData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSUpdateMessageResponse, UnknownData_LK7O, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSUpdateMessageResponse, ScriptData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSUpdateMessageResponse, JSONString, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSUpdateMessageResponse, JSONData, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSUpdateMessageResponse, 0x0048);
		}

		// struct FGSWithdrawChallengeResponse
		TEST_METHOD(ScriptStruct__GameSparks__GSWithdrawChallengeResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSWithdrawChallengeResponse, Errors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSWithdrawChallengeResponse, HasChallengeInstanceId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSWithdrawChallengeResponse, UnknownData_810D, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSWithdrawChallengeResponse, ChallengeInstanceId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSWithdrawChallengeResponse, HasRequestId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSWithdrawChallengeResponse, UnknownData_AV7G, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSWithdrawChallengeResponse, RequestId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSWithdrawChallengeResponse, HasScriptData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSWithdrawChallengeResponse, UnknownData_ZFBZ, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSWithdrawChallengeResponse, ScriptData, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSWithdrawChallengeResponse, JSONString, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSWithdrawChallengeResponse, JSONData, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSWithdrawChallengeResponse, 0x0060);
		}

		// struct FGSUploadCompleteMessage
		TEST_METHOD(ScriptStruct__GameSparks__GSUploadCompleteMessage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSUploadCompleteMessage, HasMessageId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSUploadCompleteMessage, UnknownData_EB7T, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSUploadCompleteMessage, MessageId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSUploadCompleteMessage, HasNotification, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSUploadCompleteMessage, Notification, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSUploadCompleteMessage, HasScriptData, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSUploadCompleteMessage, UnknownData_DIB3, 0x001B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSUploadCompleteMessage, ScriptData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSUploadCompleteMessage, HasSubTitle, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSUploadCompleteMessage, UnknownData_7K3S, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSUploadCompleteMessage, SubTitle, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSUploadCompleteMessage, HasSummary, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSUploadCompleteMessage, UnknownData_GJLJ, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSUploadCompleteMessage, Summary, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSUploadCompleteMessage, HasTitle, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSUploadCompleteMessage, UnknownData_JIWE, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSUploadCompleteMessage, Title, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSUploadCompleteMessage, HasUploadData, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSUploadCompleteMessage, UnknownData_53RP, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSUploadCompleteMessage, UploadData, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSUploadCompleteMessage, HasUploadId, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSUploadCompleteMessage, UnknownData_QJIX, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSUploadCompleteMessage, UploadId, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSUploadCompleteMessage, JSONString, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSUploadCompleteMessage, JSONData, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSUploadCompleteMessage, 0x00B0);
		}

		// struct FGSTeamRankChangedMessage
		TEST_METHOD(ScriptStruct__GameSparks__GSTeamRankChangedMessage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeamRankChangedMessage, HasGameId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeamRankChangedMessage, UnknownData_TTJ8, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeamRankChangedMessage, GameId, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeamRankChangedMessage, HasLeaderboardName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeamRankChangedMessage, UnknownData_KDTQ, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeamRankChangedMessage, LeaderboardName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeamRankChangedMessage, HasLeaderboardShortCode, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeamRankChangedMessage, UnknownData_FC34, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeamRankChangedMessage, LeaderboardShortCode, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeamRankChangedMessage, HasMessageId, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeamRankChangedMessage, UnknownData_Y2QA, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeamRankChangedMessage, MessageId, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeamRankChangedMessage, HasNotification, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeamRankChangedMessage, Notification, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeamRankChangedMessage, HasScriptData, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeamRankChangedMessage, UnknownData_IANT, 0x0053);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeamRankChangedMessage, ScriptData, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeamRankChangedMessage, HasSubTitle, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeamRankChangedMessage, UnknownData_ZYHA, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeamRankChangedMessage, SubTitle, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeamRankChangedMessage, HasSummary, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeamRankChangedMessage, UnknownData_R79K, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeamRankChangedMessage, Summary, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeamRankChangedMessage, HasThem, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeamRankChangedMessage, UnknownData_6U1U, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeamRankChangedMessage, Them, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeamRankChangedMessage, HasTitle, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeamRankChangedMessage, UnknownData_TDLS, 0x0141);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeamRankChangedMessage, Title, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeamRankChangedMessage, HasYou, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeamRankChangedMessage, UnknownData_E6T1, 0x0159);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeamRankChangedMessage, You, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeamRankChangedMessage, JSONString, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeamRankChangedMessage, JSONData, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSTeamRankChangedMessage, 0x0220);
		}

		// struct FGSTeamChatMessage
		TEST_METHOD(ScriptStruct__GameSparks__GSTeamChatMessage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeamChatMessage, HasChatMessageId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeamChatMessage, UnknownData_9X2N, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeamChatMessage, ChatMessageId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeamChatMessage, HasFromId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeamChatMessage, UnknownData_Z2G7, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeamChatMessage, FromId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeamChatMessage, HasMessage, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeamChatMessage, UnknownData_H2EZ, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeamChatMessage, Message, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeamChatMessage, HasMessageId, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeamChatMessage, UnknownData_JTAQ, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeamChatMessage, MessageId, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeamChatMessage, HasNotification, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeamChatMessage, Notification, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeamChatMessage, HasOwnerId, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeamChatMessage, UnknownData_CDBQ, 0x0063);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeamChatMessage, OwnerId, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeamChatMessage, HasScriptData, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeamChatMessage, UnknownData_HAZE, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeamChatMessage, ScriptData, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeamChatMessage, HasSubTitle, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeamChatMessage, UnknownData_Z71Z, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeamChatMessage, SubTitle, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeamChatMessage, HasSummary, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeamChatMessage, UnknownData_9PZZ, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeamChatMessage, Summary, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeamChatMessage, HasTeamId, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeamChatMessage, UnknownData_GB3F, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeamChatMessage, TeamId, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeamChatMessage, HasTeamType, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeamChatMessage, UnknownData_ZK1X, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeamChatMessage, TeamType, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeamChatMessage, HasTitle, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeamChatMessage, UnknownData_JML7, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeamChatMessage, Title, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeamChatMessage, HasWho, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeamChatMessage, UnknownData_D3VF, 0x0101);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeamChatMessage, Who, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeamChatMessage, JSONString, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSTeamChatMessage, JSONData, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSTeamChatMessage, 0x0130);
		}

		// struct FGSSocialRankChangedMessage
		TEST_METHOD(ScriptStruct__GameSparks__GSSocialRankChangedMessage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSocialRankChangedMessage, HasGameId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSocialRankChangedMessage, UnknownData_ZOPG, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSocialRankChangedMessage, GameId, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSocialRankChangedMessage, HasLeaderboardName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSocialRankChangedMessage, UnknownData_7MV8, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSocialRankChangedMessage, LeaderboardName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSocialRankChangedMessage, HasLeaderboardShortCode, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSocialRankChangedMessage, UnknownData_G3WP, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSocialRankChangedMessage, LeaderboardShortCode, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSocialRankChangedMessage, HasMessageId, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSocialRankChangedMessage, UnknownData_Z2U4, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSocialRankChangedMessage, MessageId, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSocialRankChangedMessage, HasNotification, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSocialRankChangedMessage, Notification, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSocialRankChangedMessage, HasScriptData, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSocialRankChangedMessage, UnknownData_W9M3, 0x0053);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSocialRankChangedMessage, ScriptData, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSocialRankChangedMessage, HasSubTitle, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSocialRankChangedMessage, UnknownData_UJF5, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSocialRankChangedMessage, SubTitle, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSocialRankChangedMessage, HasSummary, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSocialRankChangedMessage, UnknownData_3J2S, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSocialRankChangedMessage, Summary, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSocialRankChangedMessage, HasThem, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSocialRankChangedMessage, UnknownData_HUMD, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSocialRankChangedMessage, Them, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSocialRankChangedMessage, HasTitle, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSocialRankChangedMessage, UnknownData_QQC2, 0x0141);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSocialRankChangedMessage, Title, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSocialRankChangedMessage, HasYou, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSocialRankChangedMessage, UnknownData_0CJL, 0x0159);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSocialRankChangedMessage, You, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSocialRankChangedMessage, JSONString, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSocialRankChangedMessage, JSONData, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSSocialRankChangedMessage, 0x0220);
		}

		// struct FGSSessionTerminatedMessage
		TEST_METHOD(ScriptStruct__GameSparks__GSSessionTerminatedMessage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSessionTerminatedMessage, HasAuthToken, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSessionTerminatedMessage, UnknownData_NM2P, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSessionTerminatedMessage, AuthToken, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSessionTerminatedMessage, JSONString, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSSessionTerminatedMessage, JSONData, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSSessionTerminatedMessage, 0x0030);
		}

		// struct FGSScriptMessage
		TEST_METHOD(ScriptStruct__GameSparks__GSScriptMessage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSScriptMessage, HasData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSScriptMessage, UnknownData_CM9T, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSScriptMessage, Data, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSScriptMessage, HasExtCode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSScriptMessage, UnknownData_PZM4, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSScriptMessage, ExtCode, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSScriptMessage, HasMessageId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSScriptMessage, UnknownData_LY0D, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSScriptMessage, MessageId, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSScriptMessage, HasNotification, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSScriptMessage, Notification, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSScriptMessage, HasScriptData, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSScriptMessage, UnknownData_YWSG, 0x0043);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSScriptMessage, ScriptData, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSScriptMessage, HasSubTitle, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSScriptMessage, UnknownData_0W0E, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSScriptMessage, SubTitle, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSScriptMessage, HasSummary, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSScriptMessage, UnknownData_YVLN, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSScriptMessage, Summary, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSScriptMessage, HasTitle, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSScriptMessage, UnknownData_KWMO, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSScriptMessage, Title, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSScriptMessage, JSONString, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSScriptMessage, JSONData, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSScriptMessage, 0x00B0);
		}

		// struct FGSLeaderboardRankDetails
		TEST_METHOD(ScriptStruct__GameSparks__GSLeaderboardRankDetails)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardRankDetails, HasFriendsPassed, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardRankDetails, UnknownData_3BL2, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardRankDetails, FriendsPassed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardRankDetails, HasGlobalCount, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardRankDetails, UnknownData_5XX9, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardRankDetails, GlobalCount, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardRankDetails, HasGlobalFrom, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardRankDetails, UnknownData_ML0J, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardRankDetails, GlobalFrom, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardRankDetails, HasGlobalFromPercent, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardRankDetails, UnknownData_37LB, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardRankDetails, GlobalFromPercent, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardRankDetails, HasGlobalTo, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardRankDetails, UnknownData_7VFC, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardRankDetails, GlobalTo, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardRankDetails, HasGlobalToPercent, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardRankDetails, UnknownData_7EOY, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardRankDetails, GlobalToPercent, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardRankDetails, HasSocialCount, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardRankDetails, UnknownData_P7BN, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardRankDetails, SocialCount, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardRankDetails, HasSocialFrom, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardRankDetails, UnknownData_QHOA, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardRankDetails, SocialFrom, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardRankDetails, HasSocialFromPercent, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardRankDetails, UnknownData_RSTP, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardRankDetails, SocialFromPercent, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardRankDetails, HasSocialTo, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardRankDetails, UnknownData_EUK6, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardRankDetails, SocialTo, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardRankDetails, HasSocialToPercent, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardRankDetails, UnknownData_NHQT, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardRankDetails, SocialToPercent, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardRankDetails, HasTopNPassed, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardRankDetails, UnknownData_GA2Q, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardRankDetails, TopNPassed, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardRankDetails, JSONString, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLeaderboardRankDetails, JSONData, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSLeaderboardRankDetails, 0x0098);
		}

		// struct FGSNewTeamScoreMessage
		TEST_METHOD(ScriptStruct__GameSparks__GSNewTeamScoreMessage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSNewTeamScoreMessage, HasLeaderboardData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSNewTeamScoreMessage, UnknownData_25UD, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSNewTeamScoreMessage, LeaderboardData, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSNewTeamScoreMessage, HasLeaderboardName, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSNewTeamScoreMessage, UnknownData_J73D, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSNewTeamScoreMessage, LeaderboardName, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSNewTeamScoreMessage, HasLeaderboardShortCode, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSNewTeamScoreMessage, UnknownData_LSOQ, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSNewTeamScoreMessage, LeaderboardShortCode, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSNewTeamScoreMessage, HasMessageId, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSNewTeamScoreMessage, UnknownData_AVJ2, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSNewTeamScoreMessage, MessageId, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSNewTeamScoreMessage, HasNotification, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSNewTeamScoreMessage, Notification, 0x00F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSNewTeamScoreMessage, HasRankDetails, 0x00FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSNewTeamScoreMessage, UnknownData_N8VX, 0x00FB);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSNewTeamScoreMessage, RankDetails, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSNewTeamScoreMessage, HasScriptData, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSNewTeamScoreMessage, UnknownData_0ON8, 0x0199);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSNewTeamScoreMessage, ScriptData, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSNewTeamScoreMessage, HasSubTitle, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSNewTeamScoreMessage, UnknownData_JVV8, 0x01A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSNewTeamScoreMessage, SubTitle, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSNewTeamScoreMessage, HasSummary, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSNewTeamScoreMessage, UnknownData_O6N1, 0x01C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSNewTeamScoreMessage, Summary, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSNewTeamScoreMessage, HasTitle, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSNewTeamScoreMessage, UnknownData_LSVP, 0x01D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSNewTeamScoreMessage, Title, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSNewTeamScoreMessage, JSONString, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSNewTeamScoreMessage, JSONData, 0x0200);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSNewTeamScoreMessage, 0x0208);
		}

		// struct FGSNewHighScoreMessage
		TEST_METHOD(ScriptStruct__GameSparks__GSNewHighScoreMessage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSNewHighScoreMessage, HasLeaderboardData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSNewHighScoreMessage, UnknownData_OCOH, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSNewHighScoreMessage, LeaderboardData, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSNewHighScoreMessage, HasLeaderboardName, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSNewHighScoreMessage, UnknownData_VRZE, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSNewHighScoreMessage, LeaderboardName, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSNewHighScoreMessage, HasLeaderboardShortCode, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSNewHighScoreMessage, UnknownData_A4P1, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSNewHighScoreMessage, LeaderboardShortCode, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSNewHighScoreMessage, HasMessageId, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSNewHighScoreMessage, UnknownData_N9FV, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSNewHighScoreMessage, MessageId, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSNewHighScoreMessage, HasNotification, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSNewHighScoreMessage, Notification, 0x00F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSNewHighScoreMessage, HasRankDetails, 0x00FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSNewHighScoreMessage, UnknownData_F17A, 0x00FB);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSNewHighScoreMessage, RankDetails, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSNewHighScoreMessage, HasScriptData, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSNewHighScoreMessage, UnknownData_J8LO, 0x0199);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSNewHighScoreMessage, ScriptData, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSNewHighScoreMessage, HasSubTitle, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSNewHighScoreMessage, UnknownData_0BCH, 0x01A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSNewHighScoreMessage, SubTitle, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSNewHighScoreMessage, HasSummary, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSNewHighScoreMessage, UnknownData_NJTP, 0x01C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSNewHighScoreMessage, Summary, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSNewHighScoreMessage, HasTitle, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSNewHighScoreMessage, UnknownData_ZYYD, 0x01D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSNewHighScoreMessage, Title, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSNewHighScoreMessage, JSONString, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSNewHighScoreMessage, JSONData, 0x0200);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSNewHighScoreMessage, 0x0208);
		}

		// struct FGSParticipant
		TEST_METHOD(ScriptStruct__GameSparks__GSParticipant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSParticipant, HasAchievements, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSParticipant, UnknownData_26GE, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSParticipant, Achievements, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSParticipant, HasDisplayName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSParticipant, UnknownData_107F, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSParticipant, DisplayName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSParticipant, HasExternalIds, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSParticipant, UnknownData_6K14, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSParticipant, ExternalIds, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSParticipant, HasId, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSParticipant, UnknownData_UZ7P, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSParticipant, ID, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSParticipant, HasOnline, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSParticipant, Online, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSParticipant, HasParticipantData, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSParticipant, UnknownData_R81T, 0x005B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSParticipant, ParticipantData, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSParticipant, HasPeerId, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSParticipant, UnknownData_6LS2, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSParticipant, PeerId, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSParticipant, HasScriptData, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSParticipant, UnknownData_E6EB, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSParticipant, ScriptData, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSParticipant, HasVirtualGoods, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSParticipant, UnknownData_05ZO, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSParticipant, VirtualGoods, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSParticipant, JSONString, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSParticipant, JSONData, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSParticipant, 0x00B0);
		}

		// struct FGSMatchUpdatedMessage
		TEST_METHOD(ScriptStruct__GameSparks__GSMatchUpdatedMessage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchUpdatedMessage, HasAddedPlayers, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchUpdatedMessage, UnknownData_FV1L, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchUpdatedMessage, AddedPlayers, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchUpdatedMessage, HasMatchData, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchUpdatedMessage, UnknownData_0X1L, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchUpdatedMessage, MatchData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchUpdatedMessage, HasMatchGroup, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchUpdatedMessage, UnknownData_A93M, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchUpdatedMessage, MatchGroup, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchUpdatedMessage, HasMatchId, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchUpdatedMessage, UnknownData_VVSN, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchUpdatedMessage, MatchId, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchUpdatedMessage, HasMatchShortCode, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchUpdatedMessage, UnknownData_YV8A, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchUpdatedMessage, MatchShortCode, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchUpdatedMessage, HasMessageId, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchUpdatedMessage, UnknownData_R7MD, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchUpdatedMessage, MessageId, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchUpdatedMessage, HasNotification, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchUpdatedMessage, Notification, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchUpdatedMessage, HasParticipants, 0x008A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchUpdatedMessage, UnknownData_VHEZ, 0x008B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchUpdatedMessage, Participants, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchUpdatedMessage, HasRemovedPlayers, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchUpdatedMessage, UnknownData_W33J, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchUpdatedMessage, RemovedPlayers, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchUpdatedMessage, HasScriptData, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchUpdatedMessage, UnknownData_OVDI, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchUpdatedMessage, ScriptData, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchUpdatedMessage, HasSubTitle, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchUpdatedMessage, UnknownData_6PNW, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchUpdatedMessage, SubTitle, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchUpdatedMessage, HasSummary, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchUpdatedMessage, UnknownData_IY05, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchUpdatedMessage, Summary, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchUpdatedMessage, HasTitle, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchUpdatedMessage, UnknownData_0VS3, 0x00F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchUpdatedMessage, Title, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchUpdatedMessage, JSONString, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchUpdatedMessage, JSONData, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSMatchUpdatedMessage, 0x0128);
		}

		// struct FGSMatchNotFoundMessage
		TEST_METHOD(ScriptStruct__GameSparks__GSMatchNotFoundMessage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchNotFoundMessage, HasMatchData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchNotFoundMessage, UnknownData_6BHU, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchNotFoundMessage, MatchData, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchNotFoundMessage, HasMatchGroup, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchNotFoundMessage, UnknownData_HNVU, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchNotFoundMessage, MatchGroup, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchNotFoundMessage, HasMatchShortCode, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchNotFoundMessage, UnknownData_8HTF, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchNotFoundMessage, MatchShortCode, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchNotFoundMessage, HasMessageId, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchNotFoundMessage, UnknownData_5OBQ, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchNotFoundMessage, MessageId, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchNotFoundMessage, HasNotification, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchNotFoundMessage, Notification, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchNotFoundMessage, HasParticipantData, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchNotFoundMessage, UnknownData_MA9G, 0x005B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchNotFoundMessage, ParticipantData, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchNotFoundMessage, HasParticipants, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchNotFoundMessage, UnknownData_PKZD, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchNotFoundMessage, Participants, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchNotFoundMessage, HasScriptData, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchNotFoundMessage, UnknownData_MWUW, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchNotFoundMessage, ScriptData, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchNotFoundMessage, HasSubTitle, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchNotFoundMessage, UnknownData_R6KM, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchNotFoundMessage, SubTitle, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchNotFoundMessage, HasSummary, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchNotFoundMessage, UnknownData_GODH, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchNotFoundMessage, Summary, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchNotFoundMessage, HasTitle, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchNotFoundMessage, UnknownData_6YEF, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchNotFoundMessage, Title, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchNotFoundMessage, JSONString, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchNotFoundMessage, JSONData, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSMatchNotFoundMessage, 0x00F0);
		}

		// struct FGSMatchFoundMessage
		TEST_METHOD(ScriptStruct__GameSparks__GSMatchFoundMessage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchFoundMessage, HasAccessToken, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchFoundMessage, UnknownData_9E7J, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchFoundMessage, AccessToken, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchFoundMessage, HasHost, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchFoundMessage, UnknownData_42DC, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchFoundMessage, Host, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchFoundMessage, HasMatchData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchFoundMessage, UnknownData_N3QG, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchFoundMessage, MatchData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchFoundMessage, HasMatchGroup, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchFoundMessage, UnknownData_1N70, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchFoundMessage, MatchGroup, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchFoundMessage, HasMatchId, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchFoundMessage, UnknownData_CPFW, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchFoundMessage, MatchId, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchFoundMessage, HasMatchShortCode, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchFoundMessage, UnknownData_DTEL, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchFoundMessage, MatchShortCode, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchFoundMessage, HasMessageId, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchFoundMessage, UnknownData_KMU9, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchFoundMessage, MessageId, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchFoundMessage, HasNotification, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchFoundMessage, Notification, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchFoundMessage, HasParticipants, 0x00A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchFoundMessage, UnknownData_XN1X, 0x00A3);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchFoundMessage, Participants, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchFoundMessage, HasPendingMatchData, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchFoundMessage, UnknownData_IMUZ, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchFoundMessage, PendingMatchData, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchFoundMessage, HasPort, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchFoundMessage, UnknownData_WCPT, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchFoundMessage, Port, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchFoundMessage, HasScriptData, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchFoundMessage, UnknownData_F16S, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchFoundMessage, ScriptData, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchFoundMessage, HasSubTitle, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchFoundMessage, UnknownData_5UJO, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchFoundMessage, SubTitle, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchFoundMessage, HasSummary, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchFoundMessage, UnknownData_V7J1, 0x00F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchFoundMessage, Summary, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchFoundMessage, HasTitle, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchFoundMessage, UnknownData_VG5Q, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchFoundMessage, Title, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchFoundMessage, JSONString, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSMatchFoundMessage, JSONData, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSMatchFoundMessage, 0x0140);
		}

		// struct FGSGlobalRankChangedMessage
		TEST_METHOD(ScriptStruct__GameSparks__GSGlobalRankChangedMessage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGlobalRankChangedMessage, HasGameId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGlobalRankChangedMessage, UnknownData_FFSZ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGlobalRankChangedMessage, GameId, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGlobalRankChangedMessage, HasLeaderboardName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGlobalRankChangedMessage, UnknownData_4D4Z, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGlobalRankChangedMessage, LeaderboardName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGlobalRankChangedMessage, HasLeaderboardShortCode, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGlobalRankChangedMessage, UnknownData_TAMF, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGlobalRankChangedMessage, LeaderboardShortCode, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGlobalRankChangedMessage, HasMessageId, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGlobalRankChangedMessage, UnknownData_KDTC, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGlobalRankChangedMessage, MessageId, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGlobalRankChangedMessage, HasNotification, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGlobalRankChangedMessage, Notification, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGlobalRankChangedMessage, HasScriptData, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGlobalRankChangedMessage, UnknownData_EP03, 0x0053);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGlobalRankChangedMessage, ScriptData, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGlobalRankChangedMessage, HasSubTitle, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGlobalRankChangedMessage, UnknownData_APMV, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGlobalRankChangedMessage, SubTitle, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGlobalRankChangedMessage, HasSummary, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGlobalRankChangedMessage, UnknownData_EFQT, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGlobalRankChangedMessage, Summary, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGlobalRankChangedMessage, HasThem, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGlobalRankChangedMessage, UnknownData_NEPH, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGlobalRankChangedMessage, Them, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGlobalRankChangedMessage, HasTitle, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGlobalRankChangedMessage, UnknownData_E8XN, 0x0141);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGlobalRankChangedMessage, Title, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGlobalRankChangedMessage, HasYou, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGlobalRankChangedMessage, UnknownData_0W06, 0x0159);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGlobalRankChangedMessage, You, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGlobalRankChangedMessage, JSONString, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGlobalRankChangedMessage, JSONData, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSGlobalRankChangedMessage, 0x0220);
		}

		// struct FGSFriendMessage
		TEST_METHOD(ScriptStruct__GameSparks__GSFriendMessage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFriendMessage, HasFromId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFriendMessage, UnknownData_UTRX, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFriendMessage, FromId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFriendMessage, HasMessage, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFriendMessage, UnknownData_TDCS, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFriendMessage, Message, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFriendMessage, HasMessageId, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFriendMessage, UnknownData_GRXV, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFriendMessage, MessageId, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFriendMessage, HasNotification, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFriendMessage, Notification, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFriendMessage, HasScriptData, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFriendMessage, UnknownData_OORO, 0x004B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFriendMessage, ScriptData, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFriendMessage, HasSubTitle, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFriendMessage, UnknownData_RJ45, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFriendMessage, SubTitle, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFriendMessage, HasSummary, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFriendMessage, UnknownData_C4L1, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFriendMessage, Summary, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFriendMessage, HasTitle, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFriendMessage, UnknownData_LDHR, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFriendMessage, Title, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFriendMessage, HasWho, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFriendMessage, UnknownData_6KPZ, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFriendMessage, Who, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFriendMessage, JSONString, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFriendMessage, JSONData, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSFriendMessage, 0x00D0);
		}

		// struct FGSChallengeWonMessage
		TEST_METHOD(ScriptStruct__GameSparks__GSChallengeWonMessage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWonMessage, HasChallenge, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWonMessage, UnknownData_B32J, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWonMessage, Challenge, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWonMessage, HasCurrency1Won, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWonMessage, UnknownData_A0TA, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWonMessage, Currency1Won, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWonMessage, HasCurrency2Won, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWonMessage, UnknownData_887B, 0x0219);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWonMessage, Currency2Won, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWonMessage, HasCurrency3Won, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWonMessage, UnknownData_E148, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWonMessage, Currency3Won, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWonMessage, HasCurrency4Won, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWonMessage, UnknownData_3EEA, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWonMessage, Currency4Won, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWonMessage, HasCurrency5Won, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWonMessage, UnknownData_LJWG, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWonMessage, Currency5Won, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWonMessage, HasCurrency6Won, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWonMessage, UnknownData_5MI3, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWonMessage, Currency6Won, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWonMessage, HasCurrencyWinnings, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWonMessage, UnknownData_1X9M, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWonMessage, CurrencyWinnings, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWonMessage, HasLeaderboardData, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWonMessage, UnknownData_0BKZ, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWonMessage, LeaderboardData, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWonMessage, HasMessageId, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWonMessage, UnknownData_D0O7, 0x0301);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWonMessage, MessageId, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWonMessage, HasNotification, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWonMessage, Notification, 0x0319);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWonMessage, HasScriptData, 0x031A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWonMessage, UnknownData_JEHL, 0x031B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWonMessage, ScriptData, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWonMessage, HasSubTitle, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWonMessage, UnknownData_0QM6, 0x0329);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWonMessage, SubTitle, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWonMessage, HasSummary, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWonMessage, UnknownData_C2XH, 0x0341);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWonMessage, Summary, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWonMessage, HasTitle, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWonMessage, UnknownData_4KQ2, 0x0359);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWonMessage, Title, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWonMessage, HasWinnerName, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWonMessage, UnknownData_HWNY, 0x0371);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWonMessage, WinnerName, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWonMessage, JSONString, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWonMessage, JSONData, 0x0398);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSChallengeWonMessage, 0x03A0);
		}

		// struct FGSChallengeWithdrawnMessage
		TEST_METHOD(ScriptStruct__GameSparks__GSChallengeWithdrawnMessage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWithdrawnMessage, HasChallenge, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWithdrawnMessage, UnknownData_FJP6, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWithdrawnMessage, Challenge, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWithdrawnMessage, HasMessage, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWithdrawnMessage, UnknownData_7UQX, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWithdrawnMessage, Message, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWithdrawnMessage, HasMessageId, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWithdrawnMessage, UnknownData_TJ16, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWithdrawnMessage, MessageId, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWithdrawnMessage, HasNotification, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWithdrawnMessage, Notification, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWithdrawnMessage, HasScriptData, 0x0242);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWithdrawnMessage, UnknownData_G9YG, 0x0243);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWithdrawnMessage, ScriptData, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWithdrawnMessage, HasSubTitle, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWithdrawnMessage, UnknownData_9JLF, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWithdrawnMessage, SubTitle, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWithdrawnMessage, HasSummary, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWithdrawnMessage, UnknownData_C5S9, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWithdrawnMessage, Summary, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWithdrawnMessage, HasTitle, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWithdrawnMessage, UnknownData_XOZA, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWithdrawnMessage, Title, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWithdrawnMessage, HasWho, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWithdrawnMessage, UnknownData_1ILF, 0x0299);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWithdrawnMessage, Who, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWithdrawnMessage, JSONString, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWithdrawnMessage, JSONData, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSChallengeWithdrawnMessage, 0x02C8);
		}

		// struct FGSChallengeWaitingMessage
		TEST_METHOD(ScriptStruct__GameSparks__GSChallengeWaitingMessage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWaitingMessage, HasChallenge, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWaitingMessage, UnknownData_9FDQ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWaitingMessage, Challenge, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWaitingMessage, HasMessageId, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWaitingMessage, UnknownData_25FF, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWaitingMessage, MessageId, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWaitingMessage, HasNotification, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWaitingMessage, Notification, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWaitingMessage, HasScriptData, 0x022A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWaitingMessage, UnknownData_6YOO, 0x022B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWaitingMessage, ScriptData, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWaitingMessage, HasSubTitle, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWaitingMessage, UnknownData_U7YF, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWaitingMessage, SubTitle, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWaitingMessage, HasSummary, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWaitingMessage, UnknownData_012U, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWaitingMessage, Summary, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWaitingMessage, HasTitle, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWaitingMessage, UnknownData_4M5H, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWaitingMessage, Title, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWaitingMessage, JSONString, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeWaitingMessage, JSONData, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSChallengeWaitingMessage, 0x0298);
		}

		// struct FGSChallengeTurnTakenMessage
		TEST_METHOD(ScriptStruct__GameSparks__GSChallengeTurnTakenMessage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeTurnTakenMessage, HasChallenge, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeTurnTakenMessage, UnknownData_LO9B, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeTurnTakenMessage, Challenge, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeTurnTakenMessage, HasMessageId, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeTurnTakenMessage, UnknownData_4RWJ, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeTurnTakenMessage, MessageId, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeTurnTakenMessage, HasNotification, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeTurnTakenMessage, Notification, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeTurnTakenMessage, HasScriptData, 0x022A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeTurnTakenMessage, UnknownData_E8J2, 0x022B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeTurnTakenMessage, ScriptData, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeTurnTakenMessage, HasSubTitle, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeTurnTakenMessage, UnknownData_67PM, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeTurnTakenMessage, SubTitle, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeTurnTakenMessage, HasSummary, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeTurnTakenMessage, UnknownData_AIWC, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeTurnTakenMessage, Summary, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeTurnTakenMessage, HasTitle, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeTurnTakenMessage, UnknownData_A9S0, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeTurnTakenMessage, Title, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeTurnTakenMessage, HasWho, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeTurnTakenMessage, UnknownData_VEQR, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeTurnTakenMessage, Who, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeTurnTakenMessage, JSONString, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeTurnTakenMessage, JSONData, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSChallengeTurnTakenMessage, 0x02B0);
		}

		// struct FGSChallengeStartedMessage
		TEST_METHOD(ScriptStruct__GameSparks__GSChallengeStartedMessage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeStartedMessage, HasChallenge, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeStartedMessage, UnknownData_SAYJ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeStartedMessage, Challenge, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeStartedMessage, HasMessageId, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeStartedMessage, UnknownData_HADU, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeStartedMessage, MessageId, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeStartedMessage, HasNotification, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeStartedMessage, Notification, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeStartedMessage, HasScriptData, 0x022A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeStartedMessage, UnknownData_01SY, 0x022B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeStartedMessage, ScriptData, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeStartedMessage, HasSubTitle, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeStartedMessage, UnknownData_Q0OT, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeStartedMessage, SubTitle, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeStartedMessage, HasSummary, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeStartedMessage, UnknownData_Y577, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeStartedMessage, Summary, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeStartedMessage, HasTitle, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeStartedMessage, UnknownData_IPH9, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeStartedMessage, Title, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeStartedMessage, JSONString, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeStartedMessage, JSONData, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSChallengeStartedMessage, 0x0298);
		}

		// struct FGSChallengeLostMessage
		TEST_METHOD(ScriptStruct__GameSparks__GSChallengeLostMessage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeLostMessage, HasChallenge, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeLostMessage, UnknownData_3YP7, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeLostMessage, Challenge, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeLostMessage, HasLeaderboardData, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeLostMessage, UnknownData_2F24, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeLostMessage, LeaderboardData, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeLostMessage, HasMessageId, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeLostMessage, UnknownData_JWYA, 0x02C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeLostMessage, MessageId, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeLostMessage, HasNotification, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeLostMessage, Notification, 0x02D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeLostMessage, HasScriptData, 0x02DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeLostMessage, UnknownData_KK1Z, 0x02DB);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeLostMessage, ScriptData, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeLostMessage, HasSubTitle, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeLostMessage, UnknownData_KQDP, 0x02E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeLostMessage, SubTitle, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeLostMessage, HasSummary, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeLostMessage, UnknownData_8NO9, 0x0301);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeLostMessage, Summary, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeLostMessage, HasTitle, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeLostMessage, UnknownData_B06Z, 0x0319);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeLostMessage, Title, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeLostMessage, HasWinnerName, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeLostMessage, UnknownData_PA0C, 0x0331);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeLostMessage, WinnerName, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeLostMessage, JSONString, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeLostMessage, JSONData, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSChallengeLostMessage, 0x0360);
		}

		// struct FGSChallengeLapsedMessage
		TEST_METHOD(ScriptStruct__GameSparks__GSChallengeLapsedMessage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeLapsedMessage, HasChallenge, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeLapsedMessage, UnknownData_CMLD, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeLapsedMessage, Challenge, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeLapsedMessage, HasMessageId, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeLapsedMessage, UnknownData_SXYY, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeLapsedMessage, MessageId, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeLapsedMessage, HasNotification, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeLapsedMessage, Notification, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeLapsedMessage, HasScriptData, 0x022A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeLapsedMessage, UnknownData_9XU8, 0x022B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeLapsedMessage, ScriptData, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeLapsedMessage, HasSubTitle, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeLapsedMessage, UnknownData_FHG1, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeLapsedMessage, SubTitle, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeLapsedMessage, HasSummary, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeLapsedMessage, UnknownData_K0GY, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeLapsedMessage, Summary, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeLapsedMessage, HasTitle, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeLapsedMessage, UnknownData_47EQ, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeLapsedMessage, Title, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeLapsedMessage, JSONString, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeLapsedMessage, JSONData, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSChallengeLapsedMessage, 0x0298);
		}

		// struct FGSChallengeJoinedMessage
		TEST_METHOD(ScriptStruct__GameSparks__GSChallengeJoinedMessage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeJoinedMessage, HasChallenge, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeJoinedMessage, UnknownData_N1FK, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeJoinedMessage, Challenge, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeJoinedMessage, HasMessage, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeJoinedMessage, UnknownData_F1WP, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeJoinedMessage, Message, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeJoinedMessage, HasMessageId, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeJoinedMessage, UnknownData_H8RY, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeJoinedMessage, MessageId, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeJoinedMessage, HasNotification, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeJoinedMessage, Notification, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeJoinedMessage, HasScriptData, 0x0242);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeJoinedMessage, UnknownData_FNIT, 0x0243);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeJoinedMessage, ScriptData, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeJoinedMessage, HasSubTitle, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeJoinedMessage, UnknownData_6KDP, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeJoinedMessage, SubTitle, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeJoinedMessage, HasSummary, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeJoinedMessage, UnknownData_TZ2O, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeJoinedMessage, Summary, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeJoinedMessage, HasTitle, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeJoinedMessage, UnknownData_W1R8, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeJoinedMessage, Title, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeJoinedMessage, HasWho, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeJoinedMessage, UnknownData_0GTI, 0x0299);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeJoinedMessage, Who, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeJoinedMessage, JSONString, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeJoinedMessage, JSONData, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSChallengeJoinedMessage, 0x02C8);
		}

		// struct FGSChallengeIssuedMessage
		TEST_METHOD(ScriptStruct__GameSparks__GSChallengeIssuedMessage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeIssuedMessage, HasChallenge, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeIssuedMessage, UnknownData_RGZ6, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeIssuedMessage, Challenge, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeIssuedMessage, HasMessage, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeIssuedMessage, UnknownData_TEXX, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeIssuedMessage, Message, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeIssuedMessage, HasMessageId, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeIssuedMessage, UnknownData_HJ56, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeIssuedMessage, MessageId, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeIssuedMessage, HasNotification, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeIssuedMessage, Notification, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeIssuedMessage, HasScriptData, 0x0242);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeIssuedMessage, UnknownData_WI9V, 0x0243);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeIssuedMessage, ScriptData, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeIssuedMessage, HasSubTitle, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeIssuedMessage, UnknownData_KTUB, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeIssuedMessage, SubTitle, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeIssuedMessage, HasSummary, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeIssuedMessage, UnknownData_IF0X, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeIssuedMessage, Summary, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeIssuedMessage, HasTitle, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeIssuedMessage, UnknownData_91XO, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeIssuedMessage, Title, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeIssuedMessage, HasWho, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeIssuedMessage, UnknownData_KXZB, 0x0299);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeIssuedMessage, Who, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeIssuedMessage, JSONString, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeIssuedMessage, JSONData, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSChallengeIssuedMessage, 0x02C8);
		}

		// struct FGSChallengeExpiredMessage
		TEST_METHOD(ScriptStruct__GameSparks__GSChallengeExpiredMessage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeExpiredMessage, HasChallenge, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeExpiredMessage, UnknownData_XM92, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeExpiredMessage, Challenge, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeExpiredMessage, HasMessageId, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeExpiredMessage, UnknownData_WQHK, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeExpiredMessage, MessageId, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeExpiredMessage, HasNotification, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeExpiredMessage, Notification, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeExpiredMessage, HasScriptData, 0x022A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeExpiredMessage, UnknownData_352O, 0x022B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeExpiredMessage, ScriptData, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeExpiredMessage, HasSubTitle, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeExpiredMessage, UnknownData_25YG, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeExpiredMessage, SubTitle, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeExpiredMessage, HasSummary, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeExpiredMessage, UnknownData_WRAL, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeExpiredMessage, Summary, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeExpiredMessage, HasTitle, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeExpiredMessage, UnknownData_PB72, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeExpiredMessage, Title, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeExpiredMessage, JSONString, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeExpiredMessage, JSONData, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSChallengeExpiredMessage, 0x0298);
		}

		// struct FGSChallengeDrawnMessage
		TEST_METHOD(ScriptStruct__GameSparks__GSChallengeDrawnMessage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeDrawnMessage, HasChallenge, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeDrawnMessage, UnknownData_PHMN, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeDrawnMessage, Challenge, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeDrawnMessage, HasLeaderboardData, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeDrawnMessage, UnknownData_CXZ9, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeDrawnMessage, LeaderboardData, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeDrawnMessage, HasMessageId, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeDrawnMessage, UnknownData_OON1, 0x02C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeDrawnMessage, MessageId, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeDrawnMessage, HasNotification, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeDrawnMessage, Notification, 0x02D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeDrawnMessage, HasScriptData, 0x02DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeDrawnMessage, UnknownData_70W5, 0x02DB);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeDrawnMessage, ScriptData, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeDrawnMessage, HasSubTitle, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeDrawnMessage, UnknownData_BIN9, 0x02E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeDrawnMessage, SubTitle, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeDrawnMessage, HasSummary, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeDrawnMessage, UnknownData_H33G, 0x0301);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeDrawnMessage, Summary, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeDrawnMessage, HasTitle, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeDrawnMessage, UnknownData_W8UC, 0x0319);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeDrawnMessage, Title, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeDrawnMessage, JSONString, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeDrawnMessage, JSONData, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSChallengeDrawnMessage, 0x0348);
		}

		// struct FGSChallengeDeclinedMessage
		TEST_METHOD(ScriptStruct__GameSparks__GSChallengeDeclinedMessage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeDeclinedMessage, HasChallenge, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeDeclinedMessage, UnknownData_RTNV, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeDeclinedMessage, Challenge, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeDeclinedMessage, HasMessage, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeDeclinedMessage, UnknownData_OF0E, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeDeclinedMessage, Message, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeDeclinedMessage, HasMessageId, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeDeclinedMessage, UnknownData_DXV4, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeDeclinedMessage, MessageId, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeDeclinedMessage, HasNotification, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeDeclinedMessage, Notification, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeDeclinedMessage, HasScriptData, 0x0242);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeDeclinedMessage, UnknownData_IHKT, 0x0243);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeDeclinedMessage, ScriptData, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeDeclinedMessage, HasSubTitle, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeDeclinedMessage, UnknownData_HKQ9, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeDeclinedMessage, SubTitle, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeDeclinedMessage, HasSummary, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeDeclinedMessage, UnknownData_TDIN, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeDeclinedMessage, Summary, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeDeclinedMessage, HasTitle, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeDeclinedMessage, UnknownData_DIK2, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeDeclinedMessage, Title, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeDeclinedMessage, HasWho, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeDeclinedMessage, UnknownData_RMG4, 0x0299);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeDeclinedMessage, Who, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeDeclinedMessage, JSONString, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeDeclinedMessage, JSONData, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSChallengeDeclinedMessage, 0x02C8);
		}

		// struct FGSChallengeChatMessage
		TEST_METHOD(ScriptStruct__GameSparks__GSChallengeChatMessage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeChatMessage, HasChallenge, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeChatMessage, UnknownData_XGX7, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeChatMessage, Challenge, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeChatMessage, HasMessage, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeChatMessage, UnknownData_978J, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeChatMessage, Message, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeChatMessage, HasMessageId, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeChatMessage, UnknownData_LUGC, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeChatMessage, MessageId, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeChatMessage, HasNotification, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeChatMessage, Notification, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeChatMessage, HasScriptData, 0x0242);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeChatMessage, UnknownData_J5LY, 0x0243);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeChatMessage, ScriptData, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeChatMessage, HasSubTitle, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeChatMessage, UnknownData_U7BU, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeChatMessage, SubTitle, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeChatMessage, HasSummary, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeChatMessage, UnknownData_D7PO, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeChatMessage, Summary, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeChatMessage, HasTitle, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeChatMessage, UnknownData_LARF, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeChatMessage, Title, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeChatMessage, HasWho, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeChatMessage, UnknownData_47W1, 0x0299);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeChatMessage, Who, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeChatMessage, JSONString, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeChatMessage, JSONData, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSChallengeChatMessage, 0x02C8);
		}

		// struct FGSChallengeChangedMessage
		TEST_METHOD(ScriptStruct__GameSparks__GSChallengeChangedMessage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeChangedMessage, HasChallenge, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeChangedMessage, UnknownData_KV0Z, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeChangedMessage, Challenge, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeChangedMessage, HasLeaderboardData, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeChangedMessage, UnknownData_0JW9, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeChangedMessage, LeaderboardData, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeChangedMessage, HasMessageId, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeChangedMessage, UnknownData_P2ON, 0x02C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeChangedMessage, MessageId, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeChangedMessage, HasNotification, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeChangedMessage, Notification, 0x02D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeChangedMessage, HasScriptData, 0x02DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeChangedMessage, UnknownData_8PVT, 0x02DB);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeChangedMessage, ScriptData, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeChangedMessage, HasSubTitle, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeChangedMessage, UnknownData_XJEH, 0x02E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeChangedMessage, SubTitle, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeChangedMessage, HasSummary, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeChangedMessage, UnknownData_N1I6, 0x0301);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeChangedMessage, Summary, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeChangedMessage, HasTitle, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeChangedMessage, UnknownData_JQQF, 0x0319);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeChangedMessage, Title, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeChangedMessage, HasWho, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeChangedMessage, UnknownData_6JJI, 0x0331);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeChangedMessage, Who, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeChangedMessage, JSONString, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeChangedMessage, JSONData, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSChallengeChangedMessage, 0x0360);
		}

		// struct FGSChallengeAcceptedMessage
		TEST_METHOD(ScriptStruct__GameSparks__GSChallengeAcceptedMessage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeAcceptedMessage, HasChallenge, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeAcceptedMessage, UnknownData_FBGV, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeAcceptedMessage, Challenge, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeAcceptedMessage, HasMessage, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeAcceptedMessage, UnknownData_CQWX, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeAcceptedMessage, Message, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeAcceptedMessage, HasMessageId, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeAcceptedMessage, UnknownData_J3KK, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeAcceptedMessage, MessageId, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeAcceptedMessage, HasNotification, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeAcceptedMessage, Notification, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeAcceptedMessage, HasScriptData, 0x0242);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeAcceptedMessage, UnknownData_DM8J, 0x0243);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeAcceptedMessage, ScriptData, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeAcceptedMessage, HasSubTitle, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeAcceptedMessage, UnknownData_BTLH, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeAcceptedMessage, SubTitle, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeAcceptedMessage, HasSummary, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeAcceptedMessage, UnknownData_RICN, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeAcceptedMessage, Summary, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeAcceptedMessage, HasTitle, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeAcceptedMessage, UnknownData_4U0N, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeAcceptedMessage, Title, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeAcceptedMessage, HasWho, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeAcceptedMessage, UnknownData_8U0Y, 0x0299);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeAcceptedMessage, Who, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeAcceptedMessage, JSONString, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChallengeAcceptedMessage, JSONData, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSChallengeAcceptedMessage, 0x02C8);
		}

		// struct FGSAchievementEarnedMessage
		TEST_METHOD(ScriptStruct__GameSparks__GSAchievementEarnedMessage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAchievementEarnedMessage, HasAchievementName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAchievementEarnedMessage, UnknownData_DWNT, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAchievementEarnedMessage, AchievementName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAchievementEarnedMessage, HasAchievementShortCode, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAchievementEarnedMessage, UnknownData_JL8J, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAchievementEarnedMessage, AchievementShortCode, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAchievementEarnedMessage, HasCurrency1Earned, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAchievementEarnedMessage, UnknownData_LKD4, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAchievementEarnedMessage, Currency1Earned, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAchievementEarnedMessage, HasCurrency2Earned, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAchievementEarnedMessage, UnknownData_IBWA, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAchievementEarnedMessage, Currency2Earned, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAchievementEarnedMessage, HasCurrency3Earned, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAchievementEarnedMessage, UnknownData_I1R2, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAchievementEarnedMessage, Currency3Earned, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAchievementEarnedMessage, HasCurrency4Earned, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAchievementEarnedMessage, UnknownData_CDM2, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAchievementEarnedMessage, Currency4Earned, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAchievementEarnedMessage, HasCurrency5Earned, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAchievementEarnedMessage, UnknownData_KGYR, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAchievementEarnedMessage, Currency5Earned, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAchievementEarnedMessage, HasCurrency6Earned, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAchievementEarnedMessage, UnknownData_B0L4, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAchievementEarnedMessage, Currency6Earned, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAchievementEarnedMessage, HasCurrencyAwards, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAchievementEarnedMessage, UnknownData_8L7F, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAchievementEarnedMessage, CurrencyAwards, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAchievementEarnedMessage, HasMessageId, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAchievementEarnedMessage, UnknownData_R3ZU, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAchievementEarnedMessage, MessageId, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAchievementEarnedMessage, HasNotification, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAchievementEarnedMessage, Notification, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAchievementEarnedMessage, HasScriptData, 0x00EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAchievementEarnedMessage, UnknownData_HJLB, 0x00EB);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAchievementEarnedMessage, ScriptData, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAchievementEarnedMessage, HasSubTitle, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAchievementEarnedMessage, UnknownData_APY7, 0x00F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAchievementEarnedMessage, SubTitle, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAchievementEarnedMessage, HasSummary, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAchievementEarnedMessage, UnknownData_G1K8, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAchievementEarnedMessage, Summary, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAchievementEarnedMessage, HasTitle, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAchievementEarnedMessage, UnknownData_15W9, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAchievementEarnedMessage, Title, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAchievementEarnedMessage, HasVirtualGoodEarned, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAchievementEarnedMessage, UnknownData_JUIC, 0x0141);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAchievementEarnedMessage, VirtualGoodEarned, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAchievementEarnedMessage, JSONString, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAchievementEarnedMessage, JSONData, 0x0168);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSAchievementEarnedMessage, 0x0170);
		}

		// struct FGSGameSparksErrorResponse
		TEST_METHOD(ScriptStruct__GameSparks__GSGameSparksErrorResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGameSparksErrorResponse, Errors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGameSparksErrorResponse, HasRequestId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGameSparksErrorResponse, UnknownData_2K25, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGameSparksErrorResponse, RequestId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGameSparksErrorResponse, HasScriptData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGameSparksErrorResponse, UnknownData_R0LK, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGameSparksErrorResponse, ScriptData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGameSparksErrorResponse, JSONString, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGameSparksErrorResponse, JSONData, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSGameSparksErrorResponse, 0x0048);
		}

		// struct FGSUploadData
		TEST_METHOD(ScriptStruct__GameSparks__GSUploadData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSUploadData, HasFileName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSUploadData, UnknownData_VPUZ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSUploadData, Filename, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSUploadData, HasPlayerId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSUploadData, UnknownData_VXFV, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSUploadData, PlayerId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSUploadData, JSONString, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSUploadData, JSONData, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSUploadData, 0x0048);
		}

		// struct FGSAcceptChallengeResponse
		TEST_METHOD(ScriptStruct__GameSparks__GSAcceptChallengeResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAcceptChallengeResponse, Errors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAcceptChallengeResponse, HasChallengeInstanceId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAcceptChallengeResponse, UnknownData_FB98, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAcceptChallengeResponse, ChallengeInstanceId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAcceptChallengeResponse, HasRequestId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAcceptChallengeResponse, UnknownData_LMU5, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAcceptChallengeResponse, RequestId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAcceptChallengeResponse, HasScriptData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAcceptChallengeResponse, UnknownData_WED1, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAcceptChallengeResponse, ScriptData, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAcceptChallengeResponse, JSONString, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAcceptChallengeResponse, JSONData, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSAcceptChallengeResponse, 0x0060);
		}

		// struct FGSLocation
		TEST_METHOD(ScriptStruct__GameSparks__GSLocation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLocation, HasCity, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLocation, UnknownData_5VIC, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLocation, City, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLocation, HasCountry, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLocation, UnknownData_XGHF, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLocation, Country, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLocation, HasLatitide, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLocation, UnknownData_75WK, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLocation, Latitide, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLocation, HasLongditute, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLocation, UnknownData_LNNE, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLocation, Longditute, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLocation, JSONString, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSLocation, JSONData, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSLocation, 0x0058);
		}

		// struct FGSAccountDetailsResponse
		TEST_METHOD(ScriptStruct__GameSparks__GSAccountDetailsResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAccountDetailsResponse, Errors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAccountDetailsResponse, HasAchievements, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAccountDetailsResponse, UnknownData_HD8D, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAccountDetailsResponse, Achievements, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAccountDetailsResponse, HasCurrencies, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAccountDetailsResponse, UnknownData_P5UM, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAccountDetailsResponse, Currencies, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAccountDetailsResponse, HasCurrency1, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAccountDetailsResponse, UnknownData_0AH7, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAccountDetailsResponse, Currency1, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAccountDetailsResponse, HasCurrency2, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAccountDetailsResponse, UnknownData_8V7Y, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAccountDetailsResponse, Currency2, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAccountDetailsResponse, HasCurrency3, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAccountDetailsResponse, UnknownData_2W9A, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAccountDetailsResponse, Currency3, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAccountDetailsResponse, HasCurrency4, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAccountDetailsResponse, UnknownData_5AE0, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAccountDetailsResponse, Currency4, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAccountDetailsResponse, HasCurrency5, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAccountDetailsResponse, UnknownData_QFLU, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAccountDetailsResponse, Currency5, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAccountDetailsResponse, HasCurrency6, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAccountDetailsResponse, UnknownData_VFRQ, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAccountDetailsResponse, Currency6, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAccountDetailsResponse, HasDisplayName, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAccountDetailsResponse, UnknownData_49G7, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAccountDetailsResponse, DisplayName, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAccountDetailsResponse, HasExternalIds, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAccountDetailsResponse, UnknownData_YQS9, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAccountDetailsResponse, ExternalIds, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAccountDetailsResponse, HasLocation, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAccountDetailsResponse, UnknownData_B6MW, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAccountDetailsResponse, Location, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAccountDetailsResponse, HasRequestId, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAccountDetailsResponse, UnknownData_9JHL, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAccountDetailsResponse, RequestId, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAccountDetailsResponse, HasReservedCurrencies, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAccountDetailsResponse, UnknownData_77RZ, 0x0101);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAccountDetailsResponse, ReservedCurrencies, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAccountDetailsResponse, HasReservedCurrency1, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAccountDetailsResponse, UnknownData_NMIG, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAccountDetailsResponse, ReservedCurrency1, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAccountDetailsResponse, HasReservedCurrency2, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAccountDetailsResponse, UnknownData_8IXK, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAccountDetailsResponse, ReservedCurrency2, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAccountDetailsResponse, HasReservedCurrency3, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAccountDetailsResponse, UnknownData_T0C8, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAccountDetailsResponse, ReservedCurrency3, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAccountDetailsResponse, HasReservedCurrency4, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAccountDetailsResponse, UnknownData_D999, 0x0141);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAccountDetailsResponse, ReservedCurrency4, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAccountDetailsResponse, HasReservedCurrency5, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAccountDetailsResponse, UnknownData_YS1G, 0x0151);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAccountDetailsResponse, ReservedCurrency5, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAccountDetailsResponse, HasReservedCurrency6, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAccountDetailsResponse, UnknownData_89WY, 0x0161);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAccountDetailsResponse, ReservedCurrency6, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAccountDetailsResponse, HasUserId, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAccountDetailsResponse, UnknownData_Y1DS, 0x0171);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAccountDetailsResponse, UserId, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAccountDetailsResponse, HasVirtualGoods, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAccountDetailsResponse, UnknownData_0A9Q, 0x0189);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAccountDetailsResponse, VirtualGoods, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAccountDetailsResponse, JSONString, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAccountDetailsResponse, JSONData, 0x01A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSAccountDetailsResponse, 0x01B0);
		}

		// struct FGSBoughtitem
		TEST_METHOD(ScriptStruct__GameSparks__GSBoughtitem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBoughtitem, HasQuantity, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBoughtitem, UnknownData_G0DI, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBoughtitem, Quantity, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBoughtitem, HasShortCode, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBoughtitem, UnknownData_GI77, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBoughtitem, ShortCode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBoughtitem, JSONString, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBoughtitem, JSONData, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSBoughtitem, 0x0038);
		}

		// struct FGSBuyVirtualGoodResponse
		TEST_METHOD(ScriptStruct__GameSparks__GSBuyVirtualGoodResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBuyVirtualGoodResponse, Errors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBuyVirtualGoodResponse, HasBoughtItems, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBuyVirtualGoodResponse, UnknownData_LPNU, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBuyVirtualGoodResponse, BoughtItems, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBuyVirtualGoodResponse, HasCurrenciesAdded, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBuyVirtualGoodResponse, UnknownData_48HX, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBuyVirtualGoodResponse, CurrenciesAdded, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBuyVirtualGoodResponse, HasCurrency1Added, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBuyVirtualGoodResponse, UnknownData_D5IW, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBuyVirtualGoodResponse, Currency1Added, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBuyVirtualGoodResponse, HasCurrency2Added, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBuyVirtualGoodResponse, UnknownData_IRA3, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBuyVirtualGoodResponse, Currency2Added, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBuyVirtualGoodResponse, HasCurrency3Added, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBuyVirtualGoodResponse, UnknownData_YP6E, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBuyVirtualGoodResponse, Currency3Added, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBuyVirtualGoodResponse, HasCurrency4Added, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBuyVirtualGoodResponse, UnknownData_A4CF, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBuyVirtualGoodResponse, Currency4Added, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBuyVirtualGoodResponse, HasCurrency5Added, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBuyVirtualGoodResponse, UnknownData_S6N4, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBuyVirtualGoodResponse, Currency5Added, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBuyVirtualGoodResponse, HasCurrency6Added, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBuyVirtualGoodResponse, UnknownData_IKZN, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBuyVirtualGoodResponse, Currency6Added, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBuyVirtualGoodResponse, HasCurrencyConsumed, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBuyVirtualGoodResponse, UnknownData_QVBJ, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBuyVirtualGoodResponse, CurrencyConsumed, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBuyVirtualGoodResponse, HasCurrencyShortCode, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBuyVirtualGoodResponse, UnknownData_4Q05, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBuyVirtualGoodResponse, CurrencyShortCode, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBuyVirtualGoodResponse, HasCurrencyType, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBuyVirtualGoodResponse, UnknownData_8XX8, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBuyVirtualGoodResponse, CurrencyType, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBuyVirtualGoodResponse, HasInvalidItems, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBuyVirtualGoodResponse, UnknownData_9PDF, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBuyVirtualGoodResponse, InvalidItems, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBuyVirtualGoodResponse, HasRequestId, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBuyVirtualGoodResponse, UnknownData_MWBN, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBuyVirtualGoodResponse, RequestId, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBuyVirtualGoodResponse, HasScriptData, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBuyVirtualGoodResponse, UnknownData_K0OR, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBuyVirtualGoodResponse, ScriptData, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBuyVirtualGoodResponse, HasTransactionIds, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBuyVirtualGoodResponse, UnknownData_NIB7, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBuyVirtualGoodResponse, TransactionIds, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBuyVirtualGoodResponse, JSONString, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBuyVirtualGoodResponse, JSONData, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSBuyVirtualGoodResponse, 0x00F8);
		}

		// struct FGSAuthenticationResponse
		TEST_METHOD(ScriptStruct__GameSparks__GSAuthenticationResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAuthenticationResponse, Errors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAuthenticationResponse, HasAuthToken, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAuthenticationResponse, UnknownData_O2KW, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAuthenticationResponse, AuthToken, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAuthenticationResponse, HasDisplayName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAuthenticationResponse, UnknownData_I52E, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAuthenticationResponse, DisplayName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAuthenticationResponse, HasNewPlayer, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAuthenticationResponse, NewPlayer, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAuthenticationResponse, HasRequestId, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAuthenticationResponse, UnknownData_JQZW, 0x003B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAuthenticationResponse, RequestId, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAuthenticationResponse, HasScriptData, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAuthenticationResponse, UnknownData_W3XJ, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAuthenticationResponse, ScriptData, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAuthenticationResponse, HasSwitchSummary, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAuthenticationResponse, UnknownData_UBKJ, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAuthenticationResponse, SwitchSummary, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAuthenticationResponse, HasUserId, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAuthenticationResponse, UnknownData_D8EN, 0x0101);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAuthenticationResponse, UserId, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAuthenticationResponse, JSONString, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAuthenticationResponse, JSONData, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSAuthenticationResponse, 0x0130);
		}

		// struct FGSAnalyticsResponse
		TEST_METHOD(ScriptStruct__GameSparks__GSAnalyticsResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAnalyticsResponse, Errors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAnalyticsResponse, HasRequestId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAnalyticsResponse, UnknownData_8KJ0, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAnalyticsResponse, RequestId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAnalyticsResponse, HasScriptData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAnalyticsResponse, UnknownData_M46L, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAnalyticsResponse, ScriptData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAnalyticsResponse, JSONString, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAnalyticsResponse, JSONData, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSAnalyticsResponse, 0x0048);
		}

		// struct FGSAroundMeLeaderboardResponse
		TEST_METHOD(ScriptStruct__GameSparks__GSAroundMeLeaderboardResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAroundMeLeaderboardResponse, Errors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAroundMeLeaderboardResponse, HasChallengeInstanceId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAroundMeLeaderboardResponse, UnknownData_8VNF, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAroundMeLeaderboardResponse, ChallengeInstanceId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAroundMeLeaderboardResponse, HasData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAroundMeLeaderboardResponse, UnknownData_XPWD, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAroundMeLeaderboardResponse, Data, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAroundMeLeaderboardResponse, HasFirst, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAroundMeLeaderboardResponse, UnknownData_9PNZ, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAroundMeLeaderboardResponse, First, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAroundMeLeaderboardResponse, HasLast, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAroundMeLeaderboardResponse, UnknownData_M4KT, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAroundMeLeaderboardResponse, Last, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAroundMeLeaderboardResponse, HasLeaderboardShortCode, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAroundMeLeaderboardResponse, UnknownData_IGPS, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAroundMeLeaderboardResponse, LeaderboardShortCode, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAroundMeLeaderboardResponse, HasRequestId, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAroundMeLeaderboardResponse, UnknownData_QOWH, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAroundMeLeaderboardResponse, RequestId, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAroundMeLeaderboardResponse, HasScriptData, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAroundMeLeaderboardResponse, UnknownData_BGX0, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAroundMeLeaderboardResponse, ScriptData, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAroundMeLeaderboardResponse, HasSocial, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAroundMeLeaderboardResponse, Social, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAroundMeLeaderboardResponse, UnknownData_73SZ, 0x00AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAroundMeLeaderboardResponse, JSONString, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSAroundMeLeaderboardResponse, JSONData, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSAroundMeLeaderboardResponse, 0x00C8);
		}

		// struct FGSBatchAdminResponse
		TEST_METHOD(ScriptStruct__GameSparks__GSBatchAdminResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBatchAdminResponse, Errors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBatchAdminResponse, HasRequestId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBatchAdminResponse, UnknownData_95XO, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBatchAdminResponse, RequestId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBatchAdminResponse, HasResponses, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBatchAdminResponse, UnknownData_5WY2, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBatchAdminResponse, Responses, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBatchAdminResponse, HasScriptData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBatchAdminResponse, UnknownData_EL6P, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBatchAdminResponse, ScriptData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBatchAdminResponse, JSONString, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSBatchAdminResponse, JSONData, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSBatchAdminResponse, 0x0058);
		}

		// struct FGSCancelBulkJobAdminResponse
		TEST_METHOD(ScriptStruct__GameSparks__GSCancelBulkJobAdminResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSCancelBulkJobAdminResponse, Errors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSCancelBulkJobAdminResponse, HasBulkJobs, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSCancelBulkJobAdminResponse, UnknownData_4E6E, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSCancelBulkJobAdminResponse, BulkJobs, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSCancelBulkJobAdminResponse, HasRequestId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSCancelBulkJobAdminResponse, UnknownData_8TCR, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSCancelBulkJobAdminResponse, RequestId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSCancelBulkJobAdminResponse, HasScriptData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSCancelBulkJobAdminResponse, UnknownData_MMVK, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSCancelBulkJobAdminResponse, ScriptData, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSCancelBulkJobAdminResponse, JSONString, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSCancelBulkJobAdminResponse, JSONData, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSCancelBulkJobAdminResponse, 0x0060);
		}

		// struct FGSChangeUserDetailsResponse
		TEST_METHOD(ScriptStruct__GameSparks__GSChangeUserDetailsResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChangeUserDetailsResponse, Errors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChangeUserDetailsResponse, HasRequestId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChangeUserDetailsResponse, UnknownData_T1P1, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChangeUserDetailsResponse, RequestId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChangeUserDetailsResponse, HasScriptData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChangeUserDetailsResponse, UnknownData_7Q4D, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChangeUserDetailsResponse, ScriptData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChangeUserDetailsResponse, JSONString, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChangeUserDetailsResponse, JSONData, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSChangeUserDetailsResponse, 0x0048);
		}

		// struct FGSChatOnChallengeResponse
		TEST_METHOD(ScriptStruct__GameSparks__GSChatOnChallengeResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChatOnChallengeResponse, Errors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChatOnChallengeResponse, HasChallengeInstanceId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChatOnChallengeResponse, UnknownData_9JWO, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChatOnChallengeResponse, ChallengeInstanceId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChatOnChallengeResponse, HasRequestId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChatOnChallengeResponse, UnknownData_9SP8, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChatOnChallengeResponse, RequestId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChatOnChallengeResponse, HasScriptData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChatOnChallengeResponse, UnknownData_I5TV, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChatOnChallengeResponse, ScriptData, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChatOnChallengeResponse, JSONString, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSChatOnChallengeResponse, JSONData, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSChatOnChallengeResponse, 0x0060);
		}

		// struct FGSConsumeVirtualGoodResponse
		TEST_METHOD(ScriptStruct__GameSparks__GSConsumeVirtualGoodResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSConsumeVirtualGoodResponse, Errors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSConsumeVirtualGoodResponse, HasRequestId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSConsumeVirtualGoodResponse, UnknownData_ZCQ5, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSConsumeVirtualGoodResponse, RequestId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSConsumeVirtualGoodResponse, HasScriptData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSConsumeVirtualGoodResponse, UnknownData_9RLK, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSConsumeVirtualGoodResponse, ScriptData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSConsumeVirtualGoodResponse, JSONString, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSConsumeVirtualGoodResponse, JSONData, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSConsumeVirtualGoodResponse, 0x0048);
		}

		// struct FGSCreateChallengeResponse
		TEST_METHOD(ScriptStruct__GameSparks__GSCreateChallengeResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSCreateChallengeResponse, Errors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSCreateChallengeResponse, HasChallengeInstanceId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSCreateChallengeResponse, UnknownData_2JAR, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSCreateChallengeResponse, ChallengeInstanceId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSCreateChallengeResponse, HasRequestId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSCreateChallengeResponse, UnknownData_UUUX, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSCreateChallengeResponse, RequestId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSCreateChallengeResponse, HasScriptData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSCreateChallengeResponse, UnknownData_N4QK, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSCreateChallengeResponse, ScriptData, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSCreateChallengeResponse, JSONString, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSCreateChallengeResponse, JSONData, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSCreateChallengeResponse, 0x0060);
		}

		// struct FGSCreateTeamResponse
		TEST_METHOD(ScriptStruct__GameSparks__GSCreateTeamResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSCreateTeamResponse, Errors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSCreateTeamResponse, HasMembers, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSCreateTeamResponse, UnknownData_HNF6, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSCreateTeamResponse, Members, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSCreateTeamResponse, HasOwner, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSCreateTeamResponse, UnknownData_MIKJ, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSCreateTeamResponse, Owner, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSCreateTeamResponse, HasRequestId, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSCreateTeamResponse, UnknownData_ZROL, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSCreateTeamResponse, RequestId, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSCreateTeamResponse, HasScriptData, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSCreateTeamResponse, UnknownData_R0KJ, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSCreateTeamResponse, ScriptData, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSCreateTeamResponse, HasTeamId, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSCreateTeamResponse, UnknownData_5CFQ, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSCreateTeamResponse, TeamId, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSCreateTeamResponse, HasTeamName, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSCreateTeamResponse, UnknownData_L4PU, 0x0101);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSCreateTeamResponse, TeamName, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSCreateTeamResponse, HasTeamType, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSCreateTeamResponse, UnknownData_FYL0, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSCreateTeamResponse, TeamType, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSCreateTeamResponse, JSONString, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSCreateTeamResponse, JSONData, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSCreateTeamResponse, 0x0148);
		}

		// struct FGSDeclineChallengeResponse
		TEST_METHOD(ScriptStruct__GameSparks__GSDeclineChallengeResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSDeclineChallengeResponse, Errors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSDeclineChallengeResponse, HasChallengeInstanceId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSDeclineChallengeResponse, UnknownData_DWAB, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSDeclineChallengeResponse, ChallengeInstanceId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSDeclineChallengeResponse, HasRequestId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSDeclineChallengeResponse, UnknownData_14M8, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSDeclineChallengeResponse, RequestId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSDeclineChallengeResponse, HasScriptData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSDeclineChallengeResponse, UnknownData_5GSW, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSDeclineChallengeResponse, ScriptData, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSDeclineChallengeResponse, JSONString, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSDeclineChallengeResponse, JSONData, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSDeclineChallengeResponse, 0x0060);
		}

		// struct FGSDismissMessageResponse
		TEST_METHOD(ScriptStruct__GameSparks__GSDismissMessageResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSDismissMessageResponse, Errors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSDismissMessageResponse, HasRequestId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSDismissMessageResponse, UnknownData_K3H8, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSDismissMessageResponse, RequestId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSDismissMessageResponse, HasScriptData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSDismissMessageResponse, UnknownData_2MV5, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSDismissMessageResponse, ScriptData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSDismissMessageResponse, JSONString, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSDismissMessageResponse, JSONData, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSDismissMessageResponse, 0x0048);
		}

		// struct FGSDismissMultipleMessagesResponse
		TEST_METHOD(ScriptStruct__GameSparks__GSDismissMultipleMessagesResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSDismissMultipleMessagesResponse, Errors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSDismissMultipleMessagesResponse, HasFailedDismissals, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSDismissMultipleMessagesResponse, UnknownData_JUXL, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSDismissMultipleMessagesResponse, FailedDismissals, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSDismissMultipleMessagesResponse, HasMessagesDismissed, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSDismissMultipleMessagesResponse, UnknownData_HRDN, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSDismissMultipleMessagesResponse, MessagesDismissed, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSDismissMultipleMessagesResponse, HasRequestId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSDismissMultipleMessagesResponse, UnknownData_EAJR, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSDismissMultipleMessagesResponse, RequestId, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSDismissMultipleMessagesResponse, HasScriptData, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSDismissMultipleMessagesResponse, UnknownData_Y6LM, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSDismissMultipleMessagesResponse, ScriptData, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSDismissMultipleMessagesResponse, JSONString, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSDismissMultipleMessagesResponse, JSONData, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSDismissMultipleMessagesResponse, 0x0068);
		}

		// struct FGSDropTeamResponse
		TEST_METHOD(ScriptStruct__GameSparks__GSDropTeamResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSDropTeamResponse, Errors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSDropTeamResponse, HasRequestId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSDropTeamResponse, UnknownData_LS9D, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSDropTeamResponse, RequestId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSDropTeamResponse, HasScriptData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSDropTeamResponse, UnknownData_708O, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSDropTeamResponse, ScriptData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSDropTeamResponse, JSONString, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSDropTeamResponse, JSONData, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSDropTeamResponse, 0x0048);
		}

		// struct FGSEndSessionResponse
		TEST_METHOD(ScriptStruct__GameSparks__GSEndSessionResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSEndSessionResponse, Errors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSEndSessionResponse, HasRequestId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSEndSessionResponse, UnknownData_IVTS, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSEndSessionResponse, RequestId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSEndSessionResponse, HasScriptData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSEndSessionResponse, UnknownData_M18J, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSEndSessionResponse, ScriptData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSEndSessionResponse, HasSessionDuration, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSEndSessionResponse, UnknownData_PULB, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSEndSessionResponse, SessionDuration, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSEndSessionResponse, JSONString, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSEndSessionResponse, JSONData, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSEndSessionResponse, 0x0050);
		}

		// struct FGSFindChallengeResponse
		TEST_METHOD(ScriptStruct__GameSparks__GSFindChallengeResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFindChallengeResponse, Errors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFindChallengeResponse, HasChallengeInstances, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFindChallengeResponse, UnknownData_XNPP, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFindChallengeResponse, ChallengeInstances, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFindChallengeResponse, HasRequestId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFindChallengeResponse, UnknownData_H5PT, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFindChallengeResponse, RequestId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFindChallengeResponse, HasScriptData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFindChallengeResponse, UnknownData_36G5, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFindChallengeResponse, ScriptData, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFindChallengeResponse, JSONString, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFindChallengeResponse, JSONData, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSFindChallengeResponse, 0x0060);
		}

		// struct FGSFindMatchResponse
		TEST_METHOD(ScriptStruct__GameSparks__GSFindMatchResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFindMatchResponse, Errors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFindMatchResponse, HasAccessToken, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFindMatchResponse, UnknownData_OF26, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFindMatchResponse, AccessToken, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFindMatchResponse, HasHost, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFindMatchResponse, UnknownData_G019, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFindMatchResponse, Host, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFindMatchResponse, HasMatchData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFindMatchResponse, UnknownData_HN9N, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFindMatchResponse, MatchData, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFindMatchResponse, HasMatchId, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFindMatchResponse, UnknownData_6MHE, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFindMatchResponse, MatchId, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFindMatchResponse, HasOpponents, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFindMatchResponse, UnknownData_B7XM, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFindMatchResponse, Opponents, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFindMatchResponse, HasPeerId, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFindMatchResponse, UnknownData_IB4L, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFindMatchResponse, PeerId, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFindMatchResponse, HasPlayerId, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFindMatchResponse, UnknownData_VH22, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFindMatchResponse, PlayerId, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFindMatchResponse, HasPort, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFindMatchResponse, UnknownData_X6ZJ, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFindMatchResponse, Port, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFindMatchResponse, HasRequestId, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFindMatchResponse, UnknownData_PX8S, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFindMatchResponse, RequestId, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFindMatchResponse, HasScriptData, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFindMatchResponse, UnknownData_VTJR, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFindMatchResponse, ScriptData, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFindMatchResponse, JSONString, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFindMatchResponse, JSONData, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSFindMatchResponse, 0x00E0);
		}

		// struct FGSFindPendingMatchesResponse
		TEST_METHOD(ScriptStruct__GameSparks__GSFindPendingMatchesResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFindPendingMatchesResponse, Errors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFindPendingMatchesResponse, HasPendingMatches, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFindPendingMatchesResponse, UnknownData_XGH2, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFindPendingMatchesResponse, PendingMatches, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFindPendingMatchesResponse, HasRequestId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFindPendingMatchesResponse, UnknownData_ZOO2, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFindPendingMatchesResponse, RequestId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFindPendingMatchesResponse, HasScriptData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFindPendingMatchesResponse, UnknownData_IZ84, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFindPendingMatchesResponse, ScriptData, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFindPendingMatchesResponse, JSONString, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSFindPendingMatchesResponse, JSONData, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSFindPendingMatchesResponse, 0x0060);
		}

		// struct FGSGetChallengeResponse
		TEST_METHOD(ScriptStruct__GameSparks__GSGetChallengeResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetChallengeResponse, Errors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetChallengeResponse, HasChallenge, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetChallengeResponse, UnknownData_G6ZU, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetChallengeResponse, Challenge, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetChallengeResponse, HasRequestId, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetChallengeResponse, UnknownData_8KB0, 0x0219);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetChallengeResponse, RequestId, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetChallengeResponse, HasScriptData, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetChallengeResponse, UnknownData_UKGW, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetChallengeResponse, ScriptData, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetChallengeResponse, JSONString, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetChallengeResponse, JSONData, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSGetChallengeResponse, 0x0258);
		}

		// struct FGSGetDownloadableResponse
		TEST_METHOD(ScriptStruct__GameSparks__GSGetDownloadableResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetDownloadableResponse, Errors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetDownloadableResponse, HasLastModified, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetDownloadableResponse, UnknownData_9HHM, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetDownloadableResponse, LastModified, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetDownloadableResponse, HasRequestId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetDownloadableResponse, UnknownData_CCZ9, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetDownloadableResponse, RequestId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetDownloadableResponse, HasScriptData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetDownloadableResponse, UnknownData_4WTI, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetDownloadableResponse, ScriptData, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetDownloadableResponse, HasShortCode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetDownloadableResponse, UnknownData_BNQW, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetDownloadableResponse, ShortCode, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetDownloadableResponse, HasSize, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetDownloadableResponse, UnknownData_KWM5, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetDownloadableResponse, Size, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetDownloadableResponse, HasUrl, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetDownloadableResponse, UnknownData_BQVO, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetDownloadableResponse, URL, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetDownloadableResponse, JSONString, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetDownloadableResponse, JSONData, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSGetDownloadableResponse, 0x0098);
		}

		// struct FGSGetLeaderboardEntriesResponse
		TEST_METHOD(ScriptStruct__GameSparks__GSGetLeaderboardEntriesResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetLeaderboardEntriesResponse, Errors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetLeaderboardEntriesResponse, HasRequestId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetLeaderboardEntriesResponse, UnknownData_46IG, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetLeaderboardEntriesResponse, RequestId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetLeaderboardEntriesResponse, HasScriptData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetLeaderboardEntriesResponse, UnknownData_LQJ2, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetLeaderboardEntriesResponse, ScriptData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetLeaderboardEntriesResponse, JSONString, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetLeaderboardEntriesResponse, JSONData, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSGetLeaderboardEntriesResponse, 0x0048);
		}

		// struct FGSGetMessageResponse
		TEST_METHOD(ScriptStruct__GameSparks__GSGetMessageResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetMessageResponse, Errors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetMessageResponse, HasMessage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetMessageResponse, UnknownData_F17T, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetMessageResponse, Message, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetMessageResponse, HasRequestId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetMessageResponse, UnknownData_V267, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetMessageResponse, RequestId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetMessageResponse, HasScriptData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetMessageResponse, UnknownData_HTVC, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetMessageResponse, ScriptData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetMessageResponse, HasStatus, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetMessageResponse, UnknownData_J0OF, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetMessageResponse, Status, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetMessageResponse, JSONString, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetMessageResponse, JSONData, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSGetMessageResponse, 0x0070);
		}

		// struct FGSGetMyTeamsResponse
		TEST_METHOD(ScriptStruct__GameSparks__GSGetMyTeamsResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetMyTeamsResponse, Errors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetMyTeamsResponse, HasRequestId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetMyTeamsResponse, UnknownData_TLU3, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetMyTeamsResponse, RequestId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetMyTeamsResponse, HasScriptData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetMyTeamsResponse, UnknownData_M6N4, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetMyTeamsResponse, ScriptData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetMyTeamsResponse, HasTeams, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetMyTeamsResponse, UnknownData_G7ZA, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetMyTeamsResponse, Teams, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetMyTeamsResponse, JSONString, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetMyTeamsResponse, JSONData, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSGetMyTeamsResponse, 0x0060);
		}

		// struct FGSGetPropertyResponse
		TEST_METHOD(ScriptStruct__GameSparks__GSGetPropertyResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetPropertyResponse, Errors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetPropertyResponse, HasProperty, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetPropertyResponse, UnknownData_Y8UU, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetPropertyResponse, Property, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetPropertyResponse, HasRequestId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetPropertyResponse, UnknownData_CSDA, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetPropertyResponse, RequestId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetPropertyResponse, HasScriptData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetPropertyResponse, UnknownData_L281, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetPropertyResponse, ScriptData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetPropertyResponse, JSONString, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetPropertyResponse, JSONData, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSGetPropertyResponse, 0x0058);
		}

		// struct FGSGetPropertySetResponse
		TEST_METHOD(ScriptStruct__GameSparks__GSGetPropertySetResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetPropertySetResponse, Errors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetPropertySetResponse, HasPropertySet, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetPropertySetResponse, UnknownData_3KPS, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetPropertySetResponse, PropertySet, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetPropertySetResponse, HasRequestId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetPropertySetResponse, UnknownData_5UCD, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetPropertySetResponse, RequestId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetPropertySetResponse, HasScriptData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetPropertySetResponse, UnknownData_HBIS, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetPropertySetResponse, ScriptData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetPropertySetResponse, JSONString, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetPropertySetResponse, JSONData, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSGetPropertySetResponse, 0x0058);
		}

		// struct FGSGetTeamResponse
		TEST_METHOD(ScriptStruct__GameSparks__GSGetTeamResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetTeamResponse, Errors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetTeamResponse, HasMembers, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetTeamResponse, UnknownData_8HHH, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetTeamResponse, Members, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetTeamResponse, HasOwner, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetTeamResponse, UnknownData_XKLB, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetTeamResponse, Owner, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetTeamResponse, HasRequestId, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetTeamResponse, UnknownData_IID0, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetTeamResponse, RequestId, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetTeamResponse, HasScriptData, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetTeamResponse, UnknownData_XP6T, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetTeamResponse, ScriptData, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetTeamResponse, HasTeamId, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetTeamResponse, UnknownData_AW9M, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetTeamResponse, TeamId, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetTeamResponse, HasTeamName, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetTeamResponse, UnknownData_R2BO, 0x0101);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetTeamResponse, TeamName, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetTeamResponse, HasTeamType, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetTeamResponse, UnknownData_KW9Z, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetTeamResponse, TeamType, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetTeamResponse, HasTeams, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetTeamResponse, UnknownData_RWZ5, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetTeamResponse, Teams, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetTeamResponse, JSONString, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetTeamResponse, JSONData, 0x0158);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSGetTeamResponse, 0x0160);
		}

		// struct FGSGetUploadUrlResponse
		TEST_METHOD(ScriptStruct__GameSparks__GSGetUploadUrlResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetUploadUrlResponse, Errors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetUploadUrlResponse, HasRequestId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetUploadUrlResponse, UnknownData_KK2P, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetUploadUrlResponse, RequestId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetUploadUrlResponse, HasScriptData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetUploadUrlResponse, UnknownData_PXXH, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetUploadUrlResponse, ScriptData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetUploadUrlResponse, HasUrl, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetUploadUrlResponse, UnknownData_RBBP, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetUploadUrlResponse, URL, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetUploadUrlResponse, JSONString, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetUploadUrlResponse, JSONData, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSGetUploadUrlResponse, 0x0060);
		}

		// struct FGSGetUploadedResponse
		TEST_METHOD(ScriptStruct__GameSparks__GSGetUploadedResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetUploadedResponse, Errors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetUploadedResponse, HasRequestId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetUploadedResponse, UnknownData_4K03, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetUploadedResponse, RequestId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetUploadedResponse, HasScriptData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetUploadedResponse, UnknownData_IDWK, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetUploadedResponse, ScriptData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetUploadedResponse, HasSize, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetUploadedResponse, UnknownData_WLYS, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetUploadedResponse, Size, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetUploadedResponse, HasUrl, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetUploadedResponse, UnknownData_04TR, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetUploadedResponse, URL, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetUploadedResponse, JSONString, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSGetUploadedResponse, JSONData, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSGetUploadedResponse, 0x0068);
		}

		// struct FGSJoinChallengeResponse
		TEST_METHOD(ScriptStruct__GameSparks__GSJoinChallengeResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSJoinChallengeResponse, Errors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSJoinChallengeResponse, HasJoined, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSJoinChallengeResponse, Joined, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSJoinChallengeResponse, HasRequestId, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSJoinChallengeResponse, UnknownData_1XZT, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSJoinChallengeResponse, RequestId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSJoinChallengeResponse, HasScriptData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSJoinChallengeResponse, UnknownData_QCPJ, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSJoinChallengeResponse, ScriptData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSJoinChallengeResponse, JSONString, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSJoinChallengeResponse, JSONData, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSJoinChallengeResponse, 0x0048);
		}

		// struct FMovieSceneMediaSectionParams
		TEST_METHOD(ScriptStruct__MediaCompositing__MovieSceneMediaSectionParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, MediaSoundComponent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, MediaSource, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, MediaTexture, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, MediaPlayer, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, SectionStartFrame, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, SectionEndFrame, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, bLooping, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, UnknownData_M5YP, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, StartFrameOffset, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneMediaSectionParams, 0x0030);
		}

		// struct FMovieSceneMediaSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MediaCompositing__MovieSceneMediaSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionTemplate, Params, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneMediaSectionTemplate, 0x0050);
		}

		// struct FVector2D
		TEST_METHOD(ScriptStruct__CoreUObject__Vector2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector2D, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector2D, Y, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector2D, 0x0008);
		}

		// struct FInterpCurvePointVector2D
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointVector2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, ArriveTangent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, LeaveTangent, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, InterpMode, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, UnknownData_V8FV, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointVector2D, 0x0020);
		}

		// struct FInterpCurveVector2D
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveVector2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector2D, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector2D, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector2D, UnknownData_MZ6L, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector2D, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveVector2D, 0x0018);
		}

		// struct FVector
		TEST_METHOD(ScriptStruct__CoreUObject__Vector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector, Y, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector, Z, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector, 0x000C);
		}

		// struct FInterpCurvePointVector
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, ArriveTangent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, LeaveTangent, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, InterpMode, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, UnknownData_MBY9, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointVector, 0x002C);
		}

		// struct FInterpCurveVector
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector, UnknownData_69KM, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveVector, 0x0018);
		}

		// struct FQuat
		TEST_METHOD(ScriptStruct__CoreUObject__Quat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuat, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuat, Y, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuat, Z, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuat, W, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQuat, 0x0010);
		}

		// struct FInterpCurvePointQuat
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointQuat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, UnknownData_4Z0W, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, OutVal, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, ArriveTangent, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, LeaveTangent, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, InterpMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, UnknownData_4FK3, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointQuat, 0x0050);
		}

		// struct FInterpCurveQuat
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveQuat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveQuat, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveQuat, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveQuat, UnknownData_1IF0, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveQuat, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveQuat, 0x0018);
		}

		// struct FTwoVectors
		TEST_METHOD(ScriptStruct__CoreUObject__TwoVectors)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwoVectors, v1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwoVectors, v2, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTwoVectors, 0x0018);
		}

		// struct FInterpCurvePointTwoVectors
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointTwoVectors)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, ArriveTangent, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, LeaveTangent, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, InterpMode, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, UnknownData_D1T2, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointTwoVectors, 0x0050);
		}

		// struct FInterpCurveTwoVectors
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveTwoVectors)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveTwoVectors, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveTwoVectors, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveTwoVectors, UnknownData_M4E0, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveTwoVectors, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveTwoVectors, 0x0018);
		}

		// struct FLinearColor
		TEST_METHOD(ScriptStruct__CoreUObject__LinearColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearColor, R, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearColor, G, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearColor, B, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearColor, A, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLinearColor, 0x0010);
		}

		// struct FInterpCurvePointLinearColor
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointLinearColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, ArriveTangent, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, LeaveTangent, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, InterpMode, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, UnknownData_QW5M, 0x0035);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointLinearColor, 0x0038);
		}

		// struct FInterpCurveLinearColor
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveLinearColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveLinearColor, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveLinearColor, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveLinearColor, UnknownData_O0U2, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveLinearColor, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveLinearColor, 0x0018);
		}

		// struct FTransform
		TEST_METHOD(ScriptStruct__CoreUObject__Transform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransform, Rotation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransform, Translation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransform, UnknownData_DV1X, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransform, Scale3D, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransform, UnknownData_W3GX, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransform, 0x0030);
		}

		// struct FPackedRGB10A2N
		TEST_METHOD(ScriptStruct__CoreUObject__PackedRGB10A2N)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedRGB10A2N, Packed, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPackedRGB10A2N, 0x0004);
		}

		// struct FPackedRGBA16N
		TEST_METHOD(ScriptStruct__CoreUObject__PackedRGBA16N)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedRGBA16N, XY, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedRGBA16N, ZW, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPackedRGBA16N, 0x0008);
		}

		// struct FIntPoint
		TEST_METHOD(ScriptStruct__CoreUObject__IntPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntPoint, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntPoint, Y, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntPoint, 0x0008);
		}

		// struct FIntVector
		TEST_METHOD(ScriptStruct__CoreUObject__IntVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntVector, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntVector, Y, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntVector, Z, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntVector, 0x000C);
		}

		// struct FColor
		TEST_METHOD(ScriptStruct__CoreUObject__Color)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FColor, B, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColor, G, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColor, R, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColor, A, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColor, 0x0004);
		}

		// struct FBox
		TEST_METHOD(ScriptStruct__CoreUObject__Box)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox, Min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox, Max, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox, IsValid, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox, UnknownData_2184, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBox, 0x001C);
		}

		// struct FBox2D
		TEST_METHOD(ScriptStruct__CoreUObject__Box2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox2D, Min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox2D, Max, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox2D, bIsValid, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox2D, UnknownData_ZOP5, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBox2D, 0x0014);
		}

		// struct FBoxSphereBounds
		TEST_METHOD(ScriptStruct__CoreUObject__BoxSphereBounds)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoxSphereBounds, Origin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoxSphereBounds, BoxExtent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoxSphereBounds, SphereRadius, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoxSphereBounds, 0x001C);
		}

		// struct FOrientedBox
		TEST_METHOD(ScriptStruct__CoreUObject__OrientedBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, Center, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, AxisX, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, AxisY, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, AxisZ, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, ExtentX, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, ExtentY, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, ExtentZ, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOrientedBox, 0x003C);
		}

		// struct FPlane : public FVector
		TEST_METHOD(ScriptStruct__CoreUObject__Plane)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlane, W, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlane, 0x0010);
		}

		// struct FMatrix
		TEST_METHOD(ScriptStruct__CoreUObject__Matrix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatrix, XPlane, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatrix, YPlane, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatrix, ZPlane, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatrix, WPlane, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMatrix, 0x0040);
		}

		// struct FInterpCurvePointFloat
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, ArriveTangent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, LeaveTangent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, InterpMode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, UnknownData_2RZY, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointFloat, 0x0014);
		}

		// struct FInterpCurveFloat
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveFloat, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveFloat, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveFloat, UnknownData_TPUW, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveFloat, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveFloat, 0x0018);
		}

		// struct FRandomStream
		TEST_METHOD(ScriptStruct__CoreUObject__RandomStream)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomStream, InitialSeed, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomStream, Seed, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRandomStream, 0x0008);
		}

		// struct FDateTime
		TEST_METHOD(ScriptStruct__CoreUObject__DateTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDateTime, UnknownData_QM1P, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDateTime, 0x0008);
		}

		// struct FFrameNumber
		TEST_METHOD(ScriptStruct__CoreUObject__FrameNumber)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameNumber, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFrameNumber, 0x0004);
		}

		// struct FFrameRate
		TEST_METHOD(ScriptStruct__CoreUObject__FrameRate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameRate, Numerator, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameRate, Denominator, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFrameRate, 0x0008);
		}

		// struct FFrameTime
		TEST_METHOD(ScriptStruct__CoreUObject__FrameTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameTime, FrameNumber, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameTime, SubFrame, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFrameTime, 0x0008);
		}

		// struct FQualifiedFrameTime
		TEST_METHOD(ScriptStruct__CoreUObject__QualifiedFrameTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQualifiedFrameTime, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQualifiedFrameTime, Rate, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQualifiedFrameTime, 0x0010);
		}

		// struct FTimecode
		TEST_METHOD(ScriptStruct__CoreUObject__Timecode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, Hours, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, Minutes, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, Seconds, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, Frames, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, bDropFrameFormat, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, UnknownData_QLJ6, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimecode, 0x0014);
		}

		// struct FTimespan
		TEST_METHOD(ScriptStruct__CoreUObject__Timespan)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimespan, UnknownData_DJZ5, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimespan, 0x0008);
		}

		// struct FSoftObjectPath
		TEST_METHOD(ScriptStruct__CoreUObject__SoftObjectPath)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoftObjectPath, AssetPathName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoftObjectPath, SubPathString, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoftObjectPath, 0x0018);
		}

		// struct FSoftClassPath : public FSoftObjectPath
		TEST_METHOD(ScriptStruct__CoreUObject__SoftClassPath)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoftClassPath, 0x0018);
		}

		// struct FPrimaryAssetType
		TEST_METHOD(ScriptStruct__CoreUObject__PrimaryAssetType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetType, Name, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetType, 0x0008);
		}

		// struct FPrimaryAssetId
		TEST_METHOD(ScriptStruct__CoreUObject__PrimaryAssetId)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetId, PrimaryAssetType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetId, PrimaryAssetName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetId, 0x0010);
		}

		// struct FFallbackStruct
		TEST_METHOD(ScriptStruct__CoreUObject__FallbackStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFallbackStruct, UnknownData_6GH1, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFallbackStruct, 0x0001);
		}

		// struct FFloatRangeBound
		TEST_METHOD(ScriptStruct__CoreUObject__FloatRangeBound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRangeBound, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRangeBound, UnknownData_2OWX, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRangeBound, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatRangeBound, 0x0008);
		}

		// struct FFloatRange
		TEST_METHOD(ScriptStruct__CoreUObject__FloatRange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRange, LowerBound, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRange, UpperBound, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatRange, 0x0010);
		}

		// struct FInt32RangeBound
		TEST_METHOD(ScriptStruct__CoreUObject__Int32RangeBound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32RangeBound, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32RangeBound, UnknownData_86JY, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32RangeBound, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInt32RangeBound, 0x0008);
		}

		// struct FInt32Range
		TEST_METHOD(ScriptStruct__CoreUObject__Int32Range)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32Range, LowerBound, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32Range, UpperBound, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInt32Range, 0x0010);
		}

		// struct FFloatInterval
		TEST_METHOD(ScriptStruct__CoreUObject__FloatInterval)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatInterval, Min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatInterval, Max, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatInterval, 0x0008);
		}

		// struct FInt32Interval
		TEST_METHOD(ScriptStruct__CoreUObject__Int32Interval)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32Interval, Min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32Interval, Max, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInt32Interval, 0x0008);
		}

		// struct FPolyglotTextData
		TEST_METHOD(ScriptStruct__CoreUObject__PolyglotTextData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, Category, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, UnknownData_X010, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, NativeCulture, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, Namespace, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, Key, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, NativeString, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, LocalizedStrings, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, bIsMinimalPatch, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, UnknownData_YDPP, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, CachedText, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolyglotTextData, 0x00B8);
		}

		// struct FJoinabilitySettings
		TEST_METHOD(ScriptStruct__CoreUObject__JoinabilitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, SessionName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, bPublicSearchable, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, bAllowInvites, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, bJoinViaPresence, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, bJoinViaPresenceFriendsOnly, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, MaxPlayers, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, MaxPartySize, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FJoinabilitySettings, 0x0014);
		}

		// struct FUniqueNetIdWrapper
		TEST_METHOD(ScriptStruct__CoreUObject__UniqueNetIdWrapper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUniqueNetIdWrapper, UnknownData_W9WY, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUniqueNetIdWrapper, 0x0001);
		}

		// struct FVector4
		TEST_METHOD(ScriptStruct__CoreUObject__Vector4)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4, Y, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4, Z, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4, W, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector4, 0x0010);
		}

		// struct FRotator
		TEST_METHOD(ScriptStruct__CoreUObject__Rotator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotator, Pitch, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotator, Yaw, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotator, Roll, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRotator, 0x000C);
		}

		// struct FPackedNormal
		TEST_METHOD(ScriptStruct__CoreUObject__PackedNormal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedNormal, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedNormal, Y, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedNormal, Z, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedNormal, W, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPackedNormal, 0x0004);
		}

		// struct FGuid
		TEST_METHOD(ScriptStruct__CoreUObject__Guid)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGuid, A, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGuid, B, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGuid, C, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGuid, D, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGuid, 0x0010);
		}

		// struct FAutomationEvent
		TEST_METHOD(ScriptStruct__CoreUObject__AutomationEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, UnknownData_EN6V, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, Message, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, Context, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, Artifact, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutomationEvent, 0x0038);
		}

		// struct FAutomationExecutionEntry
		TEST_METHOD(ScriptStruct__CoreUObject__AutomationExecutionEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationExecutionEntry, Event, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationExecutionEntry, Filename, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationExecutionEntry, LineNumber, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationExecutionEntry, UnknownData_YKU4, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationExecutionEntry, Timestamp, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutomationExecutionEntry, 0x0058);
		}

		// struct FARFilter
		TEST_METHOD(ScriptStruct__AssetRegistry__ARFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, PackageNames, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, PackagePaths, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, ObjectPaths, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, ClassNames, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, UnknownData_PO7W, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, RecursiveClassesExclusionSet, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, bRecursivePaths, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, bRecursiveClasses, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, bIncludeOnlyOnDiskAssets, 0x00E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, UnknownData_EEQE, 0x00E3);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARFilter, 0x00E8);
		}

		// struct FTagAndValue
		TEST_METHOD(ScriptStruct__AssetRegistry__TagAndValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTagAndValue, Tag, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTagAndValue, Value, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTagAndValue, 0x0018);
		}

		// struct FAssetBundleEntry
		TEST_METHOD(ScriptStruct__AssetRegistry__AssetBundleEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetBundleEntry, BundleScope, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetBundleEntry, BundleName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetBundleEntry, BundleAssets, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetBundleEntry, 0x0028);
		}

		// struct FAssetBundleData
		TEST_METHOD(ScriptStruct__AssetRegistry__AssetBundleData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetBundleData, Bundles, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetBundleData, 0x0010);
		}

		// struct FAssetData
		TEST_METHOD(ScriptStruct__AssetRegistry__AssetData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, ObjectPath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, PackageName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, PackagePath, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, AssetName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, AssetClass, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, UnknownData_UHR0, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetData, 0x0050);
		}

		// struct FLandscapeInfoLayerSettings
		TEST_METHOD(ScriptStruct__Landscape__LandscapeInfoLayerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeInfoLayerSettings, LayerInfoObj, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeInfoLayerSettings, LayerName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeInfoLayerSettings, 0x0010);
		}

		// struct FProceduralLayerData
		TEST_METHOD(ScriptStruct__Landscape__ProceduralLayerData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralLayerData, Heightmaps, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProceduralLayerData, 0x0050);
		}

		// struct FRenderDataPerHeightmap
		TEST_METHOD(ScriptStruct__Landscape__RenderDataPerHeightmap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderDataPerHeightmap, OriginalHeightmap, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderDataPerHeightmap, UnknownData_P4Z0, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderDataPerHeightmap, Components, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderDataPerHeightmap, TopLeftSectionBase, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRenderDataPerHeightmap, 0x0028);
		}

		// struct FLandscapeImportLayerInfo
		TEST_METHOD(ScriptStruct__Landscape__LandscapeImportLayerInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeImportLayerInfo, UnknownData_JY0T, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeImportLayerInfo, 0x0001);
		}

		// struct FLandscapeLayerStruct
		TEST_METHOD(ScriptStruct__Landscape__LandscapeLayerStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayerStruct, LayerInfoObj, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeLayerStruct, 0x0008);
		}

		// struct FLandscapeEditorLayerSettings
		TEST_METHOD(ScriptStruct__Landscape__LandscapeEditorLayerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditorLayerSettings, UnknownData_FUH7, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeEditorLayerSettings, 0x0001);
		}

		// struct FLandscapeWeightmapUsage
		TEST_METHOD(ScriptStruct__Landscape__LandscapeWeightmapUsage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeWeightmapUsage, ChannelUsage, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeWeightmapUsage, 0x0020);
		}

		// struct FLandscapeSplineConnection
		TEST_METHOD(ScriptStruct__Landscape__LandscapeSplineConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineConnection, Segment, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineConnection, UnknownData_MYYI, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeSplineConnection, 0x0010);
		}

		// struct FForeignWorldSplineData
		TEST_METHOD(ScriptStruct__Landscape__ForeignWorldSplineData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FForeignWorldSplineData, UnknownData_JGYE, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForeignWorldSplineData, 0x0001);
		}

		// struct FForeignSplineSegmentData
		TEST_METHOD(ScriptStruct__Landscape__ForeignSplineSegmentData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FForeignSplineSegmentData, UnknownData_BTT5, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForeignSplineSegmentData, 0x0001);
		}

		// struct FForeignControlPointData
		TEST_METHOD(ScriptStruct__Landscape__ForeignControlPointData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FForeignControlPointData, UnknownData_3HSW, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForeignControlPointData, 0x0001);
		}

		// struct FLandscapeSplineMeshEntry
		TEST_METHOD(ScriptStruct__Landscape__LandscapeSplineMeshEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, Mesh, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, MaterialOverrides, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, UnknownData_DM9S, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, CenterAdjust, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, UnknownData_YZU1, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, Scale, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, Orientation, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, ForwardAxis, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, UpAxis, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, UnknownData_H9AQ, 0x0037);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeSplineMeshEntry, 0x0038);
		}

		// struct FLandscapeProxyMaterialOverride
		TEST_METHOD(ScriptStruct__Landscape__LandscapeProxyMaterialOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeProxyMaterialOverride, LODIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeProxyMaterialOverride, UnknownData_WUFH, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeProxyMaterialOverride, Material, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeProxyMaterialOverride, 0x0010);
		}

		// struct FLandscapeComponentMaterialOverride
		TEST_METHOD(ScriptStruct__Landscape__LandscapeComponentMaterialOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeComponentMaterialOverride, LODIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeComponentMaterialOverride, UnknownData_NC24, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeComponentMaterialOverride, Material, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeComponentMaterialOverride, 0x0010);
		}

		// struct FWeightmapLayerAllocationInfo
		TEST_METHOD(ScriptStruct__Landscape__WeightmapLayerAllocationInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapLayerAllocationInfo, LayerInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapLayerAllocationInfo, WeightmapTextureIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapLayerAllocationInfo, WeightmapTextureChannel, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapLayerAllocationInfo, UnknownData_1SXM, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeightmapLayerAllocationInfo, 0x0010);
		}

		// struct FGrassVariety
		TEST_METHOD(ScriptStruct__Landscape__GrassVariety)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, GrassMesh, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, GrassDensity, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, bUseGrid, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, UnknownData_FWEC, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, PlacementJitter, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, StartCullDistance, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, EndCullDistance, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, MinLOD, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, Scaling, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, UnknownData_NN40, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, ScaleX, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, ScaleY, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, ScaleZ, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, RandomRotation, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, AlignToSurface, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, bUseLandscapeLightmap, 0x003E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, LightingChannels, 0x003F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, bReceivesDecals, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, bCastDynamicShadow, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, bKeepInstanceBufferCPUCopy, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, UnknownData_27UZ, 0x0043);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGrassVariety, 0x0048);
		}

		// struct FNetAnalyticsDataConfig
		TEST_METHOD(ScriptStruct__PacketHandler__NetAnalyticsDataConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetAnalyticsDataConfig, DataName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetAnalyticsDataConfig, bEnabled, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetAnalyticsDataConfig, UnknownData_FVDX, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNetAnalyticsDataConfig, 0x000C);
		}

		// struct FLandscapeSplineInterpPoint
		TEST_METHOD(ScriptStruct__Landscape__LandscapeSplineInterpPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, Center, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, Left, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, Right, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, FalloffLeft, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, FalloffRight, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, StartEndFalloff, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeSplineInterpPoint, 0x0040);
		}

		// struct FLandscapeSplineSegmentConnection
		TEST_METHOD(ScriptStruct__Landscape__LandscapeSplineSegmentConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineSegmentConnection, ControlPoint, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineSegmentConnection, TangentLen, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineSegmentConnection, SocketName, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineSegmentConnection, UnknownData_684A, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeSplineSegmentConnection, 0x0018);
		}

		// struct FGrassInput
		TEST_METHOD(ScriptStruct__Landscape__GrassInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassInput, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassInput, GrassType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassInput, Input, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassInput, UnknownData_42T3, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGrassInput, 0x0028);
		}

		// struct FLayerBlendInput
		TEST_METHOD(ScriptStruct__Landscape__LayerBlendInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, LayerName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, BlendType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, UnknownData_BJTV, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, LayerInput, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, UnknownData_VGCJ, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, HeightInput, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, UnknownData_0QIS, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, PreviewWeight, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, ConstLayerInput, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, ConstHeightInput, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLayerBlendInput, 0x0048);
		}

		// struct FLandscapeProceduralLayerBrush
		TEST_METHOD(ScriptStruct__Landscape__LandscapeProceduralLayerBrush)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeProceduralLayerBrush, BPCustomBrush, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeProceduralLayerBrush, 0x0008);
		}

		// struct FProceduralLayer
		TEST_METHOD(ScriptStruct__Landscape__ProceduralLayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralLayer, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralLayer, Visible, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralLayer, UnknownData_F6EW, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralLayer, Weight, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralLayer, Brushes, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralLayer, HeightmapBrushOrderIndices, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralLayer, WeightmapBrushOrderIndices, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProceduralLayer, 0x0040);
		}

		// struct FLandscapeEditToolRenderData
		TEST_METHOD(ScriptStruct__Landscape__LandscapeEditToolRenderData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, ToolMaterial, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, GizmoMaterial, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, SelectedType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, DebugChannelR, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, DebugChannelG, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, DebugChannelB, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, DataTexture, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeEditToolRenderData, 0x0028);
		}

		// struct FGizmoSelectData
		TEST_METHOD(ScriptStruct__Landscape__GizmoSelectData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGizmoSelectData, UnknownData_EBLC, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGizmoSelectData, 0x0050);
		}

		// struct FAppleImageUtilsImageConversionResult
		TEST_METHOD(ScriptStruct__AppleImageUtils__AppleImageUtilsImageConversionResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAppleImageUtilsImageConversionResult, Error, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAppleImageUtilsImageConversionResult, ImageData, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAppleImageUtilsImageConversionResult, 0x0020);
		}

		// struct FAnchors
		TEST_METHOD(ScriptStruct__Slate__Anchors)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchors, MINIMUM, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchors, MAXIMUM, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnchors, 0x0010);
		}

		// struct FVirtualKeyboardOptions
		TEST_METHOD(ScriptStruct__Slate__VirtualKeyboardOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualKeyboardOptions, bEnableAutocorrect, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVirtualKeyboardOptions, 0x0001);
		}

		// struct FInputChord
		TEST_METHOD(ScriptStruct__Slate__InputChord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputChord, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputChord, UnknownData_Z51B, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputChord, 0x0020);
		}

		// struct FPropertyPathSegment
		TEST_METHOD(ScriptStruct__PropertyPath__PropertyPathSegment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyPathSegment, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyPathSegment, ArrayIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyPathSegment, UnknownData_K7C0, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyPathSegment, Struct, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyPathSegment, Field, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPropertyPathSegment, 0x0020);
		}

		// struct FCachedPropertyPath
		TEST_METHOD(ScriptStruct__PropertyPath__CachedPropertyPath)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedPropertyPath, Segments, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedPropertyPath, UnknownData_M5YC, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedPropertyPath, CachedFunction, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedPropertyPath, UnknownData_EA4D, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedPropertyPath, 0x0030);
		}

		// struct FAnimNode_TwoWayBlend : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_TwoWayBlend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, A, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, B, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, AlphaInputType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, UnknownData_EE7Q, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, Alpha, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, AlphaScaleBias, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, AlphaBoolBlend, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, AlphaCurveName, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, AlphaScaleBiasClamp, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, UnknownData_WDDX, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TwoWayBlend, 0x00C8);
		}

		// struct FRBFEntry
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RBFEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFEntry, Values, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRBFEntry, 0x0010);
		}

		// struct FRBFTarget : public FRBFEntry
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RBFTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, ScaleFactor, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, bApplyCustomCurve, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, UnknownData_78MK, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, CustomCurve, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRBFTarget, 0x0098);
		}

		// struct FAnimNode_SkeletalControlBase : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_SkeletalControlBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, ComponentPose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, LODThreshold, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, ActualAlpha, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, AlphaInputType, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, bAlphaBoolEnabled, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, UnknownData_4W60, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, Alpha, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, AlphaScaleBias, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, AlphaBoolBlend, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, AlphaCurveName, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, AlphaScaleBiasClamp, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, UnknownData_YIMM, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SkeletalControlBase, 0x00C8);
		}

		// struct FConstraint
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__Constraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraint, TargetBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraint, OffsetOption, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraint, TransformType, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraint, PerAxis, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraint, UnknownData_W6US, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraint, 0x001C);
		}

		// struct FAnimNode_Constraint : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_Constraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Constraint, BoneToModify, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Constraint, ConstraintSetup, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Constraint, ConstraintWeights, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Constraint, UnknownData_ZXPW, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Constraint, 0x0180);
		}

		// struct FAnimNode_CopyBone : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_CopyBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, SourceBone, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, TargetBone, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, bCopyTranslation, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, bCopyRotation, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, bCopyScale, 0x00EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, ControlSpace, 0x00EB);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, UnknownData_FQM6, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CopyBone, 0x00F0);
		}

		// struct FAnimNode_CopyBoneDelta : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_CopyBoneDelta)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, SourceBone, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, TargetBone, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, bCopyTranslation, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, bCopyRotation, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, bCopyScale, 0x00EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, CopyMode, 0x00EB);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, TranslationMultiplier, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, RotationMultiplier, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, ScaleMultiplier, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CopyBoneDelta, 0x00F8);
		}

		// struct FAnimNode_CopyPoseFromMesh : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_CopyPoseFromMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyPoseFromMesh, SourceMeshComponent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyPoseFromMesh, bUseAttachedParent, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyPoseFromMesh, bCopyCurves, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyPoseFromMesh, UnknownData_9L4B, 0x001A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CopyPoseFromMesh, 0x0138);
		}

		// struct FAnimNode_CurveSource : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_CurveSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CurveSource, SourcePose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CurveSource, SourceBinding, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CurveSource, Alpha, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CurveSource, UnknownData_JWEH, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CurveSource, CurveSource, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CurveSource, 0x0040);
		}

		// struct FSocketReference
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__SocketReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocketReference, UnknownData_NEWQ, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocketReference, SocketName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocketReference, UnknownData_AMVC, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSocketReference, 0x0040);
		}

		// struct FBoneSocketTarget
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__BoneSocketTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneSocketTarget, bUseSocket, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneSocketTarget, UnknownData_N2WN, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneSocketTarget, BoneReference, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneSocketTarget, UnknownData_63HC, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneSocketTarget, SocketReference, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneSocketTarget, 0x0060);
		}

		// struct FAnimNode_Fabrik : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_Fabrik)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, UnknownData_PMKF, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, EffectorTransform, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, EffectorTarget, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, TipBone, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, RootBone, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, Precision, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, MaxIterations, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, EffectorTransformSpace, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, EffectorRotationSource, 0x0189);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, UnknownData_TSJX, 0x018A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Fabrik, 0x0190);
		}

		// struct FAnimNode_HandIKRetargeting : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_HandIKRetargeting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, RightHandFK, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, LeftHandFK, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, RightHandIK, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, LeftHandIK, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, IKBonesToMove, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, HandFKWeight, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, UnknownData_QSPZ, 0x011C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_HandIKRetargeting, 0x0120);
		}

		// struct FAnimNode_LayeredBoneBlend : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_LayeredBoneBlend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, BasePose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, BlendPoses, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, LayerSetup, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, BlendWeights, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, bMeshSpaceRotationBlend, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, CurveBlendOption, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, bBlendRootMotionBasedOnRootBone, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, UnknownData_32P7, 0x0053);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, LODThreshold, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, PerBoneBlendWeights, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, SkeletonGuid, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, VirtualBoneGuid, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, UnknownData_U7XK, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_LayeredBoneBlend, 0x00B8);
		}

		// struct FAnimLegIKDefinition
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimLegIKDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, IKFootBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, FKFootBone, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, NumBonesInLimb, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, MinRotationAngle, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, FootBoneForwardAxis, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, HingeRotationAxis, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, bEnableRotationLimit, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, bEnableKneeTwistCorrection, 0x002B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimLegIKDefinition, 0x002C);
		}

		// struct FAnimNode_LegIK : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_LegIK)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LegIK, ReachPrecision, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LegIK, MaxIterations, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LegIK, LegsDefinition, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LegIK, UnknownData_52EB, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_LegIK, 0x00F8);
		}

		// struct FAnimLegIKData
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimLegIKData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKData, UnknownData_DIUV, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimLegIKData, 0x00A0);
		}

		// struct FIKChain
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__IKChain)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIKChain, UnknownData_RWSG, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIKChain, 0x0038);
		}

		// struct FIKChainLink
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__IKChainLink)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIKChainLink, UnknownData_DPTH, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIKChainLink, 0x003C);
		}

		// struct FAnimNode_LookAt : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_LookAt)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, BoneToModify, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, UnknownData_MNG4, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookAtTarget, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookAtLocation, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookAt_Axis, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, bUseLookUpAxis, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, InterpolationType, 0x015D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, UnknownData_Z1A5, 0x015E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookUp_Axis, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookAtClamp, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, InterpolationTime, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, InterpolationTriggerThreashold, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, UnknownData_MW4P, 0x017C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_LookAt, 0x0270);
		}

		// struct FAnimNode_MakeDynamicAdditive : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_MakeDynamicAdditive)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MakeDynamicAdditive, Base, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MakeDynamicAdditive, Additive, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MakeDynamicAdditive, bMeshSpaceAdditive, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MakeDynamicAdditive, UnknownData_XZFM, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_MakeDynamicAdditive, 0x0038);
		}

		// struct FAnimNode_ModifyBone : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ModifyBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, BoneToModify, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, Translation, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, Rotation, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, Scale, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, TranslationMode, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, RotationMode, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, ScaleMode, 0x00FE);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, TranslationSpace, 0x00FF);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, RotationSpace, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, ScaleSpace, 0x0101);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, UnknownData_02DU, 0x0102);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ModifyBone, 0x0108);
		}

		// struct FAnimNode_ModifyCurve : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ModifyCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, SourcePose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, CurveValues, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, CurveNames, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, UnknownData_QB89, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, Alpha, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, ApplyMode, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, UnknownData_AO3Y, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ModifyCurve, 0x0058);
		}

		// struct FAnimNode_MultiWayBlend : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_MultiWayBlend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, Poses, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, DesiredAlphas, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, UnknownData_X08I, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, AlphaScaleBias, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, bAdditiveNode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, bNormalizeAlpha, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, UnknownData_OZTS, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_MultiWayBlend, 0x0050);
		}

		// struct FAnimNode_ObserveBone : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ObserveBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, BoneToObserve, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, DisplaySpace, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, bRelativeToRefPose, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, UnknownData_PE4G, 0x00DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, Translation, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, Rotation, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, Scale, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ObserveBone, 0x0100);
		}

		// struct FAnimNode_PoseHandler : public FAnimNode_AssetPlayerBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_PoseHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseHandler, PoseAsset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseHandler, UnknownData_B96W, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_PoseHandler, 0x0068);
		}

		// struct FAnimNode_PoseBlendNode : public FAnimNode_PoseHandler
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_PoseBlendNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseBlendNode, SourcePose, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseBlendNode, BlendOption, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseBlendNode, UnknownData_W8EJ, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseBlendNode, CustomCurve, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_PoseBlendNode, 0x0088);
		}

		// struct FAnimNode_PoseByName : public FAnimNode_PoseHandler
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_PoseByName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseByName, PoseName, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseByName, PoseWeight, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseByName, UnknownData_J7NI, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_PoseByName, 0x0080);
		}

		// struct FPoseDriverTransform
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__PoseDriverTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTransform, TargetTranslation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTransform, TargetRotation, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseDriverTransform, 0x0018);
		}

		// struct FPoseDriverTarget
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__PoseDriverTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, BoneTransforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, TargetRotation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, TargetScale, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, bApplyCustomCurve, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, UnknownData_RRDG, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, CustomCurve, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, DrivenName, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, UnknownData_COOI, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseDriverTarget, 0x00B8);
		}

		// struct FRBFParams
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RBFParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, TargetDimensions, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, Radius, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, Function, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, DistanceMethod, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, TwistAxis, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, UnknownData_IO2V, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, WeightThreshold, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRBFParams, 0x0010);
		}

		// struct FAnimNode_PoseDriver : public FAnimNode_PoseHandler
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_PoseDriver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, SourcePose, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, SourceBones, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, OnlyDriveBones, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, PoseTargets, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, UnknownData_E2I6, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, EvalSpaceBone, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, RBFParams, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, DriveSource, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, DriveOutput, 0x00F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, UnknownData_G53Z, 0x00FB);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_PoseDriver, 0x0100);
		}

		// struct FAnimNode_PoseSnapshot : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_PoseSnapshot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseSnapshot, SnapshotName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseSnapshot, Snapshot, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseSnapshot, Mode, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseSnapshot, UnknownData_BEKX, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_PoseSnapshot, 0x0090);
		}

		// struct FRandomPlayerSequenceEntry
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RandomPlayerSequenceEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, Sequence, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, ChanceToPlay, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, MinLoopCount, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, MaxLoopCount, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, MinPlayRate, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, MaxPlayRate, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, UnknownData_SHJU, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, BlendIn, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRandomPlayerSequenceEntry, 0x0050);
		}

		// struct FAnimNode_RandomPlayer : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RandomPlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RandomPlayer, Entries, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RandomPlayer, UnknownData_WWIN, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RandomPlayer, bShuffleMode, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RandomPlayer, UnknownData_CLTX, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RandomPlayer, 0x0068);
		}

		// struct FAnimNode_MeshSpaceRefPose : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_MeshSpaceRefPose)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_MeshSpaceRefPose, 0x0010);
		}

		// struct FAnimNode_RefPose : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RefPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RefPose, RefPoseType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RefPose, UnknownData_87EP, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RefPose, 0x0018);
		}

		// struct FAnimNode_ResetRoot : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ResetRoot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ResetRoot, UnknownData_1PAP, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ResetRoot, 0x00D8);
		}

		// struct FS_TagStatus
		TEST_METHOD(UserDefinedStruct__S_TagStatus__S_TagStatus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_TagStatus, Tag_2_C080BA894CAA650543623DAB40B661F6, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_TagStatus, String_5_5D09316F490C52FEE6AB188BBFC0E80B, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_TagStatus, Particle_8_611BCE9649BA4DCF128043A5F263E2B8, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_TagStatus, Socket_25_49823BE8414B931AE1E28E8A2FDD40C5, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_TagStatus, Icon_13_F4D6BE3D438AD0A9C09D598552C2217B, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_TagStatus, bIsShowIcon_22_7F86744B40724F1CF620D9AE39B70DFD, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_TagStatus, Mode_16_C5569BAF435FA65C002B35891245D9A3, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_TagStatus, UnknownData_R2BK, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_TagStatus, SoundEffect_34_E585B5E64576AE4BD3058A96C0760973, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_TagStatus, 0x0058);
		}

		// struct FAnimNode_RotateRootBone : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RotateRootBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, BasePose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, Pitch, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, Yaw, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, PitchScaleBiasClamp, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, YawScaleBiasClamp, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, MeshToComponent, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, UnknownData_BTSQ, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RotateRootBone, 0x00A0);
		}

		// struct FAnimNode_ApplyAdditive : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ApplyAdditive)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, Base, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, Additive, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, Alpha, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, AlphaScaleBias, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, LODThreshold, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, AlphaBoolBlend, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, AlphaCurveName, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, AlphaScaleBiasClamp, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, UnknownData_EQLQ, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, AlphaInputType, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, bAlphaBoolEnabled, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, UnknownData_729D, 0x00C6);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ApplyAdditive, 0x00C8);
		}

		// struct FAngularRangeLimit
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AngularRangeLimit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularRangeLimit, LimitMin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularRangeLimit, LimitMax, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularRangeLimit, Bone, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAngularRangeLimit, 0x0028);
		}

		// struct FAnimNode_ApplyLimits : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ApplyLimits)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyLimits, AngularRangeLimits, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyLimits, AngularOffsets, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ApplyLimits, 0x00E8);
		}

		// struct FBlendBoneByChannelEntry
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__BlendBoneByChannelEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, SourceBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, TargetBone, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, bBlendTranslation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, bBlendRotation, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, bBlendScale, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, UnknownData_DKGQ, 0x0023);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendBoneByChannelEntry, 0x0024);
		}

		// struct FAnimNode_BlendBoneByChannel : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendBoneByChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, A, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, B, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, BoneDefinitions, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, UnknownData_3PT3, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, Alpha, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, UnknownData_IULM, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, AlphaScaleBias, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, TransformsSpace, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, UnknownData_J5AK, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendBoneByChannel, 0x0068);
		}

		// struct FAnimNode_BlendListBase : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendListBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, BlendPose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, BlendTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, BlendType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, bResetChildOnActivation, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, UnknownData_00HS, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, CustomBlendCurve, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, BlendProfile, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, UnknownData_UZIC, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendListBase, 0x0098);
		}

		// struct FAnimNode_BlendListByBool : public FAnimNode_BlendListBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendListByBool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByBool, bActiveValue, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByBool, UnknownData_P35Z, 0x0099);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendListByBool, 0x00A0);
		}

		// struct FAnimNode_BlendListByEnum : public FAnimNode_BlendListBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendListByEnum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByEnum, EnumToPoseIndex, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByEnum, ActiveEnumValue, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByEnum, UnknownData_M9IF, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendListByEnum, 0x00B0);
		}

		// struct FAnimNode_BlendListByInt : public FAnimNode_BlendListBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendListByInt)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByInt, ActiveChildIndex, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByInt, UnknownData_SFR6, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendListByInt, 0x00A0);
		}

		// struct FAnimNode_BlendSpacePlayer : public FAnimNode_AssetPlayerBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendSpacePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, X, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, Y, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, Z, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, PlayRate, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, bLoop, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, bResetPlayTimeWhenBlendSpaceChanges, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, UnknownData_FC8H, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, StartPosition, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, BlendSpace, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, UnknownData_89L4, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, PreviousBlendSpace, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendSpacePlayer, 0x00E0);
		}

		// struct FAnimNode_BlendSpaceEvaluator : public FAnimNode_BlendSpacePlayer
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendSpaceEvaluator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpaceEvaluator, NormalizedTime, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpaceEvaluator, UnknownData_6QDD, 0x00E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendSpaceEvaluator, 0x00E8);
		}

		// struct FAnimNode_BoneDrivenController : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BoneDrivenController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, SourceBone, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, DrivingCurve, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, Multiplier, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, RangeMin, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, RangeMax, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, RemappedMin, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, RemappedMax, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, ParameterName, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, TargetBone, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, DestinationMode, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, ModificationMode, 0x010D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, SourceComponent, 0x010E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, UnknownData_2TDP, 0x0111);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BoneDrivenController, 0x0118);
		}

		// struct FAnimNode_CCDIK : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_CCDIK)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, EffectorLocation, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, EffectorLocationSpace, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, UnknownData_AF7L, 0x00D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, EffectorTarget, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, TipBone, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, RootBone, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, Precision, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, MaxIterations, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, bStartFromTail, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, bEnableRotationLimit, 0x0169);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, UnknownData_48RF, 0x016A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, RotationLimitPerJoints, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CCDIK, 0x0180);
		}

		// struct FAnimNode_RotationMultiplier : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RotationMultiplier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, TargetBone, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, SourceBone, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, Multiplier, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, RotationAxisToRefer, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, bIsAdditive, 0x00ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, UnknownData_337D, 0x00EE);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RotationMultiplier, 0x00F0);
		}

		// struct FAnimNode_RotationOffsetBlendSpace : public FAnimNode_BlendSpacePlayer
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RotationOffsetBlendSpace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, BasePose, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, LODThreshold, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, Alpha, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, AlphaScaleBias, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, AlphaBoolBlend, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, AlphaCurveName, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, AlphaScaleBiasClamp, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, UnknownData_KQ4H, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, AlphaInputType, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, bAlphaBoolEnabled, 0x0185);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, UnknownData_NS2L, 0x0186);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RotationOffsetBlendSpace, 0x0188);
		}

		// struct FAnimNode_ScaleChainLength : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ScaleChainLength)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, InputPose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, DefaultChainLength, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, ChainStartBone, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, ChainEndBone, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, TargetLocation, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, Alpha, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, UnknownData_8AXD, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, AlphaScaleBias, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, ChainInitialLength, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, UnknownData_8ZUT, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ScaleChainLength, 0x0078);
		}

		// struct FAnimNode_SequenceEvaluator : public FAnimNode_AssetPlayerBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_SequenceEvaluator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, Sequence, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, ExplicitTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, bShouldLoop, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, bTeleportToExplicitTime, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, ReinitializationBehavior, 0x003E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, UnknownData_Z7PC, 0x003F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, StartPosition, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, UnknownData_71JZ, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SequenceEvaluator, 0x0048);
		}

		// struct FAnimNode_Slot : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_Slot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Slot, Source, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Slot, SlotName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Slot, bAlwaysUpdateSourcePose, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Slot, UnknownData_NZ92, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Slot, 0x0048);
		}

		// struct FAnimNode_SplineIK : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_SplineIK)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, StartBone, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, EndBone, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, BoneAxis, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, bAutoCalculateSpline, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, UnknownData_0QNL, 0x00EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, PointCount, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, ControlPoints, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, Roll, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, TwistStart, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, TwistEnd, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, UnknownData_CLF4, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, TwistBlend, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, Stretch, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, Offset, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, UnknownData_SQ9N, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SplineIK, 0x0250);
		}

		// struct FSplineIKCachedBoneData
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__SplineIKCachedBoneData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineIKCachedBoneData, Bone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineIKCachedBoneData, RefSkeletonIndex, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplineIKCachedBoneData, 0x0014);
		}

		// struct FAnimNode_SpringBone : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_SpringBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, SpringBone, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, MaxDisplacement, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, SpringStiffness, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, SpringDamping, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, ErrorResetThresh, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, UnknownData_WFMP, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, UnknownData_X75P, 0x0125);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SpringBone, 0x0128);
		}

		// struct FAnimNode_Root : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_Root)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Root, Result, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Root, 0x0020);
		}

		// struct FAnimNode_StateResult : public FAnimNode_Root
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_StateResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_StateResult, 0x0020);
		}

		// struct FRotationLimit
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RotationLimit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationLimit, LimitMin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationLimit, LimitMax, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRotationLimit, 0x0018);
		}

		// struct FAnimPhysPlanarLimit
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimPhysPlanarLimit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysPlanarLimit, DrivingBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysPlanarLimit, PlaneTransform, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimPhysPlanarLimit, 0x0040);
		}

		// struct FAnimNode_Trail : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_Trail)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, UnknownData_O6B2, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, TrailBone, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, ChainLength, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, ChainBoneAxis, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, UnknownData_NG2C, 0x0116);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, MaxDeltaTime, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, UnwindingSize, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, RelaxationSpeedScale, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, UnknownData_E04S, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, TrailRelaxationSpeed, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, RelaxationSpeedScaleInputProcessor, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, RotationLimits, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, RotationOffsets, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, PlanarLimits, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, StretchLimit, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, FakeVelocity, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, BaseJoint, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, LastBoneRotationAnimAlphaBlend, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, UnknownData_EO8K, 0x0234);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Trail, 0x0270);
		}

		// struct FReferenceBoneFrame
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__ReferenceBoneFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReferenceBoneFrame, Bone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReferenceBoneFrame, Axis, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReferenceBoneFrame, 0x0020);
		}

		// struct FAnimNode_TwistCorrectiveNode : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_TwistCorrectiveNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, BaseFrame, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, TwistFrame, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, TwistPlaneNormalAxis, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, RangeMax, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, RemappedMin, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, RemappedMax, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, Curve, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, UnknownData_Z7G0, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TwistCorrectiveNode, 0x0138);
		}

		// struct FAnimNode_TwoBoneIK : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_TwoBoneIK)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, IKBone, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, StartStretchRatio, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, MaxStretchScale, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, EffectorLocation, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, UnknownData_Y632, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, EffectorTarget, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, JointTargetLocation, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, UnknownData_3A75, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, JointTarget, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, TwistAxis, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, EffectorLocationSpace, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, JointTargetLocationSpace, 0x01D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, UnknownData_76O8, 0x01D3);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TwoBoneIK, 0x01E0);
		}

		// struct FAnimSequencerInstanceProxy : public FAnimInstanceProxy
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimSequencerInstanceProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSequencerInstanceProxy, UnknownData_IATD, 0x0710);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSequencerInstanceProxy, 0x08D0);
		}

		// struct FAnimNode_AimOffsetLookAt : public FAnimNode_BlendSpacePlayer
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_AimOffsetLookAt)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, UnknownData_5V7S, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, BasePose, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, LODThreshold, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, SourceSocketName, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, PivotSocketName, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, LookAtLocation, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, SocketAxis, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, Alpha, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, UnknownData_AOQ7, 0x0180);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_AimOffsetLookAt, 0x01B0);
		}

		// struct FAnimPhysConstraintSetup
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimPhysConstraintSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, LinearXLimitType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, LinearYLimitType, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, LinearZLimitType, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, UnknownData_TZX3, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, LinearAxesMin, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, LinearAxesMax, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularConstraintType, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, TwistAxis, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularTargetAxis, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, UnknownData_4BVG, 0x001F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, ConeAngle, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularLimitsMin, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularLimitsMax, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularTarget, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimPhysConstraintSetup, 0x0048);
		}

		// struct FAnimPhysSphericalLimit
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimPhysSphericalLimit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysSphericalLimit, DrivingBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysSphericalLimit, SphereLocalOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysSphericalLimit, LimitRadius, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysSphericalLimit, LimitType, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysSphericalLimit, UnknownData_VU8T, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimPhysSphericalLimit, 0x0024);
		}

		// struct FAnimNode_AnimDynamics : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_AnimDynamics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, LinearDampingOverride, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, AngularDampingOverride, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_2SYR, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, RelativeSpaceBone, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, BoundBone, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ChainEnd, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, BoxExtents, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, LocalJointOffset, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, GravityScale, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, GravityOverride, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, LinearSpringConstant, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, AngularSpringConstant, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, WindScale, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ComponentLinearAccScale, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ComponentLinearVelScale, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ComponentAppliedLinearAccClamp, 0x01AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, AngularBiasOverride, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, NumSolverIterationsPreUpdate, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, NumSolverIterationsPostUpdate, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ConstraintSetup, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_QPKS, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, SphericalLimits, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, SphereCollisionRadius, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ExternalForce, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, PlanarLimits, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, CollisionType, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, SimulationSpace, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_0HT4, 0x0242);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_JF4I, 0x0246);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_AnimDynamics, 0x0310);
		}

		// struct FPlatformRuntimeAudioCompressionOverrides
		TEST_METHOD(ScriptStruct__AudioPlatformConfiguration__PlatformRuntimeAudioCompressionOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformRuntimeAudioCompressionOverrides, bOverrideCompressionTimes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformRuntimeAudioCompressionOverrides, UnknownData_LWCN, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformRuntimeAudioCompressionOverrides, DurationThreshold, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformRuntimeAudioCompressionOverrides, MaxNumRandomBranches, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformRuntimeAudioCompressionOverrides, SoundCueQualityIndex, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlatformRuntimeAudioCompressionOverrides, 0x0010);
		}

		// struct FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__ElementID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FElementID, IDValue, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FElementID, 0x0004);
		}

		// struct FPolygonGroupID : public FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__PolygonGroupID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonGroupID, 0x0004);
		}

		// struct FPolygonID : public FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__PolygonID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonID, 0x0004);
		}

		// struct FVertexID : public FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__VertexID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexID, 0x0004);
		}

		// struct FEdgeID : public FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__EdgeID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdgeID, 0x0004);
		}

		// struct FVertexInstanceID : public FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__VertexInstanceID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexInstanceID, 0x0004);
		}

		// struct FMeshTriangle
		TEST_METHOD(ScriptStruct__MeshDescription__MeshTriangle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshTriangle, VertexInstanceID0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshTriangle, VertexInstanceID1, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshTriangle, VertexInstanceID2, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshTriangle, 0x000C);
		}

		// struct FClothCollisionPrim_Sphere
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothCollisionPrim_Sphere)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Sphere, BoneIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Sphere, Radius, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Sphere, LocalPosition, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothCollisionPrim_Sphere, 0x0014);
		}

		// struct FClothCollisionPrim_SphereConnection
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothCollisionPrim_SphereConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_SphereConnection, SphereIndices, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothCollisionPrim_SphereConnection, 0x0008);
		}

		// struct FClothCollisionPrim_Convex
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothCollisionPrim_Convex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Convex, Planes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Convex, BoneIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Convex, UnknownData_3G9L, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothCollisionPrim_Convex, 0x0018);
		}

		// struct FClothCollisionData
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothCollisionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionData, Spheres, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionData, SphereConnections, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionData, Convexes, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothCollisionData, 0x0030);
		}

		// struct FAnimationSetup
		TEST_METHOD(ScriptStruct__AnimationSharing__AnimationSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSetup, AnimSequence, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSetup, AnimBlueprint, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSetup, NumRandomizedInstances, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSetup, Enabled, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSetup, UnknownData_83U9, 0x0035);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationSetup, 0x0038);
		}

		// struct FAnimationStateEntry
		TEST_METHOD(ScriptStruct__AnimationSharing__AnimationStateEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, State, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, UnknownData_XYXP, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, AnimationSetups, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, bOnDemand, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, bAdditive, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, UnknownData_WR0W, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, BlendTime, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, bReturnToPreviousState, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, bSetNextState, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, NextState, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, UnknownData_2YYF, 0x0023);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, MaximumNumberOfConcurrentInstances, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, WiggleTimePercentage, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, bRequiresCurves, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, UnknownData_82JV, 0x002D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationStateEntry, 0x0030);
		}

		// struct FPerSkeletonAnimationSharingSetup
		TEST_METHOD(ScriptStruct__AnimationSharing__PerSkeletonAnimationSharingSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerSkeletonAnimationSharingSetup, Skeleton, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerSkeletonAnimationSharingSetup, SkeletalMesh, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerSkeletonAnimationSharingSetup, BlendAnimBlueprint, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerSkeletonAnimationSharingSetup, AdditiveAnimBlueprint, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerSkeletonAnimationSharingSetup, StateProcessorClass, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerSkeletonAnimationSharingSetup, AnimationStates, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerSkeletonAnimationSharingSetup, 0x0078);
		}

		// struct FAnimationSharingScalability
		TEST_METHOD(ScriptStruct__AnimationSharing__AnimationSharingScalability)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSharingScalability, UseBlendTransitions, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSharingScalability, UnknownData_MR36, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSharingScalability, BlendSignificanceValue, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSharingScalability, MaximumNumberConcurrentBlends, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSharingScalability, TickSignificanceValue, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationSharingScalability, 0x0010);
		}

		// struct FTickAnimationSharingFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__AnimationSharing__TickAnimationSharingFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickAnimationSharingFunction, UnknownData_AY25, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTickAnimationSharingFunction, 0x0058);
		}

		// struct FVehicleEngineData
		TEST_METHOD(ScriptStruct__PhysXVehicles__VehicleEngineData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, TorqueCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, MaxRPM, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, MOI, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, DampingRateFullThrottle, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, DampingRateZeroThrottleClutchEngaged, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, DampingRateZeroThrottleClutchDisengaged, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, UnknownData_ZZQV, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleEngineData, 0x00A0);
		}

		// struct FVehicleDifferential4WData
		TEST_METHOD(ScriptStruct__PhysXVehicles__VehicleDifferential4WData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, DifferentialType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, UnknownData_XR80, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, FrontRearSplit, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, FrontLeftRightSplit, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, RearLeftRightSplit, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, CentreBias, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, FrontBias, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, RearBias, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleDifferential4WData, 0x001C);
		}

		// struct FWheelSetup
		TEST_METHOD(ScriptStruct__PhysXVehicles__WheelSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelSetup, WheelClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelSetup, BoneName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelSetup, AdditionalOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelSetup, bDisableSteering, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelSetup, UnknownData_IK1H, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWheelSetup, 0x0020);
		}

		// struct FReplicatedVehicleState
		TEST_METHOD(ScriptStruct__PhysXVehicles__ReplicatedVehicleState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedVehicleState, SteeringInput, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedVehicleState, ThrottleInput, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedVehicleState, BrakeInput, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedVehicleState, HandbrakeInput, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedVehicleState, CurrentGear, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReplicatedVehicleState, 0x0014);
		}

		// struct FVehicleInputRate
		TEST_METHOD(ScriptStruct__PhysXVehicles__VehicleInputRate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleInputRate, RiseRate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleInputRate, FallRate, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleInputRate, 0x0008);
		}

		// struct FTireConfigMaterialFriction
		TEST_METHOD(ScriptStruct__PhysXVehicles__TireConfigMaterialFriction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTireConfigMaterialFriction, PhysicalMaterial, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTireConfigMaterialFriction, FrictionScale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTireConfigMaterialFriction, UnknownData_N16V, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTireConfigMaterialFriction, 0x0010);
		}

		// struct FVehicleGearData
		TEST_METHOD(ScriptStruct__PhysXVehicles__VehicleGearData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleGearData, Ratio, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleGearData, DownRatio, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleGearData, UpRatio, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleGearData, 0x000C);
		}

		// struct FVehicleTransmissionData
		TEST_METHOD(ScriptStruct__PhysXVehicles__VehicleTransmissionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, bUseGearAutoBox, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, UnknownData_CGEJ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, GearSwitchTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, GearAutoBoxLatency, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, FinalRatio, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, ForwardGears, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, ReverseGearRatio, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, NeutralGearUpRatio, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, ClutchStrength, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, UnknownData_TOPP, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleTransmissionData, 0x0030);
		}

		// struct FAnimNode_WheelHandler : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__PhysXVehicles__AnimNode_WheelHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_WheelHandler, UnknownData_B3QH, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_WheelHandler, 0x00E0);
		}

		// struct FVehicleAnimInstanceProxy : public FAnimInstanceProxy
		TEST_METHOD(ScriptStruct__PhysXVehicles__VehicleAnimInstanceProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleAnimInstanceProxy, UnknownData_NG27, 0x0710);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleAnimInstanceProxy, 0x0720);
		}

		// struct FSMenuCameraState
		TEST_METHOD(UserDefinedStruct__SMenuCameraState__SMenuCameraState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSMenuCameraState, State_5_6534E5A04869B43AAF4D1388AA70702D, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSMenuCameraState, UnknownData_I7K1, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSMenuCameraState, Camera_4_CDF741BC428E417C3CA68A8AF8FFE9DF, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSMenuCameraState, 0x0030);
		}

		// struct FARTraceResult
		TEST_METHOD(ScriptStruct__AugmentedReality__ARTraceResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARTraceResult, DistanceFromCamera, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARTraceResult, TraceChannel, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARTraceResult, UnknownData_P8F8, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARTraceResult, LocalToTrackingTransform, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARTraceResult, TrackedGeometry, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARTraceResult, UnknownData_G8IH, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARTraceResult, 0x0060);
		}

		// struct FARVideoFormat
		TEST_METHOD(ScriptStruct__AugmentedReality__ARVideoFormat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARVideoFormat, FPS, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARVideoFormat, Width, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARVideoFormat, Height, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARVideoFormat, 0x000C);
		}

		// struct FARSessionStatus
		TEST_METHOD(ScriptStruct__AugmentedReality__ARSessionStatus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSessionStatus, AdditionalInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSessionStatus, Status, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSessionStatus, UnknownData_NLZ5, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARSessionStatus, 0x0018);
		}

		// struct FARSharedWorldReplicationState
		TEST_METHOD(ScriptStruct__AugmentedReality__ARSharedWorldReplicationState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSharedWorldReplicationState, PreviewImageOffset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSharedWorldReplicationState, ARWorldOffset, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARSharedWorldReplicationState, 0x0008);
		}

		// struct FS_TutorialSaveGame
		TEST_METHOD(UserDefinedStruct__S_TutorialSaveGame__S_TutorialSaveGame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_TutorialSaveGame, bIsShowSurvivorFristTime_2_157CB6254E2242A0A4063EBD993E4AAF, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_TutorialSaveGame, bIsShowSurvivorDontShow_4_0A8742BB46E0D61BA74FBDA00FF02FEE, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_TutorialSaveGame, bIsShowHunterFristTime_8_A77185924CA871F21E602F89A8AE51E0, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_TutorialSaveGame, bIsShowHunterDontShow_7_9679CEAA4C972722EA58A184FFAFE902, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_TutorialSaveGame, 0x0004);
		}

		// struct FClothConstraintSetup
		TEST_METHOD(ScriptStruct__ClothingSystemRuntime__ClothConstraintSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetup, Stiffness, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetup, StiffnessMultiplier, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetup, StretchLimit, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetup, CompressionLimit, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothConstraintSetup, 0x0010);
		}

		// struct FClothVertBoneData
		TEST_METHOD(ScriptStruct__ClothingSystemRuntime__ClothVertBoneData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothVertBoneData, NumInfluences, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothVertBoneData, BoneIndices, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothVertBoneData, BoneWeights, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothVertBoneData, 0x0034);
		}

		// struct FClothPhysicalMeshData
		TEST_METHOD(ScriptStruct__ClothingSystemRuntime__ClothPhysicalMeshData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, Vertices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, Normals, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, Indices, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, MaxDistances, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, BackstopDistances, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, BackstopRadiuses, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, AnimDriveMultipliers, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, InverseMasses, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, BoneData, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, MaxBoneWeights, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, NumFixedVerts, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, SelfCollisionIndices, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothPhysicalMeshData, 0x00A8);
		}

		// struct FClothLODData
		TEST_METHOD(ScriptStruct__ClothingSystemRuntime__ClothLODData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothLODData, PhysicalMeshData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothLODData, CollisionData, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothLODData, UnknownData_ZHOM, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothLODData, 0x00F8);
		}

		// struct FClothParameterMask_PhysMesh
		TEST_METHOD(ScriptStruct__ClothingSystemRuntime__ClothParameterMask_PhysMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_PhysMesh, MaskName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_PhysMesh, CurrentTarget, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_PhysMesh, UnknownData_6XJV, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_PhysMesh, MaxValue, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_PhysMesh, MinValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_PhysMesh, UnknownData_ZLO3, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_PhysMesh, Values, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_PhysMesh, bEnabled, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_PhysMesh, UnknownData_91BY, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothParameterMask_PhysMesh, 0x0030);
		}

		// struct FClothConfig
		TEST_METHOD(ScriptStruct__ClothingSystemRuntime__ClothConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, WindMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, UnknownData_QKBS, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, VerticalConstraintConfig, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, HorizontalConstraintConfig, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, BendConstraintConfig, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, ShearConstraintConfig, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, SelfCollisionRadius, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, SelfCollisionStiffness, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, SelfCollisionCullScale, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, Damping, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, Friction, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, WindDragCoefficient, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, WindLiftCoefficient, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, LinearDrag, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, AngularDrag, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, LinearInertiaScale, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, AngularInertiaScale, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, CentrifugalInertiaScale, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, SolverFrequency, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, StiffnessFrequency, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, GravityScale, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, GravityOverride, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, bUseGravityOverride, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, UnknownData_BZ9B, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, TetherStiffness, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, TetherLimit, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, CollisionThickness, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, AnimDriveSpringStiffness, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, AnimDriveDamperStiffness, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothConfig, 0x00D4);
		}

		// struct FS_OptionAudio
		TEST_METHOD(UserDefinedStruct__S_OptionAudio__S_OptionAudio)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_OptionAudio, MasterVolume_3_ADEDE7EF4D2357BED8B5EE91CB945DD1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_OptionAudio, EffectVolume_5_25D399054BBCAF6A8EF593802C9994AE, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_OptionAudio, MusicVolume_7_CA898F6C424E4FFF2C7F1299785BDA56, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_OptionAudio, DialogVolume_9_6BB7FE0A4D8F74CF319AC8A89B6DF3C4, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_OptionAudio, UIVolume_11_0BB7B1DE44C364379514A5B9B4A0DAD2, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_OptionAudio, Subtitle_16_1CB3E397443E5D692C4972B1343E6981, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_OptionAudio, UnknownData_ZPRE, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_OptionAudio, LanguageSubtitle_20_62A5E42E4C7788CB52EF2A9CE9EC24A3, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_OptionAudio, LanguageAudio_19_70D9D4594106BE4FB767339F3565F4F5, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_OptionAudio, 0x0038);
		}

		// struct FAWSPlayerSessionServer
		TEST_METHOD(ScriptStruct__GameLiftServerSDK__AWSPlayerSessionServer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSPlayerSessionServer, playerSessionId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSPlayerSessionServer, PlayerId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSPlayerSessionServer, gameSessionId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSPlayerSessionServer, fleetId, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSPlayerSessionServer, creationTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSPlayerSessionServer, terminationTime, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSPlayerSessionServer, Status, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSPlayerSessionServer, UnknownData_T3HK, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSPlayerSessionServer, ipAddress, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSPlayerSessionServer, Port, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSPlayerSessionServer, UnknownData_ON0P, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSPlayerSessionServer, playerData, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSPlayerSessionServer, dnsName, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAWSPlayerSessionServer, 0x0090);
		}

		// struct FDescribePlayerSessionsResultServer
		TEST_METHOD(ScriptStruct__GameLiftServerSDK__DescribePlayerSessionsResultServer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribePlayerSessionsResultServer, playerSessions, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribePlayerSessionsResultServer, nextToken, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDescribePlayerSessionsResultServer, 0x0020);
		}

		// struct FGetInstanceCertificateResult
		TEST_METHOD(ScriptStruct__GameLiftServerSDK__GetInstanceCertificateResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGetInstanceCertificateResult, CertificatePath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGetInstanceCertificateResult, CertificateChainPath, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGetInstanceCertificateResult, PrivateKeyPath, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGetInstanceCertificateResult, Hostname, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGetInstanceCertificateResult, RootCertificatePath, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGetInstanceCertificateResult, 0x0050);
		}

		// struct FKeyAndValue
		TEST_METHOD(ScriptStruct__GameLiftServerSDK__KeyAndValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyAndValue, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyAndValue, Value, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyAndValue, UnknownData_1IJ5, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKeyAndValue, 0x0018);
		}

		// struct FAttributeValueServer
		TEST_METHOD(ScriptStruct__GameLiftServerSDK__AttributeValueServer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributeValueServer, S, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributeValueServer, N, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributeValueServer, UnknownData_NPC0, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributeValueServer, sL, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributeValueServer, sDM, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributeValueServer, attrType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributeValueServer, UnknownData_MQAB, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAttributeValueServer, 0x0040);
		}

		// struct FNamedAttribute
		TEST_METHOD(ScriptStruct__GameLiftServerSDK__NamedAttribute)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedAttribute, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedAttribute, Value, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedAttribute, 0x0050);
		}

		// struct FRegionAndLatency
		TEST_METHOD(ScriptStruct__GameLiftServerSDK__RegionAndLatency)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRegionAndLatency, region, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRegionAndLatency, latencyMs, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRegionAndLatency, UnknownData_DD43, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRegionAndLatency, 0x0018);
		}

		// struct FAWSPlayerServer
		TEST_METHOD(ScriptStruct__GameLiftServerSDK__AWSPlayerServer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSPlayerServer, PlayerId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSPlayerServer, Team, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSPlayerServer, playerAttributes, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSPlayerServer, latencyInMs, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAWSPlayerServer, 0x0040);
		}

		// struct FStartMatchBackfillRequestServer
		TEST_METHOD(ScriptStruct__GameLiftServerSDK__StartMatchBackfillRequestServer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStartMatchBackfillRequestServer, ticketId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStartMatchBackfillRequestServer, matchmakingConfigurationArn, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStartMatchBackfillRequestServer, gameSessionArn, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStartMatchBackfillRequestServer, players, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStartMatchBackfillRequestServer, 0x0040);
		}

		// struct FStartMatchBackfillResultServer
		TEST_METHOD(ScriptStruct__GameLiftServerSDK__StartMatchBackfillResultServer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStartMatchBackfillResultServer, ticketId, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStartMatchBackfillResultServer, 0x0010);
		}

		// struct FGamePropertyServer
		TEST_METHOD(ScriptStruct__GameLiftServerSDK__GamePropertyServer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGamePropertyServer, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGamePropertyServer, Value, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGamePropertyServer, 0x0020);
		}

		// struct FAWSGameSessionServer
		TEST_METHOD(ScriptStruct__GameLiftServerSDK__AWSGameSessionServer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSGameSessionServer, gameSessionId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSGameSessionServer, Name, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSGameSessionServer, fleetId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSGameSessionServer, maximumPlayerSessionCount, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSGameSessionServer, Status, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSGameSessionServer, UnknownData_2LCO, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSGameSessionServer, gameProperties, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSGameSessionServer, ipAddress, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSGameSessionServer, Port, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSGameSessionServer, UnknownData_9H09, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSGameSessionServer, gameSessionData, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSGameSessionServer, matchmakerData, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSGameSessionServer, dnsName, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAWSGameSessionServer, 0x0090);
		}

		// struct FUpdateGameSessionServer
		TEST_METHOD(ScriptStruct__GameLiftServerSDK__UpdateGameSessionServer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateGameSessionServer, backfillTicketId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateGameSessionServer, GameSession, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateGameSessionServer, updateReason, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateGameSessionServer, UnknownData_Z4MX, 0x00A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUpdateGameSessionServer, 0x00A8);
		}

		// struct FStopMatchBackfillRequest
		TEST_METHOD(ScriptStruct__GameLiftServerSDK__StopMatchBackfillRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStopMatchBackfillRequest, ticketId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStopMatchBackfillRequest, matchmakingConfigurationArn, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStopMatchBackfillRequest, gameSessionArn, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStopMatchBackfillRequest, 0x0030);
		}

		// struct FDescribePlayerSessionsRequestServer
		TEST_METHOD(ScriptStruct__GameLiftServerSDK__DescribePlayerSessionsRequestServer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribePlayerSessionsRequestServer, gameSessionId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribePlayerSessionsRequestServer, PlayerId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribePlayerSessionsRequestServer, playerSessionId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribePlayerSessionsRequestServer, playerSessionStatusFilter, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribePlayerSessionsRequestServer, limit, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribePlayerSessionsRequestServer, UnknownData_848D, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribePlayerSessionsRequestServer, nextToken, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDescribePlayerSessionsRequestServer, 0x0058);
		}

		// struct FAnalyticsEventAttr
		TEST_METHOD(ScriptStruct__AnalyticsBlueprintLibrary__AnalyticsEventAttr)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnalyticsEventAttr, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnalyticsEventAttr, Value, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnalyticsEventAttr, 0x0020);
		}

		// struct FDetectedFeature
		TEST_METHOD(ScriptStruct__AppleVision__DetectedFeature)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetectedFeature, Confidence, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDetectedFeature, 0x0004);
		}

		// struct FDetectedFeatureRegion : public FDetectedFeature
		TEST_METHOD(ScriptStruct__AppleVision__DetectedFeatureRegion)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetectedFeatureRegion, UnknownData_FDY1, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetectedFeatureRegion, Points, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDetectedFeatureRegion, 0x0018);
		}

		// struct FDetectedFaceFeatureRegion : public FDetectedFeatureRegion
		TEST_METHOD(ScriptStruct__AppleVision__DetectedFaceFeatureRegion)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetectedFaceFeatureRegion, FeatureType, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetectedFaceFeatureRegion, UnknownData_572W, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDetectedFaceFeatureRegion, 0x0020);
		}

		// struct FDetectedFeature2D : public FDetectedFeature
		TEST_METHOD(ScriptStruct__AppleVision__DetectedFeature2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetectedFeature2D, BoundingBox, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDetectedFeature2D, 0x0018);
		}

		// struct FDetectedFaceFeature2D : public FDetectedFeature2D
		TEST_METHOD(ScriptStruct__AppleVision__DetectedFaceFeature2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetectedFaceFeature2D, FeatureType, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetectedFaceFeature2D, UnknownData_RJIO, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDetectedFaceFeature2D, 0x001C);
		}

		// struct FDetectedFace : public FDetectedFeatureRegion
		TEST_METHOD(ScriptStruct__AppleVision__DetectedFace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetectedFace, BoundingBox, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetectedFace, UnknownData_NZF5, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetectedFace, Features, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetectedFace, FeatureRegions, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDetectedFace, 0x0050);
		}

		// struct FFaceDetectionResult
		TEST_METHOD(ScriptStruct__AppleVision__FaceDetectionResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFaceDetectionResult, DetectedFaces, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFaceDetectionResult, 0x0010);
		}

		// struct FHSHSurvivor_FDropItem
		TEST_METHOD(ScriptStruct__HSHSurvivor__DropItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDropItem, Item, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDropItem, Weight, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDropItem, 0x0014);
		}

		// struct FHSHItemSlot
		TEST_METHOD(ScriptStruct__HSHSurvivor__HSHItemSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHSHItemSlot, ItemType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHSHItemSlot, SlotNumber, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHSHItemSlot, 0x000C);
		}

		// struct FHSHGameplayEffectContainerSpec
		TEST_METHOD(ScriptStruct__HSHSurvivor__HSHGameplayEffectContainerSpec)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHSHGameplayEffectContainerSpec, TargetData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHSHGameplayEffectContainerSpec, TargetGameplayEffectSpecs, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHSHGameplayEffectContainerSpec, 0x0030);
		}

		// struct FHSHItemData
		TEST_METHOD(ScriptStruct__HSHSurvivor__HSHItemData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHSHItemData, ItemCount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHSHItemData, ItemLevel, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHSHItemData, 0x0008);
		}

		// struct FShowStatus
		TEST_METHOD(ScriptStruct__HSHSurvivor__ShowStatus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FShowStatus, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FShowStatus, Description, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FShowStatus, Level, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FShowStatus, UnknownData_9BTA, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FShowStatus, 0x0038);
		}

		// struct FHSHGameplayEffectContainer
		TEST_METHOD(ScriptStruct__HSHSurvivor__HSHGameplayEffectContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHSHGameplayEffectContainer, TargetType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHSHGameplayEffectContainer, TargetGameplayEffectClasses, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHSHGameplayEffectContainer, 0x0018);
		}

		// struct FS_PairAnimationPickable
		TEST_METHOD(ScriptStruct__HSHSurvivor__S_PairAnimationPickable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_PairAnimationPickable, CharacterClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_PairAnimationPickable, AnimMontage, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_PairAnimationPickable, 0x0010);
		}

		// struct FJokeData
		TEST_METHOD(ScriptStruct__HSHSurvivor__JokeData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FJokeData, Sound, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJokeData, Priority, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJokeData, UnknownData_3DF8, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FJokeData, 0x0010);
		}

		// struct FJokeArray
		TEST_METHOD(ScriptStruct__HSHSurvivor__JokeArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FJokeArray, Data, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FJokeArray, 0x0010);
		}

		// struct FPerkHandleData
		TEST_METHOD(ScriptStruct__HSHSurvivor__PerkHandleData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerkHandleData, Owner, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerkHandleData, Target, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerkHandleData, 0x0010);
		}

		// struct FSProgressInfo
		TEST_METHOD(ScriptStruct__HSHSurvivor__SProgressInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSProgressInfo, Player, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSProgressInfo, Target, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSProgressInfo, progress, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSProgressInfo, progressCheck, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSProgressInfo, progressProbability, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSProgressInfo, UnknownData_WOG9, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSProgressInfo, IsSkillCheck, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSProgressInfo, bCanSkillCheck, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSProgressInfo, UnknownData_A9CP, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSProgressInfo, progressTime, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSProgressInfo, DoLongProgressTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSProgressInfo, BanSkilCheckTimer, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSProgressInfo, AI, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSProgressInfo, 0x0058);
		}

		// struct FVentilatorCooldown
		TEST_METHOD(ScriptStruct__HSHSurvivor__VentilatorCooldown)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVentilatorCooldown, Index, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVentilatorCooldown, Current, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVentilatorCooldown, Duration, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVentilatorCooldown, 0x000C);
		}

		// struct FSTR_EventActivityData
		TEST_METHOD(UserDefinedStruct__STR_EventActivityData__STR_EventActivityData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSTR_EventActivityData, RowName_42_EEF74E3E41A9FDE643C042BED6196BF9, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSTR_EventActivityData, EventName_32_1CBBE4BE4EF087C4E7A8FFBACF1257C1, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSTR_EventActivityData, SummaryName_38_011A17744DDE6CD0FF84679C1ED3904B, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSTR_EventActivityData, Role_28_A0FB629F4C18C6F837CB789C864C79FC, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSTR_EventActivityData, UnknownData_D95E, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSTR_EventActivityData, ActivityIcon_46_5E0855614DDA73D3D32C3FBD477ECA93, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSTR_EventActivityData, Coins_16_4710451649F06DC5BEEE51BECCBA123A, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSTR_EventActivityData, Score_13_9AF7ED454301DBEDBB5062B6DBCA59E3, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSTR_EventActivityData, HasCap_54_DC430B774CDECC87CDA8F6B0A3D644E1, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSTR_EventActivityData, UnknownData_3N9S, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSTR_EventActivityData, CoinCap_51_62C1477C45DBC1F9D0532BAB92238450, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSTR_EventActivityData, ScoreCap_52_715F986C43410024AEE698B98BE7EE0C, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSTR_EventActivityData, 0x005C);
		}

		// struct FAIRequestID
		TEST_METHOD(ScriptStruct__AIModule__AIRequestID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIRequestID, RequestId, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIRequestID, 0x0004);
		}

		// struct FAIStimulus
		TEST_METHOD(ScriptStruct__AIModule__AIStimulus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, Age, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, ExpirationAge, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, Strength, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, StimulusLocation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, ReceiverLocation, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, Tag, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, UnknownData_3JWT, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, UnknownData_EZRA, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIStimulus, 0x003C);
		}

		// struct FActorPerceptionBlueprintInfo
		TEST_METHOD(ScriptStruct__AIModule__ActorPerceptionBlueprintInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorPerceptionBlueprintInfo, Target, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorPerceptionBlueprintInfo, LastSensedStimuli, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorPerceptionBlueprintInfo, UnknownData_CKRH, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorPerceptionBlueprintInfo, 0x0020);
		}

		// struct FAIDamageEvent
		TEST_METHOD(ScriptStruct__AIModule__AIDamageEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, Amount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, Location, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, HitLocation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, UnknownData_3I72, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, DamagedActor, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, Instigator, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDamageEvent, 0x0030);
		}

		// struct FAINoiseEvent
		TEST_METHOD(ScriptStruct__AIModule__AINoiseEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, UnknownData_AH13, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, NoiseLocation, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, Loudness, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, MaxRange, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, Instigator, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, Tag, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, UnknownData_D4PI, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAINoiseEvent, 0x0030);
		}

		// struct FAIPredictionEvent
		TEST_METHOD(ScriptStruct__AIModule__AIPredictionEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIPredictionEvent, Requestor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIPredictionEvent, PredictedActor, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIPredictionEvent, UnknownData_NQSP, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIPredictionEvent, 0x0018);
		}

		// struct FAITeamStimulusEvent
		TEST_METHOD(ScriptStruct__AIModule__AITeamStimulusEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITeamStimulusEvent, UnknownData_U0W7, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITeamStimulusEvent, Broadcaster, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITeamStimulusEvent, Enemy, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAITeamStimulusEvent, 0x0038);
		}

		// struct FAITouchEvent
		TEST_METHOD(ScriptStruct__AIModule__AITouchEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITouchEvent, UnknownData_PG5Z, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITouchEvent, TouchReceiver, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITouchEvent, OtherActor, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAITouchEvent, 0x0020);
		}

		// struct FAIMoveRequest
		TEST_METHOD(ScriptStruct__AIModule__AIMoveRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIMoveRequest, GoalActor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIMoveRequest, UnknownData_WEFY, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIMoveRequest, 0x0040);
		}

		// struct FBTDecoratorLogic
		TEST_METHOD(ScriptStruct__AIModule__BTDecoratorLogic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTDecoratorLogic, Operation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTDecoratorLogic, UnknownData_EKUN, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTDecoratorLogic, Number, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBTDecoratorLogic, 0x0004);
		}

		// struct FAIDataProviderValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderValue, UnknownData_IMRX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderValue, CachedProperty, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderValue, DataBinding, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderValue, DataField, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderValue, 0x0020);
		}

		// struct FAIDataProviderTypedValue : public FAIDataProviderValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderTypedValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderTypedValue, PropertyType, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderTypedValue, 0x0028);
		}

		// struct FAIDataProviderBoolValue : public FAIDataProviderTypedValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderBoolValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderBoolValue, DefaultValue, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderBoolValue, UnknownData_TLOJ, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderBoolValue, 0x0030);
		}

		// struct FAIDataProviderFloatValue : public FAIDataProviderTypedValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderFloatValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderFloatValue, DefaultValue, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderFloatValue, UnknownData_PAXI, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderFloatValue, 0x0030);
		}

		// struct FAIDataProviderIntValue : public FAIDataProviderTypedValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderIntValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderIntValue, DefaultValue, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderIntValue, UnknownData_BIK2, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderIntValue, 0x0030);
		}

		// struct FAIDataProviderStructValue : public FAIDataProviderValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderStructValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderStructValue, UnknownData_C6I0, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderStructValue, 0x0030);
		}

		// struct FAISenseAffiliationFilter
		TEST_METHOD(ScriptStruct__AIModule__AISenseAffiliationFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAISenseAffiliationFilter, UnknownData_XGZW, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAISenseAffiliationFilter, 0x0004);
		}

		// struct FAISightEvent
		TEST_METHOD(ScriptStruct__AIModule__AISightEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAISightEvent, UnknownData_S5QD, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAISightEvent, SeenActor, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAISightEvent, Observer, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAISightEvent, 0x0018);
		}

		// struct FBehaviorTreeTemplateInfo
		TEST_METHOD(ScriptStruct__AIModule__BehaviorTreeTemplateInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBehaviorTreeTemplateInfo, Asset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBehaviorTreeTemplateInfo, Template, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBehaviorTreeTemplateInfo, UnknownData_GEER, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBehaviorTreeTemplateInfo, 0x0018);
		}

		// struct FBlackboardKeySelector
		TEST_METHOD(ScriptStruct__AIModule__BlackboardKeySelector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, AllowedTypes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, SelectedKeyName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, SelectedKeyType, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, SelectedKeyID, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, UnknownData_QI6C, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, UnknownData_0XAN, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlackboardKeySelector, 0x0028);
		}

		// struct FBlackboardEntry
		TEST_METHOD(ScriptStruct__AIModule__BlackboardEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardEntry, EntryName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardEntry, KeyType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardEntry, UnknownData_UMDI, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlackboardEntry, 0x0018);
		}

		// struct FBTCompositeChild
		TEST_METHOD(ScriptStruct__AIModule__BTCompositeChild)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTCompositeChild, ChildComposite, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTCompositeChild, ChildTask, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTCompositeChild, Decorators, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTCompositeChild, DecoratorOps, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBTCompositeChild, 0x0030);
		}

		// struct FCrowdAvoidanceSamplingPattern
		TEST_METHOD(ScriptStruct__AIModule__CrowdAvoidanceSamplingPattern)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceSamplingPattern, Angles, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceSamplingPattern, Radii, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCrowdAvoidanceSamplingPattern, 0x0020);
		}

		// struct FCrowdAvoidanceConfig
		TEST_METHOD(ScriptStruct__AIModule__CrowdAvoidanceConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, VelocityBias, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, DesiredVelocityWeight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, CurrentVelocityWeight, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, SideBiasWeight, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, ImpactTimeWeight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, ImpactTimeRange, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, CustomPatternIdx, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, AdaptiveDivisions, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, AdaptiveRings, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, AdaptiveDepth, 0x001B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCrowdAvoidanceConfig, 0x001C);
		}

		// struct FEnvQueryInstanceCache
		TEST_METHOD(ScriptStruct__AIModule__EnvQueryInstanceCache)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryInstanceCache, Template, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryInstanceCache, UnknownData_GRG9, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvQueryInstanceCache, 0x01E8);
		}

		// struct FEnvQueryRequest
		TEST_METHOD(ScriptStruct__AIModule__EnvQueryRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryRequest, QueryTemplate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryRequest, Owner, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryRequest, World, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryRequest, UnknownData_EKE0, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvQueryRequest, 0x0068);
		}

		// struct FAIDynamicParam
		TEST_METHOD(ScriptStruct__AIModule__AIDynamicParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDynamicParam, ParamName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDynamicParam, ParamType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDynamicParam, UnknownData_GVEM, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDynamicParam, Value, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDynamicParam, BBKey, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDynamicParam, 0x0038);
		}

		// struct FEQSParametrizedQueryExecutionRequest
		TEST_METHOD(ScriptStruct__AIModule__EQSParametrizedQueryExecutionRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, QueryTemplate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, QueryConfig, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, EQSQueryBlackboardKey, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, RunMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, UnknownData_84S1, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, UnknownData_Q38Z, 0x0045);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEQSParametrizedQueryExecutionRequest, 0x0048);
		}

		// struct FEnvQueryResult
		TEST_METHOD(ScriptStruct__AIModule__EnvQueryResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, UnknownData_NKED, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, ItemType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, UnknownData_GN1R, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, OptionIndex, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, QueryID, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, UnknownData_S8G8, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvQueryResult, 0x0040);
		}

		// struct FEnvOverlapData
		TEST_METHOD(ScriptStruct__AIModule__EnvOverlapData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, ExtentX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, ExtentY, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, ExtentZ, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, ShapeOffset, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, OverlapChannel, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, OverlapShape, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, UnknownData_IYAS, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, UnknownData_P5S0, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvOverlapData, 0x0020);
		}

		// struct FEnvTraceData
		TEST_METHOD(ScriptStruct__AIModule__EnvTraceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, VersionNum, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, UnknownData_ET3P, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, NavigationFilter, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, ProjectDown, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, ProjectUp, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, ExtentX, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, ExtentY, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, ExtentZ, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, PostProjectionVerticalOffset, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, TraceChannel, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, SerializedChannel, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, TraceShape, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, TraceMode, 0x002B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, UnknownData_ZFJY, 0x002D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvTraceData, 0x0030);
		}

		// struct FEnvDirection
		TEST_METHOD(ScriptStruct__AIModule__EnvDirection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvDirection, LineFrom, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvDirection, LineTo, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvDirection, Rotation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvDirection, DirMode, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvDirection, UnknownData_1P13, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvDirection, 0x0020);
		}

		// struct FEnvNamedValue
		TEST_METHOD(ScriptStruct__AIModule__EnvNamedValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvNamedValue, ParamName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvNamedValue, ParamType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvNamedValue, UnknownData_T282, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvNamedValue, Value, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvNamedValue, 0x0010);
		}

		// struct FGenericTeamId
		TEST_METHOD(ScriptStruct__AIModule__GenericTeamId)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGenericTeamId, TeamId, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGenericTeamId, 0x0001);
		}

		// struct FPawnActionStack
		TEST_METHOD(ScriptStruct__AIModule__PawnActionStack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnActionStack, TopAction, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPawnActionStack, 0x0008);
		}

		// struct FPawnActionEvent
		TEST_METHOD(ScriptStruct__AIModule__PawnActionEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnActionEvent, Action, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnActionEvent, UnknownData_7MSO, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPawnActionEvent, 0x0018);
		}

		// struct FS_AimTransform
		TEST_METHOD(UserDefinedStruct__S_AimTransform__S_AimTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_AimTransform, Location_4_CE3B97554E55B6132BD8DB97EF1DC2E2, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_AimTransform, Rotation_5_26D75DAD43566B45ABA0A5BB0F29351C, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_AimTransform, 0x0018);
		}

		// struct FFilterOptionPerAxis
		TEST_METHOD(ScriptStruct__AnimationCore__FilterOptionPerAxis)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilterOptionPerAxis, bX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilterOptionPerAxis, bY, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilterOptionPerAxis, bZ, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFilterOptionPerAxis, 0x0003);
		}

		// struct FConstraintOffset
		TEST_METHOD(ScriptStruct__AnimationCore__ConstraintOffset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, Translation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, UnknownData_IGJZ, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, Rotation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, Scale, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, UnknownData_72SQ, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, Parent, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintOffset, 0x0060);
		}

		// struct FConstraintDescriptor
		TEST_METHOD(ScriptStruct__AnimationCore__ConstraintDescriptor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescriptor, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescriptor, UnknownData_N7WH, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintDescriptor, 0x0010);
		}

		// struct FConstraintData
		TEST_METHOD(ScriptStruct__AnimationCore__ConstraintData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, Constraint, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, Weight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, bMaintainOffset, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, UnknownData_F51I, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, Offset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, CurrentTransform, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintData, 0x0080);
		}

		// struct FTransformFilter
		TEST_METHOD(ScriptStruct__AnimationCore__TransformFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformFilter, TranslationFilter, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformFilter, RotationFilter, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformFilter, ScaleFilter, 0x0006);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformFilter, 0x0009);
		}

		// struct FEulerTransform
		TEST_METHOD(ScriptStruct__AnimationCore__EulerTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEulerTransform, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEulerTransform, Rotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEulerTransform, Scale, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEulerTransform, 0x0024);
		}

		// struct FAxis
		TEST_METHOD(ScriptStruct__AnimationCore__Axis)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAxis, Axis, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAxis, bInLocalSpace, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAxis, UnknownData_TMM4, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAxis, 0x0010);
		}

		// struct FConstraintDescriptionEx
		TEST_METHOD(ScriptStruct__AnimationCore__ConstraintDescriptionEx)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescriptionEx, UnknownData_D2RH, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescriptionEx, AxesFilterOption, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescriptionEx, UnknownData_56Q6, 0x000B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintDescriptionEx, 0x0010);
		}

		// struct FAimConstraintDescription : public FConstraintDescriptionEx
		TEST_METHOD(ScriptStruct__AnimationCore__AimConstraintDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimConstraintDescription, LookAt_Axis, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimConstraintDescription, LookUp_Axis, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimConstraintDescription, bUseLookUp, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimConstraintDescription, UnknownData_WSON, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimConstraintDescription, LookUpTarget, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAimConstraintDescription, 0x0040);
		}

		// struct FTransformConstraintDescription : public FConstraintDescriptionEx
		TEST_METHOD(ScriptStruct__AnimationCore__TransformConstraintDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraintDescription, TransformType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraintDescription, UnknownData_JDTP, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformConstraintDescription, 0x0018);
		}

		// struct FNodeChain
		TEST_METHOD(ScriptStruct__AnimationCore__NodeChain)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeChain, Nodes, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeChain, 0x0010);
		}

		// struct FNodeObject
		TEST_METHOD(ScriptStruct__AnimationCore__NodeObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeObject, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeObject, ParentName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeObject, 0x0010);
		}

		// struct FConstraintDescription
		TEST_METHOD(ScriptStruct__AnimationCore__ConstraintDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, bTranslation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, bRotation, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, bScale, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, bParent, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, TranslationAxes, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, RotationAxes, 0x0007);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, ScaleAxes, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintDescription, 0x000D);
		}

		// struct FTransformConstraint
		TEST_METHOD(ScriptStruct__AnimationCore__TransformConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, Operator, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, UnknownData_FHHA, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, SourceNode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, TargetNode, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, Weight, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, bMaintainOffset, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, UnknownData_681H, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformConstraint, 0x0028);
		}

		// struct FNodeHierarchyData
		TEST_METHOD(ScriptStruct__AnimationCore__NodeHierarchyData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeHierarchyData, Nodes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeHierarchyData, Transforms, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeHierarchyData, NodeNameToIndexMapping, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeHierarchyData, 0x0070);
		}

		// struct FNodeHierarchyWithUserData
		TEST_METHOD(ScriptStruct__AnimationCore__NodeHierarchyWithUserData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeHierarchyWithUserData, UnknownData_DSJH, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeHierarchyWithUserData, Hierarchy, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeHierarchyWithUserData, 0x0078);
		}

		// struct FS_PlayerQuest
		TEST_METHOD(UserDefinedStruct__S_PlayerQuest__S_PlayerQuest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_PlayerQuest, Quests_3_BAB91B6D4AA500F1DD984792CD9621CC, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_PlayerQuest, 0x0010);
		}

		// struct FSourceControlState
		TEST_METHOD(ScriptStruct__SourceControl__SourceControlState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceControlState, Filename, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceControlState, bIsValid, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceControlState, bIsUnknown, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceControlState, bCanCheckIn, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceControlState, bCanCheckOut, 0x0013);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceControlState, bIsCheckedOut, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceControlState, bIsCurrent, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceControlState, bIsSourceControlled, 0x0016);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceControlState, bIsAdded, 0x0017);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceControlState, bIsDeleted, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceControlState, bIsIgnored, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceControlState, bCanEdit, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceControlState, bCanDelete, 0x001B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceControlState, bIsModified, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceControlState, bCanAdd, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceControlState, bIsConflicted, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceControlState, bCanRevert, 0x001F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceControlState, bIsCheckedOutOther, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceControlState, UnknownData_X8SH, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceControlState, CheckedOutOther, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceControlState, 0x0038);
		}

		// struct FSTR_Achievement
		TEST_METHOD(UserDefinedStruct__STR_Achievement__STR_Achievement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSTR_Achievement, ApiName_2_ED1392C04BBE8BDB4BB1409C3BAC9226, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSTR_Achievement, ProgressApiName_16_CB2E087240FE88218F70AA9977DBA470, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSTR_Achievement, IsProgressAchievement_19_370E208C4E0C071650D3CC8F488F47D0, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSTR_Achievement, Role_22_58B7934D476678AD6A3E808E539B0DDD, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSTR_Achievement, UnknownData_LKDE, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSTR_Achievement, DisplayName_7_F5960BE948BC8C4A3AD015B2618AC732, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSTR_Achievement, Description_10_57118D5546186B47DC11B6A0623613BF, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSTR_Achievement, 0x0048);
		}

		// struct FS_AnnouncementSaveGame
		TEST_METHOD(UserDefinedStruct__S_AnnouncementSaveGame__S_AnnouncementSaveGame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_AnnouncementSaveGame, bIsNotShowAgain_3_792A790E41B3AD9A44CBE889F4BC99B3, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_AnnouncementSaveGame, UnknownData_NQZ1, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_AnnouncementSaveGame, AnnouncementVersion_6_0902B1D446237E4A8408169F6580E2F1, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_AnnouncementSaveGame, 0x0018);
		}

		// struct FS_OptionControlKeyMap
		TEST_METHOD(UserDefinedStruct__S_OptionControlKeyMap__S_OptionControlKeyMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_OptionControlKeyMap, Name_89_A00C0EC14A7D72C549E3C6894BC4E74A, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_OptionControlKeyMap, DisplayName_91_D2CB81FC48E3C5246B02A795D8B9C200, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_OptionControlKeyMap, S_ActionKeyMapping_84_6A3757A54CF12B7E06E2C7B08171904D, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_OptionControlKeyMap, 0x0030);
		}

		// struct FS_OptionDisplay
		TEST_METHOD(UserDefinedStruct__S_OptionDisplay__S_OptionDisplay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_OptionDisplay, Resolution_8_6A3757A54CF12B7E06E2C7B08171904D, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_OptionDisplay, RenderResolution_17_D27AD76240BB8051052308B93073CC1E, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_OptionDisplay, FrameRateLimit_19_D804DB2744A5F13CEDFA4F843EF5E162, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_OptionDisplay, WindowModes_7_83F8DE1C4109197AF79908A4F20E89C0, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_OptionDisplay, VSyncEnable_12_B533B6804EAA2159D50ECBB633D31D8B, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_OptionDisplay, DynamicResolutionEnabled_21_191D0A9748992EA9D8720986EE3E7500, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_OptionDisplay, UnknownData_QEHS, 0x0013);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_OptionDisplay, Gamma_15_EB751A9844C1DCACA8911FB5D0CB382A, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_OptionDisplay, 0x0018);
		}

		// struct FS_PlaceItemSuccess
		TEST_METHOD(UserDefinedStruct__S_PlaceItemSuccess__S_PlaceItemSuccess)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_PlaceItemSuccess, Item_3_47E407DD4C07536CC255C49A152C294B, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_PlaceItemSuccess, IsSuccess_4_6FA0B7F74BAA29900659CF89AEE20FEA, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_PlaceItemSuccess, 0x0011);
		}

		// struct FS_Ventilator
		TEST_METHOD(UserDefinedStruct__S_Ventilator__S_Ventilator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_Ventilator, VentilatorA_8_2B0FFC4C4E51EB47DDCF5FAF3DA7D7EB, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_Ventilator, VentilatorB_9_127C8D594D2424F72641EE8961DC5137, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_Ventilator, IsDoing__11_3F69F5BB46A9DAE6E4CAC0A535F53D9A, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_Ventilator, IsVentilatorInA_13_CF6A84074F44221711DD059D5EB4CE74, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_Ventilator, 0x0012);
		}

		// struct FS_OutlineScanInfo
		TEST_METHOD(UserDefinedStruct__S_OutlineScanInfo__S_OutlineScanInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_OutlineScanInfo, HSHCharacter_5_39CFD3554A7B18F0A21DBC8A3B9102FE, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_OutlineScanInfo, Timer_6_5AD885BE46A0ED34C640FAB3CC4E0A62, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_OutlineScanInfo, CantHide_10_A9778291486B9BD4D5E756A36DF52453, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_OutlineScanInfo, ShowState_13_1755C2A94BB44AD2710774BC21D7752B, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_OutlineScanInfo, 0x000E);
		}

		// struct FS_FogPreset
		TEST_METHOD(UserDefinedStruct__S_FogPreset__S_FogPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_FogPreset, StartDistance_4_3598F98243875ABC2CAF4AAC8043BC7D, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_FogPreset, FogDensity_6_A6DF4FE84C6F1D9DD59F5E81C08FC5CB, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_FogPreset, 0x0008);
		}

		// struct FS_ApplyStatus
		TEST_METHOD(UserDefinedStruct__S_ApplyStatus__S_ApplyStatus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_ApplyStatus, Name_4_B0A5B61746E096E21F3AE9B7D6D73D66, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_ApplyStatus, Effect_5_2B12B2B9493862BE67E8E1AE8B76A6A8, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_ApplyStatus, Scale_15_82B281D1447801324FAA85A0C3A5AB3D, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_ApplyStatus, Socket_9_CDE31D744A6697F84BA4A89CAF9BD28C, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_ApplyStatus, Attach_12_DE24C1704C96582914EE9386E5E6350E, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_ApplyStatus, UnknownData_KE2K, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_ApplyStatus, SoundEffect_18_BA403A4D4353F4AB36DD89953D0DEA63, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_ApplyStatus, 0x0030);
		}

		// struct FS_StorePrice
		TEST_METHOD(UserDefinedStruct__S_StorePrice__S_StorePrice)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_StorePrice, Name_6_C00FE5F84CD9788875A22ABE9C24DCAC, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_StorePrice, Price_5_FEB0C7D744E6DCB9AF944585C7DE6BF1, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_StorePrice, CurrencyType_9_4864B0394ACC27F5D7B2BEADBB3A69CF, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_StorePrice, 0x001D);
		}

		// struct FS_DirectoryInt_Int
		TEST_METHOD(UserDefinedStruct__S_DirectoryInt_Int__S_DirectoryInt_Int)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_DirectoryInt_Int, Key_4_4E31ADE14D3A4FBB425FBC9D8F89CF39, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_DirectoryInt_Int, Value_5_EA1C0FE640D013AD1D3CC3A6018EF8D7, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_DirectoryInt_Int, 0x0008);
		}

		// struct FS_RandomObject
		TEST_METHOD(UserDefinedStruct__S_RandomObject__S_RandomObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_RandomObject, ClassFilttler_6_861352B24531AD5E7B859D9634E62377, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_RandomObject, Count_8_D1E14C344992D1523BA24B8242E68C95, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_RandomObject, 0x000C);
		}

		// struct FS_TextOrImage
		TEST_METHOD(UserDefinedStruct__S_TextOrImage__S_TextOrImage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_TextOrImage, Image_6_E9D5881E46DE5AB4EFD71A8255ADCB85, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_TextOrImage, Text_4_268E336443615865BA7F2EADBBFB18A1, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_TextOrImage, 0x0020);
		}

		// struct FS_SummaryResult
		TEST_METHOD(UserDefinedStruct__S_SummaryResult__S_SummaryResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_SummaryResult, playerInfo_28_2E3BDABA4DA282EE4ABDF49C66BF8C2A, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_SummaryResult, activities_34_CDE64A1B4B555D75143D2C83430805BA, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_SummaryResult, totalScore_13_256117544C4B8E2DA9283D8DC4A3FB7A, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_SummaryResult, totalCoin_30_1F2E46254A800A27F522239B6463D0F7, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_SummaryResult, totalExp_32_AFE9548047C1B5646D53D9A9613A42E6, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_SummaryResult, mmrPoint_39_E25A7DC84EA451C55015AF9D10699BEC, 0x012C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_SummaryResult, 0x0130);
		}

		// struct FS_PlayerProfile
		TEST_METHOD(UserDefinedStruct__S_PlayerProfile__S_PlayerProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_PlayerProfile, Avatar_15_E3775F4A417E1C21299BAB8A2F22299B, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_PlayerProfile, Name_8_69990D714492C61BD1B4C7BABA278D31, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_PlayerProfile, Level_10_B9DAE06347CFC330C0629F8C928F0B81, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_PlayerProfile, Coin_13_9973198647F499F2E92C8087F141AED4, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_PlayerProfile, Token_19_4A53C5354FDC1EC5F1045AA521243282, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_PlayerProfile, Gem_17_909025B0435DB84E6AB919A3B67EA090, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_PlayerProfile, 0x00B0);
		}

		// struct FPlayerInfoStruct_G
		TEST_METHOD(UserDefinedStruct__PlayerInfoStruct_G__PlayerInfoStruct_G)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerInfoStruct_G, PlayerId_93_DEC0ABB84A19ED2F6EB5DEB84A850C2B, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerInfoStruct_G, PlayerSessionID_98_15DDAA8E49E50C86EC11EB9BB4F6568A, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerInfoStruct_G, Name_52_1195DD0743F4EC99DA3972B6A922A6CE, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerInfoStruct_G, CSteamID_132_17A313AD4AB132A37AB763AA4FF65A70, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerInfoStruct_G, Image_129_26C9FAE246989CA093F5CF84334AF47D, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerInfoStruct_G, Level_54_FEF032C444EC1AC1CB276FBD3B863E00, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerInfoStruct_G, Exp_61_382163244B0ECEBF0B5CD3B3C7BFF5E2, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerInfoStruct_G, MMRSurvivor_142_823CA6444A1F7E443D6607A75E39AF80, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerInfoStruct_G, MMRHunter_144_F804603140A1FE5FEFD7419BA7222CBE, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerInfoStruct_G, Coin_72_BE58177F442424AA84500D8E8AE04F88, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerInfoStruct_G, Gem_102_4FEFD783479C0F828716C7A1B5A3B738, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerInfoStruct_G, Token_139_2DF15B484D23B9F6F83CED8525AF113F, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerInfoStruct_G, LootBoxAmount_73_72EE5BF245BBC1E65FB4BCAECA3A852E, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerInfoStruct_G, PlayerRecordHunter_119_64CBCB644AD5FEC3A8123493DADCDE15, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerInfoStruct_G, PlayerRecordSurvivor_120_22E008384BA9CC0BAC902F92ED0EEB17, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerInfoStruct_G, Team_24_4AD1C1EF4E9A7468AB82AEA1E18FD54C, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerInfoStruct_G, Role_55_BE08913A4D5B66756128058DFB9044ED, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerInfoStruct_G, UnknownData_RUTK, 0x009A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerInfoStruct_G, CharacterList_71_90F839E343B3000C82E223B27AF076C3, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerInfoStruct_G, DefaultCharacter_58_A0FB71274BD1A1149454D5BA5844F62D, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerInfoStruct_G, CharacterItem_92_4D600D7B4AA8AEF823F8EABF937B8163, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerInfoStruct_G, CharacterHunterItem_79_E7DF4A37453201890FFBE1A8CAAA4870, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerInfoStruct_G, StickerPreset_128_50948BB14FFC563D32896EB7F8AF9FCB, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerInfoStruct_G, UnknownData_47V4, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerInfoStruct_G, SurvivorSlots_90_07CE3003426039B5002958BE668DA7BE, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerInfoStruct_G, HunterSlots_91_2927702B499D1DEBE923E0935011AA35, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerInfoStruct_G, StickerAssets_121_E781DF3A46715283D73953966AA1F1BC, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerInfoStruct_G, IsAIInfo_136_79903CC0418119BAD83BD88549A1F0E5, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerInfoStruct_G, 0x0109);
		}

		// struct FS_Pickable
		TEST_METHOD(UserDefinedStruct__S_Pickable__S_Pickable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_Pickable, Durability_2_5993917A42B69CD3FD9C78AEE7FC58D7, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_Pickable, ItemId_8_CBB07095427E093AD811CFA553932B7C, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_Pickable, UnknownData_02LT, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_Pickable, Class_5_0BBC5EE543A2C2110B5E49A17FFDE921, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_Pickable, Condition_21_9A73E1BD4E90D842FFA810B6D6BEB82F, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_Pickable, 0x0028);
		}

		// struct FDropTimecode
		TEST_METHOD(ScriptStruct__LinearTimecode__DropTimecode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDropTimecode, Timecode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDropTimecode, FrameRate, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDropTimecode, bColorFraming, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDropTimecode, bRunningForward, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDropTimecode, bNewFrame, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDropTimecode, UnknownData_8J8U, 0x001B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDropTimecode, 0x001C);
		}

		// struct FCapturedPropSegment
		TEST_METHOD(ScriptStruct__VariantManagerContent__CapturedPropSegment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCapturedPropSegment, PropertyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCapturedPropSegment, PropertyIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCapturedPropSegment, UnknownData_PWG1, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCapturedPropSegment, ComponentName, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCapturedPropSegment, 0x0028);
		}

		// struct FFunctionCaller
		TEST_METHOD(ScriptStruct__VariantManagerContent__FunctionCaller)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionCaller, FunctionName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFunctionCaller, 0x0008);
		}

		// struct FImageTolerance
		TEST_METHOD(ScriptStruct__ScreenShotComparisonTools__ImageTolerance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageTolerance, Red, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageTolerance, Green, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageTolerance, Blue, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageTolerance, Alpha, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageTolerance, MinBrightness, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageTolerance, MaxBrightness, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageTolerance, IgnoreAntiAliasing, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageTolerance, IgnoreColors, 0x0007);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageTolerance, MaximumLocalError, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageTolerance, MaximumGlobalError, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FImageTolerance, 0x0010);
		}

		// struct FImageComparisonResult
		TEST_METHOD(ScriptStruct__ScreenShotComparisonTools__ImageComparisonResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageComparisonResult, ApprovedFile, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageComparisonResult, IncomingFile, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageComparisonResult, ComparisonFile, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageComparisonResult, ReportApprovedFile, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageComparisonResult, ReportIncomingFile, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageComparisonResult, ReportComparisonFile, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageComparisonResult, MaxLocalDifference, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageComparisonResult, GlobalDifference, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageComparisonResult, ErrorMessage, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageComparisonResult, Tolerance, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FImageComparisonResult, 0x0098);
		}

		// struct FResonanceAudioReverbPluginSettings
		TEST_METHOD(ScriptStruct__ResonanceAudio__ResonanceAudioReverbPluginSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FResonanceAudioReverbPluginSettings, bEnableRoomEffects, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FResonanceAudioReverbPluginSettings, bGetTransformFromAudioVolume, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FResonanceAudioReverbPluginSettings, UnknownData_0N1L, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FResonanceAudioReverbPluginSettings, RoomPosition, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FResonanceAudioReverbPluginSettings, RoomRotation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FResonanceAudioReverbPluginSettings, RoomDimensions, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FResonanceAudioReverbPluginSettings, LeftWallMaterial, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FResonanceAudioReverbPluginSettings, RightWallMaterial, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FResonanceAudioReverbPluginSettings, FloorMaterial, 0x002E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FResonanceAudioReverbPluginSettings, CeilingMaterial, 0x002F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FResonanceAudioReverbPluginSettings, FrontWallMaterial, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FResonanceAudioReverbPluginSettings, BackWallMaterial, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FResonanceAudioReverbPluginSettings, UnknownData_C69Z, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FResonanceAudioReverbPluginSettings, ReflectionScalar, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FResonanceAudioReverbPluginSettings, ReverbGain, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FResonanceAudioReverbPluginSettings, ReverbTimeModifier, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FResonanceAudioReverbPluginSettings, ReverbBrightness, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FResonanceAudioReverbPluginSettings, UnknownData_RZ18, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FResonanceAudioReverbPluginSettings, 0x0050);
		}

		// struct FS_TutorialsMainmenu
		TEST_METHOD(UserDefinedStruct__S_TutorialsMainmenu__S_TutorialsMainmenu)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_TutorialsMainmenu, Header_11_339A07E74840FE527A651CBA835A414E, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_TutorialsMainmenu, Text_19_322D94784DB4416393BD64B0DBE3856C, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_TutorialsMainmenu, Videos_14_545EB2E8498B4068BD8FE8A48C06F575, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_TutorialsMainmenu, 0x0030);
		}

		// struct FS_InputImage
		TEST_METHOD(UserDefinedStruct__S_InputImage__S_InputImage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_InputImage, Brush_4_CECDCC544D3CF97885AB4EB9AFE36E22, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_InputImage, 0x0088);
		}

		// struct FFoliageVertexColorChannelMask
		TEST_METHOD(ScriptStruct__Foliage__FoliageVertexColorChannelMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageVertexColorChannelMask, UnknownData_MRAT, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageVertexColorChannelMask, MaskThreshold, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageVertexColorChannelMask, UnknownData_5RY7, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFoliageVertexColorChannelMask, 0x000C);
		}

		// struct FFoliageTypeObject
		TEST_METHOD(ScriptStruct__Foliage__FoliageTypeObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageTypeObject, FoliageTypeObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageTypeObject, TypeInstance, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageTypeObject, bIsAsset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageTypeObject, UnknownData_2ZRU, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageTypeObject, Type, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFoliageTypeObject, 0x0020);
		}

		// struct FProceduralFoliageInstance
		TEST_METHOD(ScriptStruct__Foliage__ProceduralFoliageInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, UnknownData_M97W, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Rotation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Normal, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Age, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Scale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, UnknownData_8KZ6, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Type, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, UnknownData_7SOR, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProceduralFoliageInstance, 0x0060);
		}

		// struct FS_OptionSystem
		TEST_METHOD(UserDefinedStruct__S_OptionSystem__S_OptionSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_OptionSystem, Languages_3_2DC5CD8F42417CF21C68CB96190F665E, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_OptionSystem, Region_26_C34D49D6468C81F91B645D856C2BC3A6, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_OptionSystem, Chatbox_25_69D8EB82474FF433AAF4C2A91C5BA8BC, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_OptionSystem, 0x0041);
		}

		// struct FS_LootboxProduct
		TEST_METHOD(UserDefinedStruct__S_LootboxProduct__S_LootboxProduct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_LootboxProduct, Name_54_773C1026455B7626A498BF9ECC09137A, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_LootboxProduct, Image_69_B665C85E41D25F4839A3CFB030161BA8, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_LootboxProduct, Type_65_8F44E01146D108BA16A62AB445276373, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_LootboxProduct, Rarity_64_11FC133C467CEC13F9FAB180AA118721, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_LootboxProduct, Rate_63_7B993C3E41B193AC2977D596E5BB37AD, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_LootboxProduct, AssetId_72_DB628CE245B1F02F37A7F18187B4CC29, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_LootboxProduct, 0x00D0);
		}

		// struct FGameplayResourceSet
		TEST_METHOD(ScriptStruct__GameplayTasks__GameplayResourceSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayResourceSet, UnknownData_AETU, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayResourceSet, 0x0002);
		}

		// struct FEyeTrackerGazeData
		TEST_METHOD(ScriptStruct__EyeTracker__EyeTrackerGazeData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerGazeData, GazeOrigin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerGazeData, GazeDirection, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerGazeData, FixationPoint, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerGazeData, ConfidenceValue, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEyeTrackerGazeData, 0x0028);
		}

		// struct FEyeTrackerStereoGazeData
		TEST_METHOD(ScriptStruct__EyeTracker__EyeTrackerStereoGazeData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, LeftEyeOrigin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, LeftEyeDirection, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, RightEyeOrigin, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, RightEyeDirection, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, FixationPoint, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, ConfidenceValue, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEyeTrackerStereoGazeData, 0x0040);
		}

		// struct FOverlayItem
		TEST_METHOD(ScriptStruct__Overlay__OverlayItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlayItem, startTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlayItem, endTime, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlayItem, Text, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlayItem, Position, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOverlayItem, 0x0028);
		}

		// struct FRigHierarchyRef
		TEST_METHOD(ScriptStruct__ControlRig__RigHierarchyRef)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigHierarchyRef, UnknownData_RRYT, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigHierarchyRef, bUseBaseHierarchy, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigHierarchyRef, UnknownData_61SM, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigHierarchyRef, Name, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigHierarchyRef, UnknownData_VZ83, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigHierarchyRef, 0x0018);
		}

		// struct FRigUnit
		TEST_METHOD(ScriptStruct__ControlRig__RigUnit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit, UnknownData_VI3Q, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit, RigUnitName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit, RigUnitStructName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit, ExecutionType, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit, UnknownData_MEEP, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigUnit, 0x0020);
		}

		// struct FRigUnit_FABRIK : public FRigUnit
		TEST_METHOD(ScriptStruct__ControlRig__RigUnit_FABRIK)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_FABRIK, HierarchyRef, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_FABRIK, StartJoint, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_FABRIK, EndJoint, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_FABRIK, Precision, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_FABRIK, MaxIterations, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_FABRIK, UnknownData_BYPS, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigUnit_FABRIK, 0x0068);
		}

		// struct FRigUnit_Clamp_Float : public FRigUnit
		TEST_METHOD(ScriptStruct__ControlRig__RigUnit_Clamp_Float)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_Clamp_Float, Value, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_Clamp_Float, Min, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_Clamp_Float, Max, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_Clamp_Float, Result, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigUnit_Clamp_Float, 0x0030);
		}

		// struct FRigUnit_BinaryFloatOp : public FRigUnit
		TEST_METHOD(ScriptStruct__ControlRig__RigUnit_BinaryFloatOp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_BinaryFloatOp, Argument0, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_BinaryFloatOp, Argument1, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_BinaryFloatOp, Result, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_BinaryFloatOp, UnknownData_M9FK, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigUnit_BinaryFloatOp, 0x0030);
		}

		// struct FRigUnit_Divide_FloatFloat : public FRigUnit_BinaryFloatOp
		TEST_METHOD(ScriptStruct__ControlRig__RigUnit_Divide_FloatFloat)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigUnit_Divide_FloatFloat, 0x0030);
		}

		// struct FRigUnit_Subtract_FloatFloat : public FRigUnit_BinaryFloatOp
		TEST_METHOD(ScriptStruct__ControlRig__RigUnit_Subtract_FloatFloat)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigUnit_Subtract_FloatFloat, 0x0030);
		}

		// struct FRigUnit_Add_FloatFloat : public FRigUnit_BinaryFloatOp
		TEST_METHOD(ScriptStruct__ControlRig__RigUnit_Add_FloatFloat)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigUnit_Add_FloatFloat, 0x0030);
		}

		// struct FRigUnit_Multiply_FloatFloat : public FRigUnit_BinaryFloatOp
		TEST_METHOD(ScriptStruct__ControlRig__RigUnit_Multiply_FloatFloat)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigUnit_Multiply_FloatFloat, 0x0030);
		}

		// struct FRigUnit_GetJointTransform : public FRigUnit
		TEST_METHOD(ScriptStruct__ControlRig__RigUnit_GetJointTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_GetJointTransform, HierarchyRef, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_GetJointTransform, Joint, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_GetJointTransform, Type, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_GetJointTransform, TransformSpace, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_GetJointTransform, UnknownData_2W7W, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_GetJointTransform, BaseTransform, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_GetJointTransform, BaseJoint, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_GetJointTransform, UnknownData_2BIL, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_GetJointTransform, Output, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigUnit_GetJointTransform, 0x00C0);
		}

		// struct FRigUnit_MergeHierarchy : public FRigUnit
		TEST_METHOD(ScriptStruct__ControlRig__RigUnit_MergeHierarchy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_MergeHierarchy, TargetHierarchy, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_MergeHierarchy, SourceHierarchy, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigUnit_MergeHierarchy, 0x0050);
		}

		// struct FRigUnit_QuaternionToAngle : public FRigUnit
		TEST_METHOD(ScriptStruct__ControlRig__RigUnit_QuaternionToAngle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_QuaternionToAngle, Axis, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_QuaternionToAngle, UnknownData_NXOF, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_QuaternionToAngle, Argument, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_QuaternionToAngle, Angle, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_QuaternionToAngle, UnknownData_L2T2, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigUnit_QuaternionToAngle, 0x0050);
		}

		// struct FRigUnit_QuaternionFromAxisAndAngle : public FRigUnit
		TEST_METHOD(ScriptStruct__ControlRig__RigUnit_QuaternionFromAxisAndAngle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_QuaternionFromAxisAndAngle, Axis, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_QuaternionFromAxisAndAngle, Angle, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_QuaternionFromAxisAndAngle, Result, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigUnit_QuaternionFromAxisAndAngle, 0x0040);
		}

		// struct FRigUnit_QuaternionToAxisAndAngle : public FRigUnit
		TEST_METHOD(ScriptStruct__ControlRig__RigUnit_QuaternionToAxisAndAngle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_QuaternionToAxisAndAngle, Argument, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_QuaternionToAxisAndAngle, Axis, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_QuaternionToAxisAndAngle, Angle, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigUnit_QuaternionToAxisAndAngle, 0x0040);
		}

		// struct FControlRigSequencerAnimInstanceProxy : public FAnimSequencerInstanceProxy
		TEST_METHOD(ScriptStruct__ControlRig__ControlRigSequencerAnimInstanceProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FControlRigSequencerAnimInstanceProxy, UnknownData_UWGX, 0x08D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FControlRigSequencerAnimInstanceProxy, 0x0A40);
		}

		// struct FRigJoint
		TEST_METHOD(ScriptStruct__ControlRig__RigJoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigJoint, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigJoint, ParentName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigJoint, ParentIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigJoint, UnknownData_SN3N, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigJoint, InitialTransform, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigJoint, GlobalTransform, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigJoint, LocalTransform, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigJoint, Dependents, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigJoint, 0x00C0);
		}

		// struct FRigHierarchy
		TEST_METHOD(ScriptStruct__ControlRig__RigHierarchy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigHierarchy, Joints, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigHierarchy, NameToIndexMapping, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigHierarchy, 0x0060);
		}

		// struct FRigHierarchyContainer
		TEST_METHOD(ScriptStruct__ControlRig__RigHierarchyContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigHierarchyContainer, UnknownData_7AFN, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigHierarchyContainer, BaseHierarchy, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigHierarchyContainer, 0x00C0);
		}

		// struct FMovieSceneControlRigInstanceData : public FMovieSceneSequenceInstanceData
		TEST_METHOD(ScriptStruct__ControlRig__MovieSceneControlRigInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneControlRigInstanceData, bAdditive, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneControlRigInstanceData, bApplyBoneFilter, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneControlRigInstanceData, UnknownData_39QM, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneControlRigInstanceData, BoneFilter, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneControlRigInstanceData, Weight, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneControlRigInstanceData, Operand, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneControlRigInstanceData, UnknownData_VGHD, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneControlRigInstanceData, 0x00D8);
		}

		// struct FAimTarget
		TEST_METHOD(ScriptStruct__ControlRig__AimTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimTarget, Weight, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimTarget, UnknownData_DRP6, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimTarget, Transform, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimTarget, AlignVector, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimTarget, UnknownData_CWNC, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAimTarget, 0x0050);
		}

		// struct FRigUnit_AimConstraint : public FRigUnit
		TEST_METHOD(ScriptStruct__ControlRig__RigUnit_AimConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_AimConstraint, HierarchyRef, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_AimConstraint, Joint, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_AimConstraint, AimMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_AimConstraint, UpMode, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_AimConstraint, UnknownData_GHBG, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_AimConstraint, AimVector, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_AimConstraint, UpVector, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_AimConstraint, UnknownData_JSOF, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_AimConstraint, AimTargets, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_AimConstraint, UpTargets, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_AimConstraint, UnknownData_56VF, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigUnit_AimConstraint, 0x0090);
		}

		// struct FRigUnit_ApplyFK : public FRigUnit
		TEST_METHOD(ScriptStruct__ControlRig__RigUnit_ApplyFK)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_ApplyFK, HierarchyRef, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_ApplyFK, Joint, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_ApplyFK, Transform, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_ApplyFK, Filter, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_ApplyFK, ApplyTransformMode, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_ApplyFK, ApplyTransformSpace, 0x007A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_ApplyFK, UnknownData_HVOC, 0x007B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_ApplyFK, BaseTransform, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_ApplyFK, BaseJoint, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_ApplyFK, UnknownData_UMTJ, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigUnit_ApplyFK, 0x00C0);
		}

		// struct FRigUnit_UnaryQuaternionOp : public FRigUnit
		TEST_METHOD(ScriptStruct__ControlRig__RigUnit_UnaryQuaternionOp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_UnaryQuaternionOp, Argument, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_UnaryQuaternionOp, Result, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigUnit_UnaryQuaternionOp, 0x0040);
		}

		// struct FRigUnit_InverseQuaterion : public FRigUnit_UnaryQuaternionOp
		TEST_METHOD(ScriptStruct__ControlRig__RigUnit_InverseQuaterion)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigUnit_InverseQuaterion, 0x0040);
		}

		// struct FRigUnit_BinaryQuaternionOp : public FRigUnit
		TEST_METHOD(ScriptStruct__ControlRig__RigUnit_BinaryQuaternionOp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_BinaryQuaternionOp, Argument0, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_BinaryQuaternionOp, Argument1, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_BinaryQuaternionOp, Result, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigUnit_BinaryQuaternionOp, 0x0050);
		}

		// struct FRigUnit_MultiplyQuaternion : public FRigUnit_BinaryQuaternionOp
		TEST_METHOD(ScriptStruct__ControlRig__RigUnit_MultiplyQuaternion)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigUnit_MultiplyQuaternion, 0x0050);
		}

		// struct FRigUnit_BinaryTransformOp : public FRigUnit
		TEST_METHOD(ScriptStruct__ControlRig__RigUnit_BinaryTransformOp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_BinaryTransformOp, Argument0, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_BinaryTransformOp, Argument1, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_BinaryTransformOp, Result, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigUnit_BinaryTransformOp, 0x00B0);
		}

		// struct FRigUnit_GetRelativeTransform : public FRigUnit_BinaryTransformOp
		TEST_METHOD(ScriptStruct__ControlRig__RigUnit_GetRelativeTransform)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigUnit_GetRelativeTransform, 0x00B0);
		}

		// struct FRigUnit_MultiplyTransform : public FRigUnit_BinaryTransformOp
		TEST_METHOD(ScriptStruct__ControlRig__RigUnit_MultiplyTransform)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigUnit_MultiplyTransform, 0x00B0);
		}

		// struct FConstraintTarget
		TEST_METHOD(ScriptStruct__ControlRig__ConstraintTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintTarget, Transform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintTarget, Weight, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintTarget, bMaintainOffset, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintTarget, Filter, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintTarget, UnknownData_XQKP, 0x003E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintTarget, 0x0040);
		}

		// struct FRigUnit_TransformConstraint : public FRigUnit
		TEST_METHOD(ScriptStruct__ControlRig__RigUnit_TransformConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_TransformConstraint, HierarchyRef, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_TransformConstraint, Joint, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_TransformConstraint, BaseTransformSpace, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_TransformConstraint, UnknownData_5HBM, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_TransformConstraint, BaseTransform, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_TransformConstraint, BaseJoint, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_TransformConstraint, Targets, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_TransformConstraint, UnknownData_U2WJ, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigUnit_TransformConstraint, 0x0100);
		}

		// struct FRigUnit_TwoBoneIKFK : public FRigUnit
		TEST_METHOD(ScriptStruct__ControlRig__RigUnit_TwoBoneIKFK)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_TwoBoneIKFK, HierarchyRef, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_TwoBoneIKFK, StartJoint, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_TwoBoneIKFK, EndJoint, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_TwoBoneIKFK, bUsePoleTarget, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_TwoBoneIKFK, UnknownData_67OL, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_TwoBoneIKFK, PoleTarget, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_TwoBoneIKFK, Spin, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_TwoBoneIKFK, UnknownData_5ASP, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_TwoBoneIKFK, EndEffector, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_TwoBoneIKFK, IKBlend, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_TwoBoneIKFK, UnknownData_S8WO, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_TwoBoneIKFK, StartJointFKTransform, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_TwoBoneIKFK, MidJointFKTransform, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_TwoBoneIKFK, EndJointFKTransform, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_TwoBoneIKFK, UnknownData_R1OP, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigUnit_TwoBoneIKFK, 0x01F0);
		}

		// struct FRigUnit_Distance_VectorVector : public FRigUnit
		TEST_METHOD(ScriptStruct__ControlRig__RigUnit_Distance_VectorVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_Distance_VectorVector, Argument0, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_Distance_VectorVector, Argument1, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_Distance_VectorVector, Result, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_Distance_VectorVector, UnknownData_8O76, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigUnit_Distance_VectorVector, 0x0040);
		}

		// struct FRigUnit_BinaryVectorOp : public FRigUnit
		TEST_METHOD(ScriptStruct__ControlRig__RigUnit_BinaryVectorOp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_BinaryVectorOp, Argument0, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_BinaryVectorOp, Argument1, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_BinaryVectorOp, Result, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_BinaryVectorOp, UnknownData_2UG8, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigUnit_BinaryVectorOp, 0x0048);
		}

		// struct FRigUnit_Divide_VectorVector : public FRigUnit_BinaryVectorOp
		TEST_METHOD(ScriptStruct__ControlRig__RigUnit_Divide_VectorVector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigUnit_Divide_VectorVector, 0x0048);
		}

		// struct FRigUnit_Subtract_VectorVector : public FRigUnit_BinaryVectorOp
		TEST_METHOD(ScriptStruct__ControlRig__RigUnit_Subtract_VectorVector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigUnit_Subtract_VectorVector, 0x0048);
		}

		// struct FRigUnit_Add_VectorVector : public FRigUnit_BinaryVectorOp
		TEST_METHOD(ScriptStruct__ControlRig__RigUnit_Add_VectorVector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigUnit_Add_VectorVector, 0x0048);
		}

		// struct FRigUnit_Multiply_VectorVector : public FRigUnit_BinaryVectorOp
		TEST_METHOD(ScriptStruct__ControlRig__RigUnit_Multiply_VectorVector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigUnit_Multiply_VectorVector, 0x0048);
		}

		// struct FBlendTarget
		TEST_METHOD(ScriptStruct__ControlRig__BlendTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendTarget, Transform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendTarget, Weight, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendTarget, UnknownData_9CD9, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendTarget, 0x0040);
		}

		// struct FRigUnit_BlendTransform : public FRigUnit
		TEST_METHOD(ScriptStruct__ControlRig__RigUnit_BlendTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_BlendTransform, Source, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_BlendTransform, Targets, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_BlendTransform, Result, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigUnit_BlendTransform, 0x0090);
		}

		// struct FRigUnit_Control : public FRigUnit
		TEST_METHOD(ScriptStruct__ControlRig__RigUnit_Control)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_Control, Transform, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_Control, UnknownData_Z348, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_Control, Base, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_Control, InitTransform, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_Control, Result, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_Control, Filter, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_Control, UnknownData_WX5O, 0x00E9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigUnit_Control, 0x00F0);
		}

		// struct FRigUnit_Control_StaticMesh : public FRigUnit_Control
		TEST_METHOD(ScriptStruct__ControlRig__RigUnit_Control_StaticMesh)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigUnit_Control_StaticMesh, 0x00F0);
		}

		// struct FRigUnit_ToSwingAndTwist : public FRigUnit
		TEST_METHOD(ScriptStruct__ControlRig__RigUnit_ToSwingAndTwist)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_ToSwingAndTwist, Input, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_ToSwingAndTwist, TwistAxis, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_ToSwingAndTwist, UnknownData_0909, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_ToSwingAndTwist, Swing, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_ToSwingAndTwist, Twist, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigUnit_ToSwingAndTwist, 0x0060);
		}

		// struct FRigUnit_ConvertQuaternionToVector : public FRigUnit
		TEST_METHOD(ScriptStruct__ControlRig__RigUnit_ConvertQuaternionToVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_ConvertQuaternionToVector, Input, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_ConvertQuaternionToVector, Result, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_ConvertQuaternionToVector, UnknownData_9Y06, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigUnit_ConvertQuaternionToVector, 0x0040);
		}

		// struct FRigUnit_ConvertRotationToVector : public FRigUnit
		TEST_METHOD(ScriptStruct__ControlRig__RigUnit_ConvertRotationToVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_ConvertRotationToVector, Input, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_ConvertRotationToVector, Result, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigUnit_ConvertRotationToVector, 0x0038);
		}

		// struct FRigUnit_ConvertVectorToQuaternion : public FRigUnit
		TEST_METHOD(ScriptStruct__ControlRig__RigUnit_ConvertVectorToQuaternion)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_ConvertVectorToQuaternion, Input, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_ConvertVectorToQuaternion, UnknownData_BFTO, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_ConvertVectorToQuaternion, Result, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigUnit_ConvertVectorToQuaternion, 0x0040);
		}

		// struct FRigUnit_ConvertVectorToRotation : public FRigUnit
		TEST_METHOD(ScriptStruct__ControlRig__RigUnit_ConvertVectorToRotation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_ConvertVectorToRotation, Input, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_ConvertVectorToRotation, Result, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigUnit_ConvertVectorToRotation, 0x0038);
		}

		// struct FRigUnit_ConvertQuaternion : public FRigUnit
		TEST_METHOD(ScriptStruct__ControlRig__RigUnit_ConvertQuaternion)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_ConvertQuaternion, Input, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_ConvertQuaternion, Result, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_ConvertQuaternion, UnknownData_4A2G, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigUnit_ConvertQuaternion, 0x0040);
		}

		// struct FRigUnit_ConvertRotation : public FRigUnit
		TEST_METHOD(ScriptStruct__ControlRig__RigUnit_ConvertRotation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_ConvertRotation, Input, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_ConvertRotation, UnknownData_ZGPX, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_ConvertRotation, Result, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigUnit_ConvertRotation, 0x0040);
		}

		// struct FRigUnit_ConvertEulerTransform : public FRigUnit
		TEST_METHOD(ScriptStruct__ControlRig__RigUnit_ConvertEulerTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_ConvertEulerTransform, Input, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_ConvertEulerTransform, UnknownData_AYHC, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_ConvertEulerTransform, Result, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigUnit_ConvertEulerTransform, 0x0080);
		}

		// struct FRigUnit_ConvertTransform : public FRigUnit
		TEST_METHOD(ScriptStruct__ControlRig__RigUnit_ConvertTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_ConvertTransform, Input, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_ConvertTransform, Result, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_ConvertTransform, UnknownData_6Z5P, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigUnit_ConvertTransform, 0x0080);
		}

		// struct FRigUnit_CreateHierarchy : public FRigUnit
		TEST_METHOD(ScriptStruct__ControlRig__RigUnit_CreateHierarchy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_CreateHierarchy, NewHierarchy, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_CreateHierarchy, SourceHierarchy, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_CreateHierarchy, Root, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigUnit_CreateHierarchy, 0x0058);
		}

		// struct FStructReference
		TEST_METHOD(ScriptStruct__ControlRig__StructReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructReference, UnknownData_J72I, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructReference, 0x0008);
		}

		// struct FRigUnitReference_Example : public FStructReference
		TEST_METHOD(ScriptStruct__ControlRig__RigUnitReference_Example)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigUnitReference_Example, 0x0008);
		}

		// struct FRigUnit_Example : public FRigUnit
		TEST_METHOD(ScriptStruct__ControlRig__RigUnit_Example)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_Example, TestInputString, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_Example, TestInOutTransform, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_Example, TestInputVector, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_Example, TestInputInteger, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_Example, UnknownData_FBRB, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_Example, TestInputObject, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_Example, TestOutputVector, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_Example, TestInputFloat, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_Example, TestInputFloatArray, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_Example, TestInputTransformArray, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_Example, HierarchyRef, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_Example, TestOutputFloat, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_Example, UnknownData_FJ2U, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_Example, TestUnitReferenceInput, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigUnit_Example, TestUnitReferenceOutput, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigUnit_Example, 0x00D0);
		}

		// struct FControlRigOperator
		TEST_METHOD(ScriptStruct__ControlRig__ControlRigOperator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FControlRigOperator, opCode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FControlRigOperator, UnknownData_VRO4, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FControlRigOperator, PropertyPath1, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FControlRigOperator, PropertyPath2, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FControlRigOperator, 0x0028);
		}

		// struct FConstraintNodeData
		TEST_METHOD(ScriptStruct__ControlRig__ConstraintNodeData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintNodeData, RelativeParent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintNodeData, ConstraintOffset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintNodeData, LinkedNode, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintNodeData, Constraints, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintNodeData, UnknownData_BH4V, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintNodeData, 0x00B0);
		}

		// struct FAnimationHierarchy : public FNodeHierarchyWithUserData
		TEST_METHOD(ScriptStruct__ControlRig__AnimationHierarchy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationHierarchy, UserData, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationHierarchy, 0x0088);
		}

		// struct FAnimNode_ControlRigBase : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__ControlRig__AnimNode_ControlRigBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ControlRigBase, RigHierarchyItemNameMapping, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ControlRigBase, NodeMappingContainer, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ControlRigBase, 0x0028);
		}

		// struct FAnimNode_ControlRig : public FAnimNode_ControlRigBase
		TEST_METHOD(ScriptStruct__ControlRig__AnimNode_ControlRig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ControlRig, Source, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ControlRig, ControlRigClass, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ControlRig, ControlRig, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ControlRig, 0x0048);
		}

		// struct FAnimNode_ControlRig_ExternalSource : public FAnimNode_ControlRigBase
		TEST_METHOD(ScriptStruct__ControlRig__AnimNode_ControlRig_ExternalSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ControlRig_ExternalSource, ControlRig, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ControlRig_ExternalSource, 0x0030);
		}

		// struct FControlRigBindingTemplate : public FMovieSceneSpawnSectionTemplate
		TEST_METHOD(ScriptStruct__ControlRig__ControlRigBindingTemplate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FControlRigBindingTemplate, 0x00B0);
		}

		// struct FControlRigComponentInstanceData : public FActorComponentInstanceData
		TEST_METHOD(ScriptStruct__ControlRig__ControlRigComponentInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FControlRigComponentInstanceData, AnimControlRig, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FControlRigComponentInstanceData, 0x0060);
		}

		// struct FControlRigSequenceObjectReference
		TEST_METHOD(ScriptStruct__ControlRig__ControlRigSequenceObjectReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FControlRigSequenceObjectReference, ControlRigClass, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FControlRigSequenceObjectReference, 0x0008);
		}

		// struct FControlRigSequenceObjectReferences
		TEST_METHOD(ScriptStruct__ControlRig__ControlRigSequenceObjectReferences)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FControlRigSequenceObjectReferences, Array, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FControlRigSequenceObjectReferences, 0x0010);
		}

		// struct FControlRigSequenceObjectReferenceMap
		TEST_METHOD(ScriptStruct__ControlRig__ControlRigSequenceObjectReferenceMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FControlRigSequenceObjectReferenceMap, BindingIds, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FControlRigSequenceObjectReferenceMap, References, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FControlRigSequenceObjectReferenceMap, 0x0020);
		}

		// struct FVaRestCallResponse
		TEST_METHOD(ScriptStruct__VaRestPlugin__VaRestCallResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVaRestCallResponse, Request, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVaRestCallResponse, WorldContextObject, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVaRestCallResponse, Callback, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVaRestCallResponse, UnknownData_U4YD, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVaRestCallResponse, 0x0030);
		}

		// struct FPaperFlipbookKeyFrame
		TEST_METHOD(ScriptStruct__Paper2D__PaperFlipbookKeyFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperFlipbookKeyFrame, Sprite, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperFlipbookKeyFrame, FrameRun, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperFlipbookKeyFrame, UnknownData_YMJP, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaperFlipbookKeyFrame, 0x0010);
		}

		// struct FSpriteInstanceData
		TEST_METHOD(ScriptStruct__Paper2D__SpriteInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteInstanceData, Transform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteInstanceData, SourceSprite, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteInstanceData, VertexColor, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteInstanceData, MaterialIndex, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpriteInstanceData, 0x0050);
		}

		// struct FPaperSpriteSocket
		TEST_METHOD(ScriptStruct__Paper2D__PaperSpriteSocket)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteSocket, LocalTransform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteSocket, SocketName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteSocket, UnknownData_29Y7, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaperSpriteSocket, 0x0040);
		}

		// struct FPaperTerrainMaterialRule
		TEST_METHOD(ScriptStruct__Paper2D__PaperTerrainMaterialRule)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, StartCap, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, Body, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, EndCap, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, MinimumAngle, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, MaximumAngle, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, bEnableCollision, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, UnknownData_QA04, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, CollisionOffset, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, DrawOrder, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, UnknownData_J9UO, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaperTerrainMaterialRule, 0x0038);
		}

		// struct FPaperTileInfo
		TEST_METHOD(ScriptStruct__Paper2D__PaperTileInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileInfo, TileSet, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileInfo, PackedTileIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileInfo, UnknownData_MGX6, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaperTileInfo, 0x0010);
		}

		// struct FIntMargin
		TEST_METHOD(ScriptStruct__Paper2D__IntMargin)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntMargin, Left, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntMargin, Top, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntMargin, Right, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntMargin, Bottom, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntMargin, 0x0010);
		}

		// struct FSpriteGeometryShape
		TEST_METHOD(ScriptStruct__Paper2D__SpriteGeometryShape)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, ShapeType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, UnknownData_WCQI, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, Vertices, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, BoxSize, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, BoxPosition, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, Rotation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, bNegativeWinding, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, UnknownData_QX7I, 0x002D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpriteGeometryShape, 0x0030);
		}

		// struct FSpriteGeometryCollection
		TEST_METHOD(ScriptStruct__Paper2D__SpriteGeometryCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, Shapes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, GeometryType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, UnknownData_6LL7, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, PixelsPerSubdivisionX, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, PixelsPerSubdivisionY, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, bAvoidVertexMerging, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, UnknownData_3RLG, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, AlphaThreshold, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, DetailAmount, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, SimplifyEpsilon, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, UnknownData_X2HI, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpriteGeometryCollection, 0x0030);
		}

		// struct FPaperTileMetadata
		TEST_METHOD(ScriptStruct__Paper2D__PaperTileMetadata)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileMetadata, UserDataName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileMetadata, CollisionData, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileMetadata, TerrainMembership, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileMetadata, UnknownData_YCHB, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaperTileMetadata, 0x0040);
		}

		// struct FPaperTileSetTerrain
		TEST_METHOD(ScriptStruct__Paper2D__PaperTileSetTerrain)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileSetTerrain, TerrainName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileSetTerrain, CenterTileIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileSetTerrain, UnknownData_6NFX, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaperTileSetTerrain, 0x0018);
		}

		// struct FPaperSpriteAtlasSlot
		TEST_METHOD(ScriptStruct__Paper2D__PaperSpriteAtlasSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteAtlasSlot, SpriteRef, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteAtlasSlot, AtlasIndex, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteAtlasSlot, X, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteAtlasSlot, Y, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteAtlasSlot, Width, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteAtlasSlot, Height, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteAtlasSlot, UnknownData_5T74, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaperSpriteAtlasSlot, 0x0040);
		}

		// struct FSpriteDrawCallRecord
		TEST_METHOD(ScriptStruct__Paper2D__SpriteDrawCallRecord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteDrawCallRecord, Destination, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteDrawCallRecord, UnknownData_6P3S, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteDrawCallRecord, BaseTexture, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteDrawCallRecord, UnknownData_3870, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteDrawCallRecord, Color, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteDrawCallRecord, UnknownData_93NW, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpriteDrawCallRecord, 0x00D0);
		}

		// struct FSpriteAssetInitParameters
		TEST_METHOD(ScriptStruct__Paper2D__SpriteAssetInitParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteAssetInitParameters, UnknownData_4G92, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpriteAssetInitParameters, 0x0040);
		}

		// struct FActorSequenceObjectReference
		TEST_METHOD(ScriptStruct__ActorSequence__ActorSequenceObjectReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReference, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReference, UnknownData_UYIY, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReference, ActorId, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReference, UnknownData_ZVCW, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReference, PathToComponent, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorSequenceObjectReference, 0x0028);
		}

		// struct FActorSequenceObjectReferences
		TEST_METHOD(ScriptStruct__ActorSequence__ActorSequenceObjectReferences)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReferences, Array, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorSequenceObjectReferences, 0x0010);
		}

		// struct FActorSequenceObjectReferenceMap
		TEST_METHOD(ScriptStruct__ActorSequence__ActorSequenceObjectReferenceMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReferenceMap, BindingIds, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReferenceMap, References, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorSequenceObjectReferenceMap, 0x0020);
		}

		// struct FAutoCompleteCommand
		TEST_METHOD(ScriptStruct__EngineSettings__AutoCompleteCommand)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteCommand, Command, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteCommand, Desc, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteCommand, UnknownData_LIC3, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutoCompleteCommand, 0x0028);
		}

		// struct FGameModeName
		TEST_METHOD(ScriptStruct__EngineSettings__GameModeName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameModeName, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameModeName, GameMode, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameModeName, 0x0028);
		}

		// struct FSoundVariation
		TEST_METHOD(ScriptStruct__SoundUtilities__SoundVariation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundVariation, SoundWave, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundVariation, ProbabilityWeight, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundVariation, VolumeRange, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundVariation, PitchRange, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundVariation, UnknownData_4ZUA, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundVariation, 0x0020);
		}

		// struct FAssetEditorRequestOpenAsset
		TEST_METHOD(ScriptStruct__UnrealEdMessages__AssetEditorRequestOpenAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorRequestOpenAsset, AssetName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetEditorRequestOpenAsset, 0x0010);
		}

		// struct FFileServerReady
		TEST_METHOD(ScriptStruct__UnrealEdMessages__FileServerReady)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileServerReady, AddressList, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileServerReady, instanceId, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFileServerReady, 0x0020);
		}

		// struct FCustomMeshTriangle
		TEST_METHOD(ScriptStruct__CustomMeshComponent__CustomMeshTriangle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomMeshTriangle, Vertex0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomMeshTriangle, Vertex1, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomMeshTriangle, Vertex2, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomMeshTriangle, 0x0024);
		}

		// struct FS_WeaponAnimation
		TEST_METHOD(UserDefinedStruct__S_WeaponAnimation__S_WeaponAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_WeaponAnimation, DefualtAnimation_4_CB7B4E19450350FEDEABCA9CB12F5BDF, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_WeaponAnimation, PairAnimation_6_7CFB3B8A412A2A74925CE6BD1C5B4A46, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_WeaponAnimation, 0x0018);
		}

		// struct FS_FootStepHunter
		TEST_METHOD(UserDefinedStruct__S_FootStepHunter__S_FootStepHunter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_FootStepHunter, PhysicalMaterial_2_A2FFFBF44D8988103113C3979D633E72, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_FootStepHunter, Sound_Move_13_2FDB26CB483B9ED15DB32CB08B0089FF, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_FootStepHunter, 0x0010);
		}

		// struct FS_LootDrop
		TEST_METHOD(UserDefinedStruct__S_LootDrop__S_LootDrop)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_LootDrop, Type_2_9F9E0F9948CE05652ED7F6A4FD1208D4, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_LootDrop, AssetID_5_71E74F384632924BD886A3BADF444DEC, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_LootDrop, Index_9_D00056E242E13509F3AB628FCEBD1BC2, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_LootDrop, UnknownData_S750, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_LootDrop, Name_11_B5F0E9B9473697147E6B18A6225D3B83, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_LootDrop, Amount_14_F57CA3784B786B03AAC0288B5F431716, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_LootDrop, bIsNewItem_20_7885C39A451BE6A45501A38EE3AB16A3, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_LootDrop, UnknownData_S9SX, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_LootDrop, Currency_17_36B4E9EC4C8A8AFC0F7EC5BE46FC0FB2, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_LootDrop, Rarity_18_687A0F904FFA649EE570958F12B0C000, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_LootDrop, 0x0048);
		}

		// struct FS_IsProgress
		TEST_METHOD(UserDefinedStruct__S_IsProgress__S_IsProgress)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_IsProgress, bIsProgress_2_2FB81DB847685C24E9F6E79F10E1B02B, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_IsProgress, bIsLockCamera_3_62E244AA46F186586F96DAABDA1C1665, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_IsProgress, UnknownData_HHRF, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_IsProgress, InteractLocation_7_86F74003402C9FDD47B252A46282D5B8, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_IsProgress, 0x0040);
		}

		// struct FS_PlayerLobby
		TEST_METHOD(UserDefinedStruct__S_PlayerLobby__S_PlayerLobby)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_PlayerLobby, PlayerID_4_9D80046847CD593283318A999847C62F, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_PlayerLobby, UnknownData_8YVT, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_PlayerLobby, PlayerInfo_5_51BBCD964988D1C25E47A4AEC0E9132A, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_PlayerLobby, 0x0118);
		}

		// struct FS_RandomPattern
		TEST_METHOD(UserDefinedStruct__S_RandomPattern__S_RandomPattern)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_RandomPattern, Name_11_615C0BC54CBD888A847EE4A7D3F17191, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_RandomPattern, Pattern_7_C24FBB424D5C97D4796AAA8F2408EB48, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_RandomPattern, 0x0020);
		}

		// struct FS_SurvivorSlot
		TEST_METHOD(UserDefinedStruct__S_SurvivorSlot__S_SurvivorSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_SurvivorSlot, Character_17_1B57D7B14DA286A19CECF989EFCC69B4, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_SurvivorSlot, PerkPassiveSlot_1_23_445C95EA42FAA332C6D5CC8F997D9D7E, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_SurvivorSlot, PerkPassiveSlot_2_25_5D48735B45EE83F7FDA5EDBF1A390816, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_SurvivorSlot, PerkPassiveSlot_3_28_11A806324ECD3976F013488CB656712B, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_SurvivorSlot, Cosmetic_Hat_19_32B297A24FE91637253EB9B72BE3235B, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_SurvivorSlot, Cosmetic_Cloth_31_FA23005942BAE9C2FE7F748F87F68596, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_SurvivorSlot, Cosmetic_Backed_36_F33E635E411717EB81BB1885AA267EAB, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_SurvivorSlot, Item_29_7E5FD5AE4447C43E0C82EBA86B5DCD12, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_SurvivorSlot, 0x0080);
		}

		// struct FS_TutorialEvent
		TEST_METHOD(UserDefinedStruct__S_TutorialEvent__S_TutorialEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_TutorialEvent, Action_13_1486B6F44757D799DD6AE7BE4F551BF0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_TutorialEvent, Data_6_ED6DCEFC4DC606A30B1E6595765B9B73, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_TutorialEvent, ForceShow_10_9B3533F34C4EA47814CE6D953115F7FB, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_TutorialEvent, CanRepeatedly_17_CCEE204145FB0AEAC3D820964790670A, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_TutorialEvent, bIsDeprecate_19_601FADE04BCFE240E6D4E6914C109073, 0x0022);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_TutorialEvent, 0x0023);
		}

		// struct FS_StoreProduct
		TEST_METHOD(UserDefinedStruct__S_StoreProduct__S_StoreProduct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_StoreProduct, ProductName_2_773C1026455B7626A498BF9ECC09137A, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_StoreProduct, Shotcode_23_CA9DE30D4361CABB99B4DAB8EEA29FD9, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_StoreProduct, BasePrice_53_4EB5DDDA467BBC30128644BF7142B50A, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_StoreProduct, Price_11_4BD7BAB44D42E84F67F74A813242552A, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_StoreProduct, Current_19_0B457FB04241207550688E98E0B569E7, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_StoreProduct, MaxQuantity_49_63E4F50D491EDFFEA95F83951D1174AF, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_StoreProduct, Tags_32_CB6F66B8433C8A6A5E20C0952617972B, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_StoreProduct, ItemType_36_91905FC648DE8B96B416D6ADB6177EAC, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_StoreProduct, LevelCap_41_3689715F400EC97676083DAAF4C0286C, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_StoreProduct, UnknownData_5QJQ, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_StoreProduct, SteamProductID_44_D856667242250AECE80DF5908316C7C2, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_StoreProduct, AndroidProductID_47_8DE4B0DB417C9B6929F5829D7BE2111F, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_StoreProduct, IOSProductID_48_B665C85E41D25F4839A3CFB030161BA8, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_StoreProduct, 0x00A0);
		}

		// struct FS_ItemInventory
		TEST_METHOD(UserDefinedStruct__S_ItemInventory__S_ItemInventory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_ItemInventory, ItemName_6_97998A8D41B86075A7A5B0843ADCC52B, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_ItemInventory, AssetID_9_F502F16A49AB4F7759280AA75757B98D, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_ItemInventory, Product_17_E367F3AE4A076E4B6E5487AAE8D3CC1A, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_ItemInventory, Current_12_68F918434327CBAC7EF2419678521607, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_ItemInventory, IsOwned_14_99F3DF52486656F4D490CEB9D158E38A, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_ItemInventory, IsEquipped_19_9F59693644C8831E420A08801D95F534, 0x00CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_ItemInventory, UnknownData_160B, 0x00CE);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_ItemInventory, PerkSlot_22_DECFADD3406E74E3ECD001808528E72D, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_ItemInventory, IsPreviewing_24_93D3770A4D48E5164EADC2BAEE086223, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_ItemInventory, 0x00D5);
		}

		// struct FCaptureResolution
		TEST_METHOD(ScriptStruct__MovieSceneCapture__CaptureResolution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCaptureResolution, ResX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCaptureResolution, ResY, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCaptureResolution, 0x0008);
		}

		// struct FMovieSceneCaptureSettings
		TEST_METHOD(ScriptStruct__MovieSceneCapture__MovieSceneCaptureSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, OutputDirectory, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, GameModeOverride, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, OutputFormat, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bOverwriteExisting, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bUseRelativeFrameNumbers, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, UnknownData_VEIN, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, HandleFrames, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, MovieExtension, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, ZeroPadFrameNumbers, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, UnknownData_52OP, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, FrameRate, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, Resolution, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bEnableTextureStreaming, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bCinematicEngineScalability, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bCinematicMode, 0x0056);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bAllowMovement, 0x0057);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bAllowTurning, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bShowPlayer, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bShowHUD, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bUsePathTracer, 0x005B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, PathTracerSamplePerPixel, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCaptureSettings, 0x0060);
		}

		// struct FCapturedPixels
		TEST_METHOD(ScriptStruct__MovieSceneCapture__CapturedPixels)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCapturedPixels, UnknownData_4K1B, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCapturedPixels, 0x0010);
		}

		// struct FCapturedPixelsID
		TEST_METHOD(ScriptStruct__MovieSceneCapture__CapturedPixelsID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCapturedPixelsID, Identifiers, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCapturedPixelsID, 0x0050);
		}

		// struct FCompositionGraphCapturePasses
		TEST_METHOD(ScriptStruct__MovieSceneCapture__CompositionGraphCapturePasses)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositionGraphCapturePasses, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompositionGraphCapturePasses, 0x0010);
		}

		// struct FFrameMetrics
		TEST_METHOD(ScriptStruct__MovieSceneCapture__FrameMetrics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameMetrics, TotalElapsedTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameMetrics, FrameDelta, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameMetrics, FrameNumber, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameMetrics, NumDroppedFrames, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFrameMetrics, 0x0010);
		}

		// struct FGeometryCacheMeshData
		TEST_METHOD(ScriptStruct__GeometryCache__GeometryCacheMeshData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCacheMeshData, UnknownData_PVTZ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCacheMeshData, 0x00A8);
		}

		// struct FTrackRenderData
		TEST_METHOD(ScriptStruct__GeometryCache__TrackRenderData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackRenderData, UnknownData_NAR9, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTrackRenderData, 0x0070);
		}

		// struct FGeometryCacheVertexInfo
		TEST_METHOD(ScriptStruct__GeometryCache__GeometryCacheVertexInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCacheVertexInfo, UnknownData_O6IL, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCacheVertexInfo, 0x0008);
		}

		// struct FGeometryCacheMeshBatchInfo
		TEST_METHOD(ScriptStruct__GeometryCache__GeometryCacheMeshBatchInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCacheMeshBatchInfo, UnknownData_FW82, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCacheMeshBatchInfo, 0x000C);
		}

		// struct FS_CollisionMovement
		TEST_METHOD(UserDefinedStruct__S_CollisionMovement__S_CollisionMovement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_CollisionMovement, Collision_6_3048388D447A975E55E79CA5F0718652, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_CollisionMovement, MovementMode_5_9300146C45327BE53B1B86B1F8869754, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_CollisionMovement, 0x0002);
		}

		// struct FArrayOfActor
		TEST_METHOD(UserDefinedStruct__ArrayOfActor__ArrayOfActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FArrayOfActor, List_3_AF8C3D384AAA7BF7E4153B93A13BFF35, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FArrayOfActor, 0x0010);
		}

		// struct FS_OptionControl
		TEST_METHOD(UserDefinedStruct__S_OptionControl__S_OptionControl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_OptionControl, Sensitivity_91_215800B54E80A607E3CB548977E00DFF, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_OptionControl, ToggleSprint_94_BA3DEA8D4C0E52F26862CC859EE6BFF7, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_OptionControl, ToggleCounch_97_EEFE5C45475C3FC7D0D22B8A61C0374C, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_OptionControl, UnknownData_IPVF, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_OptionControl, SurvivorKeyNames_87_6A3757A54CF12B7E06E2C7B08171904D, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_OptionControl, HunterKeyNames_88_72599D99469E52E94DB838BAC4877262, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_OptionControl, addforRecomplierOnly_101_D339EC3443B8F38EBEBD10A5FA9D8190, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_OptionControl, UnknownData_UF5V, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_OptionControl, SkillcheckType_104_F65AAA6E4D0CF27CDC1F79A7FF3DBD1A, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_OptionControl, 0x0030);
		}

		// struct FS_GameStatisticGlobal
		TEST_METHOD(UserDefinedStruct__S_GameStatisticGlobal__S_GameStatisticGlobal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_GameStatisticGlobal, ItemsUsed_16_B3144A6A4F992F1C81909AA1C355A7A4, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_GameStatisticGlobal, ItemsSuccess_17_38ECAAF8479A3D6B73AE4EAA525F8C62, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_GameStatisticGlobal, ItemsEmpty_30_7F76044A4751BF1EAD3F8BAA1B837258, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_GameStatisticGlobal, CarryItem_42_ED5FCFD04E5D45A1521653BD38F20C69, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_GameStatisticGlobal, PingEnemyCount_20_024C649E4A6441EFD62BDB976704F121, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_GameStatisticGlobal, OpenChestCount_34_455259694953152D07D8C58DFCA8ACED, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_GameStatisticGlobal, ReviveCount_37_AB45317C426105C95BF59986F8998BE4, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_GameStatisticGlobal, CloseEnemyTime_23_F09A451B43A91869301BEA953C3FCF6F, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_GameStatisticGlobal, FullHPTime_25_531C698545489EAF89ED1195B6CEDA33, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_GameStatisticGlobal, RitualComplete_45_6A0486E14811F2E8CA4F2997C9045806, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_GameStatisticGlobal, 0x005C);
		}

		// struct FS_AiInfo
		TEST_METHOD(UserDefinedStruct__S_AIInfo__S_AiInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_AiInfo, CharacterHunter_10_6E99EDBC4EEA0DF6EC0E2489A6DB5ED5, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_AiInfo, CharacterSurvivor_12_7D1AD2AF4F42B26E852C099BF173DE53, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_AiInfo, UnknownData_KD5E, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_AiInfo, PlayerInfo_8_A5F985B04EC719B457EFE3893C1187C4, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_AiInfo, 0x0118);
		}

		// struct FS_StickerAssets
		TEST_METHOD(UserDefinedStruct__S_StickerAssets__S_StickerAssets)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_StickerAssets, StickerAssets_6_41A8F1C94BDDEAC25609A9BE760C1C6C, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_StickerAssets, 0x0010);
		}

		// struct FMapStruct
		TEST_METHOD(UserDefinedStruct__MapStruct__MapStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapStruct, MapName_3_C9E9AEA34FD5A8F160806EBDDC53A4B4, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapStruct, MapSubLevel_14_5940B580454AFA1839B9A88759A55556, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapStruct, MapImage_8_314045C64CB436108270D397A571046A, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMapStruct, 0x0028);
		}

		// struct FS_RandomList
		TEST_METHOD(UserDefinedStruct__S_RandomList__S_RandomList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_RandomList, ActorList_6_A1383B184F016456C339388EB6663157, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_RandomList, Count_3_A5D06A4146C5287EEBC6EE9ABBC134B6, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_RandomList, 0x0014);
		}

		// struct FS_ServerRegion
		TEST_METHOD(UserDefinedStruct__S_ServerRegion__S_ServerRegion)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_ServerRegion, TableIndex_12_B8CA6AFC4FEE7D9C9C68A0A4C95C77AC, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_ServerRegion, UnknownData_DEEC, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_ServerRegion, RegionName_3_9877ECD54315FAA49EB9A4A696512BC2, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_ServerRegion, RegionCode_6_60142DE64294FB2CC01A8AB28300E2E4, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_ServerRegion, 0x0030);
		}

		// struct FS_PrimaryAssetsIDCount
		TEST_METHOD(UserDefinedStruct__S_PrimaryAssetsIDCount__S_PrimaryAssetsIDCount)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_PrimaryAssetsIDCount, PrimaryAssetID_8_F35DB31C42DC4FD88F2FA4AF3597F111, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_PrimaryAssetsIDCount, Count_7_FC01C84E4287992608428C81ABCED809, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_PrimaryAssetsIDCount, 0x0014);
		}

		// struct FS_AnimationGender
		TEST_METHOD(UserDefinedStruct__S_AnimationGender__S_AnimationGender)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_AnimationGender, MaleMontage_8_9C0CA4FC452F4F5E9F1FF68795795832, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_AnimationGender, FemaleMontage_10_FF1C077348A072F3DB4B508E7458154E, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_AnimationGender, 0x0010);
		}

		// struct FS_HunterSlot
		TEST_METHOD(UserDefinedStruct__S_HunterSlot__S_HunterSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_HunterSlot, Character_17_1B57D7B14DA286A19CECF989EFCC69B4, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_HunterSlot, PerkPassiveSlot_1_22_445C95EA42FAA332C6D5CC8F997D9D7E, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_HunterSlot, PerkPassiveSlot_2_25_A6C9A5974D076DA366D3C58B03B46FD2, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_HunterSlot, Cosmetic_Hat_19_32B297A24FE91637253EB9B72BE3235B, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_HunterSlot, Cosmetic_Cloth_30_FA23005942BAE9C2FE7F748F87F68596, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_HunterSlot, Cosmetic_Backed_29_3D59A38545E6D3CE265A9C913FE907BB, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_HunterSlot, Cosmetic_Weapon_21_7E5FD5AE4447C43E0C82EBA86B5DCD12, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_HunterSlot, 0x0070);
		}

		// struct FS_EndGameResult
		TEST_METHOD(UserDefinedStruct__S_EndGameResult__S_EndGameResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_EndGameResult, SurvivorExitPortals_15_C5BF225A4EBABA4A898AF39DF29615C0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_EndGameResult, SurvivorDeaths_14_EE1B15AB4B8E790790A781BC1FCFC3C8, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_EndGameResult, SurvivorSouls_13_789018A14556B4C95B164F9685AB37EE, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_EndGameResult, bIsHunterDeath_6_9F963FBC4CA714C9B321C982A631FEF6, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_EndGameResult, bIsTimeOut_8_763C8EE5466095051574F39DCAFF7FC9, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_EndGameResult, bIsExitPortal_18_216A40604813B2B1B21419BFC8388627, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_EndGameResult, bIsCustomMatch_20_41DEFD7F4D344D97DEA5E3A8DDB84DB1, 0x000F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_EndGameResult, PlayerExitPortals_25_4032C54943271DB1261045A88399B83F, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_EndGameResult, 0x0020);
		}

		// struct FS_FootStepSurvivor
		TEST_METHOD(UserDefinedStruct__S_FootStepSurvivor__S_FootStepSurvivor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_FootStepSurvivor, PhysicalMaterial_2_A2FFFBF44D8988103113C3979D633E72, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_FootStepSurvivor, Sound_Run_8_2FDB26CB483B9ED15DB32CB08B0089FF, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_FootStepSurvivor, Sound_Walk_9_A008C6D04FB6AA47F597849053AF94C6, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_FootStepSurvivor, Sound_Crouch_12_8848644F47290DBED5BED18E1995BD76, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_FootStepSurvivor, 0x0020);
		}

		// struct FMaterialQualityOverrides
		TEST_METHOD(ScriptStruct__MaterialShaderQualitySettings__MaterialQualityOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bDiscardQualityDuringCook, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bEnableOverride, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bForceFullyRough, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bForceNonMetal, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bForceDisableLMDirectionality, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bForceLQReflections, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bDisableMaterialNormalCalculation, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, MobileCSMQuality, 0x0007);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialQualityOverrides, 0x0008);
		}

		// struct FGameplayDebuggerInputConfig
		TEST_METHOD(ScriptStruct__GameplayDebugger__GameplayDebuggerInputConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayDebuggerInputConfig, ConfigName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayDebuggerInputConfig, Key, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayDebuggerInputConfig, UnknownData_F3E9, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayDebuggerInputConfig, 0x0030);
		}

		// struct FGameplayDebuggerCategoryConfig
		TEST_METHOD(ScriptStruct__GameplayDebugger__GameplayDebuggerCategoryConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayDebuggerCategoryConfig, CategoryName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayDebuggerCategoryConfig, SlotIdx, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayDebuggerCategoryConfig, ActiveInGame, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayDebuggerCategoryConfig, ActiveInSimulate, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayDebuggerCategoryConfig, Hidden, 0x0016);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayDebuggerCategoryConfig, UnknownData_BD71, 0x0017);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayDebuggerCategoryConfig, UnknownData_VR2M, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayDebuggerCategoryConfig, InputHandlers, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayDebuggerCategoryConfig, 0x0030);
		}

		// struct FGameplayDebuggerNetPack
		TEST_METHOD(ScriptStruct__GameplayDebugger__GameplayDebuggerNetPack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayDebuggerNetPack, UnknownData_SBSZ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayDebuggerNetPack, 0x0018);
		}

		// struct FGameplayDebuggerDebugActor
		TEST_METHOD(ScriptStruct__GameplayDebugger__GameplayDebuggerDebugActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayDebuggerDebugActor, Actor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayDebuggerDebugActor, ActorName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayDebuggerDebugActor, SyncCounter, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayDebuggerDebugActor, UnknownData_AHXC, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayDebuggerDebugActor, 0x0018);
		}

		// struct FGameplayDebuggerExtensionConfig
		TEST_METHOD(ScriptStruct__GameplayDebugger__GameplayDebuggerExtensionConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayDebuggerExtensionConfig, ExtensionName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayDebuggerExtensionConfig, UseExtension, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayDebuggerExtensionConfig, UnknownData_8VFZ, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayDebuggerExtensionConfig, InputHandlers, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayDebuggerExtensionConfig, 0x0028);
		}

		// struct FGameplayDebuggerPlayerData
		TEST_METHOD(ScriptStruct__GameplayDebugger__GameplayDebuggerPlayerData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayDebuggerPlayerData, Controller, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayDebuggerPlayerData, InputComponent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayDebuggerPlayerData, Replicator, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayDebuggerPlayerData, 0x0018);
		}

		// struct FWidgetSnapshotResponse
		TEST_METHOD(ScriptStruct__SlateReflector__WidgetSnapshotResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetSnapshotResponse, SnapshotRequestId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetSnapshotResponse, SnapshotData, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWidgetSnapshotResponse, 0x0020);
		}

		// struct FWidgetSnapshotRequest
		TEST_METHOD(ScriptStruct__SlateReflector__WidgetSnapshotRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetSnapshotRequest, TargetInstanceId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetSnapshotRequest, SnapshotRequestId, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWidgetSnapshotRequest, 0x0020);
		}

		// struct FS_Activity
		TEST_METHOD(UserDefinedStruct__S_Activity__S_Activity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_Activity, rowname_15_AD09953D471C4901CF67D7954F5A1D16, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_Activity, name_6_2EF00E1042DB0C8C3297968998965EAC, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_Activity, score_7_4FDA2937444DB2CC5B3147B553D4B17C, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_Activity, coin_8_69D5C966477D1E545A51C1B609624E8D, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_Activity, exp_11_A6639D9A41890A3170F5F1B9582B010B, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_Activity, 0x0024);
		}

		// struct FS_PlayerRecordSurvivor
		TEST_METHOD(UserDefinedStruct__S_PlayerRecordSurvivor__S_PlayerRecordSurvivor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_PlayerRecordSurvivor, MatchPlayed_5_70073DE940CF283EE681DF9387DEDD20, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_PlayerRecordSurvivor, Score_6_911788F84DDC0B382AC202A322E0A4BF, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_PlayerRecordSurvivor, Eliminate_12_D04DAE11401BA9B8269C6687C048A468, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_PlayerRecordSurvivor, Escape_15_ACC7667146A7F882F9D943BAE4AC5900, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_PlayerRecordSurvivor, 0x0010);
		}

		// struct FStruct_DestructAnimation
		TEST_METHOD(UserDefinedStruct__Struct_DestructAnimation__Struct_DestructAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStruct_DestructAnimation, DestructSkeletalMesh_2_9654D2C243D89FB38F359C862F0B8DDE, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStruct_DestructAnimation, DestructAnimation_5_B6F34542438B2A5E57E45C87467B9246, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStruct_DestructAnimation, PlayRate_8_8E1DC07C40A8566DF7396D819606AE22, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStruct_DestructAnimation, InitialPosition_10_71199B0148D62E57A3055ABC90A40D3A, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStruct_DestructAnimation, 0x0018);
		}

		// struct FS_ApplyStatusWidget
		TEST_METHOD(UserDefinedStruct__S_ApplyStatusWidget__S_ApplyStatusWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_ApplyStatusWidget, Name_4_B0A5B61746E096E21F3AE9B7D6D73D66, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_ApplyStatusWidget, Widget_21_2B12B2B9493862BE67E8E1AE8B76A6A8, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_ApplyStatusWidget, Player_Immune_24_2C3F3939472D66DD7761178AB8940457, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_ApplyStatusWidget, 0x0011);
		}

		// struct FS_AnimationWithPair
		TEST_METHOD(UserDefinedStruct__S_AnimationWithPair__S_AnimationWithPair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_AnimationWithPair, AnimMontage_6_8F56727A46A046D7B41245B518D22256, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_AnimationWithPair, PairAnimation_7_9D2E873F41860C371BDE00B5A40056DC, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_AnimationWithPair, 0x0018);
		}

		// struct FS_PlayerRecordHunter
		TEST_METHOD(UserDefinedStruct__S_PlayerRecordHunter__S_PlayerRecordHunter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_PlayerRecordHunter, MatchPlayed_5_70073DE940CF283EE681DF9387DEDD20, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_PlayerRecordHunter, Score_6_911788F84DDC0B382AC202A322E0A4BF, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_PlayerRecordHunter, Eliminate_17_A93E089B4824C2FD2DB90DAE31A58F7F, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_PlayerRecordHunter, Souls_14_D04DAE11401BA9B8269C6687C048A468, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_PlayerRecordHunter, 0x0010);
		}

		// struct FAutomationWorkerStopTests
		TEST_METHOD(ScriptStruct__AutomationMessages__AutomationWorkerStopTests)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationWorkerStopTests, UnknownData_XG3H, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutomationWorkerStopTests, 0x0001);
		}

		// struct FAutomationWorkerResetTests
		TEST_METHOD(ScriptStruct__AutomationMessages__AutomationWorkerResetTests)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationWorkerResetTests, UnknownData_NV56, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutomationWorkerResetTests, 0x0001);
		}

		// struct FAutomationWorkerPing
		TEST_METHOD(ScriptStruct__AutomationMessages__AutomationWorkerPing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationWorkerPing, UnknownData_Y6R3, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutomationWorkerPing, 0x0001);
		}

		// struct FAutomationWorkerWorkerOffline
		TEST_METHOD(ScriptStruct__AutomationMessages__AutomationWorkerWorkerOffline)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationWorkerWorkerOffline, UnknownData_NC1K, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutomationWorkerWorkerOffline, 0x0001);
		}

		// struct FAutomationWorkerFindWorkersResponse
		TEST_METHOD(ScriptStruct__AutomationMessages__AutomationWorkerFindWorkersResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationWorkerFindWorkersResponse, DeviceName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationWorkerFindWorkersResponse, InstanceName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationWorkerFindWorkersResponse, Platform, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationWorkerFindWorkersResponse, OSVersionName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationWorkerFindWorkersResponse, ModelName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationWorkerFindWorkersResponse, GPUName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationWorkerFindWorkersResponse, CPUModelName, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationWorkerFindWorkersResponse, RAMInGB, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationWorkerFindWorkersResponse, UnknownData_SJVA, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationWorkerFindWorkersResponse, RenderModeName, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationWorkerFindWorkersResponse, SessionId, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutomationWorkerFindWorkersResponse, 0x0098);
		}

		// struct FAutomationWorkerFindWorkers
		TEST_METHOD(ScriptStruct__AutomationMessages__AutomationWorkerFindWorkers)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationWorkerFindWorkers, Changelist, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationWorkerFindWorkers, UnknownData_MQXV, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationWorkerFindWorkers, GameName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationWorkerFindWorkers, ProcessName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationWorkerFindWorkers, SessionId, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutomationWorkerFindWorkers, 0x0038);
		}

		// struct FAutomationScreenshotMetadata
		TEST_METHOD(ScriptStruct__AutomationMessages__AutomationScreenshotMetadata)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationScreenshotMetadata, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationScreenshotMetadata, Context, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationScreenshotMetadata, Notes, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationScreenshotMetadata, ID, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationScreenshotMetadata, Commit, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationScreenshotMetadata, Width, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationScreenshotMetadata, Height, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationScreenshotMetadata, RHI, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationScreenshotMetadata, Platform, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationScreenshotMetadata, FeatureLevel, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationScreenshotMetadata, bIsStereo, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationScreenshotMetadata, UnknownData_3B93, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationScreenshotMetadata, Vendor, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationScreenshotMetadata, AdapterName, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationScreenshotMetadata, AdapterInternalDriverVersion, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationScreenshotMetadata, AdapterUserDriverVersion, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationScreenshotMetadata, UniqueDeviceId, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationScreenshotMetadata, ResolutionQuality, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationScreenshotMetadata, ViewDistanceQuality, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationScreenshotMetadata, AntiAliasingQuality, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationScreenshotMetadata, ShadowQuality, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationScreenshotMetadata, PostProcessQuality, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationScreenshotMetadata, TextureQuality, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationScreenshotMetadata, EffectsQuality, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationScreenshotMetadata, FoliageQuality, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationScreenshotMetadata, bHasComparisonRules, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationScreenshotMetadata, ToleranceRed, 0x0101);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationScreenshotMetadata, ToleranceGreen, 0x0102);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationScreenshotMetadata, ToleranceBlue, 0x0103);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationScreenshotMetadata, ToleranceAlpha, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationScreenshotMetadata, ToleranceMinBrightness, 0x0105);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationScreenshotMetadata, ToleranceMaxBrightness, 0x0106);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationScreenshotMetadata, UnknownData_RGX7, 0x0107);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationScreenshotMetadata, MaximumLocalError, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationScreenshotMetadata, MaximumGlobalError, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationScreenshotMetadata, bIgnoreAntiAliasing, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationScreenshotMetadata, bIgnoreColors, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationScreenshotMetadata, UnknownData_OHIL, 0x0112);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutomationScreenshotMetadata, 0x0118);
		}

		// struct FAutomationWorkerScreenImage
		TEST_METHOD(ScriptStruct__AutomationMessages__AutomationWorkerScreenImage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationWorkerScreenImage, ScreenImage, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationWorkerScreenImage, ScreenShotName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationWorkerScreenImage, MetaData, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutomationWorkerScreenImage, 0x0138);
		}

		// struct FAutomationWorkerNextNetworkCommandReply
		TEST_METHOD(ScriptStruct__AutomationMessages__AutomationWorkerNextNetworkCommandReply)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationWorkerNextNetworkCommandReply, UnknownData_UT7H, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutomationWorkerNextNetworkCommandReply, 0x0001);
		}

		// struct FAutomationWorkerRequestNextNetworkCommand
		TEST_METHOD(ScriptStruct__AutomationMessages__AutomationWorkerRequestNextNetworkCommand)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationWorkerRequestNextNetworkCommand, ExecutionCount, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutomationWorkerRequestNextNetworkCommand, 0x0004);
		}

		// struct FAutomationWorkerRunTestsReply
		TEST_METHOD(ScriptStruct__AutomationMessages__AutomationWorkerRunTestsReply)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationWorkerRunTestsReply, TestName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationWorkerRunTestsReply, Entries, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationWorkerRunTestsReply, WarningTotal, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationWorkerRunTestsReply, ErrorTotal, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationWorkerRunTestsReply, Duration, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationWorkerRunTestsReply, ExecutionCount, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationWorkerRunTestsReply, Success, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationWorkerRunTestsReply, UnknownData_0HEU, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutomationWorkerRunTestsReply, 0x0038);
		}

		// struct FAutomationWorkerRunTests
		TEST_METHOD(ScriptStruct__AutomationMessages__AutomationWorkerRunTests)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationWorkerRunTests, ExecutionCount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationWorkerRunTests, RoleIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationWorkerRunTests, TestName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationWorkerRunTests, BeautifiedTestName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationWorkerRunTests, bSendAnalytics, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationWorkerRunTests, UnknownData_GCII, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutomationWorkerRunTests, 0x0030);
		}

		// struct FAutomationWorkerPerformanceDataResponse
		TEST_METHOD(ScriptStruct__AutomationMessages__AutomationWorkerPerformanceDataResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationWorkerPerformanceDataResponse, bSuccess, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationWorkerPerformanceDataResponse, UnknownData_SEL3, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationWorkerPerformanceDataResponse, ErrorMessage, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutomationWorkerPerformanceDataResponse, 0x0018);
		}

		// struct FAutomationWorkerPerformanceDataRequest
		TEST_METHOD(ScriptStruct__AutomationMessages__AutomationWorkerPerformanceDataRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationWorkerPerformanceDataRequest, Platform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationWorkerPerformanceDataRequest, Hardware, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationWorkerPerformanceDataRequest, TestName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationWorkerPerformanceDataRequest, DataPoints, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutomationWorkerPerformanceDataRequest, 0x0040);
		}

		// struct FAutomationWorkerTestDataResponse
		TEST_METHOD(ScriptStruct__AutomationMessages__AutomationWorkerTestDataResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationWorkerTestDataResponse, JSONData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationWorkerTestDataResponse, bIsNew, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationWorkerTestDataResponse, UnknownData_IC9T, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutomationWorkerTestDataResponse, 0x0018);
		}

		// struct FAutomationWorkerTestDataRequest
		TEST_METHOD(ScriptStruct__AutomationMessages__AutomationWorkerTestDataRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationWorkerTestDataRequest, DataType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationWorkerTestDataRequest, DataPlatform, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationWorkerTestDataRequest, DataTestName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationWorkerTestDataRequest, DataName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationWorkerTestDataRequest, JSONData, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutomationWorkerTestDataRequest, 0x0050);
		}

		// struct FAutomationWorkerImageComparisonResults
		TEST_METHOD(ScriptStruct__AutomationMessages__AutomationWorkerImageComparisonResults)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationWorkerImageComparisonResults, UniqueId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationWorkerImageComparisonResults, bNew, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationWorkerImageComparisonResults, bSimilar, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationWorkerImageComparisonResults, UnknownData_0P8R, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationWorkerImageComparisonResults, MaxLocalDifference, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationWorkerImageComparisonResults, GlobalDifference, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationWorkerImageComparisonResults, ErrorMessage, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutomationWorkerImageComparisonResults, 0x0038);
		}

		// struct FAutomationWorkerSingleTestReply
		TEST_METHOD(ScriptStruct__AutomationMessages__AutomationWorkerSingleTestReply)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationWorkerSingleTestReply, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationWorkerSingleTestReply, FullTestPath, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationWorkerSingleTestReply, TestName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationWorkerSingleTestReply, TestParameter, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationWorkerSingleTestReply, SourceFile, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationWorkerSingleTestReply, SourceFileLine, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationWorkerSingleTestReply, UnknownData_VI1P, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationWorkerSingleTestReply, AssetPath, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationWorkerSingleTestReply, OpenCommand, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationWorkerSingleTestReply, TestFlags, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationWorkerSingleTestReply, NumParticipantsRequired, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutomationWorkerSingleTestReply, 0x0080);
		}

		// struct FAutomationWorkerRequestTestsReplyComplete
		TEST_METHOD(ScriptStruct__AutomationMessages__AutomationWorkerRequestTestsReplyComplete)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationWorkerRequestTestsReplyComplete, Tests, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutomationWorkerRequestTestsReplyComplete, 0x0010);
		}

		// struct FAutomationWorkerRequestTests
		TEST_METHOD(ScriptStruct__AutomationMessages__AutomationWorkerRequestTests)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationWorkerRequestTests, DeveloperDirectoryIncluded, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationWorkerRequestTests, UnknownData_5A4I, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationWorkerRequestTests, RequestedTestFlags, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutomationWorkerRequestTests, 0x0008);
		}

		// struct FAutomationWorkerPong
		TEST_METHOD(ScriptStruct__AutomationMessages__AutomationWorkerPong)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationWorkerPong, UnknownData_PIIR, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutomationWorkerPong, 0x0001);
		}

		// struct FS_AudioWithCharacter
		TEST_METHOD(UserDefinedStruct__S_AudioWithCharacter__S_AudioWithCharacter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_AudioWithCharacter, Sound_3_3F83FF9048DF84F9021BDF93BC5DAE3D, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_AudioWithCharacter, SoundNormal_9_FE68FE35466F88448D7D46A8296DC677, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_AudioWithCharacter, SoundVoiceOver_11_13AA14A948F920BF2F6740B5456F9934, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_AudioWithCharacter, 0x0030);
		}

		// struct FS_CacheVentilator
		TEST_METHOD(UserDefinedStruct__S_CacheVentilator__S_CacheVentilator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_CacheVentilator, bIsActive_2_23F3D2A64204FE0162C96688C238B54C, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_CacheVentilator, UnknownData_13QL, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_CacheVentilator, Transform_4_D0A4884D46277A1824B4958FEAC1D1D1, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_CacheVentilator, 0x0040);
		}

		// struct FS_ExecuionSet
		TEST_METHOD(UserDefinedStruct__S_ExecuionSet__S_ExecuionSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_ExecuionSet, Hunter_2_2BD058D84B8279E579525C81AACCB36C, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_ExecuionSet, Survivor_4_345BD53D4CA06F66D80A53BCFF5ABA72, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_ExecuionSet, SurvivorsSets_17_B6AB948C4C67D7985D3055A67A08D3A0, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_ExecuionSet, Distance_7_B6F87F174174F63925E453B87001FF90, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_ExecuionSet, HunterCamera_12_A98A2542496997682BD64EB4EEA1BCEE, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_ExecuionSet, SurvivorCamera_13_517F810F4A7057D740CDBC8C224496A4, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_ExecuionSet, 0x0026);
		}

		// struct FS_OptionGraphics
		TEST_METHOD(UserDefinedStruct__S_OptionGraphics__S_OptionGraphics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_OptionGraphics, Quality_23_6A3757A54CF12B7E06E2C7B08171904D, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_OptionGraphics, UnknownData_7X15, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_OptionGraphics, AntiAlias_38_B533B6804EAA2159D50ECBB633D31D8B, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_OptionGraphics, PostProcess_39_191D0A9748992EA9D8720986EE3E7500, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_OptionGraphics, Shadow_40_EB751A9844C1DCACA8911FB5D0CB382A, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_OptionGraphics, Texture_41_130E0EF74F83004104E70BB3800A1B85, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_OptionGraphics, Effects_42_C9BD03264208C44E7CF1A2ABA58AD800, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_OptionGraphics, 0x0018);
		}

		// struct FS_SpawnPlayer
		TEST_METHOD(UserDefinedStruct__S_SpawnPlayer__S_SpawnPlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_SpawnPlayer, Controller_22_DEF8D6F7441F2C7D406162B94117757E, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_SpawnPlayer, Pawn_5_DD067AC64FDF828C8DF294A6B3E9BDEF, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_SpawnPlayer, SpawnTransform_20_26DACE3D4DFDC81D144CFC86E34A86B1, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_SpawnPlayer, BeforePossess_12_A4B81EA64FD817887F707F8EC50F1412, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_SpawnPlayer, AfterPossess_13_96DC715E431E0CE474F462B8E5BAF00D, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_SpawnPlayer, bTargetView_17_2C378C024F2646627A6B319F52C6D578, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_SpawnPlayer, SelfRespawn_24_4E17EA8A4B746E562ADE4EB8D0C58C4E, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_SpawnPlayer, 0x004A);
		}

		// struct FWebJSCallbackBase
		TEST_METHOD(ScriptStruct__WebBrowser__WebJSCallbackBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWebJSCallbackBase, UnknownData_ZLOM, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWebJSCallbackBase, 0x0020);
		}

		// struct FWebJSFunction : public FWebJSCallbackBase
		TEST_METHOD(ScriptStruct__WebBrowser__WebJSFunction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWebJSFunction, 0x0020);
		}

		// struct FWebJSResponse : public FWebJSCallbackBase
		TEST_METHOD(ScriptStruct__WebBrowser__WebJSResponse)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWebJSResponse, 0x0020);
		}

		// struct FS_PairSound
		TEST_METHOD(UserDefinedStruct__S_PairSound__S_PairSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_PairSound, CharacterClass_4_7973280C4D6B97B8FE9935B4094FFFE7, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_PairSound, Sound_7_E099E56340B8BEF5193CF4BBD6B9B4D1, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_PairSound, 0x0010);
		}

		// struct FS_LimitType
		TEST_METHOD(UserDefinedStruct__S_LimitType__S_LimitType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_LimitType, Type_12_3AEC43AC4E66D3BDE90576B6C37BC62D, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_LimitType, UnknownData_GZRL, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_LimitType, Weight_13_5D16D54743916BA33528488606361169, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_LimitType, 0x0008);
		}

		// struct FS_UISpectator
		TEST_METHOD(UserDefinedStruct__S_UISpectator__S_UISpectator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_UISpectator, Timer_12_7571F1BD4BC24795CCFD279410A65564, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_UISpectator, MaxTimer_13_76A7F04543C748F494E02A837CE9D141, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_UISpectator, IsCount_10_06B9E16A4E246F9067B20386585CE4EA, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_UISpectator, CanSpawn_16_124FB5784BA22453114A7BA55BECD108, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_UISpectator, IsJanePerk_11_C352D1134DA58A285A0535A10C84EE03, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_UISpectator, UnknownData_LKRN, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_UISpectator, JaneTime_9_D28D87914371A7269471CD9FD908A35D, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_UISpectator, JaneMaxTime_19_3BEBF6024833CE425D62ACB4C2F9F779, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_UISpectator, DeathCount_22_011478F8411B327D72D81D95BBE7ED24, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_UISpectator, 0x0018);
		}

		// struct FSolverTrailingData
		TEST_METHOD(ScriptStruct__GeometryCollectionCore__SolverTrailingData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingData, UnknownData_AMVR, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSolverTrailingData, 0x0038);
		}

		// struct FSolverCollisionData
		TEST_METHOD(ScriptStruct__GeometryCollectionCore__SolverCollisionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, UnknownData_N09V, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSolverCollisionData, 0x0050);
		}

		// struct FRecordedFrame
		TEST_METHOD(ScriptStruct__GeometryCollectionCore__RecordedFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, Transforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, TransformIndices, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, PreviousTransformIndices, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, DisabledFlags, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, Collisions, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, Trailings, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, Timestamp, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, UnknownData_RG3V, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRecordedFrame, 0x0068);
		}

		// struct FRecordedTransformTrack
		TEST_METHOD(ScriptStruct__GeometryCollectionCore__RecordedTransformTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedTransformTrack, Records, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRecordedTransformTrack, 0x0010);
		}

		// struct FS_PingPair
		TEST_METHOD(UserDefinedStruct__S_PingPair__S_PingPair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_PingPair, Character_4_B396189544587E63E13202A62CA97E2C, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_PingPair, Target_30_C5F3F15A47ADB6CC77D0279D3B23EAE8, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_PingPair, IsUpdateLocation_33_7BC2202A4B032ECE060F62825CF79EFA, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_PingPair, IsCantCancel_36_C4DFACCA44B2F9CCD1D5DDAF07317441, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_PingPair, UnknownData_GVT5, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_PingPair, Location_5_446FC3FE42502ECB3BF4B78AE2F91322, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_PingPair, Time_14_49DDDD164CF006EC2B449386E0F93168, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_PingPair, Case_17_2DE365684600D9E8AF786D841F3373B4, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_PingPair, UnknownData_E29G, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_PingPair, HeadlineText_23_8F4EDAC9497162B7C7530BA9CC722193, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_PingPair, DataText_24_BDC9DFB848C380AF6BFC43B7E225E12E, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_PingPair, Color_27_B57F2B6848B455B106B60EA5019E61A1, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_PingPair, 0x0080);
		}

		// struct FDestructibleDebrisParameters
		TEST_METHOD(ScriptStruct__ApexDestruction__DestructibleDebrisParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDebrisParameters, DebrisLifetimeMin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDebrisParameters, DebrisLifetimeMax, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDebrisParameters, DebrisMaxSeparationMin, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDebrisParameters, DebrisMaxSeparationMax, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDebrisParameters, ValidBounds, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDestructibleDebrisParameters, 0x002C);
		}

		// struct FDestructibleDepthParameters
		TEST_METHOD(ScriptStruct__ApexDestruction__DestructibleDepthParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDepthParameters, ImpactDamageOverride, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDestructibleDepthParameters, 0x0001);
		}

		// struct FDestructibleParametersFlag
		TEST_METHOD(ScriptStruct__ApexDestruction__DestructibleParametersFlag)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParametersFlag, UnknownData_G7P1, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDestructibleParametersFlag, 0x0004);
		}

		// struct FDestructibleDamageParameters
		TEST_METHOD(ScriptStruct__ApexDestruction__DestructibleDamageParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDamageParameters, DamageThreshold, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDamageParameters, DamageSpread, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDamageParameters, bEnableImpactDamage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDamageParameters, UnknownData_O6WX, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDamageParameters, ImpactDamage, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDamageParameters, DefaultImpactDamageDepth, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDamageParameters, bCustomImpactResistance, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDamageParameters, UnknownData_RB4P, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDamageParameters, ImpactResistance, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDestructibleDamageParameters, 0x001C);
		}

		// struct FDestructibleAdvancedParameters
		TEST_METHOD(ScriptStruct__ApexDestruction__DestructibleAdvancedParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleAdvancedParameters, DamageCap, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleAdvancedParameters, ImpactVelocityThreshold, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleAdvancedParameters, MaxChunkSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleAdvancedParameters, FractureImpulseScale, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDestructibleAdvancedParameters, 0x0010);
		}

		// struct FDestructibleSpecialHierarchyDepths
		TEST_METHOD(ScriptStruct__ApexDestruction__DestructibleSpecialHierarchyDepths)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleSpecialHierarchyDepths, SupportDepth, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleSpecialHierarchyDepths, MinimumFractureDepth, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleSpecialHierarchyDepths, bEnableDebris, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleSpecialHierarchyDepths, UnknownData_Y8BW, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleSpecialHierarchyDepths, DebrisDepth, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleSpecialHierarchyDepths, EssentialDepth, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDestructibleSpecialHierarchyDepths, 0x0014);
		}

		// struct FDestructibleParameters
		TEST_METHOD(ScriptStruct__ApexDestruction__DestructibleParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParameters, DamageParameters, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParameters, DebrisParameters, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParameters, AdvancedParameters, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParameters, SpecialHierarchyDepths, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParameters, UnknownData_EX1V, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParameters, DepthParameters, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParameters, Flags, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParameters, UnknownData_AORL, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDestructibleParameters, 0x0088);
		}

		// struct FFractureMaterial
		TEST_METHOD(ScriptStruct__ApexDestruction__FractureMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFractureMaterial, UVScale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFractureMaterial, UVOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFractureMaterial, Tangent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFractureMaterial, UAngle, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFractureMaterial, InteriorElementIndex, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFractureMaterial, 0x0024);
		}

		// struct FDestructibleChunkParameters
		TEST_METHOD(ScriptStruct__ApexDestruction__DestructibleChunkParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleChunkParameters, bIsSupportChunk, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleChunkParameters, bDoNotFracture, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleChunkParameters, bDoNotDamage, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleChunkParameters, bDoNotCrumble, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDestructibleChunkParameters, 0x0004);
		}

		// struct FSourceEffectWaveShaperSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectWaveShaperSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectWaveShaperSettings, Amount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectWaveShaperSettings, OutputGainDb, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectWaveShaperSettings, 0x0008);
		}

		// struct FSubmixEffectDelaySettings
		TEST_METHOD(ScriptStruct__Synthesis__SubmixEffectDelaySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDelaySettings, MaximumDelayLength, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDelaySettings, InterpolationTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDelaySettings, DelayLength, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectDelaySettings, 0x000C);
		}

		// struct FSubmixEffectFilterSettings
		TEST_METHOD(ScriptStruct__Synthesis__SubmixEffectFilterSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFilterSettings, FilterType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFilterSettings, FilterAlgorithm, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFilterSettings, UnknownData_AC62, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFilterSettings, FilterFrequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFilterSettings, FilterQ, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectFilterSettings, 0x000C);
		}

		// struct FSubmixEffectFlexiverbSettings
		TEST_METHOD(ScriptStruct__Synthesis__SubmixEffectFlexiverbSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFlexiverbSettings, PreDelay, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFlexiverbSettings, DecayTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFlexiverbSettings, RoomDampening, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFlexiverbSettings, Complexity, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectFlexiverbSettings, 0x0010);
		}

		// struct FTapDelayInfo
		TEST_METHOD(ScriptStruct__Synthesis__TapDelayInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTapDelayInfo, TapLineMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTapDelayInfo, UnknownData_B6AQ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTapDelayInfo, DelayLength, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTapDelayInfo, Gain, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTapDelayInfo, OutputChannel, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTapDelayInfo, PanInDegrees, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTapDelayInfo, TapId, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTapDelayInfo, 0x0018);
		}

		// struct FSubmixEffectTapDelaySettings
		TEST_METHOD(ScriptStruct__Synthesis__SubmixEffectTapDelaySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectTapDelaySettings, MaximumDelayLength, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectTapDelaySettings, InterpolationTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectTapDelaySettings, Taps, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectTapDelaySettings, 0x0018);
		}

		// struct FSynth2DSliderStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__Synthesis__Synth2DSliderStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth2DSliderStyle, NormalThumbImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth2DSliderStyle, DisabledThumbImage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth2DSliderStyle, NormalBarImage, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth2DSliderStyle, DisabledBarImage, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth2DSliderStyle, BackgroundImage, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth2DSliderStyle, BarThickness, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth2DSliderStyle, UnknownData_7TI9, 0x02B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSynth2DSliderStyle, 0x02B8);
		}

		// struct FSynthKnobStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__Synthesis__SynthKnobStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, LargeKnob, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, LargeKnobOverlay, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, MediumKnob, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, MediumKnobOverlay, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, MinValueAngle, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, MaxValueAngle, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, KnobSize, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, UnknownData_PNGE, 0x0231);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSynthKnobStyle, 0x0238);
		}

		// struct FSynthSlateStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__Synthesis__SynthSlateStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthSlateStyle, SizeType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthSlateStyle, ColorStyle, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthSlateStyle, UnknownData_WBTJ, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSynthSlateStyle, 0x0010);
		}

		// struct FPatchId
		TEST_METHOD(ScriptStruct__Synthesis__PatchId)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPatchId, ID, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPatchId, 0x0004);
		}

		// struct FSourceEffectBitCrusherSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectBitCrusherSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectBitCrusherSettings, CrushedSampleRate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectBitCrusherSettings, CrushedBits, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectBitCrusherSettings, 0x0008);
		}

		// struct FSourceEffectChorusSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectChorusSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, Depth, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, Frequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, Feedback, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, WetLevel, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, DryLevel, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, Spread, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectChorusSettings, 0x0018);
		}

		// struct FSourceEffectDynamicsProcessorSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectDynamicsProcessorSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, DynamicsProcessorType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, PeakMode, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, UnknownData_YYF9, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, LookAheadMsec, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, AttackTimeMsec, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, ReleaseTimeMsec, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, ThresholdDb, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, Ratio, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, KneeBandwidthDb, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, InputGainDb, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, OutputGainDb, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, UnknownData_7ZMG, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectDynamicsProcessorSettings, 0x0028);
		}

		// struct FSourceEffectEnvelopeFollowerSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectEnvelopeFollowerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEnvelopeFollowerSettings, AttackTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEnvelopeFollowerSettings, ReleaseTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEnvelopeFollowerSettings, PeakMode, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEnvelopeFollowerSettings, bIsAnalogMode, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEnvelopeFollowerSettings, UnknownData_8ORO, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectEnvelopeFollowerSettings, 0x000C);
		}

		// struct FSourceEffectEQBand
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectEQBand)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEQBand, Frequency, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEQBand, Bandwidth, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEQBand, GainDb, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEQBand, UnknownData_O2U2, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectEQBand, 0x0010);
		}

		// struct FSourceEffectEQSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectEQSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEQSettings, EQBands, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectEQSettings, 0x0010);
		}

		// struct FSourceEffectFilterSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectFilterSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterSettings, FilterCircuit, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterSettings, FilterType, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterSettings, UnknownData_PE5R, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterSettings, CutoffFrequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterSettings, FilterQ, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectFilterSettings, 0x000C);
		}

		// struct FSourceEffectPannerSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectPannerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPannerSettings, Pan, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectPannerSettings, 0x0004);
		}

		// struct FSourceEffectPhaserSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectPhaserSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPhaserSettings, WetLevel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPhaserSettings, Frequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPhaserSettings, Feedback, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPhaserSettings, LFOType, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPhaserSettings, UseQuadraturePhase, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPhaserSettings, UnknownData_NGWR, 0x000E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectPhaserSettings, 0x0010);
		}

		// struct FSourceEffectSimpleDelaySettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectSimpleDelaySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectSimpleDelaySettings, SpeedOfSound, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectSimpleDelaySettings, DelayAmount, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectSimpleDelaySettings, DryAmount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectSimpleDelaySettings, WetAmount, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectSimpleDelaySettings, Feedback, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectSimpleDelaySettings, UnknownData_YGX1, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectSimpleDelaySettings, 0x0018);
		}

		// struct FSourceEffectStereoDelaySettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectStereoDelaySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, DelayMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, UnknownData_JH11, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, DelayTimeMsec, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, Feedback, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, DelayRatio, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, WetLevel, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectStereoDelaySettings, 0x0014);
		}

		// struct FSynth1PatchCable
		TEST_METHOD(ScriptStruct__Synthesis__Synth1PatchCable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth1PatchCable, Depth, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth1PatchCable, Destination, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth1PatchCable, UnknownData_9Z2T, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSynth1PatchCable, 0x0008);
		}

		// struct FEpicSynth1Patch
		TEST_METHOD(ScriptStruct__Synthesis__EpicSynth1Patch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEpicSynth1Patch, PatchSource, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEpicSynth1Patch, UnknownData_VV56, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEpicSynth1Patch, PatchCables, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEpicSynth1Patch, 0x0018);
		}

		// struct FModularSynthPreset : public FTableRowBase
		TEST_METHOD(ScriptStruct__Synthesis__ModularSynthPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_7MYF, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc1Type, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_WAS2, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc1Gain, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc1Octave, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc1Semitones, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc1Cents, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc1PulseWidth, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc2Type, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_KMGC, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc2Gain, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc2Octave, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc2Semitones, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc2Cents, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc2PulseWidth, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Portamento, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_0OP8, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Spread, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Pan, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO1Frequency, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO1Gain, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO1Type, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO1Mode, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO1PatchType, 0x0056);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_BCL4, 0x0057);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO2Frequency, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO2Gain, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO2Type, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO2Mode, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO2PatchType, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_0DF1, 0x0063);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, GainDb, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, AttackTime, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, DecayTime, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, SustainGain, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ReleaseTime, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ModEnvPatchType, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ModEnvBiasPatchType, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_O37Y, 0x007A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_4UIM, 0x007D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ModulationEnvelopeDepth, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ModulationEnvelopeAttackTime, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ModulationEnvelopeDecayTime, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ModulationEnvelopeSustainGain, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ModulationEnvelopeReleaseTime, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_I6QD, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, FilterFrequency, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, FilterQ, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, FilterType, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, FilterAlgorithm, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_MJNM, 0x00A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_CIFX, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, StereoDelayMode, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_KAEU, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, StereoDelayTime, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, StereoDelayFeedback, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, StereoDelayWetlevel, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, StereoDelayRatio, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_K4RT, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ChorusDepth, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ChorusFeedback, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ChorusFrequency, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_JBG4, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Patches, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FModularSynthPreset, 0x00E0);
		}

		// struct FModularSynthPresetBankEntry
		TEST_METHOD(ScriptStruct__Synthesis__ModularSynthPresetBankEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPresetBankEntry, PresetName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPresetBankEntry, Preset, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FModularSynthPresetBankEntry, 0x00F0);
		}

		// struct FSourceEffectFoldbackDistortionSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectFoldbackDistortionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFoldbackDistortionSettings, InputGainDb, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFoldbackDistortionSettings, ThresholdDb, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFoldbackDistortionSettings, OutputGainDb, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectFoldbackDistortionSettings, 0x000C);
		}

		// struct FSourceEffectRingModulationSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectRingModulationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectRingModulationSettings, ModulatorType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectRingModulationSettings, UnknownData_90GN, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectRingModulationSettings, Frequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectRingModulationSettings, Depth, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectRingModulationSettings, DryLevel, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectRingModulationSettings, WetLevel, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectRingModulationSettings, 0x0014);
		}

		// struct FAWSUUID
		TEST_METHOD(ScriptStruct__AWSCore__AWSUUID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSUUID, UUID, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAWSUUID, 0x0010);
		}

		// struct FAWSCredentials
		TEST_METHOD(ScriptStruct__AWSCore__AWSCredentials)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSCredentials, accessKeyId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSCredentials, secretKey, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSCredentials, sessionToken, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSCredentials, expiration, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAWSCredentials, 0x0038);
		}

		// struct FAWSClientConfiguration
		TEST_METHOD(ScriptStruct__AWSCore__AWSClientConfiguration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSClientConfiguration, scheme, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSClientConfiguration, region, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSClientConfiguration, useDualStack, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSClientConfiguration, UnknownData_A9UP, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSClientConfiguration, maxConnections, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSClientConfiguration, requestTimeoutMs, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSClientConfiguration, connectTimeoutMs, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSClientConfiguration, endpointOverride, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSClientConfiguration, proxyScheme, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSClientConfiguration, proxyHost, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSClientConfiguration, proxyPort, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSClientConfiguration, UnknownData_2B4U, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSClientConfiguration, proxyUserName, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSClientConfiguration, proxyPassword, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSClientConfiguration, verifySSL, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSClientConfiguration, UnknownData_YG7K, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSClientConfiguration, caPath, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSClientConfiguration, caFile, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSClientConfiguration, followRedirects, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSClientConfiguration, disableExpectHeader, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSClientConfiguration, enableClockSkewAdjustment, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSClientConfiguration, UnknownData_YYBV, 0x00B3);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAWSClientConfiguration, 0x00B8);
		}

		// struct FBlueprintSessionResult
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__BlueprintSessionResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintSessionResult, UnknownData_2DO1, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintSessionResult, 0x00B8);
		}

		// struct FPIELoginSettingsInternal
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__PIELoginSettingsInternal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPIELoginSettingsInternal, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPIELoginSettingsInternal, Token, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPIELoginSettingsInternal, Type, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPIELoginSettingsInternal, TokenBytes, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPIELoginSettingsInternal, 0x0040);
		}

		// struct FPlayerReservation
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__PlayerReservation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, UniqueId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, ValidationStr, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, Platform, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, bAllowCrossplay, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, UnknownData_ZMOA, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, ElapsedTime, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerReservation, 0x0050);
		}

		// struct FPartyReservation
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__PartyReservation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyReservation, TeamNum, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyReservation, UnknownData_EIU7, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyReservation, PartyLeader, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyReservation, PartyMembers, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPartyReservation, 0x0040);
		}

		// struct FJsonObjectWrapper
		TEST_METHOD(ScriptStruct__JsonUtilities__JsonObjectWrapper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FJsonObjectWrapper, JSONString, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJsonObjectWrapper, UnknownData_4ZXG, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FJsonObjectWrapper, 0x0020);
		}

		// struct FLocationServicesData
		TEST_METHOD(ScriptStruct__LocationServicesBPLibrary__LocationServicesData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationServicesData, Timestamp, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationServicesData, Longitude, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationServicesData, Latitude, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationServicesData, HorizontalAccuracy, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationServicesData, VerticalAccuracy, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationServicesData, Altitude, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocationServicesData, 0x0018);
		}

		// struct FCustomFieldData
		TEST_METHOD(ScriptStruct__BuildPatchServices__CustomFieldData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomFieldData, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomFieldData, Value, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomFieldData, 0x0020);
		}

		// struct FChunkPartData
		TEST_METHOD(ScriptStruct__BuildPatchServices__ChunkPartData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkPartData, Guid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkPartData, Offset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkPartData, Size, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChunkPartData, 0x0018);
		}

		// struct FSHAHashData
		TEST_METHOD(ScriptStruct__BuildPatchServices__SHAHashData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSHAHashData, Hash, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSHAHashData, 0x0014);
		}

		// struct FChunkInfoData
		TEST_METHOD(ScriptStruct__BuildPatchServices__ChunkInfoData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, Guid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, Hash, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, ShaHash, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, UnknownData_2KU8, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, FileSize, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, GroupNumber, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, UnknownData_LMIE, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChunkInfoData, 0x0040);
		}

		// struct FFileManifestData
		TEST_METHOD(ScriptStruct__BuildPatchServices__FileManifestData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, Filename, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, FileHash, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, UnknownData_NQ6E, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, FileChunkParts, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, InstallTags, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, bIsUnixExecutable, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, UnknownData_PH7U, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, SymlinkTarget, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, bIsReadOnly, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, bIsCompressed, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, UnknownData_PS1V, 0x0062);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFileManifestData, 0x0068);
		}

		// struct FMovieScene3DScaleKeyStruct : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DScaleKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DScaleKeyStruct, Scale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DScaleKeyStruct, Time, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DScaleKeyStruct, UnknownData_UW2L, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DScaleKeyStruct, 0x0030);
		}

		// struct FMovieScene3DRotationKeyStruct : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DRotationKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DRotationKeyStruct, Rotation, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DRotationKeyStruct, Time, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DRotationKeyStruct, UnknownData_JYJ4, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DRotationKeyStruct, 0x0030);
		}

		// struct FMovieScene3DLocationKeyStruct : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DLocationKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DLocationKeyStruct, Location, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DLocationKeyStruct, Time, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DLocationKeyStruct, UnknownData_4GRL, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DLocationKeyStruct, 0x0030);
		}

		// struct FMovieSceneTransformMask
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneTransformMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTransformMask, Mask, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTransformMask, 0x0004);
		}

		// struct FMovieScene3DTransformTemplateData
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DTransformTemplateData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, TranslationCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, RotationCurve, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, ScaleCurve, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, ManualWeight, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, BlendType, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, UnknownData_N1GP, 0x0641);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, Mask, 0x0644);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, bUseQuaternionInterpolation, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, UnknownData_SBA1, 0x0649);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DTransformTemplateData, 0x0650);
		}

		// struct FMovieSceneComponentTransformSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneComponentTransformSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneComponentTransformSectionTemplate, TemplateData, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneComponentTransformSectionTemplate, 0x0670);
		}

		// struct FMovieSceneActorReferenceKey
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneActorReferenceKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceKey, Object, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneActorReferenceKey, 0x0018);
		}

		// struct FMovieSceneActorReferenceData : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneActorReferenceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceData, KeyTimes, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceData, UnknownData_AZSP, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceData, KeyValues, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceData, UnknownData_L6VA, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneActorReferenceData, 0x00A0);
		}

		// struct FMovieSceneActorReferenceSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneActorReferenceSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceSectionTemplate, PropertyData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceSectionTemplate, ActorReferenceData, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneActorReferenceSectionTemplate, 0x00E8);
		}

		// struct FMovieSceneAudioSectionTemplateData
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneAudioSectionTemplateData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplateData, Sound, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplateData, AudioStartOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplateData, UnknownData_RDAX, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplateData, SectionStartTimeSeconds, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplateData, AudioPitchMultiplierCurve, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplateData, AudioVolumeCurve, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplateData, RowIndex, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplateData, bOverrideAttenuation, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplateData, UnknownData_NUVZ, 0x015D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplateData, AttenuationSettings, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplateData, OnQueueSubtitles, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplateData, OnAudioFinished, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplateData, OnAudioPlaybackPercent, 0x0188);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneAudioSectionTemplateData, 0x0198);
		}

		// struct FMovieSceneAudioSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneAudioSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplate, AudioData, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneAudioSectionTemplate, 0x01B8);
		}

		// struct FMovieSceneAdditiveCameraAnimationTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneAdditiveCameraAnimationTemplate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneAdditiveCameraAnimationTemplate, 0x0020);
		}

		// struct FMovieSceneCameraShakeSectionData
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraShakeSectionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, ShakeClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, PlayScale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, PlaySpace, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, UnknownData_RQCG, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, UserDefinedPlaySpace, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, UnknownData_DKFJ, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraShakeSectionData, 0x0020);
		}

		// struct FMovieSceneCameraShakeSectionTemplate : public FMovieSceneAdditiveCameraAnimationTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraShakeSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionTemplate, SourceData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionTemplate, SectionStartTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionTemplate, UnknownData_QXJ8, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraShakeSectionTemplate, 0x0048);
		}

		// struct FMovieSceneCameraAnimSectionData
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraAnimSectionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, CameraAnim, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, PlayRate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, PlayScale, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, BlendInTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, BlendOutTime, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, bLooping, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, UnknownData_E0L5, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraAnimSectionData, 0x0020);
		}

		// struct FMovieSceneCameraAnimSectionTemplate : public FMovieSceneAdditiveCameraAnimationTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraAnimSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionTemplate, SourceData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionTemplate, SectionStartTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionTemplate, UnknownData_SVSH, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraAnimSectionTemplate, 0x0048);
		}

		// struct FMovieSceneCameraCutSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraCutSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraCutSectionTemplate, CameraBindingID, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraCutSectionTemplate, UnknownData_230S, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraCutSectionTemplate, CutTransform, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraCutSectionTemplate, bHasCutTransform, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraCutSectionTemplate, UnknownData_IDSB, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraCutSectionTemplate, 0x0080);
		}

		// struct FMovieSceneColorKeyStruct : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneColorKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorKeyStruct, Color, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorKeyStruct, Time, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorKeyStruct, UnknownData_TCV2, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneColorKeyStruct, 0x0038);
		}

		// struct FMovieSceneColorSectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneColorSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorSectionTemplate, Curves, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorSectionTemplate, BlendType, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorSectionTemplate, UnknownData_UMYT, 0x02C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneColorSectionTemplate, 0x02D0);
		}

		// struct FMovieSceneEventTemplateBase : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventTemplateBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventTemplateBase, EventReceivers, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventTemplateBase, UnknownData_MSBY, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventTemplateBase, 0x0038);
		}

		// struct FMovieSceneEventRepeaterTemplate : public FMovieSceneEventTemplateBase
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventRepeaterTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventRepeaterTemplate, EventToTrigger, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventRepeaterTemplate, 0x0040);
		}

		// struct FMovieSceneEventTriggerTemplate : public FMovieSceneEventTemplateBase
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventTriggerTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventTriggerTemplate, EventTimes, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventTriggerTemplate, EventFunctions, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventTriggerTemplate, 0x0058);
		}

		// struct FMovieSceneEvent
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvent, FunctionName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvent, 0x0008);
		}

		// struct FMovieSceneEventChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventChannel, KeyTimes, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventChannel, KeyValues, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventChannel, UnknownData_VJTJ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventChannel, 0x0088);
		}

		// struct FMovieSceneParticleChannel : public FMovieSceneByteChannel
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneParticleChannel)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneParticleChannel, 0x0098);
		}

		// struct FMovieSceneSkeletalAnimationParams
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneSkeletalAnimationParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, Animation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, StartFrameOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, EndFrameOffset, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, PlayRate, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, UnknownData_IMJD, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, SlotName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, Weight, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, bSkipAnimNotifiers, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, bForceCustomMode, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, UnknownData_YLXR, 0x00C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, StartOffset, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, EndOffset, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, UnknownData_IRCE, 0x00CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSkeletalAnimationParams, 0x00D0);
		}

		// struct FMovieSceneStringChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneStringChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringChannel, Times, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringChannel, Values, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringChannel, DefaultValue, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringChannel, bHasDefaultValue, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringChannel, UnknownData_YNU3, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneStringChannel, 0x00A0);
		}

		// struct FMovieSceneSpawnSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneSpawnSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnSectionTemplate, Curve, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSpawnSectionTemplate, 0x00B0);
		}

		// struct FMovieScene3DAttachSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DAttachSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, AttachBindingID, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, AttachSocketName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, AttachComponentName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, AttachmentLocationRule, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, AttachmentRotationRule, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, AttachmentScaleRule, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, DetachmentLocationRule, 0x004B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, DetachmentRotationRule, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, DetachmentScaleRule, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, UnknownData_6L4Y, 0x004E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DAttachSectionTemplate, 0x0050);
		}

		// struct FMovieScene3DPathSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DPathSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, PathBindingID, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, TimingCurve, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, FrontAxisEnum, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, UpAxisEnum, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, UnknownData_TCZG, 0x00DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, UnknownData_FU8A, 0x00DD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DPathSectionTemplate, 0x00E0);
		}

		// struct FMovieScene3DTransformKeyStruct : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DTransformKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformKeyStruct, Location, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformKeyStruct, Rotation, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformKeyStruct, Scale, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformKeyStruct, Time, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformKeyStruct, UnknownData_SJQI, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DTransformKeyStruct, 0x0048);
		}

		// struct FMovieSceneBoolPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneBoolPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolPropertySectionTemplate, BoolCurve, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneBoolPropertySectionTemplate, 0x00D8);
		}

		// struct FMovieSceneVisibilitySectionTemplate : public FMovieSceneBoolPropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVisibilitySectionTemplate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVisibilitySectionTemplate, 0x00D8);
		}

		// struct FMovieSceneEventParameters
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventParameters, UnknownData_UNIR, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventParameters, 0x0028);
		}

		// struct FEventPayload
		TEST_METHOD(ScriptStruct__MovieSceneTracks__EventPayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventPayload, EventName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventPayload, Parameters, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEventPayload, 0x0030);
		}

		// struct FMovieSceneEventSectionData : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventSectionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventSectionData, Times, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventSectionData, KeyValues, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventSectionData, UnknownData_J9VV, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventSectionData, 0x0088);
		}

		// struct FMovieSceneEventSectionTemplate : public FMovieSceneEventTemplateBase
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventSectionTemplate, EventData, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventSectionTemplate, 0x00C0);
		}

		// struct FMovieSceneFadeSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneFadeSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFadeSectionTemplate, FadeCurve, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFadeSectionTemplate, FadeColor, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFadeSectionTemplate, UnknownData_O229, 0x00D1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFadeSectionTemplate, 0x00D8);
		}

		// struct FMovieSceneLevelVisibilitySectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneLevelVisibilitySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneLevelVisibilitySectionTemplate, Visibility, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneLevelVisibilitySectionTemplate, UnknownData_007X, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneLevelVisibilitySectionTemplate, LevelNames, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneLevelVisibilitySectionTemplate, 0x0038);
		}

		// struct FScalarParameterNameAndCurve
		TEST_METHOD(ScriptStruct__MovieSceneTracks__ScalarParameterNameAndCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterNameAndCurve, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterNameAndCurve, ParameterCurve, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScalarParameterNameAndCurve, 0x00A8);
		}

		// struct FVectorParameterNameAndCurves
		TEST_METHOD(ScriptStruct__MovieSceneTracks__VectorParameterNameAndCurves)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterNameAndCurves, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterNameAndCurves, XCurve, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterNameAndCurves, YCurve, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterNameAndCurves, ZCurve, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorParameterNameAndCurves, 0x01E8);
		}

		// struct FColorParameterNameAndCurves
		TEST_METHOD(ScriptStruct__MovieSceneTracks__ColorParameterNameAndCurves)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, RedCurve, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, GreenCurve, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, BlueCurve, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, AlphaCurve, 0x01E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColorParameterNameAndCurves, 0x0288);
		}

		// struct FMovieSceneParameterSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneParameterSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParameterSectionTemplate, Scalars, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParameterSectionTemplate, Vectors, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParameterSectionTemplate, Colors, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneParameterSectionTemplate, 0x0050);
		}

		// struct FMovieSceneMaterialParameterCollectionTemplate : public FMovieSceneParameterSectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneMaterialParameterCollectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMaterialParameterCollectionTemplate, MPC, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneMaterialParameterCollectionTemplate, 0x0058);
		}

		// struct FMovieSceneObjectPropertyTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneObjectPropertyTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPropertyTemplate, ObjectChannel, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneObjectPropertyTemplate, 0x0108);
		}

		// struct FMovieSceneComponentMaterialSectionTemplate : public FMovieSceneParameterSectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneComponentMaterialSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneComponentMaterialSectionTemplate, MaterialIndex, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneComponentMaterialSectionTemplate, UnknownData_KCOR, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneComponentMaterialSectionTemplate, 0x0058);
		}

		// struct FMovieSceneParticleParameterSectionTemplate : public FMovieSceneParameterSectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneParticleParameterSectionTemplate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneParticleParameterSectionTemplate, 0x0050);
		}

		// struct FMovieSceneParticleSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneParticleSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParticleSectionTemplate, ParticleKeys, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneParticleSectionTemplate, 0x00B8);
		}

		// struct FMovieScenePrimitiveMaterialTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScenePrimitiveMaterialTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePrimitiveMaterialTemplate, MaterialIndex, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePrimitiveMaterialTemplate, UnknownData_4U8E, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePrimitiveMaterialTemplate, MaterialChannel, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScenePrimitiveMaterialTemplate, 0x00E8);
		}

		// struct FMovieSceneEulerTransformPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEulerTransformPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEulerTransformPropertySectionTemplate, TemplateData, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEulerTransformPropertySectionTemplate, 0x0698);
		}

		// struct FMovieSceneTransformPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneTransformPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTransformPropertySectionTemplate, TemplateData, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTransformPropertySectionTemplate, 0x0698);
		}

		// struct FMovieSceneVectorPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVectorPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorPropertySectionTemplate, ComponentCurves, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorPropertySectionTemplate, NumChannelsUsed, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorPropertySectionTemplate, BlendType, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorPropertySectionTemplate, UnknownData_KHDU, 0x02CD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVectorPropertySectionTemplate, 0x02D0);
		}

		// struct FMovieSceneStringPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneStringPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringPropertySectionTemplate, StringCurve, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneStringPropertySectionTemplate, 0x00E8);
		}

		// struct FMovieSceneIntegerPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneIntegerPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerPropertySectionTemplate, IntegerCurve, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerPropertySectionTemplate, BlendType, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerPropertySectionTemplate, UnknownData_LM33, 0x00D9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneIntegerPropertySectionTemplate, 0x00E0);
		}

		// struct FMovieSceneEnumPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEnumPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEnumPropertySectionTemplate, EnumCurve, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEnumPropertySectionTemplate, 0x00E0);
		}

		// struct FMovieSceneBytePropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneBytePropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBytePropertySectionTemplate, ByteCurve, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneBytePropertySectionTemplate, 0x00E0);
		}

		// struct FMovieSceneFloatPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneFloatPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatPropertySectionTemplate, FloatFunction, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatPropertySectionTemplate, BlendType, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatPropertySectionTemplate, UnknownData_HU6V, 0x00E9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFloatPropertySectionTemplate, 0x00F0);
		}

		// struct FMovieSceneSkeletalAnimationSectionTemplateParameters : public FMovieSceneSkeletalAnimationParams
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneSkeletalAnimationSectionTemplateParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationSectionTemplateParameters, SectionStartTime, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationSectionTemplateParameters, SectionEndTime, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSkeletalAnimationSectionTemplateParameters, 0x00D8);
		}

		// struct FMovieSceneSkeletalAnimationSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneSkeletalAnimationSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationSectionTemplate, Params, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSkeletalAnimationSectionTemplate, 0x00F8);
		}

		// struct FMovieSceneSlomoSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneSlomoSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSlomoSectionTemplate, SlomoCurve, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSlomoSectionTemplate, 0x00C0);
		}

		// struct FMovieSceneVectorKeyStructBase : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVectorKeyStructBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorKeyStructBase, Time, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorKeyStructBase, UnknownData_2KBQ, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVectorKeyStructBase, 0x0028);
		}

		// struct FMovieSceneVector4KeyStruct : public FMovieSceneVectorKeyStructBase
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVector4KeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVector4KeyStruct, UnknownData_URXT, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVector4KeyStruct, Vector, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVector4KeyStruct, 0x0040);
		}

		// struct FMovieSceneVectorKeyStruct : public FMovieSceneVectorKeyStructBase
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVectorKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorKeyStruct, Vector, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorKeyStruct, UnknownData_APPE, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVectorKeyStruct, 0x0038);
		}

		// struct FMovieSceneVector2DKeyStruct : public FMovieSceneVectorKeyStructBase
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVector2DKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVector2DKeyStruct, Vector, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVector2DKeyStruct, 0x0030);
		}

		// struct FLightPropagationVolumeSettings
		TEST_METHOD(ScriptStruct__Renderer__LightPropagationVolumeSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, UnknownData_OZSL, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVIntensity, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVVplInjectionBias, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVSize, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVSecondaryOcclusionIntensity, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVSecondaryBounceIntensity, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVGeometryVolumeBias, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVEmissiveInjectionIntensity, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVDirectionalOcclusionIntensity, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVDirectionalOcclusionRadius, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVDiffuseOcclusionExponent, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVSpecularOcclusionExponent, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVDiffuseOcclusionIntensity, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVSpecularOcclusionIntensity, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVFadeRange, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVDirectionalOcclusionFadeRange, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightPropagationVolumeSettings, 0x0040);
		}

		// struct FMRMeshConfiguration
		TEST_METHOD(ScriptStruct__MRMesh__MRMeshConfiguration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMRMeshConfiguration, UnknownData_PIH8, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMRMeshConfiguration, 0x0001);
		}

		// struct FGeomComponentCacheParameters
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__GeomComponentCacheParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, CacheMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, UnknownData_K231, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, TargetCache, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, ReverseCacheBeginTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, SaveCollisionData, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, UnknownData_PULD, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, CollisionDataMaxSize, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, DoCollisionDataSpatialHash, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, UnknownData_POV3, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, SpatialHashRadius, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, MaxCollisionPerCell, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, SaveTrailingData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, UnknownData_1LA5, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, TrailingDataSizeMax, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, TrailingMinSpeedThreshold, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, TrailingMinVolumeThreshold, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeomComponentCacheParameters, 0x0038);
		}

		// struct FAutomationArtifact
		TEST_METHOD(ScriptStruct__AutomationController__AutomationArtifact)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationArtifact, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationArtifact, Name, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationArtifact, Type, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationArtifact, UnknownData_IAMZ, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationArtifact, Files, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationArtifact, UnknownData_7UCU, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutomationArtifact, 0x00C8);
		}

		// struct FAutomatedTestResult
		TEST_METHOD(ScriptStruct__AutomationController__AutomatedTestResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomatedTestResult, UnknownData_QH16, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomatedTestResult, TestDisplayName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomatedTestResult, FullTestPath, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomatedTestResult, State, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomatedTestResult, UnknownData_06EH, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomatedTestResult, Entries, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomatedTestResult, Warnings, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomatedTestResult, Errors, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomatedTestResult, Artifacts, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutomatedTestResult, 0x0060);
		}

		// struct FAutomatedTestPassResults
		TEST_METHOD(ScriptStruct__AutomationController__AutomatedTestPassResults)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomatedTestPassResults, ReportCreatedOn, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomatedTestPassResults, Succeeded, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomatedTestPassResults, SucceededWithWarnings, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomatedTestPassResults, Failed, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomatedTestPassResults, NotRun, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomatedTestPassResults, TotalDuration, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomatedTestPassResults, ComparisonExported, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomatedTestPassResults, UnknownData_HVQ3, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomatedTestPassResults, ComparisonExportDirectory, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomatedTestPassResults, Tests, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutomatedTestPassResults, 0x0040);
		}

		// struct FStructSerializerArrayTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerArrayTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, Int32Array, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, StaticSingleElement, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, StaticInt32Array, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, StaticFloatArray, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, UnknownData_9887, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, VectorArray, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerArrayTestStruct, 0x0040);
		}

		// struct FStructSerializerNumericTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerNumericTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Int8, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UnknownData_ICIJ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Int16, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Int32, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Int64, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UInt8, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UnknownData_MPM9, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UInt16, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UInt32, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UInt64, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Float, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UnknownData_UHA2, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Double, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerNumericTestStruct, 0x0030);
		}

		// struct FStructSerializerMapTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerMapTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerMapTestStruct, IntToStr, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerMapTestStruct, StrToStr, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerMapTestStruct, StrToVec, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerMapTestStruct, 0x00F0);
		}

		// struct FStructSerializerBooleanTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerBooleanTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBooleanTestStruct, BoolFalse, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBooleanTestStruct, BoolTrue, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBooleanTestStruct, UnknownData_OOZD, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBooleanTestStruct, Bitfield, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerBooleanTestStruct, 0x0008);
		}

		// struct FStructSerializerObjectTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerObjectTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, Class, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, ObjectPtr, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerObjectTestStruct, 0x0010);
		}

		// struct FStructSerializerBuiltinTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerBuiltinTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Guid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Name, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, String, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Rotator, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, UnknownData_6HDT, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Text, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Vector, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, UnknownData_3LKK, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerBuiltinTestStruct, 0x0060);
		}

		// struct FStructSerializerTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Numerics, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Booleans, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Objects, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Builtins, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Arrays, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Maps, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerTestStruct, 0x01D8);
		}

		// struct FProcMeshTangent
		TEST_METHOD(ScriptStruct__ProceduralMeshComponent__ProcMeshTangent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshTangent, TangentX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshTangent, bFlipTangentY, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshTangent, UnknownData_TIIE, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProcMeshTangent, 0x0010);
		}

		// struct FProcMeshVertex
		TEST_METHOD(ScriptStruct__ProceduralMeshComponent__ProcMeshVertex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, Normal, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, Tangent, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, Color, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, UV0, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, UV1, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, UV2, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, UV3, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProcMeshVertex, 0x004C);
		}

		// struct FProcMeshSection
		TEST_METHOD(ScriptStruct__ProceduralMeshComponent__ProcMeshSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, ProcVertexBuffer, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, ProcIndexBuffer, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, SectionLocalBox, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, bEnableCollision, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, bSectionVisible, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, UnknownData_Y1KB, 0x003E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProcMeshSection, 0x0040);
		}

		// struct FImageWriteOptions
		TEST_METHOD(ScriptStruct__ImageWriteQueue__ImageWriteOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, Format, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, UnknownData_2UFM, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, OnComplete, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, CompressionQuality, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, bOverwriteFile, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, bAsync, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, UnknownData_QQRE, 0x001A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FImageWriteOptions, 0x0070);
		}

		// struct FTraceChannelTestBatchOptions
		TEST_METHOD(ScriptStruct__FunctionalTesting__TraceChannelTestBatchOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTraceChannelTestBatchOptions, bLineTrace, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTraceChannelTestBatchOptions, bSphereTrace, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTraceChannelTestBatchOptions, bCapsuleTrace, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTraceChannelTestBatchOptions, bBoxTrace, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTraceChannelTestBatchOptions, bChannelTrace, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTraceChannelTestBatchOptions, bObjectsTrace, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTraceChannelTestBatchOptions, bProfileTrace, 0x0006);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTraceChannelTestBatchOptions, 0x0007);
		}

		// struct FComparisonToleranceAmount
		TEST_METHOD(ScriptStruct__FunctionalTesting__ComparisonToleranceAmount)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComparisonToleranceAmount, Red, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComparisonToleranceAmount, Green, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComparisonToleranceAmount, Blue, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComparisonToleranceAmount, Alpha, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComparisonToleranceAmount, MinBrightness, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComparisonToleranceAmount, MaxBrightness, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComparisonToleranceAmount, 0x0006);
		}

		// struct FAutomationScreenshotOptions
		TEST_METHOD(ScriptStruct__FunctionalTesting__AutomationScreenshotOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationScreenshotOptions, Resolution, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationScreenshotOptions, Delay, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationScreenshotOptions, bOverride_OverrideTimeTo, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationScreenshotOptions, UnknownData_5R5V, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationScreenshotOptions, OverrideTimeTo, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationScreenshotOptions, bDisableNoisyRenderingFeatures, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationScreenshotOptions, bDisableTonemapping, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationScreenshotOptions, UnknownData_HZ4Q, 0x0016);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationScreenshotOptions, ViewSettings, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationScreenshotOptions, VisualizeBuffer, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationScreenshotOptions, Tolerance, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationScreenshotOptions, ToleranceAmount, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationScreenshotOptions, UnknownData_0N0H, 0x002F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationScreenshotOptions, MaximumLocalError, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationScreenshotOptions, MaximumGlobalError, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationScreenshotOptions, bIgnoreAntiAliasing, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationScreenshotOptions, bIgnoreColors, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationScreenshotOptions, UnknownData_7HNW, 0x003A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutomationScreenshotOptions, 0x0040);
		}

		// struct FAITestSpawnInfo
		TEST_METHOD(ScriptStruct__FunctionalTesting__AITestSpawnInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITestSpawnInfo, PawnClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITestSpawnInfo, ControllerClass, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITestSpawnInfo, TeamId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITestSpawnInfo, UnknownData_2JA2, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITestSpawnInfo, BehaviorTree, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITestSpawnInfo, SpawnLocation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITestSpawnInfo, NumberToSpawn, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITestSpawnInfo, SpawnDelay, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITestSpawnInfo, PreSpawnDelay, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITestSpawnInfo, UnknownData_E72B, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAITestSpawnInfo, 0x0040);
		}

		// struct FAITestSpawnSet
		TEST_METHOD(ScriptStruct__FunctionalTesting__AITestSpawnSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITestSpawnSet, SpawnInfoContainer, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITestSpawnSet, Name, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITestSpawnSet, UnknownData_4WFB, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITestSpawnSet, FallbackSpawnLocation, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAITestSpawnSet, 0x0028);
		}

		// struct FPendingDelayedSpawn : public FAITestSpawnInfo
		TEST_METHOD(ScriptStruct__FunctionalTesting__PendingDelayedSpawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPendingDelayedSpawn, UnknownData_8XHN, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPendingDelayedSpawn, 0x0050);
		}

		// struct FTraceQueryTestNames
		TEST_METHOD(ScriptStruct__FunctionalTesting__TraceQueryTestNames)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTraceQueryTestNames, ComponentName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTraceQueryTestNames, PhysicalMaterialName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTraceQueryTestNames, ActorName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTraceQueryTestNames, 0x0018);
		}

		// struct FTraceQueryTestResultsInnerMost
		TEST_METHOD(ScriptStruct__FunctionalTesting__TraceQueryTestResultsInnerMost)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTraceQueryTestResultsInnerMost, SingleHit, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTraceQueryTestResultsInnerMost, SingleNames, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTraceQueryTestResultsInnerMost, bSingleResult, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTraceQueryTestResultsInnerMost, UnknownData_9LZX, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTraceQueryTestResultsInnerMost, MultiHits, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTraceQueryTestResultsInnerMost, MultiNames, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTraceQueryTestResultsInnerMost, bMultiResult, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTraceQueryTestResultsInnerMost, UnknownData_E098, 0x00C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTraceQueryTestResultsInnerMost, 0x00D0);
		}

		// struct FTraceQueryTestResultsInner
		TEST_METHOD(ScriptStruct__FunctionalTesting__TraceQueryTestResultsInner)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTraceQueryTestResultsInner, LineResults, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTraceQueryTestResultsInner, SphereResults, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTraceQueryTestResultsInner, CapsuleResults, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTraceQueryTestResultsInner, BoxResults, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTraceQueryTestResultsInner, 0x0340);
		}

		// struct FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__SlateWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateWidgetStyle, UnknownData_91KJ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateWidgetStyle, 0x0008);
		}

		// struct FMargin
		TEST_METHOD(ScriptStruct__SlateCore__Margin)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMargin, Left, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMargin, Top, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMargin, Right, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMargin, Bottom, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMargin, 0x0010);
		}

		// struct FSlateColor
		TEST_METHOD(ScriptStruct__SlateCore__SlateColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateColor, SpecifiedColor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateColor, ColorUseRule, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateColor, UnknownData_SSAL, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateColor, 0x0028);
		}

		// struct FSlateBrush
		TEST_METHOD(ScriptStruct__SlateCore__SlateBrush)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, UnknownData_9L19, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, ImageSize, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, Margin, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, TintColor, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, ResourceObject, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, ResourceName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, UVRegion, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, DrawAs, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, Tiling, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, Mirroring, 0x006E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, ImageType, 0x006F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, UnknownData_A2SP, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, UnknownData_USRR, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateBrush, 0x0088);
		}

		// struct FFontOutlineSettings
		TEST_METHOD(ScriptStruct__SlateCore__FontOutlineSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, OutlineSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, bSeparateFillAlpha, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, bApplyOutlineToDropShadows, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, UnknownData_OS9Z, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, OutlineMaterial, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, OutlineColor, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontOutlineSettings, 0x0020);
		}

		// struct FSlateFontInfo
		TEST_METHOD(ScriptStruct__SlateCore__SlateFontInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, FontObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, FontMaterial, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, OutlineSettings, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, UnknownData_CZ0T, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, TypefaceFontName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, Size, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, UnknownData_FZFR, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateFontInfo, 0x0050);
		}

		// struct FScrollBarStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ScrollBarStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, HorizontalBackgroundImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, VerticalBackgroundImage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, VerticalTopSlotImage, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, HorizontalTopSlotImage, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, VerticalBottomSlotImage, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, HorizontalBottomSlotImage, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, NormalThumbImage, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, HoveredThumbImage, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, DraggedThumbImage, 0x0448);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScrollBarStyle, 0x04D0);
		}

		// struct FEditableTextBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__EditableTextBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundImageNormal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundImageHovered, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundImageFocused, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundImageReadOnly, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, Padding, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, Font, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, ForegroundColor, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundColor, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, ReadOnlyForegroundColor, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, HScrollBarPadding, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, VScrollBarPadding, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, ScrollBarStyle, 0x0320);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditableTextBoxStyle, 0x07F0);
		}

		// struct FSearchBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__SearchBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, TextBoxStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, ActiveFontInfo, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, UpArrowImage, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, DownArrowImage, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, GlassImage, 0x0958);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, ClearImage, 0x09E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, ImagePadding, 0x0A68);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, bLeftAlignButtons, 0x0A78);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, UnknownData_4Q6K, 0x0A79);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSearchBoxStyle, 0x0A80);
		}

		// struct FExpandableAreaStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ExpandableAreaStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpandableAreaStyle, CollapsedImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpandableAreaStyle, ExpandedImage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpandableAreaStyle, RolloutAnimationSeconds, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpandableAreaStyle, UnknownData_7V85, 0x011C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExpandableAreaStyle, 0x0120);
		}

		// struct FProgressBarStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ProgressBarStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProgressBarStyle, BackgroundImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProgressBarStyle, FillImage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProgressBarStyle, MarqueeImage, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProgressBarStyle, 0x01A0);
		}

		// struct FTextBlockStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__TextBlockStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, Font, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, ColorAndOpacity, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, ShadowOffset, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, ShadowColorAndOpacity, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, SelectedBackgroundColor, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, HighlightColor, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, HighlightShape, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, StrikeBrush, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, UnderlineBrush, 0x01E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextBlockStyle, 0x0268);
		}

		// struct FInlineEditableTextBlockStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__InlineEditableTextBlockStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineEditableTextBlockStyle, EditableTextBoxStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineEditableTextBlockStyle, TextStyle, 0x07F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInlineEditableTextBlockStyle, 0x0A60);
		}

		// struct FSlateSound
		TEST_METHOD(ScriptStruct__SlateCore__SlateSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateSound, ResourceObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateSound, UnknownData_QGBY, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateSound, 0x0018);
		}

		// struct FButtonStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ButtonStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, Normal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, Hovered, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, Pressed, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, Disabled, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, NormalPadding, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, PressedPadding, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, PressedSlateSound, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, HoveredSlateSound, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FButtonStyle, 0x0278);
		}

		// struct FHyperlinkStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__HyperlinkStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHyperlinkStyle, UnderlineStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHyperlinkStyle, TextStyle, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHyperlinkStyle, Padding, 0x04E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHyperlinkStyle, 0x04F8);
		}

		// struct FCheckBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__CheckBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckBoxType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UnknownData_26S6, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UncheckedImage, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UncheckedHoveredImage, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UncheckedPressedImage, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckedImage, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckedHoveredImage, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckedPressedImage, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UndeterminedImage, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UndeterminedHoveredImage, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UndeterminedPressedImage, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, Padding, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, ForegroundColor, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, BorderBackgroundColor, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckedSlateSound, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UncheckedSlateSound, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, HoveredSlateSound, 0x0568);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCheckBoxStyle, 0x0580);
		}

		// struct FScrollBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ScrollBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBoxStyle, TopShadowBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBoxStyle, BottomShadowBrush, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBoxStyle, LeftShadowBrush, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBoxStyle, RightShadowBrush, 0x01A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScrollBoxStyle, 0x0228);
		}

		// struct FDockTabStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__DockTabStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, CloseButtonStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, NormalBrush, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ActiveBrush, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ColorOverlayTabBrush, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ColorOverlayIconBrush, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ForegroundBrush, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, HoveredBrush, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ContentAreaBrush, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, TabWellBrush, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, TabPadding, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, OverlapWidth, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, UnknownData_O8BE, 0x06D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, FlashColor, 0x06D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDockTabStyle, 0x0700);
		}

		// struct FTableColumnHeaderStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__TableColumnHeaderStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, SortPrimaryAscendingImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, SortPrimaryDescendingImage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, SortSecondaryAscendingImage, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, SortSecondaryDescendingImage, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, NormalBrush, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, HoveredBrush, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, MenuDropdownImage, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, MenuDropdownNormalBorderBrush, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, MenuDropdownHoveredBorderBrush, 0x0448);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTableColumnHeaderStyle, 0x04D0);
		}

		// struct FSplitterStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__SplitterStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplitterStyle, HandleNormalBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplitterStyle, HandleHighlightBrush, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplitterStyle, 0x0118);
		}

		// struct FHeaderRowStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__HeaderRowStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, ColumnStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, LastColumnStyle, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, ColumnSplitterStyle, 0x09A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, BackgroundBrush, 0x0AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, ForegroundColor, 0x0B48);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHeaderRowStyle, 0x0B70);
		}

		// struct FInlineTextImageStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__InlineTextImageStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineTextImageStyle, Image, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineTextImageStyle, Baseline, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineTextImageStyle, UnknownData_4CPX, 0x0092);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInlineTextImageStyle, 0x0098);
		}

		// struct FSliderStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__SliderStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, NormalBarImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, HoveredBarImage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, DisabledBarImage, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, NormalThumbImage, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, HoveredThumbImage, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, DisabledThumbImage, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, BarThickness, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, UnknownData_06TJ, 0x033C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSliderStyle, 0x0340);
		}

		// struct FVolumeControlStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__VolumeControlStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, SliderStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, HighVolumeImage, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, MidVolumeImage, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, LowVolumeImage, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, NoVolumeImage, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, MutedImage, 0x0568);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVolumeControlStyle, 0x05F0);
		}

		// struct FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__InputEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputEvent, UnknownData_6XLI, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputEvent, 0x0018);
		}

		// struct FPointerEvent : public FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__PointerEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointerEvent, UnknownData_QIP3, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPointerEvent, 0x0070);
		}

		// struct FCharacterEvent : public FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__CharacterEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterEvent, UnknownData_4HDO, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterEvent, 0x0020);
		}

		// struct FKeyEvent : public FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__KeyEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyEvent, UnknownData_AXU8, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKeyEvent, 0x0038);
		}

		// struct FNavigationEvent : public FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__NavigationEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationEvent, UnknownData_U90V, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationEvent, 0x0020);
		}

		// struct FAnalogInputEvent : public FKeyEvent
		TEST_METHOD(ScriptStruct__SlateCore__AnalogInputEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnalogInputEvent, UnknownData_OA9M, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnalogInputEvent, 0x0040);
		}

		// struct FTableRowStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__TableRowStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, SelectorFocusedBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, ActiveHoveredBrush, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, ActiveBrush, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, InactiveHoveredBrush, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, InactiveBrush, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, EvenRowBackgroundHoveredBrush, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, EvenRowBackgroundBrush, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, OddRowBackgroundHoveredBrush, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, OddRowBackgroundBrush, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, TextColor, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, SelectedTextColor, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, DropIndicator_Above, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, DropIndicator_Onto, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, DropIndicator_Below, 0x0630);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTableRowStyle, 0x06B8);
		}

		// struct FComboButtonStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ComboButtonStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, ButtonStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, DownArrowImage, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, MenuBorderBrush, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, MenuBorderPadding, 0x0390);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComboButtonStyle, 0x03A0);
		}

		// struct FComboBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ComboBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboBoxStyle, ComboButtonStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboBoxStyle, PressedSlateSound, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboBoxStyle, SelectionChangeSlateSound, 0x03C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComboBoxStyle, 0x03D8);
		}

		// struct FEditableTextStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__EditableTextStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, Font, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, ColorAndOpacity, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, BackgroundImageSelected, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, BackgroundImageComposing, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, CaretImage, 0x0190);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditableTextStyle, 0x0218);
		}

		// struct FSpinBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__SpinBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, BackgroundBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, HoveredBackgroundBrush, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, ActiveFillBrush, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, InactiveFillBrush, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, ArrowsImage, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, ForegroundColor, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, TextPadding, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpinBoxStyle, 0x02E8);
		}

		// struct FFontData
		TEST_METHOD(ScriptStruct__SlateCore__FontData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, FontFilename, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, Hinting, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, LoadingPolicy, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, UnknownData_IMCZ, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, SubFaceIndex, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, FontFaceAsset, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontData, 0x0020);
		}

		// struct FTypefaceEntry
		TEST_METHOD(ScriptStruct__SlateCore__TypefaceEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTypefaceEntry, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTypefaceEntry, Font, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTypefaceEntry, 0x0028);
		}

		// struct FTypeface
		TEST_METHOD(ScriptStruct__SlateCore__Typeface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTypeface, Fonts, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTypeface, 0x0010);
		}

		// struct FCompositeFallbackFont
		TEST_METHOD(ScriptStruct__SlateCore__CompositeFallbackFont)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFallbackFont, Typeface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFallbackFont, ScalingFactor, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFallbackFont, UnknownData_MZPS, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompositeFallbackFont, 0x0018);
		}

		// struct FCompositeSubFont : public FCompositeFallbackFont
		TEST_METHOD(ScriptStruct__SlateCore__CompositeSubFont)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSubFont, CharacterRanges, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSubFont, Cultures, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompositeSubFont, 0x0038);
		}

		// struct FCompositeFont
		TEST_METHOD(ScriptStruct__SlateCore__CompositeFont)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFont, DefaultTypeface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFont, FallbackTypeface, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFont, SubTypefaces, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompositeFont, 0x0038);
		}

		// struct FMotionEvent : public FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__MotionEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotionEvent, UnknownData_VCWI, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMotionEvent, 0x0048);
		}

		// struct FCaptureLostEvent
		TEST_METHOD(ScriptStruct__SlateCore__CaptureLostEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCaptureLostEvent, UnknownData_MK8Y, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCaptureLostEvent, 0x0008);
		}

		// struct FFocusEvent
		TEST_METHOD(ScriptStruct__SlateCore__FocusEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFocusEvent, UnknownData_B0OC, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFocusEvent, 0x0008);
		}

		// struct FWindowStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__WindowStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, MinimizeButtonStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, MaximizeButtonStyle, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, RestoreButtonStyle, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, CloseButtonStyle, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, TitleTextStyle, 0x09E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, ActiveTitleBrush, 0x0C50);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, InactiveTitleBrush, 0x0CD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, FlashTitleBrush, 0x0D60);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, BackgroundColor, 0x0DE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, OutlineBrush, 0x0E10);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, OutlineColor, 0x0E98);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, BorderBrush, 0x0EC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, BackgroundBrush, 0x0F48);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, ChildBackgroundBrush, 0x0FD0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWindowStyle, 0x1058);
		}

		// struct FScrollBorderStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ScrollBorderStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBorderStyle, TopShadowBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBorderStyle, BottomShadowBrush, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScrollBorderStyle, 0x0118);
		}

		// struct FGeometry
		TEST_METHOD(ScriptStruct__SlateCore__Geometry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometry, UnknownData_QJNT, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometry, 0x0038);
		}

		// struct FMediaCaptureDevice
		TEST_METHOD(ScriptStruct__MediaAssets__MediaCaptureDevice)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaCaptureDevice, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaCaptureDevice, URL, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMediaCaptureDevice, 0x0028);
		}

		// struct FMediaSoundComponentSpectralData
		TEST_METHOD(ScriptStruct__MediaAssets__MediaSoundComponentSpectralData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaSoundComponentSpectralData, FrequencyHz, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaSoundComponentSpectralData, Magnitude, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMediaSoundComponentSpectralData, 0x0008);
		}

		// struct FMovieSceneGeometryCacheParams
		TEST_METHOD(ScriptStruct__GeometryCacheTracks__MovieSceneGeometryCacheParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, GeometryCacheAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, StartFrameOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, EndFrameOffset, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, PlayRate, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, UnknownData_JTXS, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, StartOffset, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, EndOffset, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, GeometryCache, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneGeometryCacheParams, 0x0038);
		}

		// struct FMovieSceneGeometryCacheSectionTemplateParameters : public FMovieSceneGeometryCacheParams
		TEST_METHOD(ScriptStruct__GeometryCacheTracks__MovieSceneGeometryCacheSectionTemplateParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheSectionTemplateParameters, SectionStartTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheSectionTemplateParameters, SectionEndTime, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneGeometryCacheSectionTemplateParameters, 0x0040);
		}

		// struct FMovieSceneGeometryCacheSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__GeometryCacheTracks__MovieSceneGeometryCacheSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheSectionTemplate, Params, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneGeometryCacheSectionTemplate, 0x0060);
		}

		// struct FS_TrapData
		TEST_METHOD(UserDefinedStruct__S_TrapData__S_TrapData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_TrapData, Array_3_4E3EE2954E1C99E49DEBBC8F470BBCFF, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_TrapData, NewMesh_7_2085A3154661B82002FA66859C4A9ED3, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_TrapData, Targets_12_D2B4305345E31AA5D24AD0A669489F9B, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_TrapData, 0x0028);
		}

		// struct FXRDeviceId
		TEST_METHOD(ScriptStruct__HeadMountedDisplay__XRDeviceId)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRDeviceId, SystemName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRDeviceId, DeviceID, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FXRDeviceId, 0x000C);
		}

		// struct FS_PairAnimation
		TEST_METHOD(UserDefinedStruct__S_PairAnimation__S_PairAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_PairAnimation, CharacterClass_5_A56193414D52BC7C76060F97FC708E3E, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_PairAnimation, AnimMontage_6_9C0CA4FC452F4F5E9F1FF68795795832, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_PairAnimation, 0x0010);
		}

		// struct FSubmixEffectEQBand
		TEST_METHOD(ScriptStruct__AudioMixer__SubmixEffectEQBand)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectEQBand, Frequency, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectEQBand, Bandwidth, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectEQBand, GainDb, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectEQBand, UnknownData_HZ4S, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectEQBand, 0x0010);
		}

		// struct FSubmixEffectReverbSettings
		TEST_METHOD(ScriptStruct__AudioMixer__SubmixEffectReverbSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, Density, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, Diffusion, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, Gain, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, GainHF, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, DecayTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, DecayHFRatio, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, ReflectionsGain, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, ReflectionsDelay, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, LateGain, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, LateDelay, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, AirAbsorptionGainHF, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, WetLevel, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, DryLevel, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectReverbSettings, 0x0034);
		}

		// struct FSubmixEffectDynamicsProcessorSettings
		TEST_METHOD(ScriptStruct__AudioMixer__SubmixEffectDynamicsProcessorSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, DynamicsProcessorType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, PeakMode, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, UnknownData_AUW7, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, LookAheadMsec, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, AttackTimeMsec, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, ReleaseTimeMsec, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, ThresholdDb, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, Ratio, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, KneeBandwidthDb, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, InputGainDb, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, OutputGainDb, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, UnknownData_YNPK, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectDynamicsProcessorSettings, 0x0028);
		}

		// struct FSubmixEffectSubmixEQSettings
		TEST_METHOD(ScriptStruct__AudioMixer__SubmixEffectSubmixEQSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectSubmixEQSettings, EQBands, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectSubmixEQSettings, 0x0010);
		}

		// struct FEngineServicePing
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServicePing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePing, UnknownData_I33I, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServicePing, 0x0001);
		}

		// struct FEngineServiceAuthGrant
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceAuthGrant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceAuthGrant, Username, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceAuthGrant, UserToGrant, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceAuthGrant, 0x0020);
		}

		// struct FEngineServiceTerminate
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceTerminate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceTerminate, Username, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceTerminate, 0x0010);
		}

		// struct FEngineServiceExecuteCommand
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceExecuteCommand)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceExecuteCommand, Command, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceExecuteCommand, Username, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceExecuteCommand, 0x0020);
		}

		// struct FEngineServiceAuthDeny
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceAuthDeny)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceAuthDeny, Username, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceAuthDeny, UserToDeny, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceAuthDeny, 0x0020);
		}

		// struct FEngineServicePong
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServicePong)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, CurrentLevel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, EngineVersion, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, HasBegunPlay, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, UnknownData_LILV, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, instanceId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, instanceType, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, SessionId, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, WorldTimeSeconds, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, UnknownData_R76L, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServicePong, 0x0050);
		}

		// struct FEngineServiceNotification
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceNotification)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceNotification, Text, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceNotification, TimeSeconds, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceNotification, 0x0018);
		}

		// struct FGameplayTag
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTag)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTag, TagName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTag, 0x0008);
		}

		// struct FGameplayTagContainer
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagContainer, GameplayTags, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagContainer, ParentTags, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagContainer, 0x0020);
		}

		// struct FGameplayTagQuery
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagQuery)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, TokenStreamVersion, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, UnknownData_F0FY, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, TagDictionary, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, QueryTokenStream, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, UserDescription, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, AutoDescription, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagQuery, 0x0048);
		}

		// struct FGameplayTagSource
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagSource, SourceName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagSource, SourceType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagSource, UnknownData_BTU2, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagSource, SourceTagList, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagSource, SourceRestrictedTagList, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagSource, 0x0020);
		}

		// struct FGameplayTagCreationWidgetHelper
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagCreationWidgetHelper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagCreationWidgetHelper, UnknownData_YVP8, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagCreationWidgetHelper, 0x0001);
		}

		// struct FGameplayTagReferenceHelper
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagReferenceHelper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagReferenceHelper, UnknownData_PVQY, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagReferenceHelper, 0x0010);
		}

		// struct FGameplayTagNode
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagNode, UnknownData_0N9Y, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagNode, 0x0050);
		}

		// struct FGameplayTagTableRow : public FTableRowBase
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagTableRow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagTableRow, Tag, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagTableRow, DevComment, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagTableRow, 0x0020);
		}

		// struct FRestrictedGameplayTagTableRow : public FGameplayTagTableRow
		TEST_METHOD(ScriptStruct__GameplayTags__RestrictedGameplayTagTableRow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRestrictedGameplayTagTableRow, bAllowNonRestrictedChildren, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRestrictedGameplayTagTableRow, UnknownData_GMIY, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRestrictedGameplayTagTableRow, 0x0028);
		}

		// struct FRestrictedConfigInfo
		TEST_METHOD(ScriptStruct__GameplayTags__RestrictedConfigInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRestrictedConfigInfo, RestrictedConfigName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRestrictedConfigInfo, Owners, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRestrictedConfigInfo, 0x0020);
		}

		// struct FGameplayTagCategoryRemap
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagCategoryRemap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagCategoryRemap, BaseCategory, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagCategoryRemap, RemapCategories, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagCategoryRemap, 0x0020);
		}

		// struct FGameplayTagRedirect
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagRedirect, OldTagName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagRedirect, NewTagName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagRedirect, 0x0010);
		}

		// struct FSTR_PlayerActivityData
		TEST_METHOD(UserDefinedStruct__STR_PlayerActivityData__STR_PlayerActivityData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSTR_PlayerActivityData, PlayerState_4_7725B8274A07483040F359ACF8D051B5, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSTR_PlayerActivityData, PlayerID_39_A508F08648F17AC4AC95BDABDE056089, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSTR_PlayerActivityData, UnknownData_1H77, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSTR_PlayerActivityData, PlayerInfo_35_A1B645F442DFD532F26C9DA1FEAE05A4, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSTR_PlayerActivityData, Activities_24_D1BE1EFF40E8E8E18F917086E47D0D29, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSTR_PlayerActivityData, TotalScore_20_A0CB41884050A60462A89EAC71D0F9B0, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSTR_PlayerActivityData, TotalCoins_18_3023716248FBCF3F673D6B9817EFB1D9, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSTR_PlayerActivityData, TotalExp_26_2FF77DC1409CEB79597EAD9D808D8034, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSTR_PlayerActivityData, TotalMmr_44_6222135B49EA08F7FA4906A92AE562DB, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSTR_PlayerActivityData, HasPenalty_41_584D8F7C4793AD8153DD688206AC8C9F, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSTR_PlayerActivityData, 0x0141);
		}

		// struct FSubdividedQuadVertex
		TEST_METHOD(ScriptStruct__EditableMesh__SubdividedQuadVertex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, VertexPositionIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, TextureCoordinate0, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, TextureCoordinate1, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, VertexColor, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, VertexNormal, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, VertexTangent, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, VertexBinormalSign, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubdividedQuadVertex, 0x0034);
		}

		// struct FSubdividedQuad
		TEST_METHOD(ScriptStruct__EditableMesh__SubdividedQuad)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuad, QuadVertex0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuad, QuadVertex1, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuad, QuadVertex2, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuad, QuadVertex3, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubdividedQuad, 0x00D0);
		}

		// struct FSubdivisionLimitSection
		TEST_METHOD(ScriptStruct__EditableMesh__SubdivisionLimitSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdivisionLimitSection, SubdividedQuads, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubdivisionLimitSection, 0x0010);
		}

		// struct FRenderingPolygonGroup
		TEST_METHOD(ScriptStruct__EditableMesh__RenderingPolygonGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygonGroup, RenderingSectionIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygonGroup, MaterialIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygonGroup, MaxTriangles, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygonGroup, UnknownData_D28Z, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRenderingPolygonGroup, 0x0048);
		}

		// struct FTriangleID : public FElementID
		TEST_METHOD(ScriptStruct__EditableMesh__TriangleID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTriangleID, 0x0004);
		}

		// struct FRenderingPolygon
		TEST_METHOD(ScriptStruct__EditableMesh__RenderingPolygon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygon, PolygonGroupID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygon, UnknownData_HY9J, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygon, TriangulatedPolygonTriangleIndices, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRenderingPolygon, 0x0018);
		}

		// struct FVertexPair
		TEST_METHOD(ScriptStruct__EditableMesh__VertexPair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexPair, VertexID0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexPair, VertexID1, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexPair, 0x0008);
		}

		// struct FPolygonToSplit
		TEST_METHOD(ScriptStruct__EditableMesh__PolygonToSplit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToSplit, PolygonID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToSplit, UnknownData_DS9A, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToSplit, VertexPairsToSplitAt, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonToSplit, 0x0018);
		}

		// struct FMeshElementAttributeValue
		TEST_METHOD(ScriptStruct__EditableMesh__MeshElementAttributeValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshElementAttributeValue, UnknownData_V7TN, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshElementAttributeValue, 0x0050);
		}

		// struct FMeshElementAttributeData
		TEST_METHOD(ScriptStruct__EditableMesh__MeshElementAttributeData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshElementAttributeData, AttributeName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshElementAttributeData, AttributeIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshElementAttributeData, UnknownData_RV9Q, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshElementAttributeData, AttributeValue, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshElementAttributeData, 0x0060);
		}

		// struct FMeshElementAttributeList
		TEST_METHOD(ScriptStruct__EditableMesh__MeshElementAttributeList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshElementAttributeList, Attributes, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshElementAttributeList, 0x0010);
		}

		// struct FAttributesForVertex
		TEST_METHOD(ScriptStruct__EditableMesh__AttributesForVertex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertex, VertexID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertex, UnknownData_7SFF, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertex, VertexAttributes, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAttributesForVertex, 0x0018);
		}

		// struct FAttributesForVertexInstance
		TEST_METHOD(ScriptStruct__EditableMesh__AttributesForVertexInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertexInstance, VertexInstanceID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertexInstance, UnknownData_LCEL, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertexInstance, VertexInstanceAttributes, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAttributesForVertexInstance, 0x0018);
		}

		// struct FVertexAttributesForPolygonHole
		TEST_METHOD(ScriptStruct__EditableMesh__VertexAttributesForPolygonHole)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAttributesForPolygonHole, VertexAttributeList, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexAttributesForPolygonHole, 0x0010);
		}

		// struct FVertexAttributesForPolygon
		TEST_METHOD(ScriptStruct__EditableMesh__VertexAttributesForPolygon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAttributesForPolygon, PolygonID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAttributesForPolygon, UnknownData_CXSP, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAttributesForPolygon, PerimeterVertexAttributeLists, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAttributesForPolygon, VertexAttributeListsForEachHole, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexAttributesForPolygon, 0x0028);
		}

		// struct FVerticesForEdge
		TEST_METHOD(ScriptStruct__EditableMesh__VerticesForEdge)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVerticesForEdge, EdgeID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVerticesForEdge, NewVertexID0, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVerticesForEdge, NewVertexID1, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVerticesForEdge, 0x000C);
		}

		// struct FAttributesForEdge
		TEST_METHOD(ScriptStruct__EditableMesh__AttributesForEdge)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForEdge, EdgeID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForEdge, UnknownData_VJQK, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForEdge, EdgeAttributes, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAttributesForEdge, 0x0018);
		}

		// struct FVertexToMove
		TEST_METHOD(ScriptStruct__EditableMesh__VertexToMove)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexToMove, VertexID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexToMove, NewVertexPosition, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexToMove, 0x0010);
		}

		// struct FVertexAndAttributes
		TEST_METHOD(ScriptStruct__EditableMesh__VertexAndAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAndAttributes, VertexInstanceID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAndAttributes, VertexID, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAndAttributes, PolygonVertexAttributes, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexAndAttributes, 0x0018);
		}

		// struct FSubdividedWireEdge
		TEST_METHOD(ScriptStruct__EditableMesh__SubdividedWireEdge)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedWireEdge, EdgeVertex0PositionIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedWireEdge, EdgeVertex1PositionIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedWireEdge, UnknownData_LQYT, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubdividedWireEdge, 0x000C);
		}

		// struct FSubdivisionLimitData
		TEST_METHOD(ScriptStruct__EditableMesh__SubdivisionLimitData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdivisionLimitData, VertexPositions, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdivisionLimitData, Sections, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdivisionLimitData, SubdividedWireEdges, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubdivisionLimitData, 0x0030);
		}

		// struct FVertexToCreate
		TEST_METHOD(ScriptStruct__EditableMesh__VertexToCreate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexToCreate, VertexAttributes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexToCreate, OriginalVertexID, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexToCreate, UnknownData_FMNW, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexToCreate, 0x0018);
		}

		// struct FVertexInstanceToCreate
		TEST_METHOD(ScriptStruct__EditableMesh__VertexInstanceToCreate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstanceToCreate, VertexID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstanceToCreate, UnknownData_EO8N, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstanceToCreate, VertexInstanceAttributes, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstanceToCreate, OriginalVertexInstanceID, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstanceToCreate, UnknownData_5W2R, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexInstanceToCreate, 0x0020);
		}

		// struct FPolygonToCreate
		TEST_METHOD(ScriptStruct__EditableMesh__PolygonToCreate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, PolygonGroupID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, UnknownData_VGI8, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, PerimeterVertices, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, OriginalPolygonID, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, PolygonEdgeHardness, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, UnknownData_51X0, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonToCreate, 0x0020);
		}

		// struct FPolygonGroupToCreate
		TEST_METHOD(ScriptStruct__EditableMesh__PolygonGroupToCreate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonGroupToCreate, PolygonGroupAttributes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonGroupToCreate, OriginalPolygonGroupID, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonGroupToCreate, UnknownData_B8OY, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonGroupToCreate, 0x0018);
		}

		// struct FEdgeToCreate
		TEST_METHOD(ScriptStruct__EditableMesh__EdgeToCreate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdgeToCreate, VertexID0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdgeToCreate, VertexID1, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdgeToCreate, ConnectedPolygons, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdgeToCreate, EdgeAttributes, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdgeToCreate, OriginalEdgeID, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdgeToCreate, UnknownData_D0CZ, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdgeToCreate, 0x0030);
		}

		// struct FVertexIndexAndInstanceID
		TEST_METHOD(ScriptStruct__EditableMesh__VertexIndexAndInstanceID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexIndexAndInstanceID, ContourIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexIndexAndInstanceID, VertexInstanceID, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexIndexAndInstanceID, 0x0008);
		}

		// struct FVertexInstancesForPolygonHole
		TEST_METHOD(ScriptStruct__EditableMesh__VertexInstancesForPolygonHole)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstancesForPolygonHole, VertexIndicesAndInstanceIDs, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexInstancesForPolygonHole, 0x0010);
		}

		// struct FChangeVertexInstancesForPolygon
		TEST_METHOD(ScriptStruct__EditableMesh__ChangeVertexInstancesForPolygon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChangeVertexInstancesForPolygon, PolygonID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChangeVertexInstancesForPolygon, UnknownData_QMAH, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChangeVertexInstancesForPolygon, PerimeterVertexIndicesAndInstanceIDs, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChangeVertexInstancesForPolygon, VertexIndicesAndInstanceIDsForEachHole, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChangeVertexInstancesForPolygon, 0x0028);
		}

		// struct FPolygonGroupForPolygon
		TEST_METHOD(ScriptStruct__EditableMesh__PolygonGroupForPolygon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonGroupForPolygon, PolygonID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonGroupForPolygon, PolygonGroupID, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonGroupForPolygon, 0x0008);
		}

		// struct FAdaptorPolygon2Group
		TEST_METHOD(ScriptStruct__EditableMesh__AdaptorPolygon2Group)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdaptorPolygon2Group, RenderingSectionIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdaptorPolygon2Group, MaterialIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdaptorPolygon2Group, MaxTriangles, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdaptorPolygon2Group, UnknownData_IYM1, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdaptorPolygon2Group, 0x0048);
		}

		// struct FAdaptorTriangleID : public FElementID
		TEST_METHOD(ScriptStruct__EditableMesh__AdaptorTriangleID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdaptorTriangleID, 0x0004);
		}

		// struct FAdaptorPolygon
		TEST_METHOD(ScriptStruct__EditableMesh__AdaptorPolygon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdaptorPolygon, PolygonGroupID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdaptorPolygon, UnknownData_CXLT, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdaptorPolygon, TriangulatedPolygonTriangleIndices, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdaptorPolygon, 0x0018);
		}

		// struct FLobbyPoseStruct
		TEST_METHOD(UserDefinedStruct__LobbyPoseStruct__LobbyPoseStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLobbyPoseStruct, CharacterClass_4_D8F8AB0F413982D30F7D3491105D3080, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLobbyPoseStruct, AnimationBlueprint_8_B7C90FC74FEBE51770C9F38961DDA239, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLobbyPoseStruct, 0x0010);
		}

		// struct FProfilerServiceUnsubscribe
		TEST_METHOD(ScriptStruct__ProfilerMessages__ProfilerServiceUnsubscribe)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilerServiceUnsubscribe, SessionId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilerServiceUnsubscribe, instanceId, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProfilerServiceUnsubscribe, 0x0020);
		}

		// struct FProfilerServiceSubscribe
		TEST_METHOD(ScriptStruct__ProfilerMessages__ProfilerServiceSubscribe)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilerServiceSubscribe, SessionId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilerServiceSubscribe, instanceId, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProfilerServiceSubscribe, 0x0020);
		}

		// struct FProfilerServicePong
		TEST_METHOD(ScriptStruct__ProfilerMessages__ProfilerServicePong)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilerServicePong, UnknownData_I1R2, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProfilerServicePong, 0x0001);
		}

		// struct FProfilerServicePing
		TEST_METHOD(ScriptStruct__ProfilerMessages__ProfilerServicePing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilerServicePing, UnknownData_SEXE, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProfilerServicePing, 0x0001);
		}

		// struct FProfilerServiceFileChunk
		TEST_METHOD(ScriptStruct__ProfilerMessages__ProfilerServiceFileChunk)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilerServiceFileChunk, instanceId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilerServiceFileChunk, Filename, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilerServiceFileChunk, HexData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilerServiceFileChunk, Header, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilerServiceFileChunk, ChunkHash, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProfilerServiceFileChunk, 0x0050);
		}

		// struct FProfilerServicePreviewAck
		TEST_METHOD(ScriptStruct__ProfilerMessages__ProfilerServicePreviewAck)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilerServicePreviewAck, instanceId, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProfilerServicePreviewAck, 0x0010);
		}

		// struct FProfilerServiceRequest
		TEST_METHOD(ScriptStruct__ProfilerMessages__ProfilerServiceRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilerServiceRequest, Request, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProfilerServiceRequest, 0x0004);
		}

		// struct FProfilerServicePreview
		TEST_METHOD(ScriptStruct__ProfilerMessages__ProfilerServicePreview)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilerServicePreview, bRequestedPreviewState, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProfilerServicePreview, 0x0001);
		}

		// struct FProfilerServiceCapture
		TEST_METHOD(ScriptStruct__ProfilerMessages__ProfilerServiceCapture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilerServiceCapture, bRequestedCaptureState, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProfilerServiceCapture, 0x0001);
		}

		// struct FProfilerServiceAuthorize
		TEST_METHOD(ScriptStruct__ProfilerMessages__ProfilerServiceAuthorize)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilerServiceAuthorize, SessionId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilerServiceAuthorize, instanceId, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProfilerServiceAuthorize, 0x0020);
		}

		// struct FProfilerServiceData2
		TEST_METHOD(ScriptStruct__ProfilerMessages__ProfilerServiceData2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilerServiceData2, instanceId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilerServiceData2, Frame, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilerServiceData2, CompressedSize, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilerServiceData2, UncompressedSize, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilerServiceData2, HexData, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProfilerServiceData2, 0x0030);
		}

		// struct FS_AuraData
		TEST_METHOD(UserDefinedStruct__S_AuraData__S_AuraData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_AuraData, AuraEffect_7_54D29EEB486BD5613BE4AE8738CAF2CC, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_AuraData, 0x0008);
		}

		// struct FMovieSceneWidgetMaterialSectionTemplate : public FMovieSceneParameterSectionTemplate
		TEST_METHOD(ScriptStruct__UMG__MovieSceneWidgetMaterialSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneWidgetMaterialSectionTemplate, BrushPropertyNamePath, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneWidgetMaterialSectionTemplate, 0x0060);
		}

		// struct FRichTextStyleRow : public FTableRowBase
		TEST_METHOD(ScriptStruct__UMG__RichTextStyleRow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichTextStyleRow, TextStyle, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRichTextStyleRow, 0x0270);
		}

		// struct FRichImageRow : public FTableRowBase
		TEST_METHOD(ScriptStruct__UMG__RichImageRow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichImageRow, Brush, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRichImageRow, 0x0090);
		}

		// struct FSlateMeshVertex
		TEST_METHOD(ScriptStruct__UMG__SlateMeshVertex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, Color, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV0, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV1, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV2, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV3, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV4, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV5, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateMeshVertex, 0x003C);
		}

		// struct FSlateChildSize
		TEST_METHOD(ScriptStruct__UMG__SlateChildSize)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateChildSize, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateChildSize, SizeRule, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateChildSize, UnknownData_G2ZV, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateChildSize, 0x0008);
		}

		// struct FNamedSlotBinding
		TEST_METHOD(ScriptStruct__UMG__NamedSlotBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedSlotBinding, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedSlotBinding, Content, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedSlotBinding, 0x0010);
		}

		// struct FAnimationEventBinding
		TEST_METHOD(ScriptStruct__UMG__AnimationEventBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationEventBinding, Animation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationEventBinding, Delegate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationEventBinding, AnimationEvent, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationEventBinding, UnknownData_7NY2, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationEventBinding, UserTag, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationEventBinding, UnknownData_MOFM, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationEventBinding, 0x0028);
		}

		// struct FWidgetAnimationBinding
		TEST_METHOD(ScriptStruct__UMG__WidgetAnimationBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, WidgetName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, SlotWidgetName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, AnimationGuid, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, bIsRootWidget, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, UnknownData_07B9, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWidgetAnimationBinding, 0x0024);
		}

		// struct FBlueprintWidgetAnimationDelegateBinding
		TEST_METHOD(ScriptStruct__UMG__BlueprintWidgetAnimationDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintWidgetAnimationDelegateBinding, Action, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintWidgetAnimationDelegateBinding, UnknownData_Y391, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintWidgetAnimationDelegateBinding, AnimationToBind, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintWidgetAnimationDelegateBinding, FunctionNameToBind, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintWidgetAnimationDelegateBinding, UserTag, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintWidgetAnimationDelegateBinding, 0x001C);
		}

		// struct FDynamicPropertyPath : public FCachedPropertyPath
		TEST_METHOD(ScriptStruct__UMG__DynamicPropertyPath)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDynamicPropertyPath, 0x0030);
		}

		// struct FDelegateRuntimeBinding
		TEST_METHOD(ScriptStruct__UMG__DelegateRuntimeBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, ObjectName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, PropertyName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, FunctionName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, SourcePath, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, Kind, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, UnknownData_T1ZM, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDelegateRuntimeBinding, 0x0058);
		}

		// struct FWidgetComponentInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__UMG__WidgetComponentInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetComponentInstanceData, UnknownData_SAT7, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWidgetComponentInstanceData, 0x00B8);
		}

		// struct FWidgetNavigationData
		TEST_METHOD(ScriptStruct__UMG__WidgetNavigationData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetNavigationData, Rule, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetNavigationData, UnknownData_ZQAA, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetNavigationData, WidgetToFocus, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetNavigationData, Widget, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetNavigationData, CustomDelegate, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWidgetNavigationData, 0x0024);
		}

		// struct FWidgetTransform
		TEST_METHOD(ScriptStruct__UMG__WidgetTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetTransform, Translation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetTransform, Scale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetTransform, Shear, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetTransform, Angle, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWidgetTransform, 0x001C);
		}

		// struct FEventReply
		TEST_METHOD(ScriptStruct__UMG__EventReply)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventReply, UnknownData_BMEP, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEventReply, 0x00B8);
		}

		// struct FPaintContext
		TEST_METHOD(ScriptStruct__UMG__PaintContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintContext, UnknownData_NIMG, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaintContext, 0x0030);
		}

		// struct FShapedTextOptions
		TEST_METHOD(ScriptStruct__UMG__ShapedTextOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FShapedTextOptions, TextShapingMethod, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FShapedTextOptions, TextFlowDirection, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FShapedTextOptions, 0x0003);
		}

		// struct FAnchorData
		TEST_METHOD(ScriptStruct__UMG__AnchorData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchorData, Offsets, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchorData, Anchors, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchorData, Alignment, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnchorData, 0x0028);
		}

		// struct FMovieScene2DTransformMask
		TEST_METHOD(ScriptStruct__UMG__MovieScene2DTransformMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene2DTransformMask, Mask, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene2DTransformMask, 0x0004);
		}

		// struct FMovieScene2DTransformSectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__UMG__MovieScene2DTransformSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene2DTransformSectionTemplate, Translation, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene2DTransformSectionTemplate, Rotation, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene2DTransformSectionTemplate, Scale, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene2DTransformSectionTemplate, Shear, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene2DTransformSectionTemplate, BlendType, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene2DTransformSectionTemplate, UnknownData_XVK2, 0x04A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene2DTransformSectionTemplate, Mask, 0x04AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene2DTransformSectionTemplate, 0x04B0);
		}

		// struct FMovieSceneMarginSectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__UMG__MovieSceneMarginSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, TopCurve, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, LeftCurve, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, RightCurve, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, BottomCurve, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, BlendType, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, UnknownData_81WY, 0x02C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneMarginSectionTemplate, 0x02D0);
		}

		// struct FS_FilterChat
		TEST_METHOD(UserDefinedStruct__S_FilterChat__S_FilterChat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_FilterChat, ReplaceWord_2_4709A6D24AF886AC4FF93392C2845D13, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_FilterChat, 0x0010);
		}

		// struct FS_LimitItemChanged
		TEST_METHOD(UserDefinedStruct__S_LimitItemChanged__S_LimitItemChanged)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_LimitItemChanged, Type_20_BBB68F924E56A1459564389A91335992, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_LimitItemChanged, MeleeType_12_957347CC4A4A9596A9DA8EB76A4F7B75, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_LimitItemChanged, RangeType_14_372AE8104792150328D3B89FB3D41D43, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_LimitItemChanged, TrapType_17_F6534FFE4443F99CD2E418975E14E91C, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_LimitItemChanged, GeneralType_4_D48B16D5424B0B89061B27B5C64B66EA, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_LimitItemChanged, 0x0050);
		}

		// struct FCameraLookatTrackingSettings
		TEST_METHOD(ScriptStruct__CinematicCamera__CameraLookatTrackingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, UnknownData_3QP6, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, LookAtTrackingInterpSpeed, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, UnknownData_3N36, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, ActorToTrack, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, RelativeOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, UnknownData_0TDL, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraLookatTrackingSettings, 0x0050);
		}

		// struct FCameraTrackingFocusSettings
		TEST_METHOD(ScriptStruct__CinematicCamera__CameraTrackingFocusSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraTrackingFocusSettings, ActorToTrack, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraTrackingFocusSettings, RelativeOffset, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraTrackingFocusSettings, UnknownData_S0IL, 0x0035);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraTrackingFocusSettings, 0x0038);
		}

		// struct FCameraFocusSettings
		TEST_METHOD(ScriptStruct__CinematicCamera__CameraFocusSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, FocusMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, UnknownData_0NMY, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, ManualFocusDistance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, TrackingFocusSettings, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, UnknownData_P922, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, DebugFocusPlaneColor, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, UnknownData_2CZL, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, FocusSmoothingInterpSpeed, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, FocusOffset, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, UnknownData_K4ZW, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraFocusSettings, 0x0058);
		}

		// struct FCameraFilmbackSettings
		TEST_METHOD(ScriptStruct__CinematicCamera__CameraFilmbackSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFilmbackSettings, SensorWidth, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFilmbackSettings, SensorHeight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFilmbackSettings, SensorAspectRatio, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraFilmbackSettings, 0x000C);
		}

		// struct FNamedFilmbackPreset
		TEST_METHOD(ScriptStruct__CinematicCamera__NamedFilmbackPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFilmbackPreset, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFilmbackPreset, FilmbackSettings, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFilmbackPreset, UnknownData_56MF, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedFilmbackPreset, 0x0020);
		}

		// struct FCameraLensSettings
		TEST_METHOD(ScriptStruct__CinematicCamera__CameraLensSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, MinFocalLength, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, MaxFocalLength, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, MinFStop, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, MaxFStop, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, MinimumFocusDistance, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, DiaphragmBladeCount, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraLensSettings, 0x0018);
		}

		// struct FNamedLensPreset
		TEST_METHOD(ScriptStruct__CinematicCamera__NamedLensPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedLensPreset, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedLensPreset, LensSettings, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedLensPreset, 0x0028);
		}

		// struct FKey
		TEST_METHOD(ScriptStruct__InputCore__Key)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKey, KeyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKey, UnknownData_28UQ, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKey, 0x0018);
		}

		// struct FMetaDataTextKeyPattern
		TEST_METHOD(ScriptStruct__Localization__MetaDataTextKeyPattern)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMetaDataTextKeyPattern, Pattern, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMetaDataTextKeyPattern, 0x0010);
		}

		// struct FMetaDataKeyName
		TEST_METHOD(ScriptStruct__Localization__MetaDataKeyName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMetaDataKeyName, Name, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMetaDataKeyName, 0x0010);
		}

		// struct FGatherTextExcludePath
		TEST_METHOD(ScriptStruct__Localization__GatherTextExcludePath)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGatherTextExcludePath, PathRoot, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGatherTextExcludePath, UnknownData_0U4T, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGatherTextExcludePath, Pattern, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGatherTextExcludePath, 0x0018);
		}

		// struct FLocalizationCompilationSettings
		TEST_METHOD(ScriptStruct__Localization__LocalizationCompilationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizationCompilationSettings, SkipSourceCheck, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocalizationCompilationSettings, 0x0001);
		}

		// struct FLocalizationExportingSettings
		TEST_METHOD(ScriptStruct__Localization__LocalizationExportingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizationExportingSettings, CollapseMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizationExportingSettings, ShouldPersistCommentsOnExport, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizationExportingSettings, ShouldAddSourceLocationsAsComments, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocalizationExportingSettings, 0x0003);
		}

		// struct FMetaDataKeyGatherSpecification
		TEST_METHOD(ScriptStruct__Localization__MetaDataKeyGatherSpecification)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMetaDataKeyGatherSpecification, MetaDataKey, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMetaDataKeyGatherSpecification, TextNamespace, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMetaDataKeyGatherSpecification, TextKeyPattern, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMetaDataKeyGatherSpecification, 0x0030);
		}

		// struct FGatherTextIncludePath
		TEST_METHOD(ScriptStruct__Localization__GatherTextIncludePath)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGatherTextIncludePath, PathRoot, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGatherTextIncludePath, UnknownData_SAHT, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGatherTextIncludePath, Pattern, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGatherTextIncludePath, 0x0018);
		}

		// struct FGatherTextFromMetaDataConfiguration
		TEST_METHOD(ScriptStruct__Localization__GatherTextFromMetaDataConfiguration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGatherTextFromMetaDataConfiguration, IsEnabled, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGatherTextFromMetaDataConfiguration, UnknownData_AR6R, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGatherTextFromMetaDataConfiguration, IncludePathWildcards, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGatherTextFromMetaDataConfiguration, ExcludePathWildcards, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGatherTextFromMetaDataConfiguration, KeySpecifications, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGatherTextFromMetaDataConfiguration, ShouldGatherFromEditorOnlyData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGatherTextFromMetaDataConfiguration, UnknownData_CE01, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGatherTextFromMetaDataConfiguration, 0x0040);
		}

		// struct FGatherTextFileExtension
		TEST_METHOD(ScriptStruct__Localization__GatherTextFileExtension)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGatherTextFileExtension, Pattern, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGatherTextFileExtension, 0x0010);
		}

		// struct FGatherTextFromPackagesConfiguration
		TEST_METHOD(ScriptStruct__Localization__GatherTextFromPackagesConfiguration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGatherTextFromPackagesConfiguration, IsEnabled, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGatherTextFromPackagesConfiguration, UnknownData_7UDX, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGatherTextFromPackagesConfiguration, IncludePathWildcards, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGatherTextFromPackagesConfiguration, ExcludePathWildcards, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGatherTextFromPackagesConfiguration, FileExtensions, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGatherTextFromPackagesConfiguration, Collections, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGatherTextFromPackagesConfiguration, ShouldGatherFromEditorOnlyData, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGatherTextFromPackagesConfiguration, SkipGatherCache, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGatherTextFromPackagesConfiguration, UnknownData_K2IB, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGatherTextFromPackagesConfiguration, 0x0050);
		}

		// struct FGatherTextSearchDirectory
		TEST_METHOD(ScriptStruct__Localization__GatherTextSearchDirectory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGatherTextSearchDirectory, PathRoot, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGatherTextSearchDirectory, UnknownData_7ZD9, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGatherTextSearchDirectory, Path, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGatherTextSearchDirectory, 0x0018);
		}

		// struct FGatherTextFromTextFilesConfiguration
		TEST_METHOD(ScriptStruct__Localization__GatherTextFromTextFilesConfiguration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGatherTextFromTextFilesConfiguration, IsEnabled, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGatherTextFromTextFilesConfiguration, UnknownData_MEJ7, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGatherTextFromTextFilesConfiguration, SearchDirectories, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGatherTextFromTextFilesConfiguration, ExcludePathWildcards, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGatherTextFromTextFilesConfiguration, FileExtensions, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGatherTextFromTextFilesConfiguration, ShouldGatherFromEditorOnlyData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGatherTextFromTextFilesConfiguration, UnknownData_921S, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGatherTextFromTextFilesConfiguration, 0x0040);
		}

		// struct FLocalizationImportDialogueSettings
		TEST_METHOD(ScriptStruct__Localization__LocalizationImportDialogueSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizationImportDialogueSettings, RawAudioPath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizationImportDialogueSettings, ImportedDialogueFolder, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizationImportDialogueSettings, bImportNativeAsSource, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizationImportDialogueSettings, UnknownData_BCVF, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocalizationImportDialogueSettings, 0x0028);
		}

		// struct FCultureStatistics
		TEST_METHOD(ScriptStruct__Localization__CultureStatistics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCultureStatistics, CultureName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCultureStatistics, WordCount, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCultureStatistics, UnknownData_QXDK, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCultureStatistics, 0x0018);
		}

		// struct FLocalizationTargetSettings
		TEST_METHOD(ScriptStruct__Localization__LocalizationTargetSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizationTargetSettings, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizationTargetSettings, Guid, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizationTargetSettings, ConflictStatus, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizationTargetSettings, UnknownData_PQU8, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizationTargetSettings, TargetDependencies, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizationTargetSettings, AdditionalManifestDependencies, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizationTargetSettings, RequiredModuleNames, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizationTargetSettings, GatherFromTextFiles, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizationTargetSettings, GatherFromPackages, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizationTargetSettings, GatherFromMetaData, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizationTargetSettings, ExportSettings, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizationTargetSettings, CompileSettings, 0x012B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizationTargetSettings, UnknownData_KK4V, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizationTargetSettings, ImportDialogueSettings, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizationTargetSettings, NativeCultureIndex, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizationTargetSettings, UnknownData_GMHF, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizationTargetSettings, SupportedCulturesStatistics, 0x0160);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocalizationTargetSettings, 0x0170);
		}

		// struct FCreateMatchmakingRuleSetRequest
		TEST_METHOD(ScriptStruct__GameLift__CreateMatchmakingRuleSetRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateMatchmakingRuleSetRequest, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateMatchmakingRuleSetRequest, ruleSetBody, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCreateMatchmakingRuleSetRequest, 0x0020);
		}

		// struct FMatchmakingRuleSet
		TEST_METHOD(ScriptStruct__GameLift__MatchmakingRuleSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingRuleSet, ruleSetName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingRuleSet, ruleSetBody, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingRuleSet, creationTime, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMatchmakingRuleSet, 0x0028);
		}

		// struct FCreateMatchmakingRuleSetResult
		TEST_METHOD(ScriptStruct__GameLift__CreateMatchmakingRuleSetResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateMatchmakingRuleSetResult, ruleSet, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCreateMatchmakingRuleSetResult, 0x0028);
		}

		// struct FCreatePlayerSessionRequest
		TEST_METHOD(ScriptStruct__GameLift__CreatePlayerSessionRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreatePlayerSessionRequest, awsResourceName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreatePlayerSessionRequest, PlayerId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreatePlayerSessionRequest, playerData, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCreatePlayerSessionRequest, 0x0030);
		}

		// struct FAWSPlayerSession
		TEST_METHOD(ScriptStruct__GameLift__AWSPlayerSession)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSPlayerSession, playerSessionId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSPlayerSession, PlayerId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSPlayerSession, gameSessionId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSPlayerSession, fleetId, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSPlayerSession, creationTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSPlayerSession, terminationTime, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSPlayerSession, Status, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSPlayerSession, UnknownData_P99U, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSPlayerSession, ipAddress, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSPlayerSession, dnsName, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSPlayerSession, Port, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSPlayerSession, UnknownData_I3CX, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSPlayerSession, playerData, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAWSPlayerSession, 0x0090);
		}

		// struct FCreatePlayerSessionResult
		TEST_METHOD(ScriptStruct__GameLift__CreatePlayerSessionResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreatePlayerSessionResult, playerSession, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCreatePlayerSessionResult, 0x0090);
		}

		// struct FCreatePlayerSessionsRequest
		TEST_METHOD(ScriptStruct__GameLift__CreatePlayerSessionsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreatePlayerSessionsRequest, awsResourceName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreatePlayerSessionsRequest, playerIds, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreatePlayerSessionsRequest, playerDataMap, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCreatePlayerSessionsRequest, 0x0070);
		}

		// struct FCreatePlayerSessionsResult
		TEST_METHOD(ScriptStruct__GameLift__CreatePlayerSessionsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreatePlayerSessionsResult, playerSessions, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCreatePlayerSessionsResult, 0x0010);
		}

		// struct FS3Location
		TEST_METHOD(ScriptStruct__GameLift__S3Location)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS3Location, bucket, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS3Location, Key, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS3Location, roleArn, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS3Location, objectVersion, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS3Location, 0x0040);
		}

		// struct FCreateScriptRequest
		TEST_METHOD(ScriptStruct__GameLift__CreateScriptRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateScriptRequest, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateScriptRequest, Version, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateScriptRequest, storageLocation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateScriptRequest, zipFile, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCreateScriptRequest, 0x0070);
		}

		// struct FScript
		TEST_METHOD(ScriptStruct__GameLift__Script)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScript, scriptId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScript, Name, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScript, Version, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScript, sizeOnDisk, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScript, UnknownData_Q835, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScript, creationTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScript, storageLocation, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScript, 0x0080);
		}

		// struct FCreateScriptResult
		TEST_METHOD(ScriptStruct__GameLift__CreateScriptResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateScriptResult, Script, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCreateScriptResult, 0x0080);
		}

		// struct FCreateVpcPeeringAuthorizationRequest
		TEST_METHOD(ScriptStruct__GameLift__CreateVpcPeeringAuthorizationRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateVpcPeeringAuthorizationRequest, gameLiftAwsAccountId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateVpcPeeringAuthorizationRequest, peerVpcId, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCreateVpcPeeringAuthorizationRequest, 0x0020);
		}

		// struct FVpcPeeringAuthorization
		TEST_METHOD(ScriptStruct__GameLift__VpcPeeringAuthorization)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVpcPeeringAuthorization, gameLiftAwsAccountId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVpcPeeringAuthorization, peerVpcAwsAccountId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVpcPeeringAuthorization, peerVpcId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVpcPeeringAuthorization, creationTime, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVpcPeeringAuthorization, expirationTime, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVpcPeeringAuthorization, 0x0040);
		}

		// struct FCreateVpcPeeringAuthorizationResult
		TEST_METHOD(ScriptStruct__GameLift__CreateVpcPeeringAuthorizationResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateVpcPeeringAuthorizationResult, VpcPeeringAuthorization, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCreateVpcPeeringAuthorizationResult, 0x0040);
		}

		// struct FCreateVpcPeeringConnectionRequest
		TEST_METHOD(ScriptStruct__GameLift__CreateVpcPeeringConnectionRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateVpcPeeringConnectionRequest, fleetId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateVpcPeeringConnectionRequest, peerVpcAwsAccountId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateVpcPeeringConnectionRequest, peerVpcId, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCreateVpcPeeringConnectionRequest, 0x0030);
		}

		// struct FCreateVpcPeeringConnectionResult
		TEST_METHOD(ScriptStruct__GameLift__CreateVpcPeeringConnectionResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateVpcPeeringConnectionResult, UnknownData_E9YK, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCreateVpcPeeringConnectionResult, 0x0001);
		}

		// struct FDeleteBuildRequest
		TEST_METHOD(ScriptStruct__GameLift__DeleteBuildRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDeleteBuildRequest, buildId, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDeleteBuildRequest, 0x0010);
		}

		// struct FDeleteFleetRequest
		TEST_METHOD(ScriptStruct__GameLift__DeleteFleetRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDeleteFleetRequest, fleetId, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDeleteFleetRequest, 0x0010);
		}

		// struct FDeleteGameSessionQueueRequest
		TEST_METHOD(ScriptStruct__GameLift__DeleteGameSessionQueueRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDeleteGameSessionQueueRequest, Name, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDeleteGameSessionQueueRequest, 0x0010);
		}

		// struct FDeleteGameSessionQueueResult
		TEST_METHOD(ScriptStruct__GameLift__DeleteGameSessionQueueResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDeleteGameSessionQueueResult, UnknownData_3CJ2, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDeleteGameSessionQueueResult, 0x0001);
		}

		// struct FDeleteMatchmakingConfigurationRequest
		TEST_METHOD(ScriptStruct__GameLift__DeleteMatchmakingConfigurationRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDeleteMatchmakingConfigurationRequest, Name, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDeleteMatchmakingConfigurationRequest, 0x0010);
		}

		// struct FDeleteMatchmakingConfigurationResult
		TEST_METHOD(ScriptStruct__GameLift__DeleteMatchmakingConfigurationResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDeleteMatchmakingConfigurationResult, UnknownData_4U9Y, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDeleteMatchmakingConfigurationResult, 0x0001);
		}

		// struct FDeleteMatchmakingRuleSetRequest
		TEST_METHOD(ScriptStruct__GameLift__DeleteMatchmakingRuleSetRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDeleteMatchmakingRuleSetRequest, Name, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDeleteMatchmakingRuleSetRequest, 0x0010);
		}

		// struct FDeleteMatchmakingRuleSetResult
		TEST_METHOD(ScriptStruct__GameLift__DeleteMatchmakingRuleSetResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDeleteMatchmakingRuleSetResult, UnknownData_0401, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDeleteMatchmakingRuleSetResult, 0x0001);
		}

		// struct FDeleteScalingPolicyRequest
		TEST_METHOD(ScriptStruct__GameLift__DeleteScalingPolicyRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDeleteScalingPolicyRequest, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDeleteScalingPolicyRequest, fleetId, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDeleteScalingPolicyRequest, 0x0020);
		}

		// struct FDeleteScriptRequest
		TEST_METHOD(ScriptStruct__GameLift__DeleteScriptRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDeleteScriptRequest, scriptId, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDeleteScriptRequest, 0x0010);
		}

		// struct FDeleteVpcPeeringAuthorizationRequest
		TEST_METHOD(ScriptStruct__GameLift__DeleteVpcPeeringAuthorizationRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDeleteVpcPeeringAuthorizationRequest, gameLiftAwsAccountId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDeleteVpcPeeringAuthorizationRequest, peerVpcId, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDeleteVpcPeeringAuthorizationRequest, 0x0020);
		}

		// struct FDeleteVpcPeeringAuthorizationResult
		TEST_METHOD(ScriptStruct__GameLift__DeleteVpcPeeringAuthorizationResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDeleteVpcPeeringAuthorizationResult, UnknownData_6K4C, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDeleteVpcPeeringAuthorizationResult, 0x0001);
		}

		// struct FDeleteVpcPeeringConnectionRequest
		TEST_METHOD(ScriptStruct__GameLift__DeleteVpcPeeringConnectionRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDeleteVpcPeeringConnectionRequest, fleetId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDeleteVpcPeeringConnectionRequest, vpcPeeringConnectionId, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDeleteVpcPeeringConnectionRequest, 0x0020);
		}

		// struct FDeleteVpcPeeringConnectionResult
		TEST_METHOD(ScriptStruct__GameLift__DeleteVpcPeeringConnectionResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDeleteVpcPeeringConnectionResult, UnknownData_CIEL, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDeleteVpcPeeringConnectionResult, 0x0001);
		}

		// struct FDescribeAliasRequest
		TEST_METHOD(ScriptStruct__GameLift__DescribeAliasRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeAliasRequest, aliasId, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDescribeAliasRequest, 0x0010);
		}

		// struct FRoutingStrategy
		TEST_METHOD(ScriptStruct__GameLift__RoutingStrategy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRoutingStrategy, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRoutingStrategy, UnknownData_NQ98, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRoutingStrategy, fleetId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRoutingStrategy, Message, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRoutingStrategy, 0x0028);
		}

		// struct FAlias
		TEST_METHOD(ScriptStruct__GameLift__Alias)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlias, aliasId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlias, Name, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlias, aliasArn, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlias, Description, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlias, RoutingStrategy, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlias, creationTime, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlias, lastUpdatedTime, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAlias, 0x0078);
		}

		// struct FDescribeAliasResult
		TEST_METHOD(ScriptStruct__GameLift__DescribeAliasResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeAliasResult, Alias, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDescribeAliasResult, 0x0078);
		}

		// struct FDescribeBuildRequest
		TEST_METHOD(ScriptStruct__GameLift__DescribeBuildRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeBuildRequest, buildId, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDescribeBuildRequest, 0x0010);
		}

		// struct FBuild
		TEST_METHOD(ScriptStruct__GameLift__Build)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuild, buildId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuild, Name, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuild, Version, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuild, Status, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuild, UnknownData_KNPA, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuild, sizeOnDisk, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuild, operatingSystem, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuild, UnknownData_3W31, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuild, creationTime, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuild, 0x0048);
		}

		// struct FDescribeBuildResult
		TEST_METHOD(ScriptStruct__GameLift__DescribeBuildResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeBuildResult, Build, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDescribeBuildResult, 0x0048);
		}

		// struct FDescribeEC2InstanceLimitsRequest
		TEST_METHOD(ScriptStruct__GameLift__DescribeEC2InstanceLimitsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeEC2InstanceLimitsRequest, eC2InstanceType, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDescribeEC2InstanceLimitsRequest, 0x0001);
		}

		// struct FEC2InstanceLimit
		TEST_METHOD(ScriptStruct__GameLift__EC2InstanceLimit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEC2InstanceLimit, eC2InstanceType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEC2InstanceLimit, UnknownData_VLAN, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEC2InstanceLimit, currentInstances, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEC2InstanceLimit, instanceLimit, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEC2InstanceLimit, 0x000C);
		}

		// struct FDescribeEC2InstanceLimitsResult
		TEST_METHOD(ScriptStruct__GameLift__DescribeEC2InstanceLimitsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeEC2InstanceLimitsResult, EC2InstanceLimits, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDescribeEC2InstanceLimitsResult, 0x0010);
		}

		// struct FDescribeFleetAttributesRequest
		TEST_METHOD(ScriptStruct__GameLift__DescribeFleetAttributesRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeFleetAttributesRequest, fleetIds, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeFleetAttributesRequest, limit, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeFleetAttributesRequest, UnknownData_L3HA, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeFleetAttributesRequest, nextToken, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDescribeFleetAttributesRequest, 0x0028);
		}

		// struct FCertificateConfiguration
		TEST_METHOD(ScriptStruct__GameLift__CertificateConfiguration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCertificateConfiguration, certificateType, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCertificateConfiguration, 0x0001);
		}

		// struct FResourceCreationLimitPolicy
		TEST_METHOD(ScriptStruct__GameLift__ResourceCreationLimitPolicy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FResourceCreationLimitPolicy, newGameSessionsPerCreator, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FResourceCreationLimitPolicy, policyPeriodInMinutes, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FResourceCreationLimitPolicy, 0x0008);
		}

		// struct FFleetAttributes
		TEST_METHOD(ScriptStruct__GameLift__FleetAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFleetAttributes, fleetId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFleetAttributes, fleetArn, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFleetAttributes, fleetType, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFleetAttributes, instanceType, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFleetAttributes, UnknownData_S5YI, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFleetAttributes, Description, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFleetAttributes, Name, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFleetAttributes, creationTime, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFleetAttributes, terminationTime, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFleetAttributes, Status, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFleetAttributes, UnknownData_9I5X, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFleetAttributes, buildId, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFleetAttributes, scriptId, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFleetAttributes, serverLaunchPath, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFleetAttributes, serverLaunchParameters, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFleetAttributes, LogPaths, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFleetAttributes, newGameSessionProtectionPolicy, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFleetAttributes, operatingSystem, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFleetAttributes, UnknownData_G885, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFleetAttributes, ResourceCreationLimitPolicy, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFleetAttributes, UnknownData_QOK9, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFleetAttributes, metricGroups, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFleetAttributes, stoppedActions, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFleetAttributes, instanceRoleArn, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFleetAttributes, CertificateConfiguration, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFleetAttributes, UnknownData_OJNI, 0x00F1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFleetAttributes, 0x00F8);
		}

		// struct FDescribeFleetAttributesResult
		TEST_METHOD(ScriptStruct__GameLift__DescribeFleetAttributesResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeFleetAttributesResult, FleetAttributes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeFleetAttributesResult, nextToken, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDescribeFleetAttributesResult, 0x0020);
		}

		// struct FDescribeFleetCapacityRequest
		TEST_METHOD(ScriptStruct__GameLift__DescribeFleetCapacityRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeFleetCapacityRequest, fleetIds, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeFleetCapacityRequest, limit, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeFleetCapacityRequest, UnknownData_OQOY, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeFleetCapacityRequest, nextToken, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDescribeFleetCapacityRequest, 0x0028);
		}

		// struct FEC2InstanceCounts
		TEST_METHOD(ScriptStruct__GameLift__EC2InstanceCounts)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEC2InstanceCounts, DESIRED, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEC2InstanceCounts, MINIMUM, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEC2InstanceCounts, MAXIMUM, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEC2InstanceCounts, PENDING, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEC2InstanceCounts, Active, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEC2InstanceCounts, Idle, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEC2InstanceCounts, TERMINATING, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEC2InstanceCounts, 0x001C);
		}

		// struct FFleetCapacity
		TEST_METHOD(ScriptStruct__GameLift__FleetCapacity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFleetCapacity, fleetId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFleetCapacity, instanceType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFleetCapacity, UnknownData_7YRH, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFleetCapacity, instanceCounts, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFleetCapacity, 0x0030);
		}

		// struct FDescribeFleetCapacityResult
		TEST_METHOD(ScriptStruct__GameLift__DescribeFleetCapacityResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeFleetCapacityResult, FleetCapacity, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeFleetCapacityResult, nextToken, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDescribeFleetCapacityResult, 0x0020);
		}

		// struct FDescribeFleetEventsRequest
		TEST_METHOD(ScriptStruct__GameLift__DescribeFleetEventsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeFleetEventsRequest, fleetId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeFleetEventsRequest, startTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeFleetEventsRequest, endTime, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeFleetEventsRequest, limit, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeFleetEventsRequest, UnknownData_GQ4A, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeFleetEventsRequest, nextToken, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDescribeFleetEventsRequest, 0x0038);
		}

		// struct FAWSEvent
		TEST_METHOD(ScriptStruct__GameLift__AWSEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSEvent, eventId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSEvent, resourceId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSEvent, eventCode, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSEvent, UnknownData_3231, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSEvent, Message, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSEvent, eventTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSEvent, preSignedLogUrl, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAWSEvent, 0x0050);
		}

		// struct FDescribeFleetEventsResult
		TEST_METHOD(ScriptStruct__GameLift__DescribeFleetEventsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeFleetEventsResult, events, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeFleetEventsResult, nextToken, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDescribeFleetEventsResult, 0x0020);
		}

		// struct FDescribeFleetPortSettingsRequest
		TEST_METHOD(ScriptStruct__GameLift__DescribeFleetPortSettingsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeFleetPortSettingsRequest, fleetId, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDescribeFleetPortSettingsRequest, 0x0010);
		}

		// struct FIpPermission
		TEST_METHOD(ScriptStruct__GameLift__IpPermission)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIpPermission, fromPort, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIpPermission, toPort, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIpPermission, ipRange, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIpPermission, Protocol, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIpPermission, UnknownData_HQH3, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIpPermission, 0x0020);
		}

		// struct FDescribeFleetPortSettingsResult
		TEST_METHOD(ScriptStruct__GameLift__DescribeFleetPortSettingsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeFleetPortSettingsResult, inboundPermissions, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDescribeFleetPortSettingsResult, 0x0010);
		}

		// struct FValidateMatchmakingRuleSetRequest
		TEST_METHOD(ScriptStruct__GameLift__ValidateMatchmakingRuleSetRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FValidateMatchmakingRuleSetRequest, ruleSetBody, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FValidateMatchmakingRuleSetRequest, 0x0010);
		}

		// struct FValidateMatchmakingRuleSetResult
		TEST_METHOD(ScriptStruct__GameLift__ValidateMatchmakingRuleSetResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FValidateMatchmakingRuleSetResult, valid, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FValidateMatchmakingRuleSetResult, 0x0001);
		}

		// struct FUpdateScriptRequest
		TEST_METHOD(ScriptStruct__GameLift__UpdateScriptRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateScriptRequest, scriptId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateScriptRequest, Name, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateScriptRequest, Version, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateScriptRequest, storageLocation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateScriptRequest, zipFile, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUpdateScriptRequest, 0x0080);
		}

		// struct FUpdateScriptResult
		TEST_METHOD(ScriptStruct__GameLift__UpdateScriptResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateScriptResult, Script, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUpdateScriptResult, 0x0080);
		}

		// struct FServerProcess
		TEST_METHOD(ScriptStruct__GameLift__ServerProcess)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerProcess, launchPath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerProcess, Parameters, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerProcess, concurrentExecutions, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerProcess, UnknownData_2G83, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerProcess, 0x0028);
		}

		// struct FRuntimeConfiguration
		TEST_METHOD(ScriptStruct__GameLift__RuntimeConfiguration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeConfiguration, serverProcesses, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeConfiguration, maxConcurrentGameSessionActivations, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeConfiguration, gameSessionActivationTimeoutSeconds, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRuntimeConfiguration, 0x0018);
		}

		// struct FUpdateRuntimeConfigurationRequest
		TEST_METHOD(ScriptStruct__GameLift__UpdateRuntimeConfigurationRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateRuntimeConfigurationRequest, fleetId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateRuntimeConfigurationRequest, RuntimeConfiguration, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUpdateRuntimeConfigurationRequest, 0x0028);
		}

		// struct FUpdateRuntimeConfigurationResult
		TEST_METHOD(ScriptStruct__GameLift__UpdateRuntimeConfigurationResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateRuntimeConfigurationResult, RuntimeConfiguration, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUpdateRuntimeConfigurationResult, 0x0018);
		}

		// struct FGameProperty
		TEST_METHOD(ScriptStruct__GameLift__GameProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameProperty, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameProperty, Value, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameProperty, 0x0020);
		}

		// struct FUpdateMatchmakingConfigurationRequest
		TEST_METHOD(ScriptStruct__GameLift__UpdateMatchmakingConfigurationRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateMatchmakingConfigurationRequest, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateMatchmakingConfigurationRequest, Description, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateMatchmakingConfigurationRequest, gameSessionQueueArns, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateMatchmakingConfigurationRequest, requestTimeoutSeconds, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateMatchmakingConfigurationRequest, acceptanceTimeoutSeconds, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateMatchmakingConfigurationRequest, acceptanceRequired, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateMatchmakingConfigurationRequest, UnknownData_PZBZ, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateMatchmakingConfigurationRequest, ruleSetName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateMatchmakingConfigurationRequest, notificationTarget, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateMatchmakingConfigurationRequest, additionalPlayerCount, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateMatchmakingConfigurationRequest, UnknownData_IJLA, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateMatchmakingConfigurationRequest, customEventData, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateMatchmakingConfigurationRequest, gameProperties, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateMatchmakingConfigurationRequest, gameSessionData, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateMatchmakingConfigurationRequest, backfillMode, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateMatchmakingConfigurationRequest, UnknownData_N51X, 0x0099);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUpdateMatchmakingConfigurationRequest, 0x00A0);
		}

		// struct FMatchmakingConfiguration
		TEST_METHOD(ScriptStruct__GameLift__MatchmakingConfiguration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingConfiguration, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingConfiguration, Description, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingConfiguration, gameSessionQueueArns, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingConfiguration, requestTimeoutSeconds, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingConfiguration, acceptanceTimeoutSeconds, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingConfiguration, acceptanceRequired, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingConfiguration, UnknownData_7QRE, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingConfiguration, ruleSetName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingConfiguration, notificationTarget, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingConfiguration, additionalPlayerCount, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingConfiguration, UnknownData_3T28, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingConfiguration, customEventData, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingConfiguration, creationTime, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingConfiguration, gameProperties, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingConfiguration, gameSessionData, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingConfiguration, backfillMode, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingConfiguration, UnknownData_MK0A, 0x00A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMatchmakingConfiguration, 0x00A8);
		}

		// struct FUpdateMatchmakingConfigurationResult
		TEST_METHOD(ScriptStruct__GameLift__UpdateMatchmakingConfigurationResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateMatchmakingConfigurationResult, configuration, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUpdateMatchmakingConfigurationResult, 0x00A8);
		}

		// struct FPlayerLatencyPolicy
		TEST_METHOD(ScriptStruct__GameLift__PlayerLatencyPolicy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerLatencyPolicy, maximumIndividualPlayerLatencyMilliseconds, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerLatencyPolicy, policyDurationSeconds, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerLatencyPolicy, 0x0008);
		}

		// struct FGameSessionQueueDestination
		TEST_METHOD(ScriptStruct__GameLift__GameSessionQueueDestination)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameSessionQueueDestination, destinationArn, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameSessionQueueDestination, 0x0010);
		}

		// struct FUpdateGameSessionQueueRequest
		TEST_METHOD(ScriptStruct__GameLift__UpdateGameSessionQueueRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateGameSessionQueueRequest, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateGameSessionQueueRequest, timeoutInSeconds, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateGameSessionQueueRequest, UnknownData_DN0N, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateGameSessionQueueRequest, playerLatencyPolicies, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateGameSessionQueueRequest, destinations, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUpdateGameSessionQueueRequest, 0x0038);
		}

		// struct FGameSessionQueue
		TEST_METHOD(ScriptStruct__GameLift__GameSessionQueue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameSessionQueue, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameSessionQueue, gameSessionQueueArn, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameSessionQueue, timeoutInSeconds, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameSessionQueue, UnknownData_5B7U, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameSessionQueue, playerLatencyPolicies, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameSessionQueue, destinations, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameSessionQueue, 0x0048);
		}

		// struct FUpdateGameSessionQueueResult
		TEST_METHOD(ScriptStruct__GameLift__UpdateGameSessionQueueResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateGameSessionQueueResult, GameSessionQueue, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUpdateGameSessionQueueResult, 0x0048);
		}

		// struct FUpdateGameSessionRequest
		TEST_METHOD(ScriptStruct__GameLift__UpdateGameSessionRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateGameSessionRequest, awsResourceName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateGameSessionRequest, maximumPlayerSessionCount, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateGameSessionRequest, UnknownData_WUVZ, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateGameSessionRequest, Name, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateGameSessionRequest, playerSessionCreationPolicy, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateGameSessionRequest, protectionPolicy, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateGameSessionRequest, UnknownData_QVXH, 0x002A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUpdateGameSessionRequest, 0x0030);
		}

		// struct FAWSGameSession
		TEST_METHOD(ScriptStruct__GameLift__AWSGameSession)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSGameSession, gameSessionId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSGameSession, Name, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSGameSession, fleetId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSGameSession, creationTime, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSGameSession, terminationTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSGameSession, currentPlayerSessionCount, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSGameSession, maximumPlayerSessionCount, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSGameSession, Status, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSGameSession, statusReason, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSGameSession, UnknownData_80UR, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSGameSession, gameProperties, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSGameSession, ipAddress, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSGameSession, dnsName, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSGameSession, Port, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSGameSession, playerSessionCreationPolicy, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSGameSession, UnknownData_6RTP, 0x0085);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSGameSession, creatorId, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSGameSession, gameSessionData, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSGameSession, matchmakerData, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAWSGameSession, 0x00B8);
		}

		// struct FUpdateGameSessionResult
		TEST_METHOD(ScriptStruct__GameLift__UpdateGameSessionResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateGameSessionResult, GameSession, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUpdateGameSessionResult, 0x00B8);
		}

		// struct FUpdateFleetPortSettingsRequest
		TEST_METHOD(ScriptStruct__GameLift__UpdateFleetPortSettingsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateFleetPortSettingsRequest, fleetId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateFleetPortSettingsRequest, inboundPermissionAuthorizations, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateFleetPortSettingsRequest, inboundPermissionRevocations, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUpdateFleetPortSettingsRequest, 0x0030);
		}

		// struct FUpdateFleetPortSettingsResult
		TEST_METHOD(ScriptStruct__GameLift__UpdateFleetPortSettingsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateFleetPortSettingsResult, fleetId, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUpdateFleetPortSettingsResult, 0x0010);
		}

		// struct FUpdateFleetCapacityRequest
		TEST_METHOD(ScriptStruct__GameLift__UpdateFleetCapacityRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateFleetCapacityRequest, fleetId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateFleetCapacityRequest, desiredInstances, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateFleetCapacityRequest, minSize, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateFleetCapacityRequest, maxSize, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateFleetCapacityRequest, UnknownData_0BWD, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUpdateFleetCapacityRequest, 0x0020);
		}

		// struct FGameLiftUpdateAliasRequest
		TEST_METHOD(ScriptStruct__GameLift__GameLiftUpdateAliasRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameLiftUpdateAliasRequest, aliasId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameLiftUpdateAliasRequest, Name, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameLiftUpdateAliasRequest, Description, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameLiftUpdateAliasRequest, RoutingStrategy, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameLiftUpdateAliasRequest, 0x0058);
		}

		// struct FGameLiftUpdateAliasResult
		TEST_METHOD(ScriptStruct__GameLift__GameLiftUpdateAliasResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameLiftUpdateAliasResult, Alias, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameLiftUpdateAliasResult, 0x0078);
		}

		// struct FPlayerLatency
		TEST_METHOD(ScriptStruct__GameLift__PlayerLatency)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerLatency, PlayerId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerLatency, regionIdentifier, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerLatency, latencyInMilliseconds, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerLatency, UnknownData_NAOU, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerLatency, 0x0028);
		}

		// struct FDesiredPlayerSession
		TEST_METHOD(ScriptStruct__GameLift__DesiredPlayerSession)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDesiredPlayerSession, PlayerId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDesiredPlayerSession, playerData, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDesiredPlayerSession, 0x0020);
		}

		// struct FStartGameSessionPlacementRequest
		TEST_METHOD(ScriptStruct__GameLift__StartGameSessionPlacementRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStartGameSessionPlacementRequest, placementId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStartGameSessionPlacementRequest, gameSessionQueueName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStartGameSessionPlacementRequest, gameProperties, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStartGameSessionPlacementRequest, maximumPlayerSessionCount, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStartGameSessionPlacementRequest, UnknownData_GRD2, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStartGameSessionPlacementRequest, gameSessionName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStartGameSessionPlacementRequest, playerLatencies, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStartGameSessionPlacementRequest, desiredPlayerSessions, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStartGameSessionPlacementRequest, gameSessionData, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStartGameSessionPlacementRequest, 0x0078);
		}

		// struct FPlacedPlayerSession
		TEST_METHOD(ScriptStruct__GameLift__PlacedPlayerSession)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlacedPlayerSession, PlayerId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlacedPlayerSession, playerSessionId, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlacedPlayerSession, 0x0020);
		}

		// struct FGameSessionPlacement
		TEST_METHOD(ScriptStruct__GameLift__GameSessionPlacement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameSessionPlacement, placementId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameSessionPlacement, gameSessionQueueName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameSessionPlacement, Status, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameSessionPlacement, UnknownData_7337, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameSessionPlacement, gameProperties, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameSessionPlacement, maximumPlayerSessionCount, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameSessionPlacement, UnknownData_FBT8, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameSessionPlacement, gameSessionName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameSessionPlacement, gameSessionId, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameSessionPlacement, gameSessionArn, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameSessionPlacement, gameSessionRegion, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameSessionPlacement, playerLatencies, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameSessionPlacement, startTime, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameSessionPlacement, endTime, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameSessionPlacement, ipAddress, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameSessionPlacement, dnsName, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameSessionPlacement, Port, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameSessionPlacement, UnknownData_7TG4, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameSessionPlacement, placedPlayerSessions, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameSessionPlacement, gameSessionData, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameSessionPlacement, matchmakerData, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameSessionPlacement, 0x00F8);
		}

		// struct FStartGameSessionPlacementResult
		TEST_METHOD(ScriptStruct__GameLift__StartGameSessionPlacementResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStartGameSessionPlacementResult, GameSessionPlacement, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStartGameSessionPlacementResult, 0x00F8);
		}

		// struct FStartFleetActionsRequest
		TEST_METHOD(ScriptStruct__GameLift__StartFleetActionsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStartFleetActionsRequest, fleetId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStartFleetActionsRequest, actions, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStartFleetActionsRequest, 0x0020);
		}

		// struct FStartFleetActionsResult
		TEST_METHOD(ScriptStruct__GameLift__StartFleetActionsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStartFleetActionsResult, UnknownData_VP4I, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStartFleetActionsResult, 0x0001);
		}

		// struct FSearchGameSessionsRequest
		TEST_METHOD(ScriptStruct__GameLift__SearchGameSessionsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchGameSessionsRequest, awsResourceName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchGameSessionsRequest, filterExpression, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchGameSessionsRequest, sortExpression, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchGameSessionsRequest, limit, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchGameSessionsRequest, UnknownData_Z64B, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchGameSessionsRequest, nextToken, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSearchGameSessionsRequest, 0x0048);
		}

		// struct FSearchGameSessionsResult
		TEST_METHOD(ScriptStruct__GameLift__SearchGameSessionsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchGameSessionsResult, gameSessions, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchGameSessionsResult, nextToken, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSearchGameSessionsResult, 0x0020);
		}

		// struct FResolveAliasRequest
		TEST_METHOD(ScriptStruct__GameLift__ResolveAliasRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FResolveAliasRequest, aliasId, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FResolveAliasRequest, 0x0010);
		}

		// struct FResolveAliasResult
		TEST_METHOD(ScriptStruct__GameLift__ResolveAliasResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FResolveAliasResult, fleetId, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FResolveAliasResult, 0x0010);
		}

		// struct FRequestUploadCredentialsRequest
		TEST_METHOD(ScriptStruct__GameLift__RequestUploadCredentialsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRequestUploadCredentialsRequest, buildId, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRequestUploadCredentialsRequest, 0x0010);
		}

		// struct FGameLiftCredentials
		TEST_METHOD(ScriptStruct__GameLift__GameLiftCredentials)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameLiftCredentials, accessKeyId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameLiftCredentials, secretAccessKey, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameLiftCredentials, sessionToken, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameLiftCredentials, 0x0030);
		}

		// struct FRequestUploadCredentialsResult
		TEST_METHOD(ScriptStruct__GameLift__RequestUploadCredentialsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRequestUploadCredentialsResult, uploadCredentials, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRequestUploadCredentialsResult, storageLocation, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRequestUploadCredentialsResult, 0x0070);
		}

		// struct FTargetConfiguration
		TEST_METHOD(ScriptStruct__GameLift__TargetConfiguration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTargetConfiguration, targetValue, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTargetConfiguration, 0x0004);
		}

		// struct FPutScalingPolicyRequest
		TEST_METHOD(ScriptStruct__GameLift__PutScalingPolicyRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPutScalingPolicyRequest, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPutScalingPolicyRequest, fleetId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPutScalingPolicyRequest, scalingAdjustment, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPutScalingPolicyRequest, scalingAdjustmentType, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPutScalingPolicyRequest, UnknownData_3A22, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPutScalingPolicyRequest, threshold, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPutScalingPolicyRequest, comparisonOperator, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPutScalingPolicyRequest, UnknownData_VO0L, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPutScalingPolicyRequest, evaluationPeriods, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPutScalingPolicyRequest, metricName, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPutScalingPolicyRequest, policyType, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPutScalingPolicyRequest, UnknownData_0OPQ, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPutScalingPolicyRequest, TargetConfiguration, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPutScalingPolicyRequest, UnknownData_71YT, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPutScalingPolicyRequest, 0x0040);
		}

		// struct FPutScalingPolicyResult
		TEST_METHOD(ScriptStruct__GameLift__PutScalingPolicyResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPutScalingPolicyResult, Name, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPutScalingPolicyResult, 0x0010);
		}

		// struct FListScriptsResult
		TEST_METHOD(ScriptStruct__GameLift__ListScriptsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FListScriptsResult, scripts, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FListScriptsResult, nextToken, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FListScriptsResult, 0x0020);
		}

		// struct FDescribeInstancesRequest
		TEST_METHOD(ScriptStruct__GameLift__DescribeInstancesRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeInstancesRequest, fleetId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeInstancesRequest, instanceId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeInstancesRequest, limit, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeInstancesRequest, UnknownData_0UFB, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeInstancesRequest, nextToken, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDescribeInstancesRequest, 0x0038);
		}

		// struct FDescribeGameSessionsRequest
		TEST_METHOD(ScriptStruct__GameLift__DescribeGameSessionsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeGameSessionsRequest, awsResourceName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeGameSessionsRequest, statusFilter, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeGameSessionsRequest, limit, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeGameSessionsRequest, UnknownData_JKWI, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeGameSessionsRequest, nextToken, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDescribeGameSessionsRequest, 0x0038);
		}

		// struct FDescribeGameSessionsResult
		TEST_METHOD(ScriptStruct__GameLift__DescribeGameSessionsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeGameSessionsResult, gameSessions, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeGameSessionsResult, nextToken, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDescribeGameSessionsResult, 0x0020);
		}

		// struct FDescribeGameSessionQueuesRequest
		TEST_METHOD(ScriptStruct__GameLift__DescribeGameSessionQueuesRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeGameSessionQueuesRequest, names, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeGameSessionQueuesRequest, limit, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeGameSessionQueuesRequest, UnknownData_8VBZ, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeGameSessionQueuesRequest, nextToken, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDescribeGameSessionQueuesRequest, 0x0028);
		}

		// struct FDescribeGameSessionQueuesResult
		TEST_METHOD(ScriptStruct__GameLift__DescribeGameSessionQueuesResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeGameSessionQueuesResult, gameSessionQueues, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeGameSessionQueuesResult, nextToken, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDescribeGameSessionQueuesResult, 0x0020);
		}

		// struct FDescribeGameSessionPlacementRequest
		TEST_METHOD(ScriptStruct__GameLift__DescribeGameSessionPlacementRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeGameSessionPlacementRequest, placementId, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDescribeGameSessionPlacementRequest, 0x0010);
		}

		// struct FDescribeGameSessionPlacementResult
		TEST_METHOD(ScriptStruct__GameLift__DescribeGameSessionPlacementResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeGameSessionPlacementResult, GameSessionPlacement, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDescribeGameSessionPlacementResult, 0x00F8);
		}

		// struct FDescribeGameSessionDetailsRequest
		TEST_METHOD(ScriptStruct__GameLift__DescribeGameSessionDetailsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeGameSessionDetailsRequest, awsResourceName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeGameSessionDetailsRequest, statusFilter, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeGameSessionDetailsRequest, limit, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeGameSessionDetailsRequest, UnknownData_XXV0, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeGameSessionDetailsRequest, nextToken, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDescribeGameSessionDetailsRequest, 0x0038);
		}

		// struct FAWSGameSessionDetail
		TEST_METHOD(ScriptStruct__GameLift__AWSGameSessionDetail)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSGameSessionDetail, GameSession, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSGameSessionDetail, protectionPolicy, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSGameSessionDetail, UnknownData_TGDP, 0x00B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAWSGameSessionDetail, 0x00C0);
		}

		// struct FDescribeGameSessionDetailsResult
		TEST_METHOD(ScriptStruct__GameLift__DescribeGameSessionDetailsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeGameSessionDetailsResult, gameSessionDetails, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeGameSessionDetailsResult, nextToken, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDescribeGameSessionDetailsResult, 0x0020);
		}

		// struct FDescribeFleetUtilizationRequest
		TEST_METHOD(ScriptStruct__GameLift__DescribeFleetUtilizationRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeFleetUtilizationRequest, fleetIds, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeFleetUtilizationRequest, limit, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeFleetUtilizationRequest, UnknownData_CE8T, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeFleetUtilizationRequest, nextToken, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDescribeFleetUtilizationRequest, 0x0028);
		}

		// struct FFleetUtilization
		TEST_METHOD(ScriptStruct__GameLift__FleetUtilization)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFleetUtilization, fleetId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFleetUtilization, activeServerProcessCount, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFleetUtilization, activeGameSessionCount, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFleetUtilization, currentPlayerSessionCount, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFleetUtilization, maximumPlayerSessionCount, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFleetUtilization, 0x0020);
		}

		// struct FDescribeFleetUtilizationResult
		TEST_METHOD(ScriptStruct__GameLift__DescribeFleetUtilizationResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeFleetUtilizationResult, FleetUtilization, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeFleetUtilizationResult, nextToken, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDescribeFleetUtilizationResult, 0x0020);
		}

		// struct FCreateMatchmakingConfigurationRequest
		TEST_METHOD(ScriptStruct__GameLift__CreateMatchmakingConfigurationRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateMatchmakingConfigurationRequest, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateMatchmakingConfigurationRequest, Description, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateMatchmakingConfigurationRequest, gameSessionQueueArns, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateMatchmakingConfigurationRequest, requestTimeoutSeconds, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateMatchmakingConfigurationRequest, acceptanceTimeoutSeconds, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateMatchmakingConfigurationRequest, acceptanceRequired, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateMatchmakingConfigurationRequest, UnknownData_64ZJ, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateMatchmakingConfigurationRequest, ruleSetName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateMatchmakingConfigurationRequest, notificationTarget, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateMatchmakingConfigurationRequest, additionalPlayerCount, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateMatchmakingConfigurationRequest, UnknownData_TCPR, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateMatchmakingConfigurationRequest, customEventData, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateMatchmakingConfigurationRequest, gameProperties, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateMatchmakingConfigurationRequest, gameSessionData, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateMatchmakingConfigurationRequest, backfillMode, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateMatchmakingConfigurationRequest, UnknownData_NTM8, 0x0099);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCreateMatchmakingConfigurationRequest, 0x00A0);
		}

		// struct FCreateMatchmakingConfigurationResult
		TEST_METHOD(ScriptStruct__GameLift__CreateMatchmakingConfigurationResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateMatchmakingConfigurationResult, configuration, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCreateMatchmakingConfigurationResult, 0x00A8);
		}

		// struct FCreateGameSessionQueueRequest
		TEST_METHOD(ScriptStruct__GameLift__CreateGameSessionQueueRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateGameSessionQueueRequest, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateGameSessionQueueRequest, timeoutInSeconds, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateGameSessionQueueRequest, UnknownData_EKB9, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateGameSessionQueueRequest, playerLatencyPolicies, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateGameSessionQueueRequest, destinations, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCreateGameSessionQueueRequest, 0x0038);
		}

		// struct FCreateGameSessionQueueResult
		TEST_METHOD(ScriptStruct__GameLift__CreateGameSessionQueueResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateGameSessionQueueResult, GameSessionQueue, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCreateGameSessionQueueResult, 0x0048);
		}

		// struct FCreateGameSessionRequest
		TEST_METHOD(ScriptStruct__GameLift__CreateGameSessionRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateGameSessionRequest, awsResourceName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateGameSessionRequest, maximumPlayerSessionCount, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateGameSessionRequest, UnknownData_ZMQD, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateGameSessionRequest, Name, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateGameSessionRequest, gameProperties, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateGameSessionRequest, creatorId, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateGameSessionRequest, gameSessionId, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateGameSessionRequest, idempotencyToken, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateGameSessionRequest, gameSessionData, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCreateGameSessionRequest, 0x0078);
		}

		// struct FCreateGameSessionResult
		TEST_METHOD(ScriptStruct__GameLift__CreateGameSessionResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateGameSessionResult, GameSession, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCreateGameSessionResult, 0x00B8);
		}

		// struct FCreateFleetRequest
		TEST_METHOD(ScriptStruct__GameLift__CreateFleetRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateFleetRequest, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateFleetRequest, Description, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateFleetRequest, buildId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateFleetRequest, scriptId, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateFleetRequest, serverLaunchPath, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateFleetRequest, serverLaunchParameters, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateFleetRequest, LogPaths, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateFleetRequest, eC2InstanceType, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateFleetRequest, UnknownData_D0AZ, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateFleetRequest, eC2InboundPermissions, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateFleetRequest, newGameSessionProtectionPolicy, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateFleetRequest, UnknownData_TMWS, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateFleetRequest, RuntimeConfiguration, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateFleetRequest, ResourceCreationLimitPolicy, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateFleetRequest, metricGroups, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateFleetRequest, peerVpcAwsAccountId, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateFleetRequest, peerVpcId, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateFleetRequest, fleetType, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateFleetRequest, UnknownData_FR65, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateFleetRequest, instanceRoleArn, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateFleetRequest, CertificateConfiguration, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateFleetRequest, UnknownData_79GJ, 0x00F9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCreateFleetRequest, 0x0100);
		}

		// struct FCreateFleetResult
		TEST_METHOD(ScriptStruct__GameLift__CreateFleetResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateFleetResult, FleetAttributes, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCreateFleetResult, 0x00F8);
		}

		// struct FCreateBuildRequest
		TEST_METHOD(ScriptStruct__GameLift__CreateBuildRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateBuildRequest, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateBuildRequest, Version, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateBuildRequest, storageLocation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateBuildRequest, operatingSystem, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateBuildRequest, UnknownData_HHIU, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCreateBuildRequest, 0x0068);
		}

		// struct FCreateBuildResult
		TEST_METHOD(ScriptStruct__GameLift__CreateBuildResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateBuildResult, Build, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateBuildResult, uploadCredentials, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateBuildResult, storageLocation, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCreateBuildResult, 0x00B8);
		}

		// struct FAcceptMatchRequest
		TEST_METHOD(ScriptStruct__GameLift__AcceptMatchRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAcceptMatchRequest, ticketId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAcceptMatchRequest, playerIds, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAcceptMatchRequest, acceptanceType, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAcceptMatchRequest, UnknownData_PWDK, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAcceptMatchRequest, 0x0028);
		}

		// struct FAcceptMatchResult
		TEST_METHOD(ScriptStruct__GameLift__AcceptMatchResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAcceptMatchResult, UnknownData_KBDV, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAcceptMatchResult, 0x0001);
		}

		// struct FGameLiftAttributeValue
		TEST_METHOD(ScriptStruct__GameLift__GameLiftAttributeValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameLiftAttributeValue, S, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameLiftAttributeValue, N, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameLiftAttributeValue, UnknownData_KQK8, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameLiftAttributeValue, sL, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameLiftAttributeValue, sDM, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameLiftAttributeValue, 0x0078);
		}

		// struct FAWSPlayer
		TEST_METHOD(ScriptStruct__GameLift__AWSPlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSPlayer, PlayerId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSPlayer, playerAttributes, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSPlayer, Team, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSPlayer, latencyInMs, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAWSPlayer, 0x00C0);
		}

		// struct FStartMatchBackfillRequest
		TEST_METHOD(ScriptStruct__GameLift__StartMatchBackfillRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStartMatchBackfillRequest, ticketId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStartMatchBackfillRequest, configurationName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStartMatchBackfillRequest, gameSessionArn, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStartMatchBackfillRequest, players, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStartMatchBackfillRequest, 0x0040);
		}

		// struct FMatchedPlayerSession
		TEST_METHOD(ScriptStruct__GameLift__MatchedPlayerSession)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchedPlayerSession, PlayerId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchedPlayerSession, playerSessionId, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMatchedPlayerSession, 0x0020);
		}

		// struct FAWSGameSessionConnectionInfo
		TEST_METHOD(ScriptStruct__GameLift__AWSGameSessionConnectionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSGameSessionConnectionInfo, gameSessionArn, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSGameSessionConnectionInfo, ipAddress, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSGameSessionConnectionInfo, dnsName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSGameSessionConnectionInfo, Port, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSGameSessionConnectionInfo, UnknownData_PMGN, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAWSGameSessionConnectionInfo, matchedPlayerSessions, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAWSGameSessionConnectionInfo, 0x0048);
		}

		// struct FMatchmakingTicket
		TEST_METHOD(ScriptStruct__GameLift__MatchmakingTicket)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingTicket, ticketId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingTicket, configurationName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingTicket, Status, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingTicket, UnknownData_2E15, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingTicket, statusReason, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingTicket, statusMessage, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingTicket, startTime, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingTicket, endTime, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingTicket, players, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingTicket, gameSessionConnectionInfo, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingTicket, estimatedWaitTime, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingTicket, UnknownData_1ILY, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMatchmakingTicket, 0x00B8);
		}

		// struct FStartMatchBackfillResult
		TEST_METHOD(ScriptStruct__GameLift__StartMatchBackfillResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStartMatchBackfillResult, MatchmakingTicket, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStartMatchBackfillResult, 0x00B8);
		}

		// struct FStartMatchmakingRequest
		TEST_METHOD(ScriptStruct__GameLift__StartMatchmakingRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStartMatchmakingRequest, ticketId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStartMatchmakingRequest, configurationName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStartMatchmakingRequest, players, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStartMatchmakingRequest, 0x0030);
		}

		// struct FStartMatchmakingResult
		TEST_METHOD(ScriptStruct__GameLift__StartMatchmakingResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStartMatchmakingResult, MatchmakingTicket, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStartMatchmakingResult, 0x00B8);
		}

		// struct FStopFleetActionsRequest
		TEST_METHOD(ScriptStruct__GameLift__StopFleetActionsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStopFleetActionsRequest, fleetId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStopFleetActionsRequest, actions, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStopFleetActionsRequest, 0x0020);
		}

		// struct FStopFleetActionsResult
		TEST_METHOD(ScriptStruct__GameLift__StopFleetActionsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStopFleetActionsResult, UnknownData_08GV, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStopFleetActionsResult, 0x0001);
		}

		// struct FStopGameSessionPlacementRequest
		TEST_METHOD(ScriptStruct__GameLift__StopGameSessionPlacementRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStopGameSessionPlacementRequest, placementId, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStopGameSessionPlacementRequest, 0x0010);
		}

		// struct FStopGameSessionPlacementResult
		TEST_METHOD(ScriptStruct__GameLift__StopGameSessionPlacementResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStopGameSessionPlacementResult, GameSessionPlacement, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStopGameSessionPlacementResult, 0x00F8);
		}

		// struct FStopMatchmakingRequest
		TEST_METHOD(ScriptStruct__GameLift__StopMatchmakingRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStopMatchmakingRequest, ticketId, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStopMatchmakingRequest, 0x0010);
		}

		// struct FStopMatchmakingResult
		TEST_METHOD(ScriptStruct__GameLift__StopMatchmakingResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStopMatchmakingResult, UnknownData_E2C5, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStopMatchmakingResult, 0x0001);
		}

		// struct FUpdateBuildRequest
		TEST_METHOD(ScriptStruct__GameLift__UpdateBuildRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateBuildRequest, buildId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateBuildRequest, Name, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateBuildRequest, Version, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUpdateBuildRequest, 0x0030);
		}

		// struct FUpdateBuildResult
		TEST_METHOD(ScriptStruct__GameLift__UpdateBuildResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateBuildResult, Build, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUpdateBuildResult, 0x0048);
		}

		// struct FUpdateFleetAttributesRequest
		TEST_METHOD(ScriptStruct__GameLift__UpdateFleetAttributesRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateFleetAttributesRequest, fleetId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateFleetAttributesRequest, Name, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateFleetAttributesRequest, Description, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateFleetAttributesRequest, newGameSessionProtectionPolicy, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateFleetAttributesRequest, UnknownData_V2I4, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateFleetAttributesRequest, ResourceCreationLimitPolicy, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateFleetAttributesRequest, UnknownData_07K3, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateFleetAttributesRequest, metricGroups, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUpdateFleetAttributesRequest, 0x0050);
		}

		// struct FUpdateFleetAttributesResult
		TEST_METHOD(ScriptStruct__GameLift__UpdateFleetAttributesResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateFleetAttributesResult, fleetId, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUpdateFleetAttributesResult, 0x0010);
		}

		// struct FUpdateFleetCapacityResult
		TEST_METHOD(ScriptStruct__GameLift__UpdateFleetCapacityResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateFleetCapacityResult, fleetId, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUpdateFleetCapacityResult, 0x0010);
		}

		// struct FInstance
		TEST_METHOD(ScriptStruct__GameLift__Instance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstance, fleetId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstance, instanceId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstance, ipAddress, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstance, dnsName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstance, operatingSystem, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstance, Type, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstance, Status, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstance, UnknownData_8RW8, 0x0043);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstance, creationTime, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInstance, 0x0050);
		}

		// struct FDescribeInstancesResult
		TEST_METHOD(ScriptStruct__GameLift__DescribeInstancesResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeInstancesResult, Instances, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeInstancesResult, nextToken, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDescribeInstancesResult, 0x0020);
		}

		// struct FDescribeMatchmakingConfigurationsRequest
		TEST_METHOD(ScriptStruct__GameLift__DescribeMatchmakingConfigurationsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeMatchmakingConfigurationsRequest, names, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeMatchmakingConfigurationsRequest, ruleSetName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeMatchmakingConfigurationsRequest, limit, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeMatchmakingConfigurationsRequest, UnknownData_9A6I, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeMatchmakingConfigurationsRequest, nextToken, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDescribeMatchmakingConfigurationsRequest, 0x0038);
		}

		// struct FDescribeMatchmakingConfigurationsResult
		TEST_METHOD(ScriptStruct__GameLift__DescribeMatchmakingConfigurationsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeMatchmakingConfigurationsResult, configurations, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeMatchmakingConfigurationsResult, nextToken, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDescribeMatchmakingConfigurationsResult, 0x0020);
		}

		// struct FDescribeMatchmakingRequest
		TEST_METHOD(ScriptStruct__GameLift__DescribeMatchmakingRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeMatchmakingRequest, ticketIds, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDescribeMatchmakingRequest, 0x0010);
		}

		// struct FDescribeMatchmakingResult
		TEST_METHOD(ScriptStruct__GameLift__DescribeMatchmakingResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeMatchmakingResult, ticketList, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDescribeMatchmakingResult, 0x0010);
		}

		// struct FDescribeMatchmakingRuleSetsRequest
		TEST_METHOD(ScriptStruct__GameLift__DescribeMatchmakingRuleSetsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeMatchmakingRuleSetsRequest, names, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeMatchmakingRuleSetsRequest, limit, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeMatchmakingRuleSetsRequest, UnknownData_X8VX, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeMatchmakingRuleSetsRequest, nextToken, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDescribeMatchmakingRuleSetsRequest, 0x0028);
		}

		// struct FDescribeMatchmakingRuleSetsResult
		TEST_METHOD(ScriptStruct__GameLift__DescribeMatchmakingRuleSetsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeMatchmakingRuleSetsResult, ruleSets, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeMatchmakingRuleSetsResult, nextToken, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDescribeMatchmakingRuleSetsResult, 0x0020);
		}

		// struct FDescribePlayerSessionsRequest
		TEST_METHOD(ScriptStruct__GameLift__DescribePlayerSessionsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribePlayerSessionsRequest, awsResourceName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribePlayerSessionsRequest, PlayerId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribePlayerSessionsRequest, playerSessionId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribePlayerSessionsRequest, playerSessionStatusFilter, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribePlayerSessionsRequest, limit, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribePlayerSessionsRequest, UnknownData_OYNU, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribePlayerSessionsRequest, nextToken, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDescribePlayerSessionsRequest, 0x0058);
		}

		// struct FDescribePlayerSessionsResult
		TEST_METHOD(ScriptStruct__GameLift__DescribePlayerSessionsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribePlayerSessionsResult, playerSessions, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribePlayerSessionsResult, nextToken, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDescribePlayerSessionsResult, 0x0020);
		}

		// struct FDescribeRuntimeConfigurationRequest
		TEST_METHOD(ScriptStruct__GameLift__DescribeRuntimeConfigurationRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeRuntimeConfigurationRequest, fleetId, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDescribeRuntimeConfigurationRequest, 0x0010);
		}

		// struct FDescribeRuntimeConfigurationResult
		TEST_METHOD(ScriptStruct__GameLift__DescribeRuntimeConfigurationResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeRuntimeConfigurationResult, RuntimeConfiguration, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDescribeRuntimeConfigurationResult, 0x0018);
		}

		// struct FDescribeScalingPoliciesRequest
		TEST_METHOD(ScriptStruct__GameLift__DescribeScalingPoliciesRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeScalingPoliciesRequest, fleetId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeScalingPoliciesRequest, statusFilter, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeScalingPoliciesRequest, UnknownData_GHBT, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeScalingPoliciesRequest, limit, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeScalingPoliciesRequest, nextToken, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDescribeScalingPoliciesRequest, 0x0028);
		}

		// struct FScalingPolicy
		TEST_METHOD(ScriptStruct__GameLift__ScalingPolicy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalingPolicy, fleetId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalingPolicy, Name, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalingPolicy, Status, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalingPolicy, UnknownData_5UNG, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalingPolicy, scalingAdjustment, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalingPolicy, scalingAdjustmentType, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalingPolicy, comparisonOperator, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalingPolicy, UnknownData_EOB8, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalingPolicy, threshold, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalingPolicy, evaluationPeriods, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalingPolicy, metricName, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalingPolicy, policyType, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalingPolicy, UnknownData_8YY2, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalingPolicy, TargetConfiguration, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalingPolicy, UnknownData_AR81, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScalingPolicy, 0x0040);
		}

		// struct FDescribeScalingPoliciesResult
		TEST_METHOD(ScriptStruct__GameLift__DescribeScalingPoliciesResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeScalingPoliciesResult, scalingPolicies, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeScalingPoliciesResult, nextToken, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDescribeScalingPoliciesResult, 0x0020);
		}

		// struct FDescribeScriptRequest
		TEST_METHOD(ScriptStruct__GameLift__DescribeScriptRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeScriptRequest, scriptId, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDescribeScriptRequest, 0x0010);
		}

		// struct FDescribeScriptResult
		TEST_METHOD(ScriptStruct__GameLift__DescribeScriptResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeScriptResult, Script, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDescribeScriptResult, 0x0080);
		}

		// struct FDescribeVpcPeeringAuthorizationsRequest
		TEST_METHOD(ScriptStruct__GameLift__DescribeVpcPeeringAuthorizationsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeVpcPeeringAuthorizationsRequest, UnknownData_RS9I, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDescribeVpcPeeringAuthorizationsRequest, 0x0001);
		}

		// struct FDescribeVpcPeeringAuthorizationsResult
		TEST_METHOD(ScriptStruct__GameLift__DescribeVpcPeeringAuthorizationsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeVpcPeeringAuthorizationsResult, vpcPeeringAuthorizations, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDescribeVpcPeeringAuthorizationsResult, 0x0010);
		}

		// struct FDescribeVpcPeeringConnectionsRequest
		TEST_METHOD(ScriptStruct__GameLift__DescribeVpcPeeringConnectionsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeVpcPeeringConnectionsRequest, fleetId, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDescribeVpcPeeringConnectionsRequest, 0x0010);
		}

		// struct FVpcPeeringConnectionStatus
		TEST_METHOD(ScriptStruct__GameLift__VpcPeeringConnectionStatus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVpcPeeringConnectionStatus, code, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVpcPeeringConnectionStatus, Message, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVpcPeeringConnectionStatus, 0x0020);
		}

		// struct FVpcPeeringConnection
		TEST_METHOD(ScriptStruct__GameLift__VpcPeeringConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVpcPeeringConnection, fleetId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVpcPeeringConnection, ipV4CidrBlock, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVpcPeeringConnection, vpcPeeringConnectionId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVpcPeeringConnection, Status, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVpcPeeringConnection, peerVpcId, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVpcPeeringConnection, gameLiftVpcId, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVpcPeeringConnection, 0x0070);
		}

		// struct FDescribeVpcPeeringConnectionsResult
		TEST_METHOD(ScriptStruct__GameLift__DescribeVpcPeeringConnectionsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDescribeVpcPeeringConnectionsResult, vpcPeeringConnections, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDescribeVpcPeeringConnectionsResult, 0x0010);
		}

		// struct FGameLiftCreateAliasRequest
		TEST_METHOD(ScriptStruct__GameLift__GameLiftCreateAliasRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameLiftCreateAliasRequest, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameLiftCreateAliasRequest, Description, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameLiftCreateAliasRequest, RoutingStrategy, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameLiftCreateAliasRequest, 0x0048);
		}

		// struct FGameLiftCreateAliasResult
		TEST_METHOD(ScriptStruct__GameLift__GameLiftCreateAliasResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameLiftCreateAliasResult, Alias, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameLiftCreateAliasResult, 0x0078);
		}

		// struct FGameLiftDeleteAliasRequest
		TEST_METHOD(ScriptStruct__GameLift__GameLiftDeleteAliasRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameLiftDeleteAliasRequest, aliasId, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameLiftDeleteAliasRequest, 0x0010);
		}

		// struct FGameLiftListAliasesRequest
		TEST_METHOD(ScriptStruct__GameLift__GameLiftListAliasesRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameLiftListAliasesRequest, routingStrategyType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameLiftListAliasesRequest, UnknownData_6S90, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameLiftListAliasesRequest, Name, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameLiftListAliasesRequest, limit, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameLiftListAliasesRequest, UnknownData_Q09T, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameLiftListAliasesRequest, nextToken, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameLiftListAliasesRequest, 0x0030);
		}

		// struct FGameLiftListAliasesResult
		TEST_METHOD(ScriptStruct__GameLift__GameLiftListAliasesResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameLiftListAliasesResult, aliases, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameLiftListAliasesResult, nextToken, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameLiftListAliasesResult, 0x0020);
		}

		// struct FGetGameSessionLogUrlRequest
		TEST_METHOD(ScriptStruct__GameLift__GetGameSessionLogUrlRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGetGameSessionLogUrlRequest, gameSessionId, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGetGameSessionLogUrlRequest, 0x0010);
		}

		// struct FGetGameSessionLogUrlResult
		TEST_METHOD(ScriptStruct__GameLift__GetGameSessionLogUrlResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGetGameSessionLogUrlResult, preSignedUrl, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGetGameSessionLogUrlResult, 0x0010);
		}

		// struct FGetInstanceAccessRequest
		TEST_METHOD(ScriptStruct__GameLift__GetInstanceAccessRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGetInstanceAccessRequest, fleetId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGetInstanceAccessRequest, instanceId, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGetInstanceAccessRequest, 0x0020);
		}

		// struct FInstanceCredentials
		TEST_METHOD(ScriptStruct__GameLift__InstanceCredentials)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstanceCredentials, Username, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstanceCredentials, secret, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInstanceCredentials, 0x0020);
		}

		// struct FInstanceAccess
		TEST_METHOD(ScriptStruct__GameLift__InstanceAccess)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstanceAccess, fleetId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstanceAccess, instanceId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstanceAccess, ipAddress, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstanceAccess, operatingSystem, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstanceAccess, UnknownData_LY73, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstanceAccess, credentials, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInstanceAccess, 0x0058);
		}

		// struct FGetInstanceAccessResult
		TEST_METHOD(ScriptStruct__GameLift__GetInstanceAccessResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGetInstanceAccessResult, InstanceAccess, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGetInstanceAccessResult, 0x0058);
		}

		// struct FListBuildsRequest
		TEST_METHOD(ScriptStruct__GameLift__ListBuildsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FListBuildsRequest, Status, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FListBuildsRequest, UnknownData_WHQB, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FListBuildsRequest, limit, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FListBuildsRequest, nextToken, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FListBuildsRequest, 0x0018);
		}

		// struct FListBuildsResult
		TEST_METHOD(ScriptStruct__GameLift__ListBuildsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FListBuildsResult, builds, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FListBuildsResult, nextToken, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FListBuildsResult, 0x0020);
		}

		// struct FListFleetsRequest
		TEST_METHOD(ScriptStruct__GameLift__ListFleetsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FListFleetsRequest, buildId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FListFleetsRequest, scriptId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FListFleetsRequest, limit, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FListFleetsRequest, UnknownData_AUXH, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FListFleetsRequest, nextToken, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FListFleetsRequest, 0x0038);
		}

		// struct FListFleetsResult
		TEST_METHOD(ScriptStruct__GameLift__ListFleetsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FListFleetsResult, fleetIds, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FListFleetsResult, nextToken, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FListFleetsResult, 0x0020);
		}

		// struct FListScriptsRequest
		TEST_METHOD(ScriptStruct__GameLift__ListScriptsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FListScriptsRequest, limit, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FListScriptsRequest, UnknownData_E3J7, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FListScriptsRequest, nextToken, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FListScriptsRequest, 0x0018);
		}

		// struct FDatasmithCameraFocusSettingsTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithCameraFocusSettingsTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraFocusSettingsTemplate, FocusMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraFocusSettingsTemplate, UnknownData_RDCZ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraFocusSettingsTemplate, ManualFocusDistance, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithCameraFocusSettingsTemplate, 0x0008);
		}

		// struct FDatasmithCameraLensSettingsTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithCameraLensSettingsTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraLensSettingsTemplate, MaxFStop, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithCameraLensSettingsTemplate, 0x0004);
		}

		// struct FDatasmithCameraFilmbackSettingsTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithCameraFilmbackSettingsTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraFilmbackSettingsTemplate, SensorWidth, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraFilmbackSettingsTemplate, SensorHeight, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithCameraFilmbackSettingsTemplate, 0x0008);
		}

		// struct FDatasmithTessellationOptions
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithTessellationOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithTessellationOptions, ChordTolerance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithTessellationOptions, MaxEdgeLength, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithTessellationOptions, NormalTolerance, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithTessellationOptions, StitchingTechnique, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithTessellationOptions, UnknownData_PBCG, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithTessellationOptions, 0x0010);
		}

		// struct FDatasmithAssetImportOptions
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithAssetImportOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithAssetImportOptions, PackagePath, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithAssetImportOptions, 0x0008);
		}

		// struct FDatasmithStaticMeshImportOptions
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithStaticMeshImportOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticMeshImportOptions, MinLightmapResolution, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticMeshImportOptions, MaxLightmapResolution, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticMeshImportOptions, bGenerateLightmapUVs, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticMeshImportOptions, bRemoveDegenerates, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithStaticMeshImportOptions, 0x0004);
		}

		// struct FDatasmithImportBaseOptions
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithImportBaseOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, SceneHandling, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, bIncludeGeometry, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, bIncludeMaterial, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, bIncludeLight, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, bIncludeCamera, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, bIncludeAnimation, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, UnknownData_MCR1, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, AssetOptions, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, StaticMeshOptions, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithImportBaseOptions, 0x0014);
		}

		// struct FDatasmithReimportOptions
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithReimportOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithReimportOptions, bUpdateActors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithReimportOptions, bRespawnDeletedActors, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithReimportOptions, 0x0002);
		}

		// struct FDatasmithStaticParameterSetTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithStaticParameterSetTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticParameterSetTemplate, StaticSwitchParameters, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithStaticParameterSetTemplate, 0x0050);
		}

		// struct FDatasmithMeshSectionInfoTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithMeshSectionInfoTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithMeshSectionInfoTemplate, MaterialIndex, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithMeshSectionInfoTemplate, 0x0004);
		}

		// struct FDatasmithMeshSectionInfoMapTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithMeshSectionInfoMapTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithMeshSectionInfoMapTemplate, Map, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithMeshSectionInfoMapTemplate, 0x0050);
		}

		// struct FDatasmithStaticMaterialTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithStaticMaterialTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticMaterialTemplate, MaterialSlotName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticMaterialTemplate, MaterialInterface, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithStaticMaterialTemplate, 0x0010);
		}

		// struct FDatasmithMeshBuildSettingsTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithMeshBuildSettingsTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithMeshBuildSettingsTemplate, UnknownData_XNQH, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithMeshBuildSettingsTemplate, MinLightmapResolution, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithMeshBuildSettingsTemplate, SrcLightmapIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithMeshBuildSettingsTemplate, DstLightmapIndex, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithMeshBuildSettingsTemplate, 0x0010);
		}

		// struct FDatasmithCameraLookatTrackingSettingsTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithCameraLookatTrackingSettingsTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraLookatTrackingSettingsTemplate, UnknownData_OUF5, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraLookatTrackingSettingsTemplate, ActorToTrack, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithCameraLookatTrackingSettingsTemplate, 0x0030);
		}

		// struct FDatasmithPostProcessSettingsTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithPostProcessSettingsTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, UnknownData_OMKB, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, UnknownData_H7BX, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, WhiteTemp, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, VignetteIntensity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, FilmWhitePoint, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, ColorSaturation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, AutoExposureMethod, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, UnknownData_JI11, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, CameraISO, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, CameraShutterSpeed, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, DepthOfFieldFstop, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithPostProcessSettingsTemplate, 0x0040);
		}

		// struct FUdpMockMessage
		TEST_METHOD(ScriptStruct__UdpMessaging__UdpMockMessage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUdpMockMessage, Data, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUdpMockMessage, 0x0010);
		}

		// struct FLevelSequenceObjectReferenceMap
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceObjectReferenceMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceObjectReferenceMap, UnknownData_I285, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceObjectReferenceMap, 0x0050);
		}

		// struct FLevelSequenceObject
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceObject, ObjectOrOwner, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceObject, UnknownData_VBHC, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceObject, ComponentName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceObject, CachedComponent, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceObject, 0x0038);
		}

		// struct FBoundActorProxy
		TEST_METHOD(ScriptStruct__LevelSequence__BoundActorProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoundActorProxy, UnknownData_8MIL, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoundActorProxy, 0x0001);
		}

		// struct FLevelSequenceBindingReference
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceBindingReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReference, PackageName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReference, ExternalObjectPath, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReference, ObjectPath, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceBindingReference, 0x0038);
		}

		// struct FLevelSequenceBindingReferenceArray
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceBindingReferenceArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReferenceArray, References, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceBindingReferenceArray, 0x0010);
		}

		// struct FLevelSequenceBindingReferences
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceBindingReferences)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReferences, BindingIdToReferences, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReferences, AnimSequenceInstances, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceBindingReferences, 0x00A0);
		}

		// struct FLevelSequenceLegacyObjectReference
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceLegacyObjectReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceLegacyObjectReference, UnknownData_M5WF, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceLegacyObjectReference, 0x0020);
		}

		// struct FLevelSequenceSnapshotSettings
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceSnapshotSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceSnapshotSettings, ZeroPadAmount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceSnapshotSettings, UnknownData_465T, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceSnapshotSettings, FrameRate, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceSnapshotSettings, 0x000C);
		}

		// struct FLevelSequencePlayerSnapshot
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequencePlayerSnapshot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, MasterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, MasterTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, SourceTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, CurrentShotName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, CurrentShotLocalTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, CurrentShotSourceTime, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, SourceTimecode, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, CameraComponent, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, Settings, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, UnknownData_9PSU, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, ActiveShot, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, ShotID, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, UnknownData_SVGI, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequencePlayerSnapshot, 0x0098);
		}

		// struct FNamedInterfaceDef
		TEST_METHOD(ScriptStruct__OnlineSubsystem__NamedInterfaceDef)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedInterfaceDef, InterfaceName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedInterfaceDef, InterfaceClassName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedInterfaceDef, 0x0018);
		}

		// struct FNamedInterface
		TEST_METHOD(ScriptStruct__OnlineSubsystem__NamedInterface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedInterface, InterfaceName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedInterface, InterfaceObject, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedInterface, 0x0010);
		}

		// struct FInAppPurchaseProductRequest
		TEST_METHOD(ScriptStruct__OnlineSubsystem__InAppPurchaseProductRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductRequest, ProductIdentifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductRequest, bIsConsumable, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductRequest, UnknownData_XQE8, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseProductRequest, 0x0018);
		}

		// struct FInAppPurchaseRestoreInfo
		TEST_METHOD(ScriptStruct__OnlineSubsystem__InAppPurchaseRestoreInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseRestoreInfo, Identifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseRestoreInfo, ReceiptData, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseRestoreInfo, TransactionIdentifier, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseRestoreInfo, 0x0030);
		}

		// struct FInAppPurchaseProductInfo
		TEST_METHOD(ScriptStruct__OnlineSubsystem__InAppPurchaseProductInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, Identifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, TransactionIdentifier, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, DisplayName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, DisplayDescription, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, DisplayPrice, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, RawPrice, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, UnknownData_GS18, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, CurrencyCode, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, CurrencySymbol, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, DecimalSeparator, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, GroupingSeparator, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, ReceiptData, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseProductInfo, 0x00A8);
		}

		// struct FMediaPlayerTrackOptions
		TEST_METHOD(ScriptStruct__MediaUtils__MediaPlayerTrackOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Audio, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Caption, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, MetaData, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Script, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, SubTitle, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Text, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Video, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMediaPlayerTrackOptions, 0x001C);
		}

		// struct FMediaPlayerOptions
		TEST_METHOD(ScriptStruct__MediaUtils__MediaPlayerOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerOptions, Tracks, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerOptions, UnknownData_OSZW, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerOptions, SeekTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerOptions, PlayOnOpen, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerOptions, Loop, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerOptions, UnknownData_F8SB, 0x002A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMediaPlayerOptions, 0x0030);
		}

		// struct FSupportedAreaData
		TEST_METHOD(ScriptStruct__NavigationSystem__SupportedAreaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedAreaData, AreaClassName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedAreaData, AreaID, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedAreaData, UnknownData_WI5K, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedAreaData, AreaClass, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSupportedAreaData, 0x0020);
		}

		// struct FNavCollisionCylinder
		TEST_METHOD(ScriptStruct__NavigationSystem__NavCollisionCylinder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavCollisionCylinder, Offset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavCollisionCylinder, Radius, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavCollisionCylinder, Height, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavCollisionCylinder, 0x0014);
		}

		// struct FNavCollisionBox
		TEST_METHOD(ScriptStruct__NavigationSystem__NavCollisionBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavCollisionBox, Offset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavCollisionBox, Extent, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavCollisionBox, 0x0018);
		}

		// struct FNavGraphNode
		TEST_METHOD(ScriptStruct__NavigationSystem__NavGraphNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavGraphNode, Owner, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavGraphNode, UnknownData_UB16, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavGraphNode, 0x0018);
		}

		// struct FNavigationFilterArea
		TEST_METHOD(ScriptStruct__NavigationSystem__NavigationFilterArea)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationFilterArea, AreaClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationFilterArea, TravelCostOverride, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationFilterArea, EnteringCostOverride, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationFilterArea, UnknownData_69W0, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationFilterArea, 0x0018);
		}

		// struct FNavigationFilterFlags
		TEST_METHOD(ScriptStruct__NavigationSystem__NavigationFilterFlags)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationFilterFlags, UnknownData_54DX, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationFilterFlags, 0x0004);
		}

		// struct FNavGraphEdge
		TEST_METHOD(ScriptStruct__NavigationSystem__NavGraphEdge)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavGraphEdge, UnknownData_65LD, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavGraphEdge, 0x0018);
		}

		// struct FS_TutorialData
		TEST_METHOD(UserDefinedStruct__S_TutorialData__S_TutorialData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_TutorialData, Header_9_55EA56014D98D791120B52B6EBA540CB, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_TutorialData, Description_6_C113908443C660F4172F63AE3169E4A0, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_TutorialData, Duration_5_3FC1157C46067DA651B19DB3507ED24B, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_TutorialData, 0x0034);
		}

		// struct FS_QuestDetail
		TEST_METHOD(UserDefinedStruct__S_QuestDetail__S_QuestDetail)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_QuestDetail, bIsCompleted_7_E3008AE9481EB98FAFED56BF672F474B, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_QuestDetail, UnknownData_T9JV, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_QuestDetail, Detail_5_7078783E49F9A1CD510AC9AF0BD09116, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_QuestDetail, 0x0020);
		}

		// struct FS_LimitItemType
		TEST_METHOD(UserDefinedStruct__S_LimitItemType__S_LimitItemType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_LimitItemType, Item_12_3AEC43AC4E66D3BDE90576B6C37BC62D, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_LimitItemType, Weight_13_5D16D54743916BA33528488606361169, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_LimitItemType, CurrentCount_8_3A78F4D6417ACB6B1D3B578FECEE27AC, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_LimitItemType, MaxCount_10_E4198175405F4B082CBA19A5C64DBD70, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_LimitItemType, 0x001C);
		}

		// struct FS_PortalDetail
		TEST_METHOD(UserDefinedStruct__S_PortalDetail__S_PortalDetail)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_PortalDetail, bIsQuestComplete_2_B922D1504DA4281A771CE5B640D8D0DF, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_PortalDetail, UnknownData_QDE4, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_PortalDetail, PortalOpen_5_1B8CD62943BB813828156DB1A3891E10, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_PortalDetail, TimerTotalTime_12_C9E3ED994B3B8D2DA370EFBB05D80EB6, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_PortalDetail, TimerRemainingTime_11_E4B44167406355E96581C2BE85448A38, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_PortalDetail, 0x0010);
		}

		// struct FS_ChatData
		TEST_METHOD(UserDefinedStruct__S_ChatData__S_ChatData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_ChatData, Type_17_0F4A5EA24EDD0FC868227CB1D83C3B3D, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_ChatData, UnknownData_2DRQ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_ChatData, Name_10_C0DCDFA74B18F43D0F3A1290AD86C042, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_ChatData, Role_7_47290A8D439928AE15E7C7BAE3AC2171, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_ChatData, UnknownData_N69X, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_ChatData, Text_11_4F17BD884C328C63E041409EA6B1BB92, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_ChatData, 0x0030);
		}

		// struct FSessionServicePing
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServicePing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePing, Username, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServicePing, 0x0010);
		}

		// struct FSessionServiceLogUnsubscribe
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServiceLogUnsubscribe)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLogUnsubscribe, UnknownData_B03I, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServiceLogUnsubscribe, 0x0001);
		}

		// struct FSessionServiceLogSubscribe
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServiceLogSubscribe)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLogSubscribe, UnknownData_00YD, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServiceLogSubscribe, 0x0001);
		}

		// struct FSessionServiceLog
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServiceLog)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, Category, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, Data, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, instanceId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, TimeSeconds, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, Verbosity, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, UnknownData_VXTH, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServiceLog, 0x0038);
		}

		// struct FSessionServicePong
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServicePong)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, Authorized, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, UnknownData_MTFU, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, BuildDate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, DeviceName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, instanceId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, InstanceName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, IsConsoleBuild, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, UnknownData_FAVZ, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, PlatformName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, SessionId, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, SessionName, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, SessionOwner, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, Standalone, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, UnknownData_1F9I, 0x0091);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServicePong, 0x0098);
		}
	};
}
